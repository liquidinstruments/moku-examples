# Example to apply matched filter to simulated RADAR data generated by Moku:Go and Received / de-noised by Moku:Pro
# This will apply a matched filter of a known pulse width and carrier frequency to simulated received
# radar data from the Moku:Pro.  In this example we add noise and then use an autoencoder with the 
# Moku Neural Network instrument to de-noise the data.  We then apply a matched filter to the
# non-noisy pulse, the noisy pulse, and the pulse de-noised with the autoencoder to show the value
# of the technique.
# NOTE: The autoencoder .linn file was created using the 
# 
#
# (c) 2024 Liquid Instruments Pty. Ltd.
# Last edited on 3 December 2024


# import the relevant libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd # Pandas is used to easily read an entire .csv and parse into individual arrays

cnt = 20

while(cnt>0):
	# The following line will read from a .csv file created by the Moku Oscilloscope
	# This skips reading the header on the first 12 lines of the .csv
	df = pd.read_csv("./dataFiles/dataStream" + str(cnt) + ".csv",skiprows=12)

	# Parse the data into separate named arrays for time, reference data, noisey data, and de-noised data
	time = df.iloc[:,0]
	minval = time.min()
	maxval = time.max()
	reference = df.iloc[:,1]
	noisey = df.iloc[:,2]
	autoencoder = df.iloc[:,3]

	# Generate Reference Pulse for Matched Filter using same frequency and pulse parametrics as reference pulse
	tDelta = maxval-minval
	Fs = 10e4          # Sampling frequency (10 kHz)
	T = 1 / Fs         # Sampling period
	cf = 2000          # Carrier frequency (2 kHz)
	pulse_duration = .005  # Duration of the pulse (5 milleseconds)
	refTime = (pulse_duration/tDelta)*time.size
	tref = np.linspace(0,pulse_duration,int(refTime))
	refPulse = np.sin(2 * np.pi * cf * tref)
	# Pad the reference pulse with zeros to make the array the same length as the data collected from Moku
	refPadded = np.concatenate([refPulse,np.zeros(time.size-refPulse.size)])

	# Plot reference pulse as Figure 1
	fig1 = plt.figure()#(figsize=(13, 8))
	plt.plot(tref,refPulse)
	plt.title('Comparison Pulse for Matched Filter')
	plt.xlabel('Time (s)')
	plt.ylabel('Amplitude')

	# Plot Non-noisey pulse, noisey pulse and de-noised pulse as Figure 2 Column 1
	fig2, axes = plt.subplots(nrows=3,ncols=2,figsize=(15, 9))
	plt.subplot(3, 2, 1)
	plt.plot(time[int(time.size *.45):int(time.size *.55)], reference[int(time.size *.45):int(time.size *.55)],linewidth=.2)
	plt.title('Received Pulse Without Additive Noise (Reference Wave)')
	plt.xlabel('Time (s)')
	plt.ylabel('Amplitude (V)')

	plt.subplot(3, 2, 3)
	plt.plot(time[int(time.size *.45):int(time.size *.55)], noisey[int(time.size *.45):int(time.size *.55)],linewidth=.1)
	plt.title('Noisey Received Pulse')
	plt.xlabel('Time (s)')
	plt.ylabel('Amplitude (V)')

	plt.subplot(3, 2, 5)
	plt.plot(time[int(time.size *.45):int(time.size *.55)], autoencoder[int(time.size *.45):int(time.size *.55)],linewidth=.2)
	plt.title('Received Pulse De-Noised with Autoencoder')
	plt.xlabel('Time (s)')
	plt.ylabel('Amplitude (V)')

	# Plot application of matched filter to non-noisey pulse, noisey pulse and de-noised pulse as Figure 2 Column 2
	correlationRef = abs(np.convolve(refPadded,reference))
	tArray=np.linspace(minval,maxval,correlationRef.size)
	plt.subplot(3, 2, 2)
	maxy=np.max(correlationRef[0:time.size])
	# Find locations of the max correlation values knowing that pulses occur at the beginning and mid points of the stream
	# based on the design of the experiment
	maxCorrRef1 = np.argmax(correlationRef[0:int((time.size)/3)])
	maxCorrRef2 = np.argmax(correlationRef[int((time.size)/3)+1:time.size])+int((time.size)/3)
	plt.axhline(y=maxy/2, color='red', linestyle='--',label='Detection Threshold')
	plt.axvline(x=time[maxCorrRef1], color='green', linestyle='--',label='Detection',linewidth=1)
	plt.axvline(x=time[maxCorrRef2], color='green', linestyle='--',linewidth=1)
	plt.legend(loc=1)
	plt.plot(time,correlationRef[0:time.size],linewidth=.1)
	plt.title('Matched Filter on Received Pulse (without additive noise)')
	plt.xlabel('Time (s)')
	plt.ylabel('Amplitude')

	correlationNoisey = abs(np.convolve(refPadded,noisey))
	plt.subplot(3, 2, 4)
	maxy=np.max(correlationNoisey[0:time.size])
	plt.axhline(y=maxy/2, color='red', linestyle='--',label='Detection Threshold')
	plt.axvline(x=time[maxCorrRef1], color='green', linestyle='--',label='Expected Detection',linewidth=1)
	plt.axvline(x=time[maxCorrRef2], color='green', linestyle='--',linewidth=1)
	plt.legend(loc=1)
	plt.plot(time,correlationNoisey[0:time.size], linewidth=.1)
	plt.title('Matched Filter on Noisey Received Pulse')
	plt.xlabel('Time (s)')
	plt.ylabel('Amplitude')

	correlationAuto = abs(np.convolve(refPadded,autoencoder))
	plt.subplot(3, 2, 6)
	maxy=np.max(correlationAuto[0:time.size])
	plt.axhline(y=maxy/2, color='red', linestyle='--',label='Detection Threshold')
	plt.axvline(x=time[maxCorrRef1], color='green', linestyle='--',label='Expected Detection',linewidth=1)
	plt.axvline(x=time[maxCorrRef2], color='green', linestyle='--',linewidth=1)
	plt.legend(loc=1)
	plt.plot(time,correlationAuto[0:time.size],linewidth=.1)
	plt.title('Matched Filter on Autoencoder De-Noised Received Pulse')
	plt.xlabel('Time (s)')
	plt.ylabel('Amplitude')

	cols = ['200ms Excerpt of Pulse Data at ' + str(round(cnt*.01,2)) + 'Vpp', 
		'Matched Filter Correlation on ' + str(round(cnt*.01,2)) + 'Vpp Pulse']
	plt.setp(axes.flat, xlabel='Time (s)')#, ylabel='Amplitude')
	pad = 30
	for ax, col in zip(axes[0], cols):
		ax.annotate(col, xy=(0.5, 1), xytext=(0, pad),
			xycoords='axes fraction', textcoords='offset points',
			size='large', ha='center', va='baseline')
	plt.tight_layout()
	print(cnt)

	plt.draw()
	plt.savefig("./images/image{i}.png".format(i=cnt))
	plt.pause(1)
	plt.close(fig1)
	plt.close(fig2)
	# plt.close(fig3)

	cnt-=1