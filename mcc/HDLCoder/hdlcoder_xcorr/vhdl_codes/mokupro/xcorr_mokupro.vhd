-- Start of DSP_pkg.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\DSP_pkg.vhd
-- Created: 2025-03-18 15:26:31
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

PACKAGE DSP_pkg IS
  TYPE vector_of_signed8 IS ARRAY (NATURAL RANGE <>) OF signed(7 DOWNTO 0);
  TYPE vector_of_signed16 IS ARRAY (NATURAL RANGE <>) OF signed(15 DOWNTO 0);
  TYPE vector_of_signed32 IS ARRAY (NATURAL RANGE <>) OF signed(31 DOWNTO 0);
END DSP_pkg;


-- End of DSP_pkg.vhd --

-- Start of Complex4Multiply.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\Complex4Multiply.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Complex4Multiply
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF1_3/Complex4Multiply
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Complex4Multiply IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        din_3_1_re_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_3_1_im_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_3_vld_dly                     :   IN    std_logic;
        twdl_3_1_re                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        twdl_3_1_im                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        dinXTwdl_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dinXTwdl_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dinXTwdl_3_1_vld                  :   OUT   std_logic
        );
END Complex4Multiply;


ARCHITECTURE rtl OF Complex4Multiply IS

  -- Signals
  SIGNAL din_re_reg                       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL din_im_reg                       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twdl_re_reg                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdl_im_reg                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Complex4Multiply_din1_re_pipe1   : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_din1_im_pipe1   : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_mult1_re_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult2_re_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult1_im_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult2_im_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_twiddle_re_pipe1 : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_twiddle_im_pipe1 : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL prod1_re                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL prod1_im                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL prod2_re                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL prod2_im                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL din_vld_dly1                     : std_logic;
  SIGNAL din_vld_dly2                     : std_logic;
  SIGNAL din_vld_dly3                     : std_logic;
  SIGNAL prod_vld                         : std_logic;
  SIGNAL Complex4Add_multRes_re_reg       : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Complex4Add_multRes_im_reg       : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Complex4Add_prod_vld_reg1        : std_logic;
  SIGNAL Complex4Add_prod1_re_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod1_im_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod2_re_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod2_im_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_multRes_re_reg_next  : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL Complex4Add_multRes_im_reg_next  : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL mulResFP_re                      : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL mulResFP_im                      : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL dinXTwdl_3_1_vld_1               : std_logic;

BEGIN
  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_re_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        din_re_reg <= din_3_1_re_dly;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_im_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        din_im_reg <= din_3_1_im_dly;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl_re_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twdl_re_reg <= twdl_3_1_re;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl_im_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twdl_im_reg <= twdl_3_1_im;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Complex4Multiply
  Complex4Multiply_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF enb = '1' THEN
        prod1_re <= Complex4Multiply_mult1_re_pipe1;
        prod2_re <= Complex4Multiply_mult2_re_pipe1;
        prod1_im <= Complex4Multiply_mult1_im_pipe1;
        prod2_im <= Complex4Multiply_mult2_im_pipe1;
        Complex4Multiply_mult1_re_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_mult2_re_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult1_im_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult2_im_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_twiddle_re_pipe1 <= twdl_re_reg;
        Complex4Multiply_twiddle_im_pipe1 <= twdl_im_reg;
        Complex4Multiply_din1_re_pipe1 <= din_re_reg;
        Complex4Multiply_din1_im_pipe1 <= din_im_reg;
      END IF;
    END IF;
  END PROCESS Complex4Multiply_1_process;


  intdelay_4_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly1 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly1 <= din_3_vld_dly;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;


  intdelay_5_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly2 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly2 <= din_vld_dly1;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;


  intdelay_6_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly3 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly3 <= din_vld_dly2;
      END IF;
    END IF;
  END PROCESS intdelay_6_process;


  intdelay_7_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        prod_vld <= '0';
      ELSIF enb = '1' THEN
        prod_vld <= din_vld_dly3;
      END IF;
    END IF;
  END PROCESS intdelay_7_process;


  -- Complex4Add
  Complex4Add_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Complex4Add_multRes_re_reg <= to_signed(0, 33);
        Complex4Add_multRes_im_reg <= to_signed(0, 33);
        Complex4Add_prod1_re_reg <= to_signed(0, 32);
        Complex4Add_prod1_im_reg <= to_signed(0, 32);
        Complex4Add_prod2_re_reg <= to_signed(0, 32);
        Complex4Add_prod2_im_reg <= to_signed(0, 32);
        Complex4Add_prod_vld_reg1 <= '0';
        dinXTwdl_3_1_vld_1 <= '0';
      ELSIF enb = '1' THEN
        Complex4Add_multRes_re_reg <= Complex4Add_multRes_re_reg_next;
        Complex4Add_multRes_im_reg <= Complex4Add_multRes_im_reg_next;
        Complex4Add_prod1_re_reg <= prod1_re;
        Complex4Add_prod1_im_reg <= prod1_im;
        Complex4Add_prod2_re_reg <= prod2_re;
        Complex4Add_prod2_im_reg <= prod2_im;
        dinXTwdl_3_1_vld_1 <= Complex4Add_prod_vld_reg1;
        Complex4Add_prod_vld_reg1 <= prod_vld;
      END IF;
    END IF;
  END PROCESS Complex4Add_process;

  Complex4Add_multRes_re_reg_next <= (resize(Complex4Add_prod1_re_reg, 33)) - (resize(Complex4Add_prod2_re_reg, 33));
  Complex4Add_multRes_im_reg_next <= (resize(Complex4Add_prod1_im_reg, 33)) + (resize(Complex4Add_prod2_im_reg, 33));
  mulResFP_re <= Complex4Add_multRes_re_reg;
  mulResFP_im <= Complex4Add_multRes_im_reg;

  dinXTwdl_re <= mulResFP_re(29 DOWNTO 14);

  dinXTwdl_im <= mulResFP_im(29 DOWNTO 14);

  dinXTwdl_3_1_vld <= dinXTwdl_3_1_vld_1;

END rtl;


-- End of Complex4Multiply.vhd --

-- Start of Complex4Multiply_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\Complex4Multiply_block.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Complex4Multiply_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF1_5/Complex4Multiply
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Complex4Multiply_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        din_5_1_re_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_5_1_im_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_5_vld_dly                     :   IN    std_logic;
        twdl_5_1_re                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        twdl_5_1_im                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        dinXTwdl_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dinXTwdl_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dinXTwdl_5_1_vld                  :   OUT   std_logic
        );
END Complex4Multiply_block;


ARCHITECTURE rtl OF Complex4Multiply_block IS

  -- Signals
  SIGNAL din_re_reg                       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL din_im_reg                       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twdl_re_reg                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdl_im_reg                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Complex4Multiply_din1_re_pipe1   : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_din1_im_pipe1   : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_mult1_re_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult2_re_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult1_im_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult2_im_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_twiddle_re_pipe1 : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_twiddle_im_pipe1 : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL prod1_re                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL prod1_im                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL prod2_re                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL prod2_im                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL din_vld_dly1                     : std_logic;
  SIGNAL din_vld_dly2                     : std_logic;
  SIGNAL din_vld_dly3                     : std_logic;
  SIGNAL prod_vld                         : std_logic;
  SIGNAL Complex4Add_multRes_re_reg       : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Complex4Add_multRes_im_reg       : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Complex4Add_prod_vld_reg1        : std_logic;
  SIGNAL Complex4Add_prod1_re_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod1_im_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod2_re_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod2_im_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_multRes_re_reg_next  : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL Complex4Add_multRes_im_reg_next  : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL mulResFP_re                      : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL mulResFP_im                      : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL dinXTwdl_5_1_vld_1               : std_logic;

BEGIN
  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_re_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        din_re_reg <= din_5_1_re_dly;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_im_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        din_im_reg <= din_5_1_im_dly;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl_re_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twdl_re_reg <= twdl_5_1_re;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl_im_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twdl_im_reg <= twdl_5_1_im;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Complex4Multiply
  Complex4Multiply_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF enb = '1' THEN
        prod1_re <= Complex4Multiply_mult1_re_pipe1;
        prod2_re <= Complex4Multiply_mult2_re_pipe1;
        prod1_im <= Complex4Multiply_mult1_im_pipe1;
        prod2_im <= Complex4Multiply_mult2_im_pipe1;
        Complex4Multiply_mult1_re_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_mult2_re_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult1_im_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult2_im_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_twiddle_re_pipe1 <= twdl_re_reg;
        Complex4Multiply_twiddle_im_pipe1 <= twdl_im_reg;
        Complex4Multiply_din1_re_pipe1 <= din_re_reg;
        Complex4Multiply_din1_im_pipe1 <= din_im_reg;
      END IF;
    END IF;
  END PROCESS Complex4Multiply_process;


  intdelay_4_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly1 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly1 <= din_5_vld_dly;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;


  intdelay_5_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly2 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly2 <= din_vld_dly1;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;


  intdelay_6_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly3 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly3 <= din_vld_dly2;
      END IF;
    END IF;
  END PROCESS intdelay_6_process;


  intdelay_7_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        prod_vld <= '0';
      ELSIF enb = '1' THEN
        prod_vld <= din_vld_dly3;
      END IF;
    END IF;
  END PROCESS intdelay_7_process;


  -- Complex4Add
  Complex4Add_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Complex4Add_multRes_re_reg <= to_signed(0, 33);
        Complex4Add_multRes_im_reg <= to_signed(0, 33);
        Complex4Add_prod1_re_reg <= to_signed(0, 32);
        Complex4Add_prod1_im_reg <= to_signed(0, 32);
        Complex4Add_prod2_re_reg <= to_signed(0, 32);
        Complex4Add_prod2_im_reg <= to_signed(0, 32);
        Complex4Add_prod_vld_reg1 <= '0';
        dinXTwdl_5_1_vld_1 <= '0';
      ELSIF enb = '1' THEN
        Complex4Add_multRes_re_reg <= Complex4Add_multRes_re_reg_next;
        Complex4Add_multRes_im_reg <= Complex4Add_multRes_im_reg_next;
        Complex4Add_prod1_re_reg <= prod1_re;
        Complex4Add_prod1_im_reg <= prod1_im;
        Complex4Add_prod2_re_reg <= prod2_re;
        Complex4Add_prod2_im_reg <= prod2_im;
        dinXTwdl_5_1_vld_1 <= Complex4Add_prod_vld_reg1;
        Complex4Add_prod_vld_reg1 <= prod_vld;
      END IF;
    END IF;
  END PROCESS Complex4Add_process;

  Complex4Add_multRes_re_reg_next <= (resize(Complex4Add_prod1_re_reg, 33)) - (resize(Complex4Add_prod2_re_reg, 33));
  Complex4Add_multRes_im_reg_next <= (resize(Complex4Add_prod1_im_reg, 33)) + (resize(Complex4Add_prod2_im_reg, 33));
  mulResFP_re <= Complex4Add_multRes_re_reg;
  mulResFP_im <= Complex4Add_multRes_im_reg;

  dinXTwdl_re <= mulResFP_re(29 DOWNTO 14);

  dinXTwdl_im <= mulResFP_im(29 DOWNTO 14);

  dinXTwdl_5_1_vld <= dinXTwdl_5_1_vld_1;

END rtl;


-- End of Complex4Multiply_block.vhd --

-- Start of Complex4Multiply_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\Complex4Multiply_block1.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Complex4Multiply_block1
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF1_7/Complex4Multiply
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Complex4Multiply_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        din_7_1_re_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_7_1_im_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_7_vld_dly                     :   IN    std_logic;
        twdl_7_1_re                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        twdl_7_1_im                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        dinXTwdl_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dinXTwdl_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dinXTwdl_7_1_vld                  :   OUT   std_logic
        );
END Complex4Multiply_block1;


ARCHITECTURE rtl OF Complex4Multiply_block1 IS

  -- Signals
  SIGNAL din_re_reg                       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL din_im_reg                       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twdl_re_reg                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdl_im_reg                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Complex4Multiply_din1_re_pipe1   : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_din1_im_pipe1   : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_mult1_re_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult2_re_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult1_im_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult2_im_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_twiddle_re_pipe1 : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_twiddle_im_pipe1 : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL prod1_re                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL prod1_im                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL prod2_re                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL prod2_im                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL din_vld_dly1                     : std_logic;
  SIGNAL din_vld_dly2                     : std_logic;
  SIGNAL din_vld_dly3                     : std_logic;
  SIGNAL prod_vld                         : std_logic;
  SIGNAL Complex4Add_multRes_re_reg       : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Complex4Add_multRes_im_reg       : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Complex4Add_prod_vld_reg1        : std_logic;
  SIGNAL Complex4Add_prod1_re_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod1_im_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod2_re_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod2_im_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_multRes_re_reg_next  : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL Complex4Add_multRes_im_reg_next  : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL mulResFP_re                      : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL mulResFP_im                      : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL dinXTwdl_7_1_vld_1               : std_logic;

BEGIN
  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_re_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        din_re_reg <= din_7_1_re_dly;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_im_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        din_im_reg <= din_7_1_im_dly;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl_re_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twdl_re_reg <= twdl_7_1_re;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl_im_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twdl_im_reg <= twdl_7_1_im;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Complex4Multiply
  Complex4Multiply_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF enb = '1' THEN
        prod1_re <= Complex4Multiply_mult1_re_pipe1;
        prod2_re <= Complex4Multiply_mult2_re_pipe1;
        prod1_im <= Complex4Multiply_mult1_im_pipe1;
        prod2_im <= Complex4Multiply_mult2_im_pipe1;
        Complex4Multiply_mult1_re_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_mult2_re_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult1_im_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult2_im_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_twiddle_re_pipe1 <= twdl_re_reg;
        Complex4Multiply_twiddle_im_pipe1 <= twdl_im_reg;
        Complex4Multiply_din1_re_pipe1 <= din_re_reg;
        Complex4Multiply_din1_im_pipe1 <= din_im_reg;
      END IF;
    END IF;
  END PROCESS Complex4Multiply_process;


  intdelay_4_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly1 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly1 <= din_7_vld_dly;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;


  intdelay_5_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly2 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly2 <= din_vld_dly1;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;


  intdelay_6_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly3 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly3 <= din_vld_dly2;
      END IF;
    END IF;
  END PROCESS intdelay_6_process;


  intdelay_7_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        prod_vld <= '0';
      ELSIF enb = '1' THEN
        prod_vld <= din_vld_dly3;
      END IF;
    END IF;
  END PROCESS intdelay_7_process;


  -- Complex4Add
  Complex4Add_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Complex4Add_multRes_re_reg <= to_signed(0, 33);
        Complex4Add_multRes_im_reg <= to_signed(0, 33);
        Complex4Add_prod1_re_reg <= to_signed(0, 32);
        Complex4Add_prod1_im_reg <= to_signed(0, 32);
        Complex4Add_prod2_re_reg <= to_signed(0, 32);
        Complex4Add_prod2_im_reg <= to_signed(0, 32);
        Complex4Add_prod_vld_reg1 <= '0';
        dinXTwdl_7_1_vld_1 <= '0';
      ELSIF enb = '1' THEN
        Complex4Add_multRes_re_reg <= Complex4Add_multRes_re_reg_next;
        Complex4Add_multRes_im_reg <= Complex4Add_multRes_im_reg_next;
        Complex4Add_prod1_re_reg <= prod1_re;
        Complex4Add_prod1_im_reg <= prod1_im;
        Complex4Add_prod2_re_reg <= prod2_re;
        Complex4Add_prod2_im_reg <= prod2_im;
        dinXTwdl_7_1_vld_1 <= Complex4Add_prod_vld_reg1;
        Complex4Add_prod_vld_reg1 <= prod_vld;
      END IF;
    END IF;
  END PROCESS Complex4Add_process;

  Complex4Add_multRes_re_reg_next <= (resize(Complex4Add_prod1_re_reg, 33)) - (resize(Complex4Add_prod2_re_reg, 33));
  Complex4Add_multRes_im_reg_next <= (resize(Complex4Add_prod1_im_reg, 33)) + (resize(Complex4Add_prod2_im_reg, 33));
  mulResFP_re <= Complex4Add_multRes_re_reg;
  mulResFP_im <= Complex4Add_multRes_im_reg;

  dinXTwdl_re <= mulResFP_re(29 DOWNTO 14);

  dinXTwdl_im <= mulResFP_im(29 DOWNTO 14);

  dinXTwdl_7_1_vld <= dinXTwdl_7_1_vld_1;

END rtl;


-- End of Complex4Multiply_block1.vhd --

-- Start of Complex4Multiply_block10.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\Complex4Multiply_block10.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Complex4Multiply_block10
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_SDF1_5/Complex4Multiply
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Complex4Multiply_block10 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        din_5_1_re_dly                    :   IN    signed(31 DOWNTO 0);  -- sfix32
        din_5_1_im_dly                    :   IN    signed(31 DOWNTO 0);  -- sfix32
        din_5_vld_dly                     :   IN    std_logic;
        twdl_5_1_re                       :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
        twdl_5_1_im                       :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
        dinXTwdl_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dinXTwdl_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dinXTwdl_5_1_vld                  :   OUT   std_logic
        );
END Complex4Multiply_block10;


ARCHITECTURE rtl OF Complex4Multiply_block10 IS

  -- Signals
  SIGNAL din_re_reg                       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL din_im_reg                       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL twdl_re_reg                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twdl_im_reg                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Complex4Multiply_din1_re_pipe1   : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_din1_im_pipe1   : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult1_re_pipe1  : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64
  SIGNAL Complex4Multiply_mult2_re_pipe1  : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64
  SIGNAL Complex4Multiply_mult1_im_pipe1  : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64
  SIGNAL Complex4Multiply_mult2_im_pipe1  : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64
  SIGNAL Complex4Multiply_twiddle_re_pipe1 : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_twiddle_im_pipe1 : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL prod1_re                         : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64_En30
  SIGNAL prod1_im                         : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64_En30
  SIGNAL prod2_re                         : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64_En30
  SIGNAL prod2_im                         : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64_En30
  SIGNAL din_vld_dly1                     : std_logic;
  SIGNAL din_vld_dly2                     : std_logic;
  SIGNAL din_vld_dly3                     : std_logic;
  SIGNAL prod_vld                         : std_logic;
  SIGNAL Complex4Add_multRes_re_reg       : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL Complex4Add_multRes_im_reg       : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL Complex4Add_prod_vld_reg1        : std_logic;
  SIGNAL Complex4Add_prod1_re_reg         : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Complex4Add_prod1_im_reg         : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Complex4Add_prod2_re_reg         : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Complex4Add_prod2_im_reg         : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Complex4Add_multRes_re_reg_next  : signed(64 DOWNTO 0);  -- sfix65_En30
  SIGNAL Complex4Add_multRes_im_reg_next  : signed(64 DOWNTO 0);  -- sfix65_En30
  SIGNAL mulResFP_re                      : signed(64 DOWNTO 0);  -- sfix65_En30
  SIGNAL mulResFP_im                      : signed(64 DOWNTO 0);  -- sfix65_En30
  SIGNAL dinXTwdl_5_1_vld_1               : std_logic;

BEGIN
  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_re_reg <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        din_re_reg <= din_5_1_re_dly;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_im_reg <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        din_im_reg <= din_5_1_im_dly;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl_re_reg <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        twdl_re_reg <= twdl_5_1_re;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl_im_reg <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        twdl_im_reg <= twdl_5_1_im;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Complex4Multiply
  Complex4Multiply_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF enb = '1' THEN
        prod1_re <= Complex4Multiply_mult1_re_pipe1;
        prod2_re <= Complex4Multiply_mult2_re_pipe1;
        prod1_im <= Complex4Multiply_mult1_im_pipe1;
        prod2_im <= Complex4Multiply_mult2_im_pipe1;
        Complex4Multiply_mult1_re_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_mult2_re_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult1_im_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult2_im_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_twiddle_re_pipe1 <= twdl_re_reg;
        Complex4Multiply_twiddle_im_pipe1 <= twdl_im_reg;
        Complex4Multiply_din1_re_pipe1 <= din_re_reg;
        Complex4Multiply_din1_im_pipe1 <= din_im_reg;
      END IF;
    END IF;
  END PROCESS Complex4Multiply_process;


  intdelay_4_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly1 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly1 <= din_5_vld_dly;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;


  intdelay_5_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly2 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly2 <= din_vld_dly1;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;


  intdelay_6_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly3 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly3 <= din_vld_dly2;
      END IF;
    END IF;
  END PROCESS intdelay_6_process;


  intdelay_7_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        prod_vld <= '0';
      ELSIF enb = '1' THEN
        prod_vld <= din_vld_dly3;
      END IF;
    END IF;
  END PROCESS intdelay_7_process;


  -- Complex4Add
  Complex4Add_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Complex4Add_multRes_re_reg <= to_signed(0, 65);
        Complex4Add_multRes_im_reg <= to_signed(0, 65);
        Complex4Add_prod1_re_reg <= to_signed(0, 64);
        Complex4Add_prod1_im_reg <= to_signed(0, 64);
        Complex4Add_prod2_re_reg <= to_signed(0, 64);
        Complex4Add_prod2_im_reg <= to_signed(0, 64);
        Complex4Add_prod_vld_reg1 <= '0';
        dinXTwdl_5_1_vld_1 <= '0';
      ELSIF enb = '1' THEN
        Complex4Add_multRes_re_reg <= Complex4Add_multRes_re_reg_next;
        Complex4Add_multRes_im_reg <= Complex4Add_multRes_im_reg_next;
        Complex4Add_prod1_re_reg <= prod1_re;
        Complex4Add_prod1_im_reg <= prod1_im;
        Complex4Add_prod2_re_reg <= prod2_re;
        Complex4Add_prod2_im_reg <= prod2_im;
        dinXTwdl_5_1_vld_1 <= Complex4Add_prod_vld_reg1;
        Complex4Add_prod_vld_reg1 <= prod_vld;
      END IF;
    END IF;
  END PROCESS Complex4Add_process;

  Complex4Add_multRes_re_reg_next <= (resize(Complex4Add_prod1_re_reg, 65)) - (resize(Complex4Add_prod2_re_reg, 65));
  Complex4Add_multRes_im_reg_next <= (resize(Complex4Add_prod1_im_reg, 65)) + (resize(Complex4Add_prod2_im_reg, 65));
  mulResFP_re <= Complex4Add_multRes_re_reg;
  mulResFP_im <= Complex4Add_multRes_im_reg;

  dinXTwdl_re <= mulResFP_re(61 DOWNTO 30);

  dinXTwdl_im <= mulResFP_im(61 DOWNTO 30);

  dinXTwdl_5_1_vld <= dinXTwdl_5_1_vld_1;

END rtl;


-- End of Complex4Multiply_block10.vhd --

-- Start of Complex4Multiply_block11.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\Complex4Multiply_block11.vhd
-- Created: 2025-03-18 15:26:31
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Complex4Multiply_block11
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_SDF1_7/Complex4Multiply
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Complex4Multiply_block11 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        din_7_1_re_dly                    :   IN    signed(31 DOWNTO 0);  -- sfix32
        din_7_1_im_dly                    :   IN    signed(31 DOWNTO 0);  -- sfix32
        din_7_vld_dly                     :   IN    std_logic;
        twdl_7_1_re                       :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
        twdl_7_1_im                       :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
        dinXTwdl_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dinXTwdl_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dinXTwdl_7_1_vld                  :   OUT   std_logic
        );
END Complex4Multiply_block11;


ARCHITECTURE rtl OF Complex4Multiply_block11 IS

  -- Signals
  SIGNAL din_re_reg                       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL din_im_reg                       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL twdl_re_reg                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twdl_im_reg                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Complex4Multiply_din1_re_pipe1   : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_din1_im_pipe1   : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult1_re_pipe1  : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64
  SIGNAL Complex4Multiply_mult2_re_pipe1  : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64
  SIGNAL Complex4Multiply_mult1_im_pipe1  : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64
  SIGNAL Complex4Multiply_mult2_im_pipe1  : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64
  SIGNAL Complex4Multiply_twiddle_re_pipe1 : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_twiddle_im_pipe1 : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL prod1_re                         : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64_En30
  SIGNAL prod1_im                         : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64_En30
  SIGNAL prod2_re                         : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64_En30
  SIGNAL prod2_im                         : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64_En30
  SIGNAL din_vld_dly1                     : std_logic;
  SIGNAL din_vld_dly2                     : std_logic;
  SIGNAL din_vld_dly3                     : std_logic;
  SIGNAL prod_vld                         : std_logic;
  SIGNAL Complex4Add_multRes_re_reg       : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL Complex4Add_multRes_im_reg       : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL Complex4Add_prod_vld_reg1        : std_logic;
  SIGNAL Complex4Add_prod1_re_reg         : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Complex4Add_prod1_im_reg         : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Complex4Add_prod2_re_reg         : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Complex4Add_prod2_im_reg         : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Complex4Add_multRes_re_reg_next  : signed(64 DOWNTO 0);  -- sfix65_En30
  SIGNAL Complex4Add_multRes_im_reg_next  : signed(64 DOWNTO 0);  -- sfix65_En30
  SIGNAL mulResFP_re                      : signed(64 DOWNTO 0);  -- sfix65_En30
  SIGNAL mulResFP_im                      : signed(64 DOWNTO 0);  -- sfix65_En30
  SIGNAL dinXTwdl_7_1_vld_1               : std_logic;

BEGIN
  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_re_reg <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        din_re_reg <= din_7_1_re_dly;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_im_reg <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        din_im_reg <= din_7_1_im_dly;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl_re_reg <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        twdl_re_reg <= twdl_7_1_re;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl_im_reg <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        twdl_im_reg <= twdl_7_1_im;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Complex4Multiply
  Complex4Multiply_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF enb = '1' THEN
        prod1_re <= Complex4Multiply_mult1_re_pipe1;
        prod2_re <= Complex4Multiply_mult2_re_pipe1;
        prod1_im <= Complex4Multiply_mult1_im_pipe1;
        prod2_im <= Complex4Multiply_mult2_im_pipe1;
        Complex4Multiply_mult1_re_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_mult2_re_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult1_im_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult2_im_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_twiddle_re_pipe1 <= twdl_re_reg;
        Complex4Multiply_twiddle_im_pipe1 <= twdl_im_reg;
        Complex4Multiply_din1_re_pipe1 <= din_re_reg;
        Complex4Multiply_din1_im_pipe1 <= din_im_reg;
      END IF;
    END IF;
  END PROCESS Complex4Multiply_process;


  intdelay_4_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly1 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly1 <= din_7_vld_dly;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;


  intdelay_5_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly2 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly2 <= din_vld_dly1;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;


  intdelay_6_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly3 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly3 <= din_vld_dly2;
      END IF;
    END IF;
  END PROCESS intdelay_6_process;


  intdelay_7_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        prod_vld <= '0';
      ELSIF enb = '1' THEN
        prod_vld <= din_vld_dly3;
      END IF;
    END IF;
  END PROCESS intdelay_7_process;


  -- Complex4Add
  Complex4Add_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Complex4Add_multRes_re_reg <= to_signed(0, 65);
        Complex4Add_multRes_im_reg <= to_signed(0, 65);
        Complex4Add_prod1_re_reg <= to_signed(0, 64);
        Complex4Add_prod1_im_reg <= to_signed(0, 64);
        Complex4Add_prod2_re_reg <= to_signed(0, 64);
        Complex4Add_prod2_im_reg <= to_signed(0, 64);
        Complex4Add_prod_vld_reg1 <= '0';
        dinXTwdl_7_1_vld_1 <= '0';
      ELSIF enb = '1' THEN
        Complex4Add_multRes_re_reg <= Complex4Add_multRes_re_reg_next;
        Complex4Add_multRes_im_reg <= Complex4Add_multRes_im_reg_next;
        Complex4Add_prod1_re_reg <= prod1_re;
        Complex4Add_prod1_im_reg <= prod1_im;
        Complex4Add_prod2_re_reg <= prod2_re;
        Complex4Add_prod2_im_reg <= prod2_im;
        dinXTwdl_7_1_vld_1 <= Complex4Add_prod_vld_reg1;
        Complex4Add_prod_vld_reg1 <= prod_vld;
      END IF;
    END IF;
  END PROCESS Complex4Add_process;

  Complex4Add_multRes_re_reg_next <= (resize(Complex4Add_prod1_re_reg, 65)) - (resize(Complex4Add_prod2_re_reg, 65));
  Complex4Add_multRes_im_reg_next <= (resize(Complex4Add_prod1_im_reg, 65)) + (resize(Complex4Add_prod2_im_reg, 65));
  mulResFP_re <= Complex4Add_multRes_re_reg;
  mulResFP_im <= Complex4Add_multRes_im_reg;

  dinXTwdl_re <= mulResFP_re(61 DOWNTO 30);

  dinXTwdl_im <= mulResFP_im(61 DOWNTO 30);

  dinXTwdl_7_1_vld <= dinXTwdl_7_1_vld_1;

END rtl;


-- End of Complex4Multiply_block11.vhd --

-- Start of Complex4Multiply_block12.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\Complex4Multiply_block12.vhd
-- Created: 2025-03-18 15:26:31
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Complex4Multiply_block12
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_SDF1_9/Complex4Multiply
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Complex4Multiply_block12 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        din_9_1_re_dly                    :   IN    signed(31 DOWNTO 0);  -- sfix32
        din_9_1_im_dly                    :   IN    signed(31 DOWNTO 0);  -- sfix32
        din_9_vld_dly                     :   IN    std_logic;
        twdl_9_1_re                       :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
        twdl_9_1_im                       :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
        dinXTwdl_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dinXTwdl_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dinXTwdl_9_1_vld                  :   OUT   std_logic
        );
END Complex4Multiply_block12;


ARCHITECTURE rtl OF Complex4Multiply_block12 IS

  -- Signals
  SIGNAL din_re_reg                       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL din_im_reg                       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL twdl_re_reg                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twdl_im_reg                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Complex4Multiply_din1_re_pipe1   : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_din1_im_pipe1   : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult1_re_pipe1  : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64
  SIGNAL Complex4Multiply_mult2_re_pipe1  : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64
  SIGNAL Complex4Multiply_mult1_im_pipe1  : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64
  SIGNAL Complex4Multiply_mult2_im_pipe1  : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64
  SIGNAL Complex4Multiply_twiddle_re_pipe1 : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_twiddle_im_pipe1 : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL prod1_re                         : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64_En30
  SIGNAL prod1_im                         : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64_En30
  SIGNAL prod2_re                         : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64_En30
  SIGNAL prod2_im                         : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64_En30
  SIGNAL din_vld_dly1                     : std_logic;
  SIGNAL din_vld_dly2                     : std_logic;
  SIGNAL din_vld_dly3                     : std_logic;
  SIGNAL prod_vld                         : std_logic;
  SIGNAL Complex4Add_multRes_re_reg       : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL Complex4Add_multRes_im_reg       : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL Complex4Add_prod_vld_reg1        : std_logic;
  SIGNAL Complex4Add_prod1_re_reg         : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Complex4Add_prod1_im_reg         : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Complex4Add_prod2_re_reg         : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Complex4Add_prod2_im_reg         : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Complex4Add_multRes_re_reg_next  : signed(64 DOWNTO 0);  -- sfix65_En30
  SIGNAL Complex4Add_multRes_im_reg_next  : signed(64 DOWNTO 0);  -- sfix65_En30
  SIGNAL mulResFP_re                      : signed(64 DOWNTO 0);  -- sfix65_En30
  SIGNAL mulResFP_im                      : signed(64 DOWNTO 0);  -- sfix65_En30
  SIGNAL dinXTwdl_9_1_vld_1               : std_logic;

BEGIN
  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_re_reg <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        din_re_reg <= din_9_1_re_dly;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_im_reg <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        din_im_reg <= din_9_1_im_dly;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl_re_reg <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        twdl_re_reg <= twdl_9_1_re;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl_im_reg <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        twdl_im_reg <= twdl_9_1_im;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Complex4Multiply
  Complex4Multiply_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF enb = '1' THEN
        prod1_re <= Complex4Multiply_mult1_re_pipe1;
        prod2_re <= Complex4Multiply_mult2_re_pipe1;
        prod1_im <= Complex4Multiply_mult1_im_pipe1;
        prod2_im <= Complex4Multiply_mult2_im_pipe1;
        Complex4Multiply_mult1_re_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_mult2_re_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult1_im_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult2_im_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_twiddle_re_pipe1 <= twdl_re_reg;
        Complex4Multiply_twiddle_im_pipe1 <= twdl_im_reg;
        Complex4Multiply_din1_re_pipe1 <= din_re_reg;
        Complex4Multiply_din1_im_pipe1 <= din_im_reg;
      END IF;
    END IF;
  END PROCESS Complex4Multiply_process;


  intdelay_4_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly1 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly1 <= din_9_vld_dly;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;


  intdelay_5_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly2 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly2 <= din_vld_dly1;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;


  intdelay_6_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly3 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly3 <= din_vld_dly2;
      END IF;
    END IF;
  END PROCESS intdelay_6_process;


  intdelay_7_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        prod_vld <= '0';
      ELSIF enb = '1' THEN
        prod_vld <= din_vld_dly3;
      END IF;
    END IF;
  END PROCESS intdelay_7_process;


  -- Complex4Add
  Complex4Add_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Complex4Add_multRes_re_reg <= to_signed(0, 65);
        Complex4Add_multRes_im_reg <= to_signed(0, 65);
        Complex4Add_prod1_re_reg <= to_signed(0, 64);
        Complex4Add_prod1_im_reg <= to_signed(0, 64);
        Complex4Add_prod2_re_reg <= to_signed(0, 64);
        Complex4Add_prod2_im_reg <= to_signed(0, 64);
        Complex4Add_prod_vld_reg1 <= '0';
        dinXTwdl_9_1_vld_1 <= '0';
      ELSIF enb = '1' THEN
        Complex4Add_multRes_re_reg <= Complex4Add_multRes_re_reg_next;
        Complex4Add_multRes_im_reg <= Complex4Add_multRes_im_reg_next;
        Complex4Add_prod1_re_reg <= prod1_re;
        Complex4Add_prod1_im_reg <= prod1_im;
        Complex4Add_prod2_re_reg <= prod2_re;
        Complex4Add_prod2_im_reg <= prod2_im;
        dinXTwdl_9_1_vld_1 <= Complex4Add_prod_vld_reg1;
        Complex4Add_prod_vld_reg1 <= prod_vld;
      END IF;
    END IF;
  END PROCESS Complex4Add_process;

  Complex4Add_multRes_re_reg_next <= (resize(Complex4Add_prod1_re_reg, 65)) - (resize(Complex4Add_prod2_re_reg, 65));
  Complex4Add_multRes_im_reg_next <= (resize(Complex4Add_prod1_im_reg, 65)) + (resize(Complex4Add_prod2_im_reg, 65));
  mulResFP_re <= Complex4Add_multRes_re_reg;
  mulResFP_im <= Complex4Add_multRes_im_reg;

  dinXTwdl_re <= mulResFP_re(61 DOWNTO 30);

  dinXTwdl_im <= mulResFP_im(61 DOWNTO 30);

  dinXTwdl_9_1_vld <= dinXTwdl_9_1_vld_1;

END rtl;


-- End of Complex4Multiply_block12.vhd --

-- Start of Complex4Multiply_block13.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\Complex4Multiply_block13.vhd
-- Created: 2025-03-18 15:26:31
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Complex4Multiply_block13
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_SDF1_11/Complex4Multiply
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Complex4Multiply_block13 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        din_11_1_re_dly                   :   IN    signed(31 DOWNTO 0);  -- sfix32
        din_11_1_im_dly                   :   IN    signed(31 DOWNTO 0);  -- sfix32
        din_11_vld_dly                    :   IN    std_logic;
        twdl_11_1_re                      :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
        twdl_11_1_im                      :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
        dinXTwdl_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dinXTwdl_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dinXTwdl_11_1_vld                 :   OUT   std_logic
        );
END Complex4Multiply_block13;


ARCHITECTURE rtl OF Complex4Multiply_block13 IS

  -- Signals
  SIGNAL din_re_reg                       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL din_im_reg                       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL twdl_re_reg                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twdl_im_reg                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Complex4Multiply_din1_re_pipe1   : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_din1_im_pipe1   : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult1_re_pipe1  : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64
  SIGNAL Complex4Multiply_mult2_re_pipe1  : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64
  SIGNAL Complex4Multiply_mult1_im_pipe1  : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64
  SIGNAL Complex4Multiply_mult2_im_pipe1  : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64
  SIGNAL Complex4Multiply_twiddle_re_pipe1 : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_twiddle_im_pipe1 : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL prod1_re                         : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64_En30
  SIGNAL prod1_im                         : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64_En30
  SIGNAL prod2_re                         : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64_En30
  SIGNAL prod2_im                         : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64_En30
  SIGNAL din_vld_dly1                     : std_logic;
  SIGNAL din_vld_dly2                     : std_logic;
  SIGNAL din_vld_dly3                     : std_logic;
  SIGNAL prod_vld                         : std_logic;
  SIGNAL Complex4Add_multRes_re_reg       : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL Complex4Add_multRes_im_reg       : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL Complex4Add_prod_vld_reg1        : std_logic;
  SIGNAL Complex4Add_prod1_re_reg         : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Complex4Add_prod1_im_reg         : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Complex4Add_prod2_re_reg         : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Complex4Add_prod2_im_reg         : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Complex4Add_multRes_re_reg_next  : signed(64 DOWNTO 0);  -- sfix65_En30
  SIGNAL Complex4Add_multRes_im_reg_next  : signed(64 DOWNTO 0);  -- sfix65_En30
  SIGNAL mulResFP_re                      : signed(64 DOWNTO 0);  -- sfix65_En30
  SIGNAL mulResFP_im                      : signed(64 DOWNTO 0);  -- sfix65_En30
  SIGNAL dinXTwdl_11_1_vld_1              : std_logic;

BEGIN
  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_re_reg <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        din_re_reg <= din_11_1_re_dly;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_im_reg <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        din_im_reg <= din_11_1_im_dly;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl_re_reg <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        twdl_re_reg <= twdl_11_1_re;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl_im_reg <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        twdl_im_reg <= twdl_11_1_im;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Complex4Multiply
  Complex4Multiply_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF enb = '1' THEN
        prod1_re <= Complex4Multiply_mult1_re_pipe1;
        prod2_re <= Complex4Multiply_mult2_re_pipe1;
        prod1_im <= Complex4Multiply_mult1_im_pipe1;
        prod2_im <= Complex4Multiply_mult2_im_pipe1;
        Complex4Multiply_mult1_re_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_mult2_re_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult1_im_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult2_im_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_twiddle_re_pipe1 <= twdl_re_reg;
        Complex4Multiply_twiddle_im_pipe1 <= twdl_im_reg;
        Complex4Multiply_din1_re_pipe1 <= din_re_reg;
        Complex4Multiply_din1_im_pipe1 <= din_im_reg;
      END IF;
    END IF;
  END PROCESS Complex4Multiply_process;


  intdelay_4_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly1 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly1 <= din_11_vld_dly;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;


  intdelay_5_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly2 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly2 <= din_vld_dly1;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;


  intdelay_6_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly3 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly3 <= din_vld_dly2;
      END IF;
    END IF;
  END PROCESS intdelay_6_process;


  intdelay_7_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        prod_vld <= '0';
      ELSIF enb = '1' THEN
        prod_vld <= din_vld_dly3;
      END IF;
    END IF;
  END PROCESS intdelay_7_process;


  -- Complex4Add
  Complex4Add_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Complex4Add_multRes_re_reg <= to_signed(0, 65);
        Complex4Add_multRes_im_reg <= to_signed(0, 65);
        Complex4Add_prod1_re_reg <= to_signed(0, 64);
        Complex4Add_prod1_im_reg <= to_signed(0, 64);
        Complex4Add_prod2_re_reg <= to_signed(0, 64);
        Complex4Add_prod2_im_reg <= to_signed(0, 64);
        Complex4Add_prod_vld_reg1 <= '0';
        dinXTwdl_11_1_vld_1 <= '0';
      ELSIF enb = '1' THEN
        Complex4Add_multRes_re_reg <= Complex4Add_multRes_re_reg_next;
        Complex4Add_multRes_im_reg <= Complex4Add_multRes_im_reg_next;
        Complex4Add_prod1_re_reg <= prod1_re;
        Complex4Add_prod1_im_reg <= prod1_im;
        Complex4Add_prod2_re_reg <= prod2_re;
        Complex4Add_prod2_im_reg <= prod2_im;
        dinXTwdl_11_1_vld_1 <= Complex4Add_prod_vld_reg1;
        Complex4Add_prod_vld_reg1 <= prod_vld;
      END IF;
    END IF;
  END PROCESS Complex4Add_process;

  Complex4Add_multRes_re_reg_next <= (resize(Complex4Add_prod1_re_reg, 65)) - (resize(Complex4Add_prod2_re_reg, 65));
  Complex4Add_multRes_im_reg_next <= (resize(Complex4Add_prod1_im_reg, 65)) + (resize(Complex4Add_prod2_im_reg, 65));
  mulResFP_re <= Complex4Add_multRes_re_reg;
  mulResFP_im <= Complex4Add_multRes_im_reg;

  dinXTwdl_re <= mulResFP_re(61 DOWNTO 30);

  dinXTwdl_im <= mulResFP_im(61 DOWNTO 30);

  dinXTwdl_11_1_vld <= dinXTwdl_11_1_vld_1;

END rtl;


-- End of Complex4Multiply_block13.vhd --

-- Start of Complex4Multiply_block2.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\Complex4Multiply_block2.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Complex4Multiply_block2
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF1_9/Complex4Multiply
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Complex4Multiply_block2 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        din_9_1_re_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_9_1_im_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_9_vld_dly                     :   IN    std_logic;
        twdl_9_1_re                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        twdl_9_1_im                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        dinXTwdl_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dinXTwdl_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dinXTwdl_9_1_vld                  :   OUT   std_logic
        );
END Complex4Multiply_block2;


ARCHITECTURE rtl OF Complex4Multiply_block2 IS

  -- Signals
  SIGNAL din_re_reg                       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL din_im_reg                       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twdl_re_reg                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdl_im_reg                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Complex4Multiply_din1_re_pipe1   : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_din1_im_pipe1   : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_mult1_re_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult2_re_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult1_im_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult2_im_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_twiddle_re_pipe1 : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_twiddle_im_pipe1 : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL prod1_re                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL prod1_im                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL prod2_re                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL prod2_im                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL din_vld_dly1                     : std_logic;
  SIGNAL din_vld_dly2                     : std_logic;
  SIGNAL din_vld_dly3                     : std_logic;
  SIGNAL prod_vld                         : std_logic;
  SIGNAL Complex4Add_multRes_re_reg       : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Complex4Add_multRes_im_reg       : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Complex4Add_prod_vld_reg1        : std_logic;
  SIGNAL Complex4Add_prod1_re_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod1_im_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod2_re_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod2_im_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_multRes_re_reg_next  : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL Complex4Add_multRes_im_reg_next  : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL mulResFP_re                      : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL mulResFP_im                      : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL dinXTwdl_9_1_vld_1               : std_logic;

BEGIN
  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_re_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        din_re_reg <= din_9_1_re_dly;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_im_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        din_im_reg <= din_9_1_im_dly;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl_re_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twdl_re_reg <= twdl_9_1_re;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl_im_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twdl_im_reg <= twdl_9_1_im;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Complex4Multiply
  Complex4Multiply_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF enb = '1' THEN
        prod1_re <= Complex4Multiply_mult1_re_pipe1;
        prod2_re <= Complex4Multiply_mult2_re_pipe1;
        prod1_im <= Complex4Multiply_mult1_im_pipe1;
        prod2_im <= Complex4Multiply_mult2_im_pipe1;
        Complex4Multiply_mult1_re_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_mult2_re_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult1_im_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult2_im_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_twiddle_re_pipe1 <= twdl_re_reg;
        Complex4Multiply_twiddle_im_pipe1 <= twdl_im_reg;
        Complex4Multiply_din1_re_pipe1 <= din_re_reg;
        Complex4Multiply_din1_im_pipe1 <= din_im_reg;
      END IF;
    END IF;
  END PROCESS Complex4Multiply_process;


  intdelay_4_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly1 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly1 <= din_9_vld_dly;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;


  intdelay_5_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly2 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly2 <= din_vld_dly1;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;


  intdelay_6_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly3 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly3 <= din_vld_dly2;
      END IF;
    END IF;
  END PROCESS intdelay_6_process;


  intdelay_7_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        prod_vld <= '0';
      ELSIF enb = '1' THEN
        prod_vld <= din_vld_dly3;
      END IF;
    END IF;
  END PROCESS intdelay_7_process;


  -- Complex4Add
  Complex4Add_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Complex4Add_multRes_re_reg <= to_signed(0, 33);
        Complex4Add_multRes_im_reg <= to_signed(0, 33);
        Complex4Add_prod1_re_reg <= to_signed(0, 32);
        Complex4Add_prod1_im_reg <= to_signed(0, 32);
        Complex4Add_prod2_re_reg <= to_signed(0, 32);
        Complex4Add_prod2_im_reg <= to_signed(0, 32);
        Complex4Add_prod_vld_reg1 <= '0';
        dinXTwdl_9_1_vld_1 <= '0';
      ELSIF enb = '1' THEN
        Complex4Add_multRes_re_reg <= Complex4Add_multRes_re_reg_next;
        Complex4Add_multRes_im_reg <= Complex4Add_multRes_im_reg_next;
        Complex4Add_prod1_re_reg <= prod1_re;
        Complex4Add_prod1_im_reg <= prod1_im;
        Complex4Add_prod2_re_reg <= prod2_re;
        Complex4Add_prod2_im_reg <= prod2_im;
        dinXTwdl_9_1_vld_1 <= Complex4Add_prod_vld_reg1;
        Complex4Add_prod_vld_reg1 <= prod_vld;
      END IF;
    END IF;
  END PROCESS Complex4Add_process;

  Complex4Add_multRes_re_reg_next <= (resize(Complex4Add_prod1_re_reg, 33)) - (resize(Complex4Add_prod2_re_reg, 33));
  Complex4Add_multRes_im_reg_next <= (resize(Complex4Add_prod1_im_reg, 33)) + (resize(Complex4Add_prod2_im_reg, 33));
  mulResFP_re <= Complex4Add_multRes_re_reg;
  mulResFP_im <= Complex4Add_multRes_im_reg;

  dinXTwdl_re <= mulResFP_re(29 DOWNTO 14);

  dinXTwdl_im <= mulResFP_im(29 DOWNTO 14);

  dinXTwdl_9_1_vld <= dinXTwdl_9_1_vld_1;

END rtl;


-- End of Complex4Multiply_block2.vhd --

-- Start of Complex4Multiply_block3.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\Complex4Multiply_block3.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Complex4Multiply_block3
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF1_11/Complex4Multiply
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Complex4Multiply_block3 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        din_11_1_re_dly                   :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_11_1_im_dly                   :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_11_vld_dly                    :   IN    std_logic;
        twdl_11_1_re                      :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        twdl_11_1_im                      :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        dinXTwdl_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dinXTwdl_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dinXTwdl_11_1_vld                 :   OUT   std_logic
        );
END Complex4Multiply_block3;


ARCHITECTURE rtl OF Complex4Multiply_block3 IS

  -- Signals
  SIGNAL din_re_reg                       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL din_im_reg                       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twdl_re_reg                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdl_im_reg                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Complex4Multiply_din1_re_pipe1   : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_din1_im_pipe1   : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_mult1_re_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult2_re_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult1_im_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult2_im_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_twiddle_re_pipe1 : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_twiddle_im_pipe1 : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL prod1_re                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL prod1_im                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL prod2_re                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL prod2_im                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL din_vld_dly1                     : std_logic;
  SIGNAL din_vld_dly2                     : std_logic;
  SIGNAL din_vld_dly3                     : std_logic;
  SIGNAL prod_vld                         : std_logic;
  SIGNAL Complex4Add_multRes_re_reg       : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Complex4Add_multRes_im_reg       : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Complex4Add_prod_vld_reg1        : std_logic;
  SIGNAL Complex4Add_prod1_re_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod1_im_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod2_re_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod2_im_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_multRes_re_reg_next  : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL Complex4Add_multRes_im_reg_next  : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL mulResFP_re                      : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL mulResFP_im                      : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL dinXTwdl_11_1_vld_1              : std_logic;

BEGIN
  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_re_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        din_re_reg <= din_11_1_re_dly;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_im_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        din_im_reg <= din_11_1_im_dly;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl_re_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twdl_re_reg <= twdl_11_1_re;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl_im_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twdl_im_reg <= twdl_11_1_im;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Complex4Multiply
  Complex4Multiply_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF enb = '1' THEN
        prod1_re <= Complex4Multiply_mult1_re_pipe1;
        prod2_re <= Complex4Multiply_mult2_re_pipe1;
        prod1_im <= Complex4Multiply_mult1_im_pipe1;
        prod2_im <= Complex4Multiply_mult2_im_pipe1;
        Complex4Multiply_mult1_re_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_mult2_re_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult1_im_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult2_im_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_twiddle_re_pipe1 <= twdl_re_reg;
        Complex4Multiply_twiddle_im_pipe1 <= twdl_im_reg;
        Complex4Multiply_din1_re_pipe1 <= din_re_reg;
        Complex4Multiply_din1_im_pipe1 <= din_im_reg;
      END IF;
    END IF;
  END PROCESS Complex4Multiply_process;


  intdelay_4_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly1 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly1 <= din_11_vld_dly;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;


  intdelay_5_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly2 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly2 <= din_vld_dly1;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;


  intdelay_6_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly3 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly3 <= din_vld_dly2;
      END IF;
    END IF;
  END PROCESS intdelay_6_process;


  intdelay_7_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        prod_vld <= '0';
      ELSIF enb = '1' THEN
        prod_vld <= din_vld_dly3;
      END IF;
    END IF;
  END PROCESS intdelay_7_process;


  -- Complex4Add
  Complex4Add_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Complex4Add_multRes_re_reg <= to_signed(0, 33);
        Complex4Add_multRes_im_reg <= to_signed(0, 33);
        Complex4Add_prod1_re_reg <= to_signed(0, 32);
        Complex4Add_prod1_im_reg <= to_signed(0, 32);
        Complex4Add_prod2_re_reg <= to_signed(0, 32);
        Complex4Add_prod2_im_reg <= to_signed(0, 32);
        Complex4Add_prod_vld_reg1 <= '0';
        dinXTwdl_11_1_vld_1 <= '0';
      ELSIF enb = '1' THEN
        Complex4Add_multRes_re_reg <= Complex4Add_multRes_re_reg_next;
        Complex4Add_multRes_im_reg <= Complex4Add_multRes_im_reg_next;
        Complex4Add_prod1_re_reg <= prod1_re;
        Complex4Add_prod1_im_reg <= prod1_im;
        Complex4Add_prod2_re_reg <= prod2_re;
        Complex4Add_prod2_im_reg <= prod2_im;
        dinXTwdl_11_1_vld_1 <= Complex4Add_prod_vld_reg1;
        Complex4Add_prod_vld_reg1 <= prod_vld;
      END IF;
    END IF;
  END PROCESS Complex4Add_process;

  Complex4Add_multRes_re_reg_next <= (resize(Complex4Add_prod1_re_reg, 33)) - (resize(Complex4Add_prod2_re_reg, 33));
  Complex4Add_multRes_im_reg_next <= (resize(Complex4Add_prod1_im_reg, 33)) + (resize(Complex4Add_prod2_im_reg, 33));
  mulResFP_re <= Complex4Add_multRes_re_reg;
  mulResFP_im <= Complex4Add_multRes_im_reg;

  dinXTwdl_re <= mulResFP_re(29 DOWNTO 14);

  dinXTwdl_im <= mulResFP_im(29 DOWNTO 14);

  dinXTwdl_11_1_vld <= dinXTwdl_11_1_vld_1;

END rtl;


-- End of Complex4Multiply_block3.vhd --

-- Start of Complex4Multiply_block4.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\Complex4Multiply_block4.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Complex4Multiply_block4
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_SDF1_3/Complex4Multiply
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Complex4Multiply_block4 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        din_3_1_re_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_3_1_im_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_3_vld_dly                     :   IN    std_logic;
        twdl_3_1_re                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        twdl_3_1_im                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        dinXTwdl_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dinXTwdl_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dinXTwdl_3_1_vld                  :   OUT   std_logic
        );
END Complex4Multiply_block4;


ARCHITECTURE rtl OF Complex4Multiply_block4 IS

  -- Signals
  SIGNAL din_re_reg                       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL din_im_reg                       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twdl_re_reg                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdl_im_reg                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Complex4Multiply_din1_re_pipe1   : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_din1_im_pipe1   : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_mult1_re_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult2_re_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult1_im_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult2_im_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_twiddle_re_pipe1 : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_twiddle_im_pipe1 : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL prod1_re                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL prod1_im                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL prod2_re                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL prod2_im                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL din_vld_dly1                     : std_logic;
  SIGNAL din_vld_dly2                     : std_logic;
  SIGNAL din_vld_dly3                     : std_logic;
  SIGNAL prod_vld                         : std_logic;
  SIGNAL Complex4Add_multRes_re_reg       : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Complex4Add_multRes_im_reg       : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Complex4Add_prod_vld_reg1        : std_logic;
  SIGNAL Complex4Add_prod1_re_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod1_im_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod2_re_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod2_im_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_multRes_re_reg_next  : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL Complex4Add_multRes_im_reg_next  : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL mulResFP_re                      : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL mulResFP_im                      : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL dinXTwdl_3_1_vld_1               : std_logic;

BEGIN
  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_re_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        din_re_reg <= din_3_1_re_dly;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_im_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        din_im_reg <= din_3_1_im_dly;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl_re_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twdl_re_reg <= twdl_3_1_re;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl_im_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twdl_im_reg <= twdl_3_1_im;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Complex4Multiply
  Complex4Multiply_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF enb = '1' THEN
        prod1_re <= Complex4Multiply_mult1_re_pipe1;
        prod2_re <= Complex4Multiply_mult2_re_pipe1;
        prod1_im <= Complex4Multiply_mult1_im_pipe1;
        prod2_im <= Complex4Multiply_mult2_im_pipe1;
        Complex4Multiply_mult1_re_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_mult2_re_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult1_im_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult2_im_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_twiddle_re_pipe1 <= twdl_re_reg;
        Complex4Multiply_twiddle_im_pipe1 <= twdl_im_reg;
        Complex4Multiply_din1_re_pipe1 <= din_re_reg;
        Complex4Multiply_din1_im_pipe1 <= din_im_reg;
      END IF;
    END IF;
  END PROCESS Complex4Multiply_process;


  intdelay_4_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly1 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly1 <= din_3_vld_dly;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;


  intdelay_5_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly2 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly2 <= din_vld_dly1;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;


  intdelay_6_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly3 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly3 <= din_vld_dly2;
      END IF;
    END IF;
  END PROCESS intdelay_6_process;


  intdelay_7_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        prod_vld <= '0';
      ELSIF enb = '1' THEN
        prod_vld <= din_vld_dly3;
      END IF;
    END IF;
  END PROCESS intdelay_7_process;


  -- Complex4Add
  Complex4Add_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Complex4Add_multRes_re_reg <= to_signed(0, 33);
        Complex4Add_multRes_im_reg <= to_signed(0, 33);
        Complex4Add_prod1_re_reg <= to_signed(0, 32);
        Complex4Add_prod1_im_reg <= to_signed(0, 32);
        Complex4Add_prod2_re_reg <= to_signed(0, 32);
        Complex4Add_prod2_im_reg <= to_signed(0, 32);
        Complex4Add_prod_vld_reg1 <= '0';
        dinXTwdl_3_1_vld_1 <= '0';
      ELSIF enb = '1' THEN
        Complex4Add_multRes_re_reg <= Complex4Add_multRes_re_reg_next;
        Complex4Add_multRes_im_reg <= Complex4Add_multRes_im_reg_next;
        Complex4Add_prod1_re_reg <= prod1_re;
        Complex4Add_prod1_im_reg <= prod1_im;
        Complex4Add_prod2_re_reg <= prod2_re;
        Complex4Add_prod2_im_reg <= prod2_im;
        dinXTwdl_3_1_vld_1 <= Complex4Add_prod_vld_reg1;
        Complex4Add_prod_vld_reg1 <= prod_vld;
      END IF;
    END IF;
  END PROCESS Complex4Add_process;

  Complex4Add_multRes_re_reg_next <= (resize(Complex4Add_prod1_re_reg, 33)) - (resize(Complex4Add_prod2_re_reg, 33));
  Complex4Add_multRes_im_reg_next <= (resize(Complex4Add_prod1_im_reg, 33)) + (resize(Complex4Add_prod2_im_reg, 33));
  mulResFP_re <= Complex4Add_multRes_re_reg;
  mulResFP_im <= Complex4Add_multRes_im_reg;

  dinXTwdl_re <= mulResFP_re(29 DOWNTO 14);

  dinXTwdl_im <= mulResFP_im(29 DOWNTO 14);

  dinXTwdl_3_1_vld <= dinXTwdl_3_1_vld_1;

END rtl;


-- End of Complex4Multiply_block4.vhd --

-- Start of Complex4Multiply_block5.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\Complex4Multiply_block5.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Complex4Multiply_block5
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_SDF1_5/Complex4Multiply
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Complex4Multiply_block5 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        din_5_1_re_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_5_1_im_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_5_vld_dly                     :   IN    std_logic;
        twdl_5_1_re                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        twdl_5_1_im                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        dinXTwdl_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dinXTwdl_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dinXTwdl_5_1_vld                  :   OUT   std_logic
        );
END Complex4Multiply_block5;


ARCHITECTURE rtl OF Complex4Multiply_block5 IS

  -- Signals
  SIGNAL din_re_reg                       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL din_im_reg                       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twdl_re_reg                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdl_im_reg                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Complex4Multiply_din1_re_pipe1   : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_din1_im_pipe1   : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_mult1_re_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult2_re_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult1_im_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult2_im_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_twiddle_re_pipe1 : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_twiddle_im_pipe1 : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL prod1_re                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL prod1_im                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL prod2_re                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL prod2_im                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL din_vld_dly1                     : std_logic;
  SIGNAL din_vld_dly2                     : std_logic;
  SIGNAL din_vld_dly3                     : std_logic;
  SIGNAL prod_vld                         : std_logic;
  SIGNAL Complex4Add_multRes_re_reg       : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Complex4Add_multRes_im_reg       : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Complex4Add_prod_vld_reg1        : std_logic;
  SIGNAL Complex4Add_prod1_re_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod1_im_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod2_re_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod2_im_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_multRes_re_reg_next  : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL Complex4Add_multRes_im_reg_next  : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL mulResFP_re                      : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL mulResFP_im                      : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL dinXTwdl_5_1_vld_1               : std_logic;

BEGIN
  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_re_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        din_re_reg <= din_5_1_re_dly;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_im_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        din_im_reg <= din_5_1_im_dly;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl_re_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twdl_re_reg <= twdl_5_1_re;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl_im_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twdl_im_reg <= twdl_5_1_im;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Complex4Multiply
  Complex4Multiply_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF enb = '1' THEN
        prod1_re <= Complex4Multiply_mult1_re_pipe1;
        prod2_re <= Complex4Multiply_mult2_re_pipe1;
        prod1_im <= Complex4Multiply_mult1_im_pipe1;
        prod2_im <= Complex4Multiply_mult2_im_pipe1;
        Complex4Multiply_mult1_re_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_mult2_re_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult1_im_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult2_im_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_twiddle_re_pipe1 <= twdl_re_reg;
        Complex4Multiply_twiddle_im_pipe1 <= twdl_im_reg;
        Complex4Multiply_din1_re_pipe1 <= din_re_reg;
        Complex4Multiply_din1_im_pipe1 <= din_im_reg;
      END IF;
    END IF;
  END PROCESS Complex4Multiply_process;


  intdelay_4_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly1 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly1 <= din_5_vld_dly;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;


  intdelay_5_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly2 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly2 <= din_vld_dly1;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;


  intdelay_6_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly3 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly3 <= din_vld_dly2;
      END IF;
    END IF;
  END PROCESS intdelay_6_process;


  intdelay_7_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        prod_vld <= '0';
      ELSIF enb = '1' THEN
        prod_vld <= din_vld_dly3;
      END IF;
    END IF;
  END PROCESS intdelay_7_process;


  -- Complex4Add
  Complex4Add_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Complex4Add_multRes_re_reg <= to_signed(0, 33);
        Complex4Add_multRes_im_reg <= to_signed(0, 33);
        Complex4Add_prod1_re_reg <= to_signed(0, 32);
        Complex4Add_prod1_im_reg <= to_signed(0, 32);
        Complex4Add_prod2_re_reg <= to_signed(0, 32);
        Complex4Add_prod2_im_reg <= to_signed(0, 32);
        Complex4Add_prod_vld_reg1 <= '0';
        dinXTwdl_5_1_vld_1 <= '0';
      ELSIF enb = '1' THEN
        Complex4Add_multRes_re_reg <= Complex4Add_multRes_re_reg_next;
        Complex4Add_multRes_im_reg <= Complex4Add_multRes_im_reg_next;
        Complex4Add_prod1_re_reg <= prod1_re;
        Complex4Add_prod1_im_reg <= prod1_im;
        Complex4Add_prod2_re_reg <= prod2_re;
        Complex4Add_prod2_im_reg <= prod2_im;
        dinXTwdl_5_1_vld_1 <= Complex4Add_prod_vld_reg1;
        Complex4Add_prod_vld_reg1 <= prod_vld;
      END IF;
    END IF;
  END PROCESS Complex4Add_process;

  Complex4Add_multRes_re_reg_next <= (resize(Complex4Add_prod1_re_reg, 33)) - (resize(Complex4Add_prod2_re_reg, 33));
  Complex4Add_multRes_im_reg_next <= (resize(Complex4Add_prod1_im_reg, 33)) + (resize(Complex4Add_prod2_im_reg, 33));
  mulResFP_re <= Complex4Add_multRes_re_reg;
  mulResFP_im <= Complex4Add_multRes_im_reg;

  dinXTwdl_re <= mulResFP_re(29 DOWNTO 14);

  dinXTwdl_im <= mulResFP_im(29 DOWNTO 14);

  dinXTwdl_5_1_vld <= dinXTwdl_5_1_vld_1;

END rtl;


-- End of Complex4Multiply_block5.vhd --

-- Start of Complex4Multiply_block6.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\Complex4Multiply_block6.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Complex4Multiply_block6
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_SDF1_7/Complex4Multiply
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Complex4Multiply_block6 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        din_7_1_re_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_7_1_im_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_7_vld_dly                     :   IN    std_logic;
        twdl_7_1_re                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        twdl_7_1_im                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        dinXTwdl_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dinXTwdl_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dinXTwdl_7_1_vld                  :   OUT   std_logic
        );
END Complex4Multiply_block6;


ARCHITECTURE rtl OF Complex4Multiply_block6 IS

  -- Signals
  SIGNAL din_re_reg                       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL din_im_reg                       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twdl_re_reg                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdl_im_reg                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Complex4Multiply_din1_re_pipe1   : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_din1_im_pipe1   : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_mult1_re_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult2_re_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult1_im_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult2_im_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_twiddle_re_pipe1 : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_twiddle_im_pipe1 : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL prod1_re                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL prod1_im                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL prod2_re                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL prod2_im                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL din_vld_dly1                     : std_logic;
  SIGNAL din_vld_dly2                     : std_logic;
  SIGNAL din_vld_dly3                     : std_logic;
  SIGNAL prod_vld                         : std_logic;
  SIGNAL Complex4Add_multRes_re_reg       : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Complex4Add_multRes_im_reg       : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Complex4Add_prod_vld_reg1        : std_logic;
  SIGNAL Complex4Add_prod1_re_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod1_im_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod2_re_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod2_im_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_multRes_re_reg_next  : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL Complex4Add_multRes_im_reg_next  : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL mulResFP_re                      : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL mulResFP_im                      : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL dinXTwdl_7_1_vld_1               : std_logic;

BEGIN
  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_re_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        din_re_reg <= din_7_1_re_dly;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_im_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        din_im_reg <= din_7_1_im_dly;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl_re_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twdl_re_reg <= twdl_7_1_re;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl_im_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twdl_im_reg <= twdl_7_1_im;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Complex4Multiply
  Complex4Multiply_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF enb = '1' THEN
        prod1_re <= Complex4Multiply_mult1_re_pipe1;
        prod2_re <= Complex4Multiply_mult2_re_pipe1;
        prod1_im <= Complex4Multiply_mult1_im_pipe1;
        prod2_im <= Complex4Multiply_mult2_im_pipe1;
        Complex4Multiply_mult1_re_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_mult2_re_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult1_im_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult2_im_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_twiddle_re_pipe1 <= twdl_re_reg;
        Complex4Multiply_twiddle_im_pipe1 <= twdl_im_reg;
        Complex4Multiply_din1_re_pipe1 <= din_re_reg;
        Complex4Multiply_din1_im_pipe1 <= din_im_reg;
      END IF;
    END IF;
  END PROCESS Complex4Multiply_process;


  intdelay_4_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly1 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly1 <= din_7_vld_dly;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;


  intdelay_5_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly2 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly2 <= din_vld_dly1;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;


  intdelay_6_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly3 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly3 <= din_vld_dly2;
      END IF;
    END IF;
  END PROCESS intdelay_6_process;


  intdelay_7_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        prod_vld <= '0';
      ELSIF enb = '1' THEN
        prod_vld <= din_vld_dly3;
      END IF;
    END IF;
  END PROCESS intdelay_7_process;


  -- Complex4Add
  Complex4Add_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Complex4Add_multRes_re_reg <= to_signed(0, 33);
        Complex4Add_multRes_im_reg <= to_signed(0, 33);
        Complex4Add_prod1_re_reg <= to_signed(0, 32);
        Complex4Add_prod1_im_reg <= to_signed(0, 32);
        Complex4Add_prod2_re_reg <= to_signed(0, 32);
        Complex4Add_prod2_im_reg <= to_signed(0, 32);
        Complex4Add_prod_vld_reg1 <= '0';
        dinXTwdl_7_1_vld_1 <= '0';
      ELSIF enb = '1' THEN
        Complex4Add_multRes_re_reg <= Complex4Add_multRes_re_reg_next;
        Complex4Add_multRes_im_reg <= Complex4Add_multRes_im_reg_next;
        Complex4Add_prod1_re_reg <= prod1_re;
        Complex4Add_prod1_im_reg <= prod1_im;
        Complex4Add_prod2_re_reg <= prod2_re;
        Complex4Add_prod2_im_reg <= prod2_im;
        dinXTwdl_7_1_vld_1 <= Complex4Add_prod_vld_reg1;
        Complex4Add_prod_vld_reg1 <= prod_vld;
      END IF;
    END IF;
  END PROCESS Complex4Add_process;

  Complex4Add_multRes_re_reg_next <= (resize(Complex4Add_prod1_re_reg, 33)) - (resize(Complex4Add_prod2_re_reg, 33));
  Complex4Add_multRes_im_reg_next <= (resize(Complex4Add_prod1_im_reg, 33)) + (resize(Complex4Add_prod2_im_reg, 33));
  mulResFP_re <= Complex4Add_multRes_re_reg;
  mulResFP_im <= Complex4Add_multRes_im_reg;

  dinXTwdl_re <= mulResFP_re(29 DOWNTO 14);

  dinXTwdl_im <= mulResFP_im(29 DOWNTO 14);

  dinXTwdl_7_1_vld <= dinXTwdl_7_1_vld_1;

END rtl;


-- End of Complex4Multiply_block6.vhd --

-- Start of Complex4Multiply_block7.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\Complex4Multiply_block7.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Complex4Multiply_block7
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_SDF1_9/Complex4Multiply
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Complex4Multiply_block7 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        din_9_1_re_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_9_1_im_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_9_vld_dly                     :   IN    std_logic;
        twdl_9_1_re                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        twdl_9_1_im                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        dinXTwdl_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dinXTwdl_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dinXTwdl_9_1_vld                  :   OUT   std_logic
        );
END Complex4Multiply_block7;


ARCHITECTURE rtl OF Complex4Multiply_block7 IS

  -- Signals
  SIGNAL din_re_reg                       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL din_im_reg                       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twdl_re_reg                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdl_im_reg                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Complex4Multiply_din1_re_pipe1   : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_din1_im_pipe1   : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_mult1_re_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult2_re_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult1_im_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult2_im_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_twiddle_re_pipe1 : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_twiddle_im_pipe1 : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL prod1_re                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL prod1_im                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL prod2_re                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL prod2_im                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL din_vld_dly1                     : std_logic;
  SIGNAL din_vld_dly2                     : std_logic;
  SIGNAL din_vld_dly3                     : std_logic;
  SIGNAL prod_vld                         : std_logic;
  SIGNAL Complex4Add_multRes_re_reg       : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Complex4Add_multRes_im_reg       : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Complex4Add_prod_vld_reg1        : std_logic;
  SIGNAL Complex4Add_prod1_re_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod1_im_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod2_re_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod2_im_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_multRes_re_reg_next  : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL Complex4Add_multRes_im_reg_next  : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL mulResFP_re                      : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL mulResFP_im                      : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL dinXTwdl_9_1_vld_1               : std_logic;

BEGIN
  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_re_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        din_re_reg <= din_9_1_re_dly;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_im_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        din_im_reg <= din_9_1_im_dly;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl_re_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twdl_re_reg <= twdl_9_1_re;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl_im_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twdl_im_reg <= twdl_9_1_im;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Complex4Multiply
  Complex4Multiply_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF enb = '1' THEN
        prod1_re <= Complex4Multiply_mult1_re_pipe1;
        prod2_re <= Complex4Multiply_mult2_re_pipe1;
        prod1_im <= Complex4Multiply_mult1_im_pipe1;
        prod2_im <= Complex4Multiply_mult2_im_pipe1;
        Complex4Multiply_mult1_re_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_mult2_re_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult1_im_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult2_im_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_twiddle_re_pipe1 <= twdl_re_reg;
        Complex4Multiply_twiddle_im_pipe1 <= twdl_im_reg;
        Complex4Multiply_din1_re_pipe1 <= din_re_reg;
        Complex4Multiply_din1_im_pipe1 <= din_im_reg;
      END IF;
    END IF;
  END PROCESS Complex4Multiply_process;


  intdelay_4_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly1 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly1 <= din_9_vld_dly;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;


  intdelay_5_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly2 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly2 <= din_vld_dly1;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;


  intdelay_6_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly3 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly3 <= din_vld_dly2;
      END IF;
    END IF;
  END PROCESS intdelay_6_process;


  intdelay_7_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        prod_vld <= '0';
      ELSIF enb = '1' THEN
        prod_vld <= din_vld_dly3;
      END IF;
    END IF;
  END PROCESS intdelay_7_process;


  -- Complex4Add
  Complex4Add_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Complex4Add_multRes_re_reg <= to_signed(0, 33);
        Complex4Add_multRes_im_reg <= to_signed(0, 33);
        Complex4Add_prod1_re_reg <= to_signed(0, 32);
        Complex4Add_prod1_im_reg <= to_signed(0, 32);
        Complex4Add_prod2_re_reg <= to_signed(0, 32);
        Complex4Add_prod2_im_reg <= to_signed(0, 32);
        Complex4Add_prod_vld_reg1 <= '0';
        dinXTwdl_9_1_vld_1 <= '0';
      ELSIF enb = '1' THEN
        Complex4Add_multRes_re_reg <= Complex4Add_multRes_re_reg_next;
        Complex4Add_multRes_im_reg <= Complex4Add_multRes_im_reg_next;
        Complex4Add_prod1_re_reg <= prod1_re;
        Complex4Add_prod1_im_reg <= prod1_im;
        Complex4Add_prod2_re_reg <= prod2_re;
        Complex4Add_prod2_im_reg <= prod2_im;
        dinXTwdl_9_1_vld_1 <= Complex4Add_prod_vld_reg1;
        Complex4Add_prod_vld_reg1 <= prod_vld;
      END IF;
    END IF;
  END PROCESS Complex4Add_process;

  Complex4Add_multRes_re_reg_next <= (resize(Complex4Add_prod1_re_reg, 33)) - (resize(Complex4Add_prod2_re_reg, 33));
  Complex4Add_multRes_im_reg_next <= (resize(Complex4Add_prod1_im_reg, 33)) + (resize(Complex4Add_prod2_im_reg, 33));
  mulResFP_re <= Complex4Add_multRes_re_reg;
  mulResFP_im <= Complex4Add_multRes_im_reg;

  dinXTwdl_re <= mulResFP_re(29 DOWNTO 14);

  dinXTwdl_im <= mulResFP_im(29 DOWNTO 14);

  dinXTwdl_9_1_vld <= dinXTwdl_9_1_vld_1;

END rtl;


-- End of Complex4Multiply_block7.vhd --

-- Start of Complex4Multiply_block8.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\Complex4Multiply_block8.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Complex4Multiply_block8
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_SDF1_11/Complex4Multiply
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Complex4Multiply_block8 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        din_11_1_re_dly                   :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_11_1_im_dly                   :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_11_vld_dly                    :   IN    std_logic;
        twdl_11_1_re                      :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        twdl_11_1_im                      :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        dinXTwdl_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dinXTwdl_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dinXTwdl_11_1_vld                 :   OUT   std_logic
        );
END Complex4Multiply_block8;


ARCHITECTURE rtl OF Complex4Multiply_block8 IS

  -- Signals
  SIGNAL din_re_reg                       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL din_im_reg                       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twdl_re_reg                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdl_im_reg                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Complex4Multiply_din1_re_pipe1   : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_din1_im_pipe1   : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_mult1_re_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult2_re_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult1_im_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult2_im_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_twiddle_re_pipe1 : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_twiddle_im_pipe1 : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL prod1_re                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL prod1_im                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL prod2_re                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL prod2_im                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En14
  SIGNAL din_vld_dly1                     : std_logic;
  SIGNAL din_vld_dly2                     : std_logic;
  SIGNAL din_vld_dly3                     : std_logic;
  SIGNAL prod_vld                         : std_logic;
  SIGNAL Complex4Add_multRes_re_reg       : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Complex4Add_multRes_im_reg       : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Complex4Add_prod_vld_reg1        : std_logic;
  SIGNAL Complex4Add_prod1_re_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod1_im_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod2_re_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod2_im_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_multRes_re_reg_next  : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL Complex4Add_multRes_im_reg_next  : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL mulResFP_re                      : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL mulResFP_im                      : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL dinXTwdl_11_1_vld_1              : std_logic;

BEGIN
  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_re_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        din_re_reg <= din_11_1_re_dly;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_im_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        din_im_reg <= din_11_1_im_dly;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl_re_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twdl_re_reg <= twdl_11_1_re;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl_im_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twdl_im_reg <= twdl_11_1_im;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Complex4Multiply
  Complex4Multiply_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF enb = '1' THEN
        prod1_re <= Complex4Multiply_mult1_re_pipe1;
        prod2_re <= Complex4Multiply_mult2_re_pipe1;
        prod1_im <= Complex4Multiply_mult1_im_pipe1;
        prod2_im <= Complex4Multiply_mult2_im_pipe1;
        Complex4Multiply_mult1_re_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_mult2_re_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult1_im_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult2_im_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_twiddle_re_pipe1 <= twdl_re_reg;
        Complex4Multiply_twiddle_im_pipe1 <= twdl_im_reg;
        Complex4Multiply_din1_re_pipe1 <= din_re_reg;
        Complex4Multiply_din1_im_pipe1 <= din_im_reg;
      END IF;
    END IF;
  END PROCESS Complex4Multiply_process;


  intdelay_4_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly1 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly1 <= din_11_vld_dly;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;


  intdelay_5_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly2 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly2 <= din_vld_dly1;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;


  intdelay_6_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly3 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly3 <= din_vld_dly2;
      END IF;
    END IF;
  END PROCESS intdelay_6_process;


  intdelay_7_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        prod_vld <= '0';
      ELSIF enb = '1' THEN
        prod_vld <= din_vld_dly3;
      END IF;
    END IF;
  END PROCESS intdelay_7_process;


  -- Complex4Add
  Complex4Add_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Complex4Add_multRes_re_reg <= to_signed(0, 33);
        Complex4Add_multRes_im_reg <= to_signed(0, 33);
        Complex4Add_prod1_re_reg <= to_signed(0, 32);
        Complex4Add_prod1_im_reg <= to_signed(0, 32);
        Complex4Add_prod2_re_reg <= to_signed(0, 32);
        Complex4Add_prod2_im_reg <= to_signed(0, 32);
        Complex4Add_prod_vld_reg1 <= '0';
        dinXTwdl_11_1_vld_1 <= '0';
      ELSIF enb = '1' THEN
        Complex4Add_multRes_re_reg <= Complex4Add_multRes_re_reg_next;
        Complex4Add_multRes_im_reg <= Complex4Add_multRes_im_reg_next;
        Complex4Add_prod1_re_reg <= prod1_re;
        Complex4Add_prod1_im_reg <= prod1_im;
        Complex4Add_prod2_re_reg <= prod2_re;
        Complex4Add_prod2_im_reg <= prod2_im;
        dinXTwdl_11_1_vld_1 <= Complex4Add_prod_vld_reg1;
        Complex4Add_prod_vld_reg1 <= prod_vld;
      END IF;
    END IF;
  END PROCESS Complex4Add_process;

  Complex4Add_multRes_re_reg_next <= (resize(Complex4Add_prod1_re_reg, 33)) - (resize(Complex4Add_prod2_re_reg, 33));
  Complex4Add_multRes_im_reg_next <= (resize(Complex4Add_prod1_im_reg, 33)) + (resize(Complex4Add_prod2_im_reg, 33));
  mulResFP_re <= Complex4Add_multRes_re_reg;
  mulResFP_im <= Complex4Add_multRes_im_reg;

  dinXTwdl_re <= mulResFP_re(29 DOWNTO 14);

  dinXTwdl_im <= mulResFP_im(29 DOWNTO 14);

  dinXTwdl_11_1_vld <= dinXTwdl_11_1_vld_1;

END rtl;


-- End of Complex4Multiply_block8.vhd --

-- Start of Complex4Multiply_block9.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\Complex4Multiply_block9.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Complex4Multiply_block9
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_SDF1_3/Complex4Multiply
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Complex4Multiply_block9 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        din_3_1_re_dly                    :   IN    signed(31 DOWNTO 0);  -- sfix32
        din_3_1_im_dly                    :   IN    signed(31 DOWNTO 0);  -- sfix32
        din_3_vld_dly                     :   IN    std_logic;
        twdl_3_1_re                       :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
        twdl_3_1_im                       :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
        dinXTwdl_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dinXTwdl_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dinXTwdl_3_1_vld                  :   OUT   std_logic
        );
END Complex4Multiply_block9;


ARCHITECTURE rtl OF Complex4Multiply_block9 IS

  -- Signals
  SIGNAL din_re_reg                       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL din_im_reg                       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL twdl_re_reg                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twdl_im_reg                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Complex4Multiply_din1_re_pipe1   : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_din1_im_pipe1   : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult1_re_pipe1  : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64
  SIGNAL Complex4Multiply_mult2_re_pipe1  : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64
  SIGNAL Complex4Multiply_mult1_im_pipe1  : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64
  SIGNAL Complex4Multiply_mult2_im_pipe1  : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64
  SIGNAL Complex4Multiply_twiddle_re_pipe1 : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_twiddle_im_pipe1 : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL prod1_re                         : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64_En30
  SIGNAL prod1_im                         : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64_En30
  SIGNAL prod2_re                         : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64_En30
  SIGNAL prod2_im                         : signed(63 DOWNTO 0) := to_signed(0, 64);  -- sfix64_En30
  SIGNAL din_vld_dly1                     : std_logic;
  SIGNAL din_vld_dly2                     : std_logic;
  SIGNAL din_vld_dly3                     : std_logic;
  SIGNAL prod_vld                         : std_logic;
  SIGNAL Complex4Add_multRes_re_reg       : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL Complex4Add_multRes_im_reg       : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL Complex4Add_prod_vld_reg1        : std_logic;
  SIGNAL Complex4Add_prod1_re_reg         : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Complex4Add_prod1_im_reg         : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Complex4Add_prod2_re_reg         : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Complex4Add_prod2_im_reg         : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Complex4Add_multRes_re_reg_next  : signed(64 DOWNTO 0);  -- sfix65_En30
  SIGNAL Complex4Add_multRes_im_reg_next  : signed(64 DOWNTO 0);  -- sfix65_En30
  SIGNAL mulResFP_re                      : signed(64 DOWNTO 0);  -- sfix65_En30
  SIGNAL mulResFP_im                      : signed(64 DOWNTO 0);  -- sfix65_En30
  SIGNAL dinXTwdl_3_1_vld_1               : std_logic;

BEGIN
  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_re_reg <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        din_re_reg <= din_3_1_re_dly;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_im_reg <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        din_im_reg <= din_3_1_im_dly;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl_re_reg <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        twdl_re_reg <= twdl_3_1_re;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl_im_reg <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        twdl_im_reg <= twdl_3_1_im;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Complex4Multiply
  Complex4Multiply_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF enb = '1' THEN
        prod1_re <= Complex4Multiply_mult1_re_pipe1;
        prod2_re <= Complex4Multiply_mult2_re_pipe1;
        prod1_im <= Complex4Multiply_mult1_im_pipe1;
        prod2_im <= Complex4Multiply_mult2_im_pipe1;
        Complex4Multiply_mult1_re_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_mult2_re_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult1_im_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult2_im_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_twiddle_re_pipe1 <= twdl_re_reg;
        Complex4Multiply_twiddle_im_pipe1 <= twdl_im_reg;
        Complex4Multiply_din1_re_pipe1 <= din_re_reg;
        Complex4Multiply_din1_im_pipe1 <= din_im_reg;
      END IF;
    END IF;
  END PROCESS Complex4Multiply_process;


  intdelay_4_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly1 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly1 <= din_3_vld_dly;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;


  intdelay_5_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly2 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly2 <= din_vld_dly1;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;


  intdelay_6_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_vld_dly3 <= '0';
      ELSIF enb = '1' THEN
        din_vld_dly3 <= din_vld_dly2;
      END IF;
    END IF;
  END PROCESS intdelay_6_process;


  intdelay_7_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        prod_vld <= '0';
      ELSIF enb = '1' THEN
        prod_vld <= din_vld_dly3;
      END IF;
    END IF;
  END PROCESS intdelay_7_process;


  -- Complex4Add
  Complex4Add_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Complex4Add_multRes_re_reg <= to_signed(0, 65);
        Complex4Add_multRes_im_reg <= to_signed(0, 65);
        Complex4Add_prod1_re_reg <= to_signed(0, 64);
        Complex4Add_prod1_im_reg <= to_signed(0, 64);
        Complex4Add_prod2_re_reg <= to_signed(0, 64);
        Complex4Add_prod2_im_reg <= to_signed(0, 64);
        Complex4Add_prod_vld_reg1 <= '0';
        dinXTwdl_3_1_vld_1 <= '0';
      ELSIF enb = '1' THEN
        Complex4Add_multRes_re_reg <= Complex4Add_multRes_re_reg_next;
        Complex4Add_multRes_im_reg <= Complex4Add_multRes_im_reg_next;
        Complex4Add_prod1_re_reg <= prod1_re;
        Complex4Add_prod1_im_reg <= prod1_im;
        Complex4Add_prod2_re_reg <= prod2_re;
        Complex4Add_prod2_im_reg <= prod2_im;
        dinXTwdl_3_1_vld_1 <= Complex4Add_prod_vld_reg1;
        Complex4Add_prod_vld_reg1 <= prod_vld;
      END IF;
    END IF;
  END PROCESS Complex4Add_process;

  Complex4Add_multRes_re_reg_next <= (resize(Complex4Add_prod1_re_reg, 65)) - (resize(Complex4Add_prod2_re_reg, 65));
  Complex4Add_multRes_im_reg_next <= (resize(Complex4Add_prod1_im_reg, 65)) + (resize(Complex4Add_prod2_im_reg, 65));
  mulResFP_re <= Complex4Add_multRes_re_reg;
  mulResFP_im <= Complex4Add_multRes_im_reg;

  dinXTwdl_re <= mulResFP_re(61 DOWNTO 30);

  dinXTwdl_im <= mulResFP_im(61 DOWNTO 30);

  dinXTwdl_3_1_vld <= dinXTwdl_3_1_vld_1;

END rtl;


-- End of Complex4Multiply_block9.vhd --

-- Start of DSP.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\DSP.vhd
-- Created: 2025-03-18 15:26:31
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 3.2e-09
-- Target subsystem base rate: 3.2e-09
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        3.2e-09
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- OutputA                       ce_out        3.2e-09
-- OutputB                       ce_out        3.2e-09
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: DSP
-- Source Path: System_Template0x2810x29/DSP
-- Hierarchy Level: 0
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY DSP IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        InputA                            :   IN    signed(15 DOWNTO 0);  -- int16
        InputB                            :   IN    signed(15 DOWNTO 0);  -- int16
        ce_out                            :   OUT   std_logic;
        OutputA                           :   OUT   signed(15 DOWNTO 0);  -- int16
        OutputB                           :   OUT   signed(15 DOWNTO 0)  -- int16
        );
END DSP;


ARCHITECTURE rtl OF DSP IS

  -- Component Declarations
  COMPONENT FFT_HDL_Optimized
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dataIn                          :   IN    signed(15 DOWNTO 0);  -- int16
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   signed(15 DOWNTO 0);  -- int16
          dataOut_im                      :   OUT   signed(15 DOWNTO 0);  -- int16
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT FFT_HDL_Optimized1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dataIn                          :   IN    signed(15 DOWNTO 0);  -- int16
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   signed(15 DOWNTO 0);  -- int16
          dataOut_im                      :   OUT   signed(15 DOWNTO 0);  -- int16
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT IFFT_HDL_Optimized
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dataIn_re                       :   IN    signed(31 DOWNTO 0);  -- int32
          dataIn_im                       :   IN    signed(31 DOWNTO 0);  -- int32
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   signed(31 DOWNTO 0);  -- int32
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : FFT_HDL_Optimized
    USE ENTITY work.FFT_HDL_Optimized(rtl);

  FOR ALL : FFT_HDL_Optimized1
    USE ENTITY work.FFT_HDL_Optimized1(rtl);

  FOR ALL : IFFT_HDL_Optimized
    USE ENTITY work.IFFT_HDL_Optimized(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL FFT_HDL_Optimized_out1_re        : signed(15 DOWNTO 0);  -- int16
  SIGNAL FFT_HDL_Optimized_out1_im        : signed(15 DOWNTO 0);  -- int16
  SIGNAL FFT_HDL_Optimized_out2           : std_logic;
  SIGNAL Product1_C2ReIm_1_C2ReIm_A       : signed(15 DOWNTO 0);  -- int16
  SIGNAL Constant3_out1                   : std_logic;
  SIGNAL FFT_HDL_Optimized1_out1_re       : signed(15 DOWNTO 0);  -- int16
  SIGNAL FFT_HDL_Optimized1_out1_im       : signed(15 DOWNTO 0);  -- int16
  SIGNAL FFT_HDL_Optimized1_out2          : std_logic;
  SIGNAL conj_in0_im                      : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Math_Function_out1_re            : signed(15 DOWNTO 0);  -- int16
  SIGNAL Math_Function_out1_im            : signed(15 DOWNTO 0);  -- int16
  SIGNAL Product1_C2ReIm_2_C2ReIm_A       : signed(15 DOWNTO 0);  -- int16
  SIGNAL Product1_Re_AC                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL HwModeRegister_reg               : vector_of_signed32(0 TO 2);  -- sfix32 [3]
  SIGNAL Product1_Re_AC_1                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL reduced_reg                      : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL Product1_C2ReIm_1_C2ReIm_B       : signed(15 DOWNTO 0);  -- int16
  SIGNAL Product1_C2ReIm_2_C2ReIm_B       : signed(15 DOWNTO 0);  -- int16
  SIGNAL reduced_reg_1                    : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL Product1_C2ReIm_2_C2ReIm_B_1     : signed(15 DOWNTO 0);  -- int16
  SIGNAL mulOutput                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL mulOutput_1                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL mulOutput_2                      : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Product1_Im_AD                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL HwModeRegister_reg_1             : vector_of_signed32(0 TO 2);  -- sfix32 [3]
  SIGNAL Product1_Im_AD_1                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL reduced_reg_2                    : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL Product1_C2ReIm_2_C2ReIm_A_1     : signed(15 DOWNTO 0);  -- int16
  SIGNAL mulOutput_3                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL mulOutput_4                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL mulOutput_5                      : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL mulOutput_6                      : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL mulOutput_7                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL mulOutput_8                      : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL mulOutput_9                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL delayMatch4_reg                  : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL Logical_Operator_out1_1          : std_logic;
  SIGNAL IFFT_HDL_Optimized_out1_re       : signed(31 DOWNTO 0);  -- int32
  SIGNAL IFFT_HDL_Optimized_out2          : std_logic;
  SIGNAL Data_Type_Conversion_out1        : signed(15 DOWNTO 0);  -- int16
  SIGNAL HDL_Counter_ctrl_const_out       : std_logic;
  SIGNAL HDL_Counter_ctrl_delay_out       : std_logic;
  SIGNAL HDL_Counter_out1                 : signed(15 DOWNTO 0);  -- int16
  SIGNAL count                            : signed(15 DOWNTO 0);  -- int16
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : signed(15 DOWNTO 0);  -- int16
  SIGNAL count_1                          : signed(15 DOWNTO 0);  -- int16
  SIGNAL HDL_Counter_out                  : signed(15 DOWNTO 0);  -- int16

  ATTRIBUTE use_dsp : string;

  ATTRIBUTE use_dsp OF mulOutput : SIGNAL IS "yes";
  ATTRIBUTE use_dsp OF mulOutput_3 : SIGNAL IS "yes";

BEGIN
  u_FFT_HDL_Optimized : FFT_HDL_Optimized
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => clk_enable,
              enb_1_1_1 => clk_enable,
              dataIn => InputA,  -- int16
              validIn => Constant_out1,
              dataOut_re => FFT_HDL_Optimized_out1_re,  -- int16
              dataOut_im => FFT_HDL_Optimized_out1_im,  -- int16
              validOut => FFT_HDL_Optimized_out2
              );

  u_FFT_HDL_Optimized1 : FFT_HDL_Optimized1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => clk_enable,
              enb_1_1_1 => clk_enable,
              dataIn => InputB,  -- int16
              validIn => Constant3_out1,
              dataOut_re => FFT_HDL_Optimized1_out1_re,  -- int16
              dataOut_im => FFT_HDL_Optimized1_out1_im,  -- int16
              validOut => FFT_HDL_Optimized1_out2
              );

  u_IFFT_HDL_Optimized : IFFT_HDL_Optimized
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => clk_enable,
              enb_1_1_1 => clk_enable,
              dataIn_re => mulOutput_7,  -- int32
              dataIn_im => mulOutput_9,  -- int32
              validIn => Logical_Operator_out1_1,
              dataOut_re => IFFT_HDL_Optimized_out1_re,  -- int32
              validOut => IFFT_HDL_Optimized_out2
              );

  Constant_out1 <= '1';

  enb <= clk_enable;

  reduced_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Product1_C2ReIm_1_C2ReIm_A <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Product1_C2ReIm_1_C2ReIm_A <= FFT_HDL_Optimized_out1_re;
      END IF;
    END IF;
  END PROCESS reduced_process;


  Constant3_out1 <= '1';

  Math_Function_out1_re <= FFT_HDL_Optimized1_out1_re;
  conj_in0_im <=  - (resize(FFT_HDL_Optimized1_out1_im, 17));
  
  Math_Function_out1_im <= X"7FFF" WHEN (conj_in0_im(16) = '0') AND (conj_in0_im(15) /= '0') ELSE
      X"8000" WHEN (conj_in0_im(16) = '1') AND (conj_in0_im(15) /= '1') ELSE
      conj_in0_im(15 DOWNTO 0);

  reduced_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Product1_C2ReIm_2_C2ReIm_A <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Product1_C2ReIm_2_C2ReIm_A <= Math_Function_out1_re;
      END IF;
    END IF;
  END PROCESS reduced_1_process;


  Product1_Re_AC <= Product1_C2ReIm_1_C2ReIm_A * Product1_C2ReIm_2_C2ReIm_A;

  HwModeRegister_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        HwModeRegister_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        HwModeRegister_reg(0) <= Product1_Re_AC;
        HwModeRegister_reg(1 TO 2) <= HwModeRegister_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;

  Product1_Re_AC_1 <= HwModeRegister_reg(2);

  reduced_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        reduced_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        reduced_reg(0) <= FFT_HDL_Optimized_out1_im;
        reduced_reg(1 TO 2) <= reduced_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS reduced_2_process;

  Product1_C2ReIm_1_C2ReIm_B <= reduced_reg(2);

  reduced_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Product1_C2ReIm_2_C2ReIm_B <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Product1_C2ReIm_2_C2ReIm_B <= Math_Function_out1_im;
      END IF;
    END IF;
  END PROCESS reduced_3_process;


  reduced_4_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        reduced_reg_1 <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        reduced_reg_1(0) <= Product1_C2ReIm_2_C2ReIm_B;
        reduced_reg_1(1) <= reduced_reg_1(0);
      END IF;
    END IF;
  END PROCESS reduced_4_process;

  Product1_C2ReIm_2_C2ReIm_B_1 <= reduced_reg_1(1);

  mulOutput <= Product1_C2ReIm_1_C2ReIm_B * Product1_C2ReIm_2_C2ReIm_B_1;

  HwModeRegister_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        mulOutput_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        mulOutput_1 <= mulOutput;
      END IF;
    END IF;
  END PROCESS HwModeRegister_1_process;


  mulOutput_2 <= resize(Product1_Re_AC_1, 33) - resize(mulOutput_1, 33);

  Product1_Im_AD <= Product1_C2ReIm_1_C2ReIm_A * Product1_C2ReIm_2_C2ReIm_B;

  HwModeRegister_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        HwModeRegister_reg_1 <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        HwModeRegister_reg_1(0) <= Product1_Im_AD;
        HwModeRegister_reg_1(1 TO 2) <= HwModeRegister_reg_1(0 TO 1);
      END IF;
    END IF;
  END PROCESS HwModeRegister_2_process;

  Product1_Im_AD_1 <= HwModeRegister_reg_1(2);

  reduced_5_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        reduced_reg_2 <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        reduced_reg_2(0) <= Product1_C2ReIm_2_C2ReIm_A;
        reduced_reg_2(1) <= reduced_reg_2(0);
      END IF;
    END IF;
  END PROCESS reduced_5_process;

  Product1_C2ReIm_2_C2ReIm_A_1 <= reduced_reg_2(1);

  mulOutput_3 <= Product1_C2ReIm_1_C2ReIm_B * Product1_C2ReIm_2_C2ReIm_A_1;

  HwModeRegister_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        mulOutput_4 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        mulOutput_4 <= mulOutput_3;
      END IF;
    END IF;
  END PROCESS HwModeRegister_3_process;


  mulOutput_5 <= resize(Product1_Im_AD_1, 33) + resize(mulOutput_4, 33);

  HwModeRegister_4_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        mulOutput_6 <= to_signed(0, 33);
      ELSIF enb = '1' THEN
        mulOutput_6 <= mulOutput_2;
      END IF;
    END IF;
  END PROCESS HwModeRegister_4_process;


  mulOutput_7 <= mulOutput_6(31 DOWNTO 0);

  HwModeRegister_5_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        mulOutput_8 <= to_signed(0, 33);
      ELSIF enb = '1' THEN
        mulOutput_8 <= mulOutput_5;
      END IF;
    END IF;
  END PROCESS HwModeRegister_5_process;


  mulOutput_9 <= mulOutput_8(31 DOWNTO 0);

  Logical_Operator_out1 <= FFT_HDL_Optimized_out2 AND FFT_HDL_Optimized1_out2;

  delayMatch4_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        delayMatch4_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch4_reg(0) <= Logical_Operator_out1;
        delayMatch4_reg(4 DOWNTO 1) <= delayMatch4_reg(3 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch4_process;

  Logical_Operator_out1_1 <= delayMatch4_reg(4);

  Data_Type_Conversion_out1 <= IFFT_HDL_Optimized_out1_re(15 DOWNTO 0);

  HDL_Counter_ctrl_const_out <= '1';

  HDL_Counter_ctrl_delay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        HDL_Counter_ctrl_delay_out <= '0';
      ELSIF enb = '1' THEN
        HDL_Counter_ctrl_delay_out <= HDL_Counter_ctrl_const_out;
      END IF;
    END IF;
  END PROCESS HDL_Counter_ctrl_delay_process;


  -- Count limited, Signed Counter
  --  initial value   = 4095
  --  step value      = -1
  --  count to value  = 0
  count <= HDL_Counter_out1 - to_signed(16#0001#, 16);

  
  need_to_wrap <= '1' WHEN HDL_Counter_out1 = to_signed(16#0000#, 16) ELSE
      '0';

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      to_signed(16#0FFF#, 16);

  
  count_1 <= HDL_Counter_out1 WHEN IFFT_HDL_Optimized_out2 = '0' ELSE
      count_value;

  HDL_Counter_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        HDL_Counter_out <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        HDL_Counter_out <= count_1;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  
  HDL_Counter_out1 <= to_signed(16#0FFF#, 16) WHEN HDL_Counter_ctrl_delay_out = '0' ELSE
      HDL_Counter_out;

  ce_out <= clk_enable;

  OutputA <= Data_Type_Conversion_out1;

  OutputB <= HDL_Counter_out1;

END rtl;


-- End of DSP.vhd --

-- Start of FFT_HDL_Optimized.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\FFT_HDL_Optimized.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: FFT_HDL_Optimized
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized
-- Hierarchy Level: 1
-- Model version: 2.46
-- 
-- FFT
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY FFT_HDL_Optimized IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dataIn                            :   IN    signed(15 DOWNTO 0);  -- int16
        validIn                           :   IN    std_logic;
        dataOut_re                        :   OUT   signed(15 DOWNTO 0);  -- int16
        dataOut_im                        :   OUT   signed(15 DOWNTO 0);  -- int16
        validOut                          :   OUT   std_logic
        );
END FFT_HDL_Optimized;


ARCHITECTURE rtl OF FFT_HDL_Optimized IS

  -- Component Declarations
  COMPONENT RADIX22FFT_CTRL1_1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinXTwdl_1_1_vld                :   IN    std_logic;
          dinXTwdl_1_1_vld_1              :   IN    std_logic;
          rd_1_Addr                       :   OUT   unsigned(10 DOWNTO 0);  -- ufix11
          rd_1_Enb                        :   OUT   std_logic;
          proc_1_enb                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF1_1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_1_1_re_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_1_1_im_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_1_vld_dly                   :   IN    std_logic;
          rd_1_Addr                       :   IN    unsigned(10 DOWNTO 0);  -- ufix11
          rd_1_Enb                        :   IN    std_logic;
          proc_1_enb                      :   IN    std_logic;
          dout_1_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_1_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_1_1_vld                    :   OUT   std_logic;
          dinXTwdl_1_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_2
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_1_1_vld                    :   IN    std_logic;
          dinXTwdl_2_1_vld                :   IN    std_logic;
          rd_2_Addr                       :   OUT   unsigned(9 DOWNTO 0);  -- ufix10
          rd_2_Enb                        :   OUT   std_logic;
          proc_2_enb                      :   OUT   std_logic;
          multiply_2_J                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF2_2
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_1_1_re                     :   IN    signed(15 DOWNTO 0);  -- sfix16
          dout_1_1_im                     :   IN    signed(15 DOWNTO 0);  -- sfix16
          dout_1_1_vld                    :   IN    std_logic;
          rd_2_Addr                       :   IN    unsigned(9 DOWNTO 0);  -- ufix10
          rd_2_Enb                        :   IN    std_logic;
          proc_2_enb                      :   IN    std_logic;
          multiply_2_J                    :   IN    std_logic;
          dout_2_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_2_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_2_1_vld                    :   OUT   std_logic;
          dinXTwdl_2_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT TWDLROM_3_1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_2_1_vld                    :   IN    std_logic;
          twdl_3_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_3_1_im                     :   OUT   signed(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_3
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinXTwdl_3_1_vld                :   IN    std_logic;
          dinXTwdl_3_1_vld_1              :   IN    std_logic;
          rd_3_Addr                       :   OUT   unsigned(8 DOWNTO 0);  -- ufix9
          rd_3_Enb                        :   OUT   std_logic;
          proc_3_enb                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF1_3
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_3_1_re_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_3_1_im_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_3_vld_dly                   :   IN    std_logic;
          rd_3_Addr                       :   IN    unsigned(8 DOWNTO 0);  -- ufix9
          rd_3_Enb                        :   IN    std_logic;
          twdl_3_1_re                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_3_1_im                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          proc_3_enb                      :   IN    std_logic;
          dout_3_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_3_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_3_1_vld                    :   OUT   std_logic;
          dinXTwdl_3_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_4
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_3_1_vld                    :   IN    std_logic;
          dinXTwdl_4_1_vld                :   IN    std_logic;
          rd_4_Addr                       :   OUT   unsigned(7 DOWNTO 0);  -- ufix8
          rd_4_Enb                        :   OUT   std_logic;
          proc_4_enb                      :   OUT   std_logic;
          multiply_4_J                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF2_4
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_3_1_re                     :   IN    signed(15 DOWNTO 0);  -- sfix16
          dout_3_1_im                     :   IN    signed(15 DOWNTO 0);  -- sfix16
          dout_3_1_vld                    :   IN    std_logic;
          rd_4_Addr                       :   IN    unsigned(7 DOWNTO 0);  -- ufix8
          rd_4_Enb                        :   IN    std_logic;
          proc_4_enb                      :   IN    std_logic;
          multiply_4_J                    :   IN    std_logic;
          dout_4_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_4_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_4_1_vld                    :   OUT   std_logic;
          dinXTwdl_4_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT TWDLROM_5_1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_4_1_vld                    :   IN    std_logic;
          twdl_5_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_5_1_im                     :   OUT   signed(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_5
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinXTwdl_5_1_vld                :   IN    std_logic;
          dinXTwdl_5_1_vld_1              :   IN    std_logic;
          rd_5_Addr                       :   OUT   unsigned(6 DOWNTO 0);  -- ufix7
          rd_5_Enb                        :   OUT   std_logic;
          proc_5_enb                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF1_5
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_5_1_re_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_5_1_im_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_5_vld_dly                   :   IN    std_logic;
          rd_5_Addr                       :   IN    unsigned(6 DOWNTO 0);  -- ufix7
          rd_5_Enb                        :   IN    std_logic;
          twdl_5_1_re                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_5_1_im                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          proc_5_enb                      :   IN    std_logic;
          dout_5_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_5_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_5_1_vld                    :   OUT   std_logic;
          dinXTwdl_5_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_6
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_5_1_vld                    :   IN    std_logic;
          dinXTwdl_6_1_vld                :   IN    std_logic;
          rd_6_Addr                       :   OUT   unsigned(5 DOWNTO 0);  -- ufix6
          rd_6_Enb                        :   OUT   std_logic;
          proc_6_enb                      :   OUT   std_logic;
          multiply_6_J                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF2_6
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_5_1_re                     :   IN    signed(15 DOWNTO 0);  -- sfix16
          dout_5_1_im                     :   IN    signed(15 DOWNTO 0);  -- sfix16
          dout_5_1_vld                    :   IN    std_logic;
          rd_6_Addr                       :   IN    unsigned(5 DOWNTO 0);  -- ufix6
          rd_6_Enb                        :   IN    std_logic;
          proc_6_enb                      :   IN    std_logic;
          multiply_6_J                    :   IN    std_logic;
          dout_6_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_6_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_6_1_vld                    :   OUT   std_logic;
          dinXTwdl_6_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT TWDLROM_7_1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_6_1_vld                    :   IN    std_logic;
          twdl_7_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_7_1_im                     :   OUT   signed(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_7
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinXTwdl_7_1_vld                :   IN    std_logic;
          dinXTwdl_7_1_vld_1              :   IN    std_logic;
          rd_7_Addr                       :   OUT   unsigned(4 DOWNTO 0);  -- ufix5
          rd_7_Enb                        :   OUT   std_logic;
          proc_7_enb                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF1_7
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_7_1_re_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_7_1_im_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_7_vld_dly                   :   IN    std_logic;
          rd_7_Addr                       :   IN    unsigned(4 DOWNTO 0);  -- ufix5
          rd_7_Enb                        :   IN    std_logic;
          twdl_7_1_re                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_7_1_im                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          proc_7_enb                      :   IN    std_logic;
          dout_7_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_7_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_7_1_vld                    :   OUT   std_logic;
          dinXTwdl_7_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_8
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_7_1_vld                    :   IN    std_logic;
          dinXTwdl_8_1_vld                :   IN    std_logic;
          rd_8_Addr                       :   OUT   unsigned(3 DOWNTO 0);  -- ufix4
          rd_8_Enb                        :   OUT   std_logic;
          proc_8_enb                      :   OUT   std_logic;
          multiply_8_J                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF2_8
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_7_1_re                     :   IN    signed(15 DOWNTO 0);  -- sfix16
          dout_7_1_im                     :   IN    signed(15 DOWNTO 0);  -- sfix16
          dout_7_1_vld                    :   IN    std_logic;
          rd_8_Addr                       :   IN    unsigned(3 DOWNTO 0);  -- ufix4
          rd_8_Enb                        :   IN    std_logic;
          proc_8_enb                      :   IN    std_logic;
          multiply_8_J                    :   IN    std_logic;
          dout_8_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_8_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_8_1_vld                    :   OUT   std_logic;
          dinXTwdl_8_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT TWDLROM_9_1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_8_1_vld                    :   IN    std_logic;
          twdl_9_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_9_1_im                     :   OUT   signed(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_9
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinXTwdl_9_1_vld                :   IN    std_logic;
          dinXTwdl_9_1_vld_1              :   IN    std_logic;
          rd_9_Addr                       :   OUT   unsigned(2 DOWNTO 0);  -- ufix3
          rd_9_Enb                        :   OUT   std_logic;
          proc_9_enb                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF1_9
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_9_1_re_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_9_1_im_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_9_vld_dly                   :   IN    std_logic;
          rd_9_Addr                       :   IN    unsigned(2 DOWNTO 0);  -- ufix3
          rd_9_Enb                        :   IN    std_logic;
          twdl_9_1_re                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_9_1_im                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          proc_9_enb                      :   IN    std_logic;
          dout_9_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_9_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_9_1_vld                    :   OUT   std_logic;
          dinXTwdl_9_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_10
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_9_1_vld                    :   IN    std_logic;
          dinXTwdl_10_1_vld               :   IN    std_logic;
          rd_10_Addr                      :   OUT   unsigned(1 DOWNTO 0);  -- ufix2
          rd_10_Enb                       :   OUT   std_logic;
          proc_10_enb                     :   OUT   std_logic;
          multiply_10_J                   :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF2_10
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_9_1_re                     :   IN    signed(15 DOWNTO 0);  -- sfix16
          dout_9_1_im                     :   IN    signed(15 DOWNTO 0);  -- sfix16
          dout_9_1_vld                    :   IN    std_logic;
          rd_10_Addr                      :   IN    unsigned(1 DOWNTO 0);  -- ufix2
          rd_10_Enb                       :   IN    std_logic;
          proc_10_enb                     :   IN    std_logic;
          multiply_10_J                   :   IN    std_logic;
          dout_10_1_re                    :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_10_1_im                    :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_10_1_vld                   :   OUT   std_logic;
          dinXTwdl_10_1_vld               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT TWDLROM_11_1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_10_1_vld                   :   IN    std_logic;
          twdl_11_1_re                    :   OUT   signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_11_1_im                    :   OUT   signed(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_11
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinXTwdl_11_1_vld               :   IN    std_logic;
          dinXTwdl_11_1_vld_1             :   IN    std_logic;
          rd_11_Addr                      :   OUT   std_logic;  -- ufix1
          rd_11_Enb                       :   OUT   std_logic;
          proc_11_enb                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF1_11
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_11_1_re_dly                 :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_11_1_im_dly                 :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_11_vld_dly                  :   IN    std_logic;
          rd_11_Addr                      :   IN    std_logic;  -- ufix1
          rd_11_Enb                       :   IN    std_logic;
          twdl_11_1_re                    :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_11_1_im                    :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          proc_11_enb                     :   IN    std_logic;
          dout_11_1_re                    :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_11_1_im                    :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_11_1_vld                   :   OUT   std_logic;
          dinXTwdl_11_1_vld               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_12
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_11_1_vld                   :   IN    std_logic;
          dinXTwdl_12_1_vld               :   IN    std_logic;
          rd_12_Addr                      :   OUT   std_logic;
          rd_12_Enb                       :   OUT   std_logic;
          proc_12_enb                     :   OUT   std_logic;
          multiply_12_J                   :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF2_12
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_11_1_re                    :   IN    signed(15 DOWNTO 0);  -- sfix16
          dout_11_1_im                    :   IN    signed(15 DOWNTO 0);  -- sfix16
          dout_11_1_vld                   :   IN    std_logic;
          rd_12_Addr                      :   IN    std_logic;
          rd_12_Enb                       :   IN    std_logic;
          proc_12_enb                     :   IN    std_logic;
          multiply_12_J                   :   IN    std_logic;
          dout_12_1_re                    :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_12_1_im                    :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_12_1_vld                   :   OUT   std_logic;
          dinXTwdl_12_1_vld               :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : RADIX22FFT_CTRL1_1
    USE ENTITY work.RADIX22FFT_CTRL1_1(rtl);

  FOR ALL : RADIX22FFT_SDF1_1
    USE ENTITY work.RADIX22FFT_SDF1_1(rtl);

  FOR ALL : RADIX22FFT_CTRL1_2
    USE ENTITY work.RADIX22FFT_CTRL1_2(rtl);

  FOR ALL : RADIX22FFT_SDF2_2
    USE ENTITY work.RADIX22FFT_SDF2_2(rtl);

  FOR ALL : TWDLROM_3_1
    USE ENTITY work.TWDLROM_3_1(rtl);

  FOR ALL : RADIX22FFT_CTRL1_3
    USE ENTITY work.RADIX22FFT_CTRL1_3(rtl);

  FOR ALL : RADIX22FFT_SDF1_3
    USE ENTITY work.RADIX22FFT_SDF1_3(rtl);

  FOR ALL : RADIX22FFT_CTRL1_4
    USE ENTITY work.RADIX22FFT_CTRL1_4(rtl);

  FOR ALL : RADIX22FFT_SDF2_4
    USE ENTITY work.RADIX22FFT_SDF2_4(rtl);

  FOR ALL : TWDLROM_5_1
    USE ENTITY work.TWDLROM_5_1(rtl);

  FOR ALL : RADIX22FFT_CTRL1_5
    USE ENTITY work.RADIX22FFT_CTRL1_5(rtl);

  FOR ALL : RADIX22FFT_SDF1_5
    USE ENTITY work.RADIX22FFT_SDF1_5(rtl);

  FOR ALL : RADIX22FFT_CTRL1_6
    USE ENTITY work.RADIX22FFT_CTRL1_6(rtl);

  FOR ALL : RADIX22FFT_SDF2_6
    USE ENTITY work.RADIX22FFT_SDF2_6(rtl);

  FOR ALL : TWDLROM_7_1
    USE ENTITY work.TWDLROM_7_1(rtl);

  FOR ALL : RADIX22FFT_CTRL1_7
    USE ENTITY work.RADIX22FFT_CTRL1_7(rtl);

  FOR ALL : RADIX22FFT_SDF1_7
    USE ENTITY work.RADIX22FFT_SDF1_7(rtl);

  FOR ALL : RADIX22FFT_CTRL1_8
    USE ENTITY work.RADIX22FFT_CTRL1_8(rtl);

  FOR ALL : RADIX22FFT_SDF2_8
    USE ENTITY work.RADIX22FFT_SDF2_8(rtl);

  FOR ALL : TWDLROM_9_1
    USE ENTITY work.TWDLROM_9_1(rtl);

  FOR ALL : RADIX22FFT_CTRL1_9
    USE ENTITY work.RADIX22FFT_CTRL1_9(rtl);

  FOR ALL : RADIX22FFT_SDF1_9
    USE ENTITY work.RADIX22FFT_SDF1_9(rtl);

  FOR ALL : RADIX22FFT_CTRL1_10
    USE ENTITY work.RADIX22FFT_CTRL1_10(rtl);

  FOR ALL : RADIX22FFT_SDF2_10
    USE ENTITY work.RADIX22FFT_SDF2_10(rtl);

  FOR ALL : TWDLROM_11_1
    USE ENTITY work.TWDLROM_11_1(rtl);

  FOR ALL : RADIX22FFT_CTRL1_11
    USE ENTITY work.RADIX22FFT_CTRL1_11(rtl);

  FOR ALL : RADIX22FFT_SDF1_11
    USE ENTITY work.RADIX22FFT_SDF1_11(rtl);

  FOR ALL : RADIX22FFT_CTRL1_12
    USE ENTITY work.RADIX22FFT_CTRL1_12(rtl);

  FOR ALL : RADIX22FFT_SDF2_12
    USE ENTITY work.RADIX22FFT_SDF2_12(rtl);

  -- Signals
  SIGNAL softReset                        : std_logic;
  SIGNAL dtc_re                           : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL intdelay_reg                     : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL din_1_1_re_dly                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dtc_im                           : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL intdelay_reg_1                   : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL din_1_1_im_dly                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL intdelay_reg_2                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL din_1_vld_dly                    : std_logic;
  SIGNAL dinXTwdl_1_1_vld                 : std_logic;
  SIGNAL rd_1_Addr                        : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL rd_1_Enb                         : std_logic;
  SIGNAL proc_1_enb                       : std_logic;
  SIGNAL dout_1_1_re                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_1_1_im                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_1_1_vld                     : std_logic;
  SIGNAL dinXTwdl_2_1_vld                 : std_logic;
  SIGNAL rd_2_Addr                        : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL rd_2_Enb                         : std_logic;
  SIGNAL proc_2_enb                       : std_logic;
  SIGNAL multiply_2_J                     : std_logic;
  SIGNAL dout_2_1_re                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_2_1_im                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_2_1_vld                     : std_logic;
  SIGNAL intdelay_reg_3                   : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL din_3_1_re_dly                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL intdelay_reg_4                   : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL din_3_1_im_dly                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL intdelay_reg_5                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL din_3_vld_dly                    : std_logic;
  SIGNAL twdl_3_1_re                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdl_3_1_im                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dinXTwdl_3_1_vld                 : std_logic;
  SIGNAL rd_3_Addr                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL rd_3_Enb                         : std_logic;
  SIGNAL proc_3_enb                       : std_logic;
  SIGNAL dout_3_1_re                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_3_1_im                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_3_1_vld                     : std_logic;
  SIGNAL dinXTwdl_4_1_vld                 : std_logic;
  SIGNAL rd_4_Addr                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_4_Enb                         : std_logic;
  SIGNAL proc_4_enb                       : std_logic;
  SIGNAL multiply_4_J                     : std_logic;
  SIGNAL dout_4_1_re                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_4_1_im                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_4_1_vld                     : std_logic;
  SIGNAL intdelay_reg_6                   : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL din_5_1_re_dly                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL intdelay_reg_7                   : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL din_5_1_im_dly                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL intdelay_reg_8                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL din_5_vld_dly                    : std_logic;
  SIGNAL twdl_5_1_re                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdl_5_1_im                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dinXTwdl_5_1_vld                 : std_logic;
  SIGNAL rd_5_Addr                        : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL rd_5_Enb                         : std_logic;
  SIGNAL proc_5_enb                       : std_logic;
  SIGNAL dout_5_1_re                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_5_1_im                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_5_1_vld                     : std_logic;
  SIGNAL dinXTwdl_6_1_vld                 : std_logic;
  SIGNAL rd_6_Addr                        : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL rd_6_Enb                         : std_logic;
  SIGNAL proc_6_enb                       : std_logic;
  SIGNAL multiply_6_J                     : std_logic;
  SIGNAL dout_6_1_re                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_6_1_im                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_6_1_vld                     : std_logic;
  SIGNAL intdelay_reg_9                   : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL din_7_1_re_dly                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL intdelay_reg_10                  : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL din_7_1_im_dly                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL intdelay_reg_11                  : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL din_7_vld_dly                    : std_logic;
  SIGNAL twdl_7_1_re                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdl_7_1_im                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dinXTwdl_7_1_vld                 : std_logic;
  SIGNAL rd_7_Addr                        : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL rd_7_Enb                         : std_logic;
  SIGNAL proc_7_enb                       : std_logic;
  SIGNAL dout_7_1_re                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_7_1_im                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_7_1_vld                     : std_logic;
  SIGNAL dinXTwdl_8_1_vld                 : std_logic;
  SIGNAL rd_8_Addr                        : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL rd_8_Enb                         : std_logic;
  SIGNAL proc_8_enb                       : std_logic;
  SIGNAL multiply_8_J                     : std_logic;
  SIGNAL dout_8_1_re                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_8_1_im                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_8_1_vld                     : std_logic;
  SIGNAL intdelay_reg_12                  : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL din_9_1_re_dly                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL intdelay_reg_13                  : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL din_9_1_im_dly                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL intdelay_reg_14                  : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL din_9_vld_dly                    : std_logic;
  SIGNAL twdl_9_1_re                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdl_9_1_im                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dinXTwdl_9_1_vld                 : std_logic;
  SIGNAL rd_9_Addr                        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL rd_9_Enb                         : std_logic;
  SIGNAL proc_9_enb                       : std_logic;
  SIGNAL dout_9_1_re                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_9_1_im                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_9_1_vld                     : std_logic;
  SIGNAL dinXTwdl_10_1_vld                : std_logic;
  SIGNAL rd_10_Addr                       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL rd_10_Enb                        : std_logic;
  SIGNAL proc_10_enb                      : std_logic;
  SIGNAL multiply_10_J                    : std_logic;
  SIGNAL dout_10_1_re                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_10_1_im                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_10_1_vld                    : std_logic;
  SIGNAL intdelay_reg_15                  : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL din_11_1_re_dly                  : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL intdelay_reg_16                  : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL din_11_1_im_dly                  : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL intdelay_reg_17                  : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL din_11_vld_dly                   : std_logic;
  SIGNAL twdl_11_1_re                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdl_11_1_im                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dinXTwdl_11_1_vld                : std_logic;
  SIGNAL rd_11_Addr                       : std_logic;  -- ufix1
  SIGNAL rd_11_Enb                        : std_logic;
  SIGNAL proc_11_enb                      : std_logic;
  SIGNAL dout_11_1_re                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_11_1_im                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_11_1_vld                    : std_logic;
  SIGNAL dinXTwdl_12_1_vld                : std_logic;
  SIGNAL rd_12_Addr                       : std_logic;
  SIGNAL rd_12_Enb                        : std_logic;
  SIGNAL proc_12_enb                      : std_logic;
  SIGNAL multiply_12_J                    : std_logic;
  SIGNAL dout_12_1_re                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_12_1_im                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_12_1_vld                    : std_logic;

BEGIN
  u_CTRL1_1_1 : RADIX22FFT_CTRL1_1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dinXTwdl_1_1_vld => dinXTwdl_1_1_vld,
              dinXTwdl_1_1_vld_1 => dinXTwdl_1_1_vld,
              rd_1_Addr => rd_1_Addr,  -- ufix11
              rd_1_Enb => rd_1_Enb,
              proc_1_enb => proc_1_enb
              );

  u_SDF1_1_1 : RADIX22FFT_SDF1_1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_1_1_re_dly => din_1_1_re_dly,  -- sfix16
              din_1_1_im_dly => din_1_1_im_dly,  -- sfix16
              din_1_vld_dly => din_1_vld_dly,
              rd_1_Addr => rd_1_Addr,  -- ufix11
              rd_1_Enb => rd_1_Enb,
              proc_1_enb => proc_1_enb,
              dout_1_1_re => dout_1_1_re,  -- sfix16
              dout_1_1_im => dout_1_1_im,  -- sfix16
              dout_1_1_vld => dout_1_1_vld,
              dinXTwdl_1_1_vld => dinXTwdl_1_1_vld
              );

  u_CTRL2_2_1 : RADIX22FFT_CTRL1_2
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_1_1_vld => dout_1_1_vld,
              dinXTwdl_2_1_vld => dinXTwdl_2_1_vld,
              rd_2_Addr => rd_2_Addr,  -- ufix10
              rd_2_Enb => rd_2_Enb,
              proc_2_enb => proc_2_enb,
              multiply_2_J => multiply_2_J
              );

  u_SDF2_2_1 : RADIX22FFT_SDF2_2
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_1_1_re => dout_1_1_re,  -- sfix16
              dout_1_1_im => dout_1_1_im,  -- sfix16
              dout_1_1_vld => dout_1_1_vld,
              rd_2_Addr => rd_2_Addr,  -- ufix10
              rd_2_Enb => rd_2_Enb,
              proc_2_enb => proc_2_enb,
              multiply_2_J => multiply_2_J,
              dout_2_1_re => dout_2_1_re,  -- sfix16
              dout_2_1_im => dout_2_1_im,  -- sfix16
              dout_2_1_vld => dout_2_1_vld,
              dinXTwdl_2_1_vld => dinXTwdl_2_1_vld
              );

  u_twdlROM_3_1 : TWDLROM_3_1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_2_1_vld => dout_2_1_vld,
              twdl_3_1_re => twdl_3_1_re,  -- sfix16_En14
              twdl_3_1_im => twdl_3_1_im  -- sfix16_En14
              );

  u_CTRL1_3_1 : RADIX22FFT_CTRL1_3
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dinXTwdl_3_1_vld => dinXTwdl_3_1_vld,
              dinXTwdl_3_1_vld_1 => dinXTwdl_3_1_vld,
              rd_3_Addr => rd_3_Addr,  -- ufix9
              rd_3_Enb => rd_3_Enb,
              proc_3_enb => proc_3_enb
              );

  u_SDF1_3_1 : RADIX22FFT_SDF1_3
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_3_1_re_dly => din_3_1_re_dly,  -- sfix16
              din_3_1_im_dly => din_3_1_im_dly,  -- sfix16
              din_3_vld_dly => din_3_vld_dly,
              rd_3_Addr => rd_3_Addr,  -- ufix9
              rd_3_Enb => rd_3_Enb,
              twdl_3_1_re => twdl_3_1_re,  -- sfix16_En14
              twdl_3_1_im => twdl_3_1_im,  -- sfix16_En14
              proc_3_enb => proc_3_enb,
              dout_3_1_re => dout_3_1_re,  -- sfix16
              dout_3_1_im => dout_3_1_im,  -- sfix16
              dout_3_1_vld => dout_3_1_vld,
              dinXTwdl_3_1_vld => dinXTwdl_3_1_vld
              );

  u_CTRL2_4_1 : RADIX22FFT_CTRL1_4
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_3_1_vld => dout_3_1_vld,
              dinXTwdl_4_1_vld => dinXTwdl_4_1_vld,
              rd_4_Addr => rd_4_Addr,  -- ufix8
              rd_4_Enb => rd_4_Enb,
              proc_4_enb => proc_4_enb,
              multiply_4_J => multiply_4_J
              );

  u_SDF2_4_1 : RADIX22FFT_SDF2_4
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_3_1_re => dout_3_1_re,  -- sfix16
              dout_3_1_im => dout_3_1_im,  -- sfix16
              dout_3_1_vld => dout_3_1_vld,
              rd_4_Addr => rd_4_Addr,  -- ufix8
              rd_4_Enb => rd_4_Enb,
              proc_4_enb => proc_4_enb,
              multiply_4_J => multiply_4_J,
              dout_4_1_re => dout_4_1_re,  -- sfix16
              dout_4_1_im => dout_4_1_im,  -- sfix16
              dout_4_1_vld => dout_4_1_vld,
              dinXTwdl_4_1_vld => dinXTwdl_4_1_vld
              );

  u_twdlROM_5_1 : TWDLROM_5_1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_4_1_vld => dout_4_1_vld,
              twdl_5_1_re => twdl_5_1_re,  -- sfix16_En14
              twdl_5_1_im => twdl_5_1_im  -- sfix16_En14
              );

  u_CTRL1_5_1 : RADIX22FFT_CTRL1_5
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dinXTwdl_5_1_vld => dinXTwdl_5_1_vld,
              dinXTwdl_5_1_vld_1 => dinXTwdl_5_1_vld,
              rd_5_Addr => rd_5_Addr,  -- ufix7
              rd_5_Enb => rd_5_Enb,
              proc_5_enb => proc_5_enb
              );

  u_SDF1_5_1 : RADIX22FFT_SDF1_5
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_5_1_re_dly => din_5_1_re_dly,  -- sfix16
              din_5_1_im_dly => din_5_1_im_dly,  -- sfix16
              din_5_vld_dly => din_5_vld_dly,
              rd_5_Addr => rd_5_Addr,  -- ufix7
              rd_5_Enb => rd_5_Enb,
              twdl_5_1_re => twdl_5_1_re,  -- sfix16_En14
              twdl_5_1_im => twdl_5_1_im,  -- sfix16_En14
              proc_5_enb => proc_5_enb,
              dout_5_1_re => dout_5_1_re,  -- sfix16
              dout_5_1_im => dout_5_1_im,  -- sfix16
              dout_5_1_vld => dout_5_1_vld,
              dinXTwdl_5_1_vld => dinXTwdl_5_1_vld
              );

  u_CTRL2_6_1 : RADIX22FFT_CTRL1_6
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_5_1_vld => dout_5_1_vld,
              dinXTwdl_6_1_vld => dinXTwdl_6_1_vld,
              rd_6_Addr => rd_6_Addr,  -- ufix6
              rd_6_Enb => rd_6_Enb,
              proc_6_enb => proc_6_enb,
              multiply_6_J => multiply_6_J
              );

  u_SDF2_6_1 : RADIX22FFT_SDF2_6
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_5_1_re => dout_5_1_re,  -- sfix16
              dout_5_1_im => dout_5_1_im,  -- sfix16
              dout_5_1_vld => dout_5_1_vld,
              rd_6_Addr => rd_6_Addr,  -- ufix6
              rd_6_Enb => rd_6_Enb,
              proc_6_enb => proc_6_enb,
              multiply_6_J => multiply_6_J,
              dout_6_1_re => dout_6_1_re,  -- sfix16
              dout_6_1_im => dout_6_1_im,  -- sfix16
              dout_6_1_vld => dout_6_1_vld,
              dinXTwdl_6_1_vld => dinXTwdl_6_1_vld
              );

  u_twdlROM_7_1 : TWDLROM_7_1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_6_1_vld => dout_6_1_vld,
              twdl_7_1_re => twdl_7_1_re,  -- sfix16_En14
              twdl_7_1_im => twdl_7_1_im  -- sfix16_En14
              );

  u_CTRL1_7_1 : RADIX22FFT_CTRL1_7
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dinXTwdl_7_1_vld => dinXTwdl_7_1_vld,
              dinXTwdl_7_1_vld_1 => dinXTwdl_7_1_vld,
              rd_7_Addr => rd_7_Addr,  -- ufix5
              rd_7_Enb => rd_7_Enb,
              proc_7_enb => proc_7_enb
              );

  u_SDF1_7_1 : RADIX22FFT_SDF1_7
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_7_1_re_dly => din_7_1_re_dly,  -- sfix16
              din_7_1_im_dly => din_7_1_im_dly,  -- sfix16
              din_7_vld_dly => din_7_vld_dly,
              rd_7_Addr => rd_7_Addr,  -- ufix5
              rd_7_Enb => rd_7_Enb,
              twdl_7_1_re => twdl_7_1_re,  -- sfix16_En14
              twdl_7_1_im => twdl_7_1_im,  -- sfix16_En14
              proc_7_enb => proc_7_enb,
              dout_7_1_re => dout_7_1_re,  -- sfix16
              dout_7_1_im => dout_7_1_im,  -- sfix16
              dout_7_1_vld => dout_7_1_vld,
              dinXTwdl_7_1_vld => dinXTwdl_7_1_vld
              );

  u_CTRL2_8_1 : RADIX22FFT_CTRL1_8
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_7_1_vld => dout_7_1_vld,
              dinXTwdl_8_1_vld => dinXTwdl_8_1_vld,
              rd_8_Addr => rd_8_Addr,  -- ufix4
              rd_8_Enb => rd_8_Enb,
              proc_8_enb => proc_8_enb,
              multiply_8_J => multiply_8_J
              );

  u_SDF2_8_1 : RADIX22FFT_SDF2_8
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_7_1_re => dout_7_1_re,  -- sfix16
              dout_7_1_im => dout_7_1_im,  -- sfix16
              dout_7_1_vld => dout_7_1_vld,
              rd_8_Addr => rd_8_Addr,  -- ufix4
              rd_8_Enb => rd_8_Enb,
              proc_8_enb => proc_8_enb,
              multiply_8_J => multiply_8_J,
              dout_8_1_re => dout_8_1_re,  -- sfix16
              dout_8_1_im => dout_8_1_im,  -- sfix16
              dout_8_1_vld => dout_8_1_vld,
              dinXTwdl_8_1_vld => dinXTwdl_8_1_vld
              );

  u_twdlROM_9_1 : TWDLROM_9_1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_8_1_vld => dout_8_1_vld,
              twdl_9_1_re => twdl_9_1_re,  -- sfix16_En14
              twdl_9_1_im => twdl_9_1_im  -- sfix16_En14
              );

  u_CTRL1_9_1 : RADIX22FFT_CTRL1_9
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dinXTwdl_9_1_vld => dinXTwdl_9_1_vld,
              dinXTwdl_9_1_vld_1 => dinXTwdl_9_1_vld,
              rd_9_Addr => rd_9_Addr,  -- ufix3
              rd_9_Enb => rd_9_Enb,
              proc_9_enb => proc_9_enb
              );

  u_SDF1_9_1 : RADIX22FFT_SDF1_9
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_9_1_re_dly => din_9_1_re_dly,  -- sfix16
              din_9_1_im_dly => din_9_1_im_dly,  -- sfix16
              din_9_vld_dly => din_9_vld_dly,
              rd_9_Addr => rd_9_Addr,  -- ufix3
              rd_9_Enb => rd_9_Enb,
              twdl_9_1_re => twdl_9_1_re,  -- sfix16_En14
              twdl_9_1_im => twdl_9_1_im,  -- sfix16_En14
              proc_9_enb => proc_9_enb,
              dout_9_1_re => dout_9_1_re,  -- sfix16
              dout_9_1_im => dout_9_1_im,  -- sfix16
              dout_9_1_vld => dout_9_1_vld,
              dinXTwdl_9_1_vld => dinXTwdl_9_1_vld
              );

  u_CTRL2_10_1 : RADIX22FFT_CTRL1_10
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_9_1_vld => dout_9_1_vld,
              dinXTwdl_10_1_vld => dinXTwdl_10_1_vld,
              rd_10_Addr => rd_10_Addr,  -- ufix2
              rd_10_Enb => rd_10_Enb,
              proc_10_enb => proc_10_enb,
              multiply_10_J => multiply_10_J
              );

  u_SDF2_10_1 : RADIX22FFT_SDF2_10
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_9_1_re => dout_9_1_re,  -- sfix16
              dout_9_1_im => dout_9_1_im,  -- sfix16
              dout_9_1_vld => dout_9_1_vld,
              rd_10_Addr => rd_10_Addr,  -- ufix2
              rd_10_Enb => rd_10_Enb,
              proc_10_enb => proc_10_enb,
              multiply_10_J => multiply_10_J,
              dout_10_1_re => dout_10_1_re,  -- sfix16
              dout_10_1_im => dout_10_1_im,  -- sfix16
              dout_10_1_vld => dout_10_1_vld,
              dinXTwdl_10_1_vld => dinXTwdl_10_1_vld
              );

  u_twdlROM_11_1 : TWDLROM_11_1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_10_1_vld => dout_10_1_vld,
              twdl_11_1_re => twdl_11_1_re,  -- sfix16_En14
              twdl_11_1_im => twdl_11_1_im  -- sfix16_En14
              );

  u_CTRL1_11_1 : RADIX22FFT_CTRL1_11
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dinXTwdl_11_1_vld => dinXTwdl_11_1_vld,
              dinXTwdl_11_1_vld_1 => dinXTwdl_11_1_vld,
              rd_11_Addr => rd_11_Addr,  -- ufix1
              rd_11_Enb => rd_11_Enb,
              proc_11_enb => proc_11_enb
              );

  u_SDF1_11_1 : RADIX22FFT_SDF1_11
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_11_1_re_dly => din_11_1_re_dly,  -- sfix16
              din_11_1_im_dly => din_11_1_im_dly,  -- sfix16
              din_11_vld_dly => din_11_vld_dly,
              rd_11_Addr => rd_11_Addr,  -- ufix1
              rd_11_Enb => rd_11_Enb,
              twdl_11_1_re => twdl_11_1_re,  -- sfix16_En14
              twdl_11_1_im => twdl_11_1_im,  -- sfix16_En14
              proc_11_enb => proc_11_enb,
              dout_11_1_re => dout_11_1_re,  -- sfix16
              dout_11_1_im => dout_11_1_im,  -- sfix16
              dout_11_1_vld => dout_11_1_vld,
              dinXTwdl_11_1_vld => dinXTwdl_11_1_vld
              );

  u_CTRL2_12_1 : RADIX22FFT_CTRL1_12
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_11_1_vld => dout_11_1_vld,
              dinXTwdl_12_1_vld => dinXTwdl_12_1_vld,
              rd_12_Addr => rd_12_Addr,
              rd_12_Enb => rd_12_Enb,
              proc_12_enb => proc_12_enb,
              multiply_12_J => multiply_12_J
              );

  u_SDF2_12_1 : RADIX22FFT_SDF2_12
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_11_1_re => dout_11_1_re,  -- sfix16
              dout_11_1_im => dout_11_1_im,  -- sfix16
              dout_11_1_vld => dout_11_1_vld,
              rd_12_Addr => rd_12_Addr,
              rd_12_Enb => rd_12_Enb,
              proc_12_enb => proc_12_enb,
              multiply_12_J => multiply_12_J,
              dout_12_1_re => dout_12_1_re,  -- sfix16
              dout_12_1_im => dout_12_1_im,  -- sfix16
              dout_12_1_vld => dout_12_1_vld,
              dinXTwdl_12_1_vld => dinXTwdl_12_1_vld
              );

  softReset <= '0';

  dtc_re <= dataIn;

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg <= (OTHERS => to_signed(16#0000#, 16));
        ELSE 
          intdelay_reg(0) <= dtc_re;
          intdelay_reg(1 TO 2) <= intdelay_reg(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_process;

  din_1_1_re_dly <= intdelay_reg(2);

  dtc_im <= to_signed(16#0000#, 16);

  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_1 <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_1 <= (OTHERS => to_signed(16#0000#, 16));
        ELSE 
          intdelay_reg_1(0) <= dtc_im;
          intdelay_reg_1(1 TO 2) <= intdelay_reg_1(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;

  din_1_1_im_dly <= intdelay_reg_1(2);

  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_2 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_2 <= (OTHERS => '0');
        ELSE 
          intdelay_reg_2(0) <= validIn;
          intdelay_reg_2(2 DOWNTO 1) <= intdelay_reg_2(1 DOWNTO 0);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;

  din_1_vld_dly <= intdelay_reg_2(2);

  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_3 <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_3 <= (OTHERS => to_signed(16#0000#, 16));
        ELSE 
          intdelay_reg_3(0) <= dout_2_1_re;
          intdelay_reg_3(1 TO 2) <= intdelay_reg_3(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;

  din_3_1_re_dly <= intdelay_reg_3(2);

  intdelay_4_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_4 <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_4 <= (OTHERS => to_signed(16#0000#, 16));
        ELSE 
          intdelay_reg_4(0) <= dout_2_1_im;
          intdelay_reg_4(1 TO 2) <= intdelay_reg_4(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;

  din_3_1_im_dly <= intdelay_reg_4(2);

  intdelay_5_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_5 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_5 <= (OTHERS => '0');
        ELSE 
          intdelay_reg_5(0) <= dout_2_1_vld;
          intdelay_reg_5(2 DOWNTO 1) <= intdelay_reg_5(1 DOWNTO 0);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;

  din_3_vld_dly <= intdelay_reg_5(2);

  intdelay_6_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_6 <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_6 <= (OTHERS => to_signed(16#0000#, 16));
        ELSE 
          intdelay_reg_6(0) <= dout_4_1_re;
          intdelay_reg_6(1 TO 2) <= intdelay_reg_6(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_6_process;

  din_5_1_re_dly <= intdelay_reg_6(2);

  intdelay_7_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_7 <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_7 <= (OTHERS => to_signed(16#0000#, 16));
        ELSE 
          intdelay_reg_7(0) <= dout_4_1_im;
          intdelay_reg_7(1 TO 2) <= intdelay_reg_7(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_7_process;

  din_5_1_im_dly <= intdelay_reg_7(2);

  intdelay_8_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_8 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_8 <= (OTHERS => '0');
        ELSE 
          intdelay_reg_8(0) <= dout_4_1_vld;
          intdelay_reg_8(2 DOWNTO 1) <= intdelay_reg_8(1 DOWNTO 0);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_8_process;

  din_5_vld_dly <= intdelay_reg_8(2);

  intdelay_9_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_9 <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_9 <= (OTHERS => to_signed(16#0000#, 16));
        ELSE 
          intdelay_reg_9(0) <= dout_6_1_re;
          intdelay_reg_9(1 TO 2) <= intdelay_reg_9(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_9_process;

  din_7_1_re_dly <= intdelay_reg_9(2);

  intdelay_10_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_10 <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_10 <= (OTHERS => to_signed(16#0000#, 16));
        ELSE 
          intdelay_reg_10(0) <= dout_6_1_im;
          intdelay_reg_10(1 TO 2) <= intdelay_reg_10(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_10_process;

  din_7_1_im_dly <= intdelay_reg_10(2);

  intdelay_11_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_11 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_11 <= (OTHERS => '0');
        ELSE 
          intdelay_reg_11(0) <= dout_6_1_vld;
          intdelay_reg_11(2 DOWNTO 1) <= intdelay_reg_11(1 DOWNTO 0);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_11_process;

  din_7_vld_dly <= intdelay_reg_11(2);

  intdelay_12_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_12 <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_12 <= (OTHERS => to_signed(16#0000#, 16));
        ELSE 
          intdelay_reg_12(0) <= dout_8_1_re;
          intdelay_reg_12(1 TO 2) <= intdelay_reg_12(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_12_process;

  din_9_1_re_dly <= intdelay_reg_12(2);

  intdelay_13_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_13 <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_13 <= (OTHERS => to_signed(16#0000#, 16));
        ELSE 
          intdelay_reg_13(0) <= dout_8_1_im;
          intdelay_reg_13(1 TO 2) <= intdelay_reg_13(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_13_process;

  din_9_1_im_dly <= intdelay_reg_13(2);

  intdelay_14_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_14 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_14 <= (OTHERS => '0');
        ELSE 
          intdelay_reg_14(0) <= dout_8_1_vld;
          intdelay_reg_14(2 DOWNTO 1) <= intdelay_reg_14(1 DOWNTO 0);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_14_process;

  din_9_vld_dly <= intdelay_reg_14(2);

  intdelay_15_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_15 <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_15 <= (OTHERS => to_signed(16#0000#, 16));
        ELSE 
          intdelay_reg_15(0) <= dout_10_1_re;
          intdelay_reg_15(1 TO 2) <= intdelay_reg_15(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_15_process;

  din_11_1_re_dly <= intdelay_reg_15(2);

  intdelay_16_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_16 <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_16 <= (OTHERS => to_signed(16#0000#, 16));
        ELSE 
          intdelay_reg_16(0) <= dout_10_1_im;
          intdelay_reg_16(1 TO 2) <= intdelay_reg_16(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_16_process;

  din_11_1_im_dly <= intdelay_reg_16(2);

  intdelay_17_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_17 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_17 <= (OTHERS => '0');
        ELSE 
          intdelay_reg_17(0) <= dout_10_1_vld;
          intdelay_reg_17(2 DOWNTO 1) <= intdelay_reg_17(1 DOWNTO 0);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_17_process;

  din_11_vld_dly <= intdelay_reg_17(2);

  dataOut_re <= dout_12_1_re;

  dataOut_im <= dout_12_1_im;

  validOut <= dout_12_1_vld;

END rtl;


-- End of FFT_HDL_Optimized.vhd --

-- Start of FFT_HDL_Optimized1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\FFT_HDL_Optimized1.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: FFT_HDL_Optimized1
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1
-- Hierarchy Level: 1
-- Model version: 2.46
-- 
-- FFT
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY FFT_HDL_Optimized1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dataIn                            :   IN    signed(15 DOWNTO 0);  -- int16
        validIn                           :   IN    std_logic;
        dataOut_re                        :   OUT   signed(15 DOWNTO 0);  -- int16
        dataOut_im                        :   OUT   signed(15 DOWNTO 0);  -- int16
        validOut                          :   OUT   std_logic
        );
END FFT_HDL_Optimized1;


ARCHITECTURE rtl OF FFT_HDL_Optimized1 IS

  -- Component Declarations
  COMPONENT RADIX22FFT_CTRL1_1_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinXTwdl_1_1_vld                :   IN    std_logic;
          dinXTwdl_1_1_vld_1              :   IN    std_logic;
          rd_1_Addr                       :   OUT   unsigned(10 DOWNTO 0);  -- ufix11
          rd_1_Enb                        :   OUT   std_logic;
          proc_1_enb                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF1_1_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_1_1_re_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_1_1_im_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_1_vld_dly                   :   IN    std_logic;
          rd_1_Addr                       :   IN    unsigned(10 DOWNTO 0);  -- ufix11
          rd_1_Enb                        :   IN    std_logic;
          proc_1_enb                      :   IN    std_logic;
          dout_1_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_1_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_1_1_vld                    :   OUT   std_logic;
          dinXTwdl_1_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_2_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_1_1_vld                    :   IN    std_logic;
          dinXTwdl_2_1_vld                :   IN    std_logic;
          rd_2_Addr                       :   OUT   unsigned(9 DOWNTO 0);  -- ufix10
          rd_2_Enb                        :   OUT   std_logic;
          proc_2_enb                      :   OUT   std_logic;
          multiply_2_J                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF2_2_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_1_1_re                     :   IN    signed(15 DOWNTO 0);  -- sfix16
          dout_1_1_im                     :   IN    signed(15 DOWNTO 0);  -- sfix16
          dout_1_1_vld                    :   IN    std_logic;
          rd_2_Addr                       :   IN    unsigned(9 DOWNTO 0);  -- ufix10
          rd_2_Enb                        :   IN    std_logic;
          proc_2_enb                      :   IN    std_logic;
          multiply_2_J                    :   IN    std_logic;
          dout_2_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_2_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_2_1_vld                    :   OUT   std_logic;
          dinXTwdl_2_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT TWDLROM_3_1_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_2_1_vld                    :   IN    std_logic;
          twdl_3_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_3_1_im                     :   OUT   signed(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_3_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinXTwdl_3_1_vld                :   IN    std_logic;
          dinXTwdl_3_1_vld_1              :   IN    std_logic;
          rd_3_Addr                       :   OUT   unsigned(8 DOWNTO 0);  -- ufix9
          rd_3_Enb                        :   OUT   std_logic;
          proc_3_enb                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF1_3_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_3_1_re_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_3_1_im_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_3_vld_dly                   :   IN    std_logic;
          rd_3_Addr                       :   IN    unsigned(8 DOWNTO 0);  -- ufix9
          rd_3_Enb                        :   IN    std_logic;
          twdl_3_1_re                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_3_1_im                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          proc_3_enb                      :   IN    std_logic;
          dout_3_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_3_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_3_1_vld                    :   OUT   std_logic;
          dinXTwdl_3_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_4_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_3_1_vld                    :   IN    std_logic;
          dinXTwdl_4_1_vld                :   IN    std_logic;
          rd_4_Addr                       :   OUT   unsigned(7 DOWNTO 0);  -- ufix8
          rd_4_Enb                        :   OUT   std_logic;
          proc_4_enb                      :   OUT   std_logic;
          multiply_4_J                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF2_4_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_3_1_re                     :   IN    signed(15 DOWNTO 0);  -- sfix16
          dout_3_1_im                     :   IN    signed(15 DOWNTO 0);  -- sfix16
          dout_3_1_vld                    :   IN    std_logic;
          rd_4_Addr                       :   IN    unsigned(7 DOWNTO 0);  -- ufix8
          rd_4_Enb                        :   IN    std_logic;
          proc_4_enb                      :   IN    std_logic;
          multiply_4_J                    :   IN    std_logic;
          dout_4_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_4_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_4_1_vld                    :   OUT   std_logic;
          dinXTwdl_4_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT TWDLROM_5_1_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_4_1_vld                    :   IN    std_logic;
          twdl_5_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_5_1_im                     :   OUT   signed(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_5_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinXTwdl_5_1_vld                :   IN    std_logic;
          dinXTwdl_5_1_vld_1              :   IN    std_logic;
          rd_5_Addr                       :   OUT   unsigned(6 DOWNTO 0);  -- ufix7
          rd_5_Enb                        :   OUT   std_logic;
          proc_5_enb                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF1_5_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_5_1_re_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_5_1_im_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_5_vld_dly                   :   IN    std_logic;
          rd_5_Addr                       :   IN    unsigned(6 DOWNTO 0);  -- ufix7
          rd_5_Enb                        :   IN    std_logic;
          twdl_5_1_re                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_5_1_im                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          proc_5_enb                      :   IN    std_logic;
          dout_5_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_5_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_5_1_vld                    :   OUT   std_logic;
          dinXTwdl_5_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_6_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_5_1_vld                    :   IN    std_logic;
          dinXTwdl_6_1_vld                :   IN    std_logic;
          rd_6_Addr                       :   OUT   unsigned(5 DOWNTO 0);  -- ufix6
          rd_6_Enb                        :   OUT   std_logic;
          proc_6_enb                      :   OUT   std_logic;
          multiply_6_J                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF2_6_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_5_1_re                     :   IN    signed(15 DOWNTO 0);  -- sfix16
          dout_5_1_im                     :   IN    signed(15 DOWNTO 0);  -- sfix16
          dout_5_1_vld                    :   IN    std_logic;
          rd_6_Addr                       :   IN    unsigned(5 DOWNTO 0);  -- ufix6
          rd_6_Enb                        :   IN    std_logic;
          proc_6_enb                      :   IN    std_logic;
          multiply_6_J                    :   IN    std_logic;
          dout_6_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_6_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_6_1_vld                    :   OUT   std_logic;
          dinXTwdl_6_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT TWDLROM_7_1_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_6_1_vld                    :   IN    std_logic;
          twdl_7_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_7_1_im                     :   OUT   signed(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_7_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinXTwdl_7_1_vld                :   IN    std_logic;
          dinXTwdl_7_1_vld_1              :   IN    std_logic;
          rd_7_Addr                       :   OUT   unsigned(4 DOWNTO 0);  -- ufix5
          rd_7_Enb                        :   OUT   std_logic;
          proc_7_enb                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF1_7_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_7_1_re_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_7_1_im_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_7_vld_dly                   :   IN    std_logic;
          rd_7_Addr                       :   IN    unsigned(4 DOWNTO 0);  -- ufix5
          rd_7_Enb                        :   IN    std_logic;
          twdl_7_1_re                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_7_1_im                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          proc_7_enb                      :   IN    std_logic;
          dout_7_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_7_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_7_1_vld                    :   OUT   std_logic;
          dinXTwdl_7_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_8_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_7_1_vld                    :   IN    std_logic;
          dinXTwdl_8_1_vld                :   IN    std_logic;
          rd_8_Addr                       :   OUT   unsigned(3 DOWNTO 0);  -- ufix4
          rd_8_Enb                        :   OUT   std_logic;
          proc_8_enb                      :   OUT   std_logic;
          multiply_8_J                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF2_8_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_7_1_re                     :   IN    signed(15 DOWNTO 0);  -- sfix16
          dout_7_1_im                     :   IN    signed(15 DOWNTO 0);  -- sfix16
          dout_7_1_vld                    :   IN    std_logic;
          rd_8_Addr                       :   IN    unsigned(3 DOWNTO 0);  -- ufix4
          rd_8_Enb                        :   IN    std_logic;
          proc_8_enb                      :   IN    std_logic;
          multiply_8_J                    :   IN    std_logic;
          dout_8_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_8_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_8_1_vld                    :   OUT   std_logic;
          dinXTwdl_8_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT TWDLROM_9_1_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_8_1_vld                    :   IN    std_logic;
          twdl_9_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_9_1_im                     :   OUT   signed(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_9_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinXTwdl_9_1_vld                :   IN    std_logic;
          dinXTwdl_9_1_vld_1              :   IN    std_logic;
          rd_9_Addr                       :   OUT   unsigned(2 DOWNTO 0);  -- ufix3
          rd_9_Enb                        :   OUT   std_logic;
          proc_9_enb                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF1_9_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_9_1_re_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_9_1_im_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_9_vld_dly                   :   IN    std_logic;
          rd_9_Addr                       :   IN    unsigned(2 DOWNTO 0);  -- ufix3
          rd_9_Enb                        :   IN    std_logic;
          twdl_9_1_re                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_9_1_im                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          proc_9_enb                      :   IN    std_logic;
          dout_9_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_9_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_9_1_vld                    :   OUT   std_logic;
          dinXTwdl_9_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_10_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_9_1_vld                    :   IN    std_logic;
          dinXTwdl_10_1_vld               :   IN    std_logic;
          rd_10_Addr                      :   OUT   unsigned(1 DOWNTO 0);  -- ufix2
          rd_10_Enb                       :   OUT   std_logic;
          proc_10_enb                     :   OUT   std_logic;
          multiply_10_J                   :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF2_10_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_9_1_re                     :   IN    signed(15 DOWNTO 0);  -- sfix16
          dout_9_1_im                     :   IN    signed(15 DOWNTO 0);  -- sfix16
          dout_9_1_vld                    :   IN    std_logic;
          rd_10_Addr                      :   IN    unsigned(1 DOWNTO 0);  -- ufix2
          rd_10_Enb                       :   IN    std_logic;
          proc_10_enb                     :   IN    std_logic;
          multiply_10_J                   :   IN    std_logic;
          dout_10_1_re                    :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_10_1_im                    :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_10_1_vld                   :   OUT   std_logic;
          dinXTwdl_10_1_vld               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT TWDLROM_11_1_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_10_1_vld                   :   IN    std_logic;
          twdl_11_1_re                    :   OUT   signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_11_1_im                    :   OUT   signed(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_11_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinXTwdl_11_1_vld               :   IN    std_logic;
          dinXTwdl_11_1_vld_1             :   IN    std_logic;
          rd_11_Addr                      :   OUT   std_logic;  -- ufix1
          rd_11_Enb                       :   OUT   std_logic;
          proc_11_enb                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF1_11_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_11_1_re_dly                 :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_11_1_im_dly                 :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_11_vld_dly                  :   IN    std_logic;
          rd_11_Addr                      :   IN    std_logic;  -- ufix1
          rd_11_Enb                       :   IN    std_logic;
          twdl_11_1_re                    :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_11_1_im                    :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          proc_11_enb                     :   IN    std_logic;
          dout_11_1_re                    :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_11_1_im                    :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_11_1_vld                   :   OUT   std_logic;
          dinXTwdl_11_1_vld               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_12_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_11_1_vld                   :   IN    std_logic;
          dinXTwdl_12_1_vld               :   IN    std_logic;
          rd_12_Addr                      :   OUT   std_logic;
          rd_12_Enb                       :   OUT   std_logic;
          proc_12_enb                     :   OUT   std_logic;
          multiply_12_J                   :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF2_12_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_11_1_re                    :   IN    signed(15 DOWNTO 0);  -- sfix16
          dout_11_1_im                    :   IN    signed(15 DOWNTO 0);  -- sfix16
          dout_11_1_vld                   :   IN    std_logic;
          rd_12_Addr                      :   IN    std_logic;
          rd_12_Enb                       :   IN    std_logic;
          proc_12_enb                     :   IN    std_logic;
          multiply_12_J                   :   IN    std_logic;
          dout_12_1_re                    :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_12_1_im                    :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_12_1_vld                   :   OUT   std_logic;
          dinXTwdl_12_1_vld               :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : RADIX22FFT_CTRL1_1_block
    USE ENTITY work.RADIX22FFT_CTRL1_1_block(rtl);

  FOR ALL : RADIX22FFT_SDF1_1_block
    USE ENTITY work.RADIX22FFT_SDF1_1_block(rtl);

  FOR ALL : RADIX22FFT_CTRL1_2_block
    USE ENTITY work.RADIX22FFT_CTRL1_2_block(rtl);

  FOR ALL : RADIX22FFT_SDF2_2_block
    USE ENTITY work.RADIX22FFT_SDF2_2_block(rtl);

  FOR ALL : TWDLROM_3_1_block
    USE ENTITY work.TWDLROM_3_1_block(rtl);

  FOR ALL : RADIX22FFT_CTRL1_3_block
    USE ENTITY work.RADIX22FFT_CTRL1_3_block(rtl);

  FOR ALL : RADIX22FFT_SDF1_3_block
    USE ENTITY work.RADIX22FFT_SDF1_3_block(rtl);

  FOR ALL : RADIX22FFT_CTRL1_4_block
    USE ENTITY work.RADIX22FFT_CTRL1_4_block(rtl);

  FOR ALL : RADIX22FFT_SDF2_4_block
    USE ENTITY work.RADIX22FFT_SDF2_4_block(rtl);

  FOR ALL : TWDLROM_5_1_block
    USE ENTITY work.TWDLROM_5_1_block(rtl);

  FOR ALL : RADIX22FFT_CTRL1_5_block
    USE ENTITY work.RADIX22FFT_CTRL1_5_block(rtl);

  FOR ALL : RADIX22FFT_SDF1_5_block
    USE ENTITY work.RADIX22FFT_SDF1_5_block(rtl);

  FOR ALL : RADIX22FFT_CTRL1_6_block
    USE ENTITY work.RADIX22FFT_CTRL1_6_block(rtl);

  FOR ALL : RADIX22FFT_SDF2_6_block
    USE ENTITY work.RADIX22FFT_SDF2_6_block(rtl);

  FOR ALL : TWDLROM_7_1_block
    USE ENTITY work.TWDLROM_7_1_block(rtl);

  FOR ALL : RADIX22FFT_CTRL1_7_block
    USE ENTITY work.RADIX22FFT_CTRL1_7_block(rtl);

  FOR ALL : RADIX22FFT_SDF1_7_block
    USE ENTITY work.RADIX22FFT_SDF1_7_block(rtl);

  FOR ALL : RADIX22FFT_CTRL1_8_block
    USE ENTITY work.RADIX22FFT_CTRL1_8_block(rtl);

  FOR ALL : RADIX22FFT_SDF2_8_block
    USE ENTITY work.RADIX22FFT_SDF2_8_block(rtl);

  FOR ALL : TWDLROM_9_1_block
    USE ENTITY work.TWDLROM_9_1_block(rtl);

  FOR ALL : RADIX22FFT_CTRL1_9_block
    USE ENTITY work.RADIX22FFT_CTRL1_9_block(rtl);

  FOR ALL : RADIX22FFT_SDF1_9_block
    USE ENTITY work.RADIX22FFT_SDF1_9_block(rtl);

  FOR ALL : RADIX22FFT_CTRL1_10_block
    USE ENTITY work.RADIX22FFT_CTRL1_10_block(rtl);

  FOR ALL : RADIX22FFT_SDF2_10_block
    USE ENTITY work.RADIX22FFT_SDF2_10_block(rtl);

  FOR ALL : TWDLROM_11_1_block
    USE ENTITY work.TWDLROM_11_1_block(rtl);

  FOR ALL : RADIX22FFT_CTRL1_11_block
    USE ENTITY work.RADIX22FFT_CTRL1_11_block(rtl);

  FOR ALL : RADIX22FFT_SDF1_11_block
    USE ENTITY work.RADIX22FFT_SDF1_11_block(rtl);

  FOR ALL : RADIX22FFT_CTRL1_12_block
    USE ENTITY work.RADIX22FFT_CTRL1_12_block(rtl);

  FOR ALL : RADIX22FFT_SDF2_12_block
    USE ENTITY work.RADIX22FFT_SDF2_12_block(rtl);

  -- Signals
  SIGNAL softReset                        : std_logic;
  SIGNAL dtc_re                           : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL intdelay_reg                     : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL din_1_1_re_dly                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dtc_im                           : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL intdelay_reg_1                   : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL din_1_1_im_dly                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL intdelay_reg_2                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL din_1_vld_dly                    : std_logic;
  SIGNAL dinXTwdl_1_1_vld                 : std_logic;
  SIGNAL rd_1_Addr                        : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL rd_1_Enb                         : std_logic;
  SIGNAL proc_1_enb                       : std_logic;
  SIGNAL dout_1_1_re                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_1_1_im                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_1_1_vld                     : std_logic;
  SIGNAL dinXTwdl_2_1_vld                 : std_logic;
  SIGNAL rd_2_Addr                        : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL rd_2_Enb                         : std_logic;
  SIGNAL proc_2_enb                       : std_logic;
  SIGNAL multiply_2_J                     : std_logic;
  SIGNAL dout_2_1_re                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_2_1_im                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_2_1_vld                     : std_logic;
  SIGNAL intdelay_reg_3                   : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL din_3_1_re_dly                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL intdelay_reg_4                   : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL din_3_1_im_dly                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL intdelay_reg_5                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL din_3_vld_dly                    : std_logic;
  SIGNAL twdl_3_1_re                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdl_3_1_im                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dinXTwdl_3_1_vld                 : std_logic;
  SIGNAL rd_3_Addr                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL rd_3_Enb                         : std_logic;
  SIGNAL proc_3_enb                       : std_logic;
  SIGNAL dout_3_1_re                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_3_1_im                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_3_1_vld                     : std_logic;
  SIGNAL dinXTwdl_4_1_vld                 : std_logic;
  SIGNAL rd_4_Addr                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_4_Enb                         : std_logic;
  SIGNAL proc_4_enb                       : std_logic;
  SIGNAL multiply_4_J                     : std_logic;
  SIGNAL dout_4_1_re                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_4_1_im                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_4_1_vld                     : std_logic;
  SIGNAL intdelay_reg_6                   : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL din_5_1_re_dly                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL intdelay_reg_7                   : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL din_5_1_im_dly                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL intdelay_reg_8                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL din_5_vld_dly                    : std_logic;
  SIGNAL twdl_5_1_re                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdl_5_1_im                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dinXTwdl_5_1_vld                 : std_logic;
  SIGNAL rd_5_Addr                        : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL rd_5_Enb                         : std_logic;
  SIGNAL proc_5_enb                       : std_logic;
  SIGNAL dout_5_1_re                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_5_1_im                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_5_1_vld                     : std_logic;
  SIGNAL dinXTwdl_6_1_vld                 : std_logic;
  SIGNAL rd_6_Addr                        : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL rd_6_Enb                         : std_logic;
  SIGNAL proc_6_enb                       : std_logic;
  SIGNAL multiply_6_J                     : std_logic;
  SIGNAL dout_6_1_re                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_6_1_im                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_6_1_vld                     : std_logic;
  SIGNAL intdelay_reg_9                   : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL din_7_1_re_dly                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL intdelay_reg_10                  : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL din_7_1_im_dly                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL intdelay_reg_11                  : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL din_7_vld_dly                    : std_logic;
  SIGNAL twdl_7_1_re                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdl_7_1_im                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dinXTwdl_7_1_vld                 : std_logic;
  SIGNAL rd_7_Addr                        : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL rd_7_Enb                         : std_logic;
  SIGNAL proc_7_enb                       : std_logic;
  SIGNAL dout_7_1_re                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_7_1_im                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_7_1_vld                     : std_logic;
  SIGNAL dinXTwdl_8_1_vld                 : std_logic;
  SIGNAL rd_8_Addr                        : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL rd_8_Enb                         : std_logic;
  SIGNAL proc_8_enb                       : std_logic;
  SIGNAL multiply_8_J                     : std_logic;
  SIGNAL dout_8_1_re                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_8_1_im                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_8_1_vld                     : std_logic;
  SIGNAL intdelay_reg_12                  : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL din_9_1_re_dly                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL intdelay_reg_13                  : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL din_9_1_im_dly                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL intdelay_reg_14                  : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL din_9_vld_dly                    : std_logic;
  SIGNAL twdl_9_1_re                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdl_9_1_im                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dinXTwdl_9_1_vld                 : std_logic;
  SIGNAL rd_9_Addr                        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL rd_9_Enb                         : std_logic;
  SIGNAL proc_9_enb                       : std_logic;
  SIGNAL dout_9_1_re                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_9_1_im                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_9_1_vld                     : std_logic;
  SIGNAL dinXTwdl_10_1_vld                : std_logic;
  SIGNAL rd_10_Addr                       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL rd_10_Enb                        : std_logic;
  SIGNAL proc_10_enb                      : std_logic;
  SIGNAL multiply_10_J                    : std_logic;
  SIGNAL dout_10_1_re                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_10_1_im                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_10_1_vld                    : std_logic;
  SIGNAL intdelay_reg_15                  : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL din_11_1_re_dly                  : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL intdelay_reg_16                  : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL din_11_1_im_dly                  : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL intdelay_reg_17                  : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL din_11_vld_dly                   : std_logic;
  SIGNAL twdl_11_1_re                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdl_11_1_im                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dinXTwdl_11_1_vld                : std_logic;
  SIGNAL rd_11_Addr                       : std_logic;  -- ufix1
  SIGNAL rd_11_Enb                        : std_logic;
  SIGNAL proc_11_enb                      : std_logic;
  SIGNAL dout_11_1_re                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_11_1_im                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_11_1_vld                    : std_logic;
  SIGNAL dinXTwdl_12_1_vld                : std_logic;
  SIGNAL rd_12_Addr                       : std_logic;
  SIGNAL rd_12_Enb                        : std_logic;
  SIGNAL proc_12_enb                      : std_logic;
  SIGNAL multiply_12_J                    : std_logic;
  SIGNAL dout_12_1_re                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_12_1_im                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout_12_1_vld                    : std_logic;

BEGIN
  u_CTRL1_1_1 : RADIX22FFT_CTRL1_1_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dinXTwdl_1_1_vld => dinXTwdl_1_1_vld,
              dinXTwdl_1_1_vld_1 => dinXTwdl_1_1_vld,
              rd_1_Addr => rd_1_Addr,  -- ufix11
              rd_1_Enb => rd_1_Enb,
              proc_1_enb => proc_1_enb
              );

  u_SDF1_1_1 : RADIX22FFT_SDF1_1_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_1_1_re_dly => din_1_1_re_dly,  -- sfix16
              din_1_1_im_dly => din_1_1_im_dly,  -- sfix16
              din_1_vld_dly => din_1_vld_dly,
              rd_1_Addr => rd_1_Addr,  -- ufix11
              rd_1_Enb => rd_1_Enb,
              proc_1_enb => proc_1_enb,
              dout_1_1_re => dout_1_1_re,  -- sfix16
              dout_1_1_im => dout_1_1_im,  -- sfix16
              dout_1_1_vld => dout_1_1_vld,
              dinXTwdl_1_1_vld => dinXTwdl_1_1_vld
              );

  u_CTRL2_2_1 : RADIX22FFT_CTRL1_2_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_1_1_vld => dout_1_1_vld,
              dinXTwdl_2_1_vld => dinXTwdl_2_1_vld,
              rd_2_Addr => rd_2_Addr,  -- ufix10
              rd_2_Enb => rd_2_Enb,
              proc_2_enb => proc_2_enb,
              multiply_2_J => multiply_2_J
              );

  u_SDF2_2_1 : RADIX22FFT_SDF2_2_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_1_1_re => dout_1_1_re,  -- sfix16
              dout_1_1_im => dout_1_1_im,  -- sfix16
              dout_1_1_vld => dout_1_1_vld,
              rd_2_Addr => rd_2_Addr,  -- ufix10
              rd_2_Enb => rd_2_Enb,
              proc_2_enb => proc_2_enb,
              multiply_2_J => multiply_2_J,
              dout_2_1_re => dout_2_1_re,  -- sfix16
              dout_2_1_im => dout_2_1_im,  -- sfix16
              dout_2_1_vld => dout_2_1_vld,
              dinXTwdl_2_1_vld => dinXTwdl_2_1_vld
              );

  u_twdlROM_3_1 : TWDLROM_3_1_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_2_1_vld => dout_2_1_vld,
              twdl_3_1_re => twdl_3_1_re,  -- sfix16_En14
              twdl_3_1_im => twdl_3_1_im  -- sfix16_En14
              );

  u_CTRL1_3_1 : RADIX22FFT_CTRL1_3_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dinXTwdl_3_1_vld => dinXTwdl_3_1_vld,
              dinXTwdl_3_1_vld_1 => dinXTwdl_3_1_vld,
              rd_3_Addr => rd_3_Addr,  -- ufix9
              rd_3_Enb => rd_3_Enb,
              proc_3_enb => proc_3_enb
              );

  u_SDF1_3_1 : RADIX22FFT_SDF1_3_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_3_1_re_dly => din_3_1_re_dly,  -- sfix16
              din_3_1_im_dly => din_3_1_im_dly,  -- sfix16
              din_3_vld_dly => din_3_vld_dly,
              rd_3_Addr => rd_3_Addr,  -- ufix9
              rd_3_Enb => rd_3_Enb,
              twdl_3_1_re => twdl_3_1_re,  -- sfix16_En14
              twdl_3_1_im => twdl_3_1_im,  -- sfix16_En14
              proc_3_enb => proc_3_enb,
              dout_3_1_re => dout_3_1_re,  -- sfix16
              dout_3_1_im => dout_3_1_im,  -- sfix16
              dout_3_1_vld => dout_3_1_vld,
              dinXTwdl_3_1_vld => dinXTwdl_3_1_vld
              );

  u_CTRL2_4_1 : RADIX22FFT_CTRL1_4_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_3_1_vld => dout_3_1_vld,
              dinXTwdl_4_1_vld => dinXTwdl_4_1_vld,
              rd_4_Addr => rd_4_Addr,  -- ufix8
              rd_4_Enb => rd_4_Enb,
              proc_4_enb => proc_4_enb,
              multiply_4_J => multiply_4_J
              );

  u_SDF2_4_1 : RADIX22FFT_SDF2_4_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_3_1_re => dout_3_1_re,  -- sfix16
              dout_3_1_im => dout_3_1_im,  -- sfix16
              dout_3_1_vld => dout_3_1_vld,
              rd_4_Addr => rd_4_Addr,  -- ufix8
              rd_4_Enb => rd_4_Enb,
              proc_4_enb => proc_4_enb,
              multiply_4_J => multiply_4_J,
              dout_4_1_re => dout_4_1_re,  -- sfix16
              dout_4_1_im => dout_4_1_im,  -- sfix16
              dout_4_1_vld => dout_4_1_vld,
              dinXTwdl_4_1_vld => dinXTwdl_4_1_vld
              );

  u_twdlROM_5_1 : TWDLROM_5_1_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_4_1_vld => dout_4_1_vld,
              twdl_5_1_re => twdl_5_1_re,  -- sfix16_En14
              twdl_5_1_im => twdl_5_1_im  -- sfix16_En14
              );

  u_CTRL1_5_1 : RADIX22FFT_CTRL1_5_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dinXTwdl_5_1_vld => dinXTwdl_5_1_vld,
              dinXTwdl_5_1_vld_1 => dinXTwdl_5_1_vld,
              rd_5_Addr => rd_5_Addr,  -- ufix7
              rd_5_Enb => rd_5_Enb,
              proc_5_enb => proc_5_enb
              );

  u_SDF1_5_1 : RADIX22FFT_SDF1_5_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_5_1_re_dly => din_5_1_re_dly,  -- sfix16
              din_5_1_im_dly => din_5_1_im_dly,  -- sfix16
              din_5_vld_dly => din_5_vld_dly,
              rd_5_Addr => rd_5_Addr,  -- ufix7
              rd_5_Enb => rd_5_Enb,
              twdl_5_1_re => twdl_5_1_re,  -- sfix16_En14
              twdl_5_1_im => twdl_5_1_im,  -- sfix16_En14
              proc_5_enb => proc_5_enb,
              dout_5_1_re => dout_5_1_re,  -- sfix16
              dout_5_1_im => dout_5_1_im,  -- sfix16
              dout_5_1_vld => dout_5_1_vld,
              dinXTwdl_5_1_vld => dinXTwdl_5_1_vld
              );

  u_CTRL2_6_1 : RADIX22FFT_CTRL1_6_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_5_1_vld => dout_5_1_vld,
              dinXTwdl_6_1_vld => dinXTwdl_6_1_vld,
              rd_6_Addr => rd_6_Addr,  -- ufix6
              rd_6_Enb => rd_6_Enb,
              proc_6_enb => proc_6_enb,
              multiply_6_J => multiply_6_J
              );

  u_SDF2_6_1 : RADIX22FFT_SDF2_6_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_5_1_re => dout_5_1_re,  -- sfix16
              dout_5_1_im => dout_5_1_im,  -- sfix16
              dout_5_1_vld => dout_5_1_vld,
              rd_6_Addr => rd_6_Addr,  -- ufix6
              rd_6_Enb => rd_6_Enb,
              proc_6_enb => proc_6_enb,
              multiply_6_J => multiply_6_J,
              dout_6_1_re => dout_6_1_re,  -- sfix16
              dout_6_1_im => dout_6_1_im,  -- sfix16
              dout_6_1_vld => dout_6_1_vld,
              dinXTwdl_6_1_vld => dinXTwdl_6_1_vld
              );

  u_twdlROM_7_1 : TWDLROM_7_1_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_6_1_vld => dout_6_1_vld,
              twdl_7_1_re => twdl_7_1_re,  -- sfix16_En14
              twdl_7_1_im => twdl_7_1_im  -- sfix16_En14
              );

  u_CTRL1_7_1 : RADIX22FFT_CTRL1_7_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dinXTwdl_7_1_vld => dinXTwdl_7_1_vld,
              dinXTwdl_7_1_vld_1 => dinXTwdl_7_1_vld,
              rd_7_Addr => rd_7_Addr,  -- ufix5
              rd_7_Enb => rd_7_Enb,
              proc_7_enb => proc_7_enb
              );

  u_SDF1_7_1 : RADIX22FFT_SDF1_7_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_7_1_re_dly => din_7_1_re_dly,  -- sfix16
              din_7_1_im_dly => din_7_1_im_dly,  -- sfix16
              din_7_vld_dly => din_7_vld_dly,
              rd_7_Addr => rd_7_Addr,  -- ufix5
              rd_7_Enb => rd_7_Enb,
              twdl_7_1_re => twdl_7_1_re,  -- sfix16_En14
              twdl_7_1_im => twdl_7_1_im,  -- sfix16_En14
              proc_7_enb => proc_7_enb,
              dout_7_1_re => dout_7_1_re,  -- sfix16
              dout_7_1_im => dout_7_1_im,  -- sfix16
              dout_7_1_vld => dout_7_1_vld,
              dinXTwdl_7_1_vld => dinXTwdl_7_1_vld
              );

  u_CTRL2_8_1 : RADIX22FFT_CTRL1_8_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_7_1_vld => dout_7_1_vld,
              dinXTwdl_8_1_vld => dinXTwdl_8_1_vld,
              rd_8_Addr => rd_8_Addr,  -- ufix4
              rd_8_Enb => rd_8_Enb,
              proc_8_enb => proc_8_enb,
              multiply_8_J => multiply_8_J
              );

  u_SDF2_8_1 : RADIX22FFT_SDF2_8_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_7_1_re => dout_7_1_re,  -- sfix16
              dout_7_1_im => dout_7_1_im,  -- sfix16
              dout_7_1_vld => dout_7_1_vld,
              rd_8_Addr => rd_8_Addr,  -- ufix4
              rd_8_Enb => rd_8_Enb,
              proc_8_enb => proc_8_enb,
              multiply_8_J => multiply_8_J,
              dout_8_1_re => dout_8_1_re,  -- sfix16
              dout_8_1_im => dout_8_1_im,  -- sfix16
              dout_8_1_vld => dout_8_1_vld,
              dinXTwdl_8_1_vld => dinXTwdl_8_1_vld
              );

  u_twdlROM_9_1 : TWDLROM_9_1_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_8_1_vld => dout_8_1_vld,
              twdl_9_1_re => twdl_9_1_re,  -- sfix16_En14
              twdl_9_1_im => twdl_9_1_im  -- sfix16_En14
              );

  u_CTRL1_9_1 : RADIX22FFT_CTRL1_9_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dinXTwdl_9_1_vld => dinXTwdl_9_1_vld,
              dinXTwdl_9_1_vld_1 => dinXTwdl_9_1_vld,
              rd_9_Addr => rd_9_Addr,  -- ufix3
              rd_9_Enb => rd_9_Enb,
              proc_9_enb => proc_9_enb
              );

  u_SDF1_9_1 : RADIX22FFT_SDF1_9_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_9_1_re_dly => din_9_1_re_dly,  -- sfix16
              din_9_1_im_dly => din_9_1_im_dly,  -- sfix16
              din_9_vld_dly => din_9_vld_dly,
              rd_9_Addr => rd_9_Addr,  -- ufix3
              rd_9_Enb => rd_9_Enb,
              twdl_9_1_re => twdl_9_1_re,  -- sfix16_En14
              twdl_9_1_im => twdl_9_1_im,  -- sfix16_En14
              proc_9_enb => proc_9_enb,
              dout_9_1_re => dout_9_1_re,  -- sfix16
              dout_9_1_im => dout_9_1_im,  -- sfix16
              dout_9_1_vld => dout_9_1_vld,
              dinXTwdl_9_1_vld => dinXTwdl_9_1_vld
              );

  u_CTRL2_10_1 : RADIX22FFT_CTRL1_10_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_9_1_vld => dout_9_1_vld,
              dinXTwdl_10_1_vld => dinXTwdl_10_1_vld,
              rd_10_Addr => rd_10_Addr,  -- ufix2
              rd_10_Enb => rd_10_Enb,
              proc_10_enb => proc_10_enb,
              multiply_10_J => multiply_10_J
              );

  u_SDF2_10_1 : RADIX22FFT_SDF2_10_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_9_1_re => dout_9_1_re,  -- sfix16
              dout_9_1_im => dout_9_1_im,  -- sfix16
              dout_9_1_vld => dout_9_1_vld,
              rd_10_Addr => rd_10_Addr,  -- ufix2
              rd_10_Enb => rd_10_Enb,
              proc_10_enb => proc_10_enb,
              multiply_10_J => multiply_10_J,
              dout_10_1_re => dout_10_1_re,  -- sfix16
              dout_10_1_im => dout_10_1_im,  -- sfix16
              dout_10_1_vld => dout_10_1_vld,
              dinXTwdl_10_1_vld => dinXTwdl_10_1_vld
              );

  u_twdlROM_11_1 : TWDLROM_11_1_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_10_1_vld => dout_10_1_vld,
              twdl_11_1_re => twdl_11_1_re,  -- sfix16_En14
              twdl_11_1_im => twdl_11_1_im  -- sfix16_En14
              );

  u_CTRL1_11_1 : RADIX22FFT_CTRL1_11_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dinXTwdl_11_1_vld => dinXTwdl_11_1_vld,
              dinXTwdl_11_1_vld_1 => dinXTwdl_11_1_vld,
              rd_11_Addr => rd_11_Addr,  -- ufix1
              rd_11_Enb => rd_11_Enb,
              proc_11_enb => proc_11_enb
              );

  u_SDF1_11_1 : RADIX22FFT_SDF1_11_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_11_1_re_dly => din_11_1_re_dly,  -- sfix16
              din_11_1_im_dly => din_11_1_im_dly,  -- sfix16
              din_11_vld_dly => din_11_vld_dly,
              rd_11_Addr => rd_11_Addr,  -- ufix1
              rd_11_Enb => rd_11_Enb,
              twdl_11_1_re => twdl_11_1_re,  -- sfix16_En14
              twdl_11_1_im => twdl_11_1_im,  -- sfix16_En14
              proc_11_enb => proc_11_enb,
              dout_11_1_re => dout_11_1_re,  -- sfix16
              dout_11_1_im => dout_11_1_im,  -- sfix16
              dout_11_1_vld => dout_11_1_vld,
              dinXTwdl_11_1_vld => dinXTwdl_11_1_vld
              );

  u_CTRL2_12_1 : RADIX22FFT_CTRL1_12_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_11_1_vld => dout_11_1_vld,
              dinXTwdl_12_1_vld => dinXTwdl_12_1_vld,
              rd_12_Addr => rd_12_Addr,
              rd_12_Enb => rd_12_Enb,
              proc_12_enb => proc_12_enb,
              multiply_12_J => multiply_12_J
              );

  u_SDF2_12_1 : RADIX22FFT_SDF2_12_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_11_1_re => dout_11_1_re,  -- sfix16
              dout_11_1_im => dout_11_1_im,  -- sfix16
              dout_11_1_vld => dout_11_1_vld,
              rd_12_Addr => rd_12_Addr,
              rd_12_Enb => rd_12_Enb,
              proc_12_enb => proc_12_enb,
              multiply_12_J => multiply_12_J,
              dout_12_1_re => dout_12_1_re,  -- sfix16
              dout_12_1_im => dout_12_1_im,  -- sfix16
              dout_12_1_vld => dout_12_1_vld,
              dinXTwdl_12_1_vld => dinXTwdl_12_1_vld
              );

  softReset <= '0';

  dtc_re <= dataIn;

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg <= (OTHERS => to_signed(16#0000#, 16));
        ELSE 
          intdelay_reg(0) <= dtc_re;
          intdelay_reg(1 TO 2) <= intdelay_reg(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_process;

  din_1_1_re_dly <= intdelay_reg(2);

  dtc_im <= to_signed(16#0000#, 16);

  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_1 <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_1 <= (OTHERS => to_signed(16#0000#, 16));
        ELSE 
          intdelay_reg_1(0) <= dtc_im;
          intdelay_reg_1(1 TO 2) <= intdelay_reg_1(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;

  din_1_1_im_dly <= intdelay_reg_1(2);

  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_2 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_2 <= (OTHERS => '0');
        ELSE 
          intdelay_reg_2(0) <= validIn;
          intdelay_reg_2(2 DOWNTO 1) <= intdelay_reg_2(1 DOWNTO 0);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;

  din_1_vld_dly <= intdelay_reg_2(2);

  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_3 <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_3 <= (OTHERS => to_signed(16#0000#, 16));
        ELSE 
          intdelay_reg_3(0) <= dout_2_1_re;
          intdelay_reg_3(1 TO 2) <= intdelay_reg_3(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;

  din_3_1_re_dly <= intdelay_reg_3(2);

  intdelay_4_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_4 <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_4 <= (OTHERS => to_signed(16#0000#, 16));
        ELSE 
          intdelay_reg_4(0) <= dout_2_1_im;
          intdelay_reg_4(1 TO 2) <= intdelay_reg_4(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;

  din_3_1_im_dly <= intdelay_reg_4(2);

  intdelay_5_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_5 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_5 <= (OTHERS => '0');
        ELSE 
          intdelay_reg_5(0) <= dout_2_1_vld;
          intdelay_reg_5(2 DOWNTO 1) <= intdelay_reg_5(1 DOWNTO 0);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;

  din_3_vld_dly <= intdelay_reg_5(2);

  intdelay_6_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_6 <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_6 <= (OTHERS => to_signed(16#0000#, 16));
        ELSE 
          intdelay_reg_6(0) <= dout_4_1_re;
          intdelay_reg_6(1 TO 2) <= intdelay_reg_6(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_6_process;

  din_5_1_re_dly <= intdelay_reg_6(2);

  intdelay_7_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_7 <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_7 <= (OTHERS => to_signed(16#0000#, 16));
        ELSE 
          intdelay_reg_7(0) <= dout_4_1_im;
          intdelay_reg_7(1 TO 2) <= intdelay_reg_7(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_7_process;

  din_5_1_im_dly <= intdelay_reg_7(2);

  intdelay_8_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_8 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_8 <= (OTHERS => '0');
        ELSE 
          intdelay_reg_8(0) <= dout_4_1_vld;
          intdelay_reg_8(2 DOWNTO 1) <= intdelay_reg_8(1 DOWNTO 0);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_8_process;

  din_5_vld_dly <= intdelay_reg_8(2);

  intdelay_9_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_9 <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_9 <= (OTHERS => to_signed(16#0000#, 16));
        ELSE 
          intdelay_reg_9(0) <= dout_6_1_re;
          intdelay_reg_9(1 TO 2) <= intdelay_reg_9(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_9_process;

  din_7_1_re_dly <= intdelay_reg_9(2);

  intdelay_10_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_10 <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_10 <= (OTHERS => to_signed(16#0000#, 16));
        ELSE 
          intdelay_reg_10(0) <= dout_6_1_im;
          intdelay_reg_10(1 TO 2) <= intdelay_reg_10(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_10_process;

  din_7_1_im_dly <= intdelay_reg_10(2);

  intdelay_11_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_11 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_11 <= (OTHERS => '0');
        ELSE 
          intdelay_reg_11(0) <= dout_6_1_vld;
          intdelay_reg_11(2 DOWNTO 1) <= intdelay_reg_11(1 DOWNTO 0);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_11_process;

  din_7_vld_dly <= intdelay_reg_11(2);

  intdelay_12_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_12 <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_12 <= (OTHERS => to_signed(16#0000#, 16));
        ELSE 
          intdelay_reg_12(0) <= dout_8_1_re;
          intdelay_reg_12(1 TO 2) <= intdelay_reg_12(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_12_process;

  din_9_1_re_dly <= intdelay_reg_12(2);

  intdelay_13_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_13 <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_13 <= (OTHERS => to_signed(16#0000#, 16));
        ELSE 
          intdelay_reg_13(0) <= dout_8_1_im;
          intdelay_reg_13(1 TO 2) <= intdelay_reg_13(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_13_process;

  din_9_1_im_dly <= intdelay_reg_13(2);

  intdelay_14_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_14 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_14 <= (OTHERS => '0');
        ELSE 
          intdelay_reg_14(0) <= dout_8_1_vld;
          intdelay_reg_14(2 DOWNTO 1) <= intdelay_reg_14(1 DOWNTO 0);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_14_process;

  din_9_vld_dly <= intdelay_reg_14(2);

  intdelay_15_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_15 <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_15 <= (OTHERS => to_signed(16#0000#, 16));
        ELSE 
          intdelay_reg_15(0) <= dout_10_1_re;
          intdelay_reg_15(1 TO 2) <= intdelay_reg_15(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_15_process;

  din_11_1_re_dly <= intdelay_reg_15(2);

  intdelay_16_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_16 <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_16 <= (OTHERS => to_signed(16#0000#, 16));
        ELSE 
          intdelay_reg_16(0) <= dout_10_1_im;
          intdelay_reg_16(1 TO 2) <= intdelay_reg_16(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_16_process;

  din_11_1_im_dly <= intdelay_reg_16(2);

  intdelay_17_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_17 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_17 <= (OTHERS => '0');
        ELSE 
          intdelay_reg_17(0) <= dout_10_1_vld;
          intdelay_reg_17(2 DOWNTO 1) <= intdelay_reg_17(1 DOWNTO 0);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_17_process;

  din_11_vld_dly <= intdelay_reg_17(2);

  dataOut_re <= dout_12_1_re;

  dataOut_im <= dout_12_1_im;

  validOut <= dout_12_1_vld;

END rtl;


-- End of FFT_HDL_Optimized1.vhd --

-- Start of IFFT_HDL_Optimized.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\IFFT_HDL_Optimized.vhd
-- Created: 2025-03-18 15:26:31
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: IFFT_HDL_Optimized
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized
-- Hierarchy Level: 1
-- Model version: 2.46
-- 
-- FFT
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY IFFT_HDL_Optimized IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dataIn_re                         :   IN    signed(31 DOWNTO 0);  -- int32
        dataIn_im                         :   IN    signed(31 DOWNTO 0);  -- int32
        validIn                           :   IN    std_logic;
        dataOut_re                        :   OUT   signed(31 DOWNTO 0);  -- int32
        validOut                          :   OUT   std_logic
        );
END IFFT_HDL_Optimized;


ARCHITECTURE rtl OF IFFT_HDL_Optimized IS

  -- Component Declarations
  COMPONENT RADIX22FFT_CTRL1_1_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinXTwdl_1_1_vld                :   IN    std_logic;
          dinXTwdl_1_1_vld_1              :   IN    std_logic;
          rd_1_Addr                       :   OUT   std_logic;
          rd_1_Enb                        :   OUT   std_logic;
          proc_1_enb                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF1_1_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_1_1_re_dly                  :   IN    signed(31 DOWNTO 0);  -- sfix32
          din_1_1_im_dly                  :   IN    signed(31 DOWNTO 0);  -- sfix32
          din_1_vld_dly                   :   IN    std_logic;
          rd_1_Addr                       :   IN    std_logic;
          rd_1_Enb                        :   IN    std_logic;
          proc_1_enb                      :   IN    std_logic;
          dout_1_1_re                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_1_1_im                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_1_1_vld                    :   OUT   std_logic;
          dinXTwdl_1_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_2_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_1_1_vld                    :   IN    std_logic;
          dinXTwdl_2_1_vld                :   IN    std_logic;
          rd_2_Addr                       :   OUT   std_logic;  -- ufix1
          rd_2_Enb                        :   OUT   std_logic;
          proc_2_enb                      :   OUT   std_logic;
          multiply_2_J                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF2_2_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_1_1_re                     :   IN    signed(31 DOWNTO 0);  -- sfix32
          dout_1_1_im                     :   IN    signed(31 DOWNTO 0);  -- sfix32
          dout_1_1_vld                    :   IN    std_logic;
          rd_2_Addr                       :   IN    std_logic;  -- ufix1
          rd_2_Enb                        :   IN    std_logic;
          proc_2_enb                      :   IN    std_logic;
          multiply_2_J                    :   IN    std_logic;
          dout_2_1_re                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_2_1_im                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_2_1_vld                    :   OUT   std_logic;
          dinXTwdl_2_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT TWDLROM_3_1_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_2_1_vld                    :   IN    std_logic;
          twdl_3_1_re                     :   OUT   signed(31 DOWNTO 0);  -- sfix32_En30
          twdl_3_1_im                     :   OUT   signed(31 DOWNTO 0)  -- sfix32_En30
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_3_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinXTwdl_3_1_vld                :   IN    std_logic;
          dinXTwdl_3_1_vld_1              :   IN    std_logic;
          rd_3_Addr                       :   OUT   unsigned(1 DOWNTO 0);  -- ufix2
          rd_3_Enb                        :   OUT   std_logic;
          proc_3_enb                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF1_3_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_3_1_re_dly                  :   IN    signed(31 DOWNTO 0);  -- sfix32
          din_3_1_im_dly                  :   IN    signed(31 DOWNTO 0);  -- sfix32
          din_3_vld_dly                   :   IN    std_logic;
          rd_3_Addr                       :   IN    unsigned(1 DOWNTO 0);  -- ufix2
          rd_3_Enb                        :   IN    std_logic;
          twdl_3_1_re                     :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
          twdl_3_1_im                     :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
          proc_3_enb                      :   IN    std_logic;
          dout_3_1_re                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_3_1_im                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_3_1_vld                    :   OUT   std_logic;
          dinXTwdl_3_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_4_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_3_1_vld                    :   IN    std_logic;
          dinXTwdl_4_1_vld                :   IN    std_logic;
          rd_4_Addr                       :   OUT   unsigned(2 DOWNTO 0);  -- ufix3
          rd_4_Enb                        :   OUT   std_logic;
          proc_4_enb                      :   OUT   std_logic;
          multiply_4_J                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF2_4_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_3_1_re                     :   IN    signed(31 DOWNTO 0);  -- sfix32
          dout_3_1_im                     :   IN    signed(31 DOWNTO 0);  -- sfix32
          dout_3_1_vld                    :   IN    std_logic;
          rd_4_Addr                       :   IN    unsigned(2 DOWNTO 0);  -- ufix3
          rd_4_Enb                        :   IN    std_logic;
          proc_4_enb                      :   IN    std_logic;
          multiply_4_J                    :   IN    std_logic;
          dout_4_1_re                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_4_1_im                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_4_1_vld                    :   OUT   std_logic;
          dinXTwdl_4_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT TWDLROM_5_1_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_4_1_vld                    :   IN    std_logic;
          twdl_5_1_re                     :   OUT   signed(31 DOWNTO 0);  -- sfix32_En30
          twdl_5_1_im                     :   OUT   signed(31 DOWNTO 0)  -- sfix32_En30
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_5_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinXTwdl_5_1_vld                :   IN    std_logic;
          dinXTwdl_5_1_vld_1              :   IN    std_logic;
          rd_5_Addr                       :   OUT   unsigned(3 DOWNTO 0);  -- ufix4
          rd_5_Enb                        :   OUT   std_logic;
          proc_5_enb                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF1_5_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_5_1_re_dly                  :   IN    signed(31 DOWNTO 0);  -- sfix32
          din_5_1_im_dly                  :   IN    signed(31 DOWNTO 0);  -- sfix32
          din_5_vld_dly                   :   IN    std_logic;
          rd_5_Addr                       :   IN    unsigned(3 DOWNTO 0);  -- ufix4
          rd_5_Enb                        :   IN    std_logic;
          twdl_5_1_re                     :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
          twdl_5_1_im                     :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
          proc_5_enb                      :   IN    std_logic;
          dout_5_1_re                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_5_1_im                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_5_1_vld                    :   OUT   std_logic;
          dinXTwdl_5_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_6_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_5_1_vld                    :   IN    std_logic;
          dinXTwdl_6_1_vld                :   IN    std_logic;
          rd_6_Addr                       :   OUT   unsigned(4 DOWNTO 0);  -- ufix5
          rd_6_Enb                        :   OUT   std_logic;
          proc_6_enb                      :   OUT   std_logic;
          multiply_6_J                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF2_6_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_5_1_re                     :   IN    signed(31 DOWNTO 0);  -- sfix32
          dout_5_1_im                     :   IN    signed(31 DOWNTO 0);  -- sfix32
          dout_5_1_vld                    :   IN    std_logic;
          rd_6_Addr                       :   IN    unsigned(4 DOWNTO 0);  -- ufix5
          rd_6_Enb                        :   IN    std_logic;
          proc_6_enb                      :   IN    std_logic;
          multiply_6_J                    :   IN    std_logic;
          dout_6_1_re                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_6_1_im                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_6_1_vld                    :   OUT   std_logic;
          dinXTwdl_6_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT TWDLROM_7_1_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_6_1_vld                    :   IN    std_logic;
          twdl_7_1_re                     :   OUT   signed(31 DOWNTO 0);  -- sfix32_En30
          twdl_7_1_im                     :   OUT   signed(31 DOWNTO 0)  -- sfix32_En30
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_7_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinXTwdl_7_1_vld                :   IN    std_logic;
          dinXTwdl_7_1_vld_1              :   IN    std_logic;
          rd_7_Addr                       :   OUT   unsigned(5 DOWNTO 0);  -- ufix6
          rd_7_Enb                        :   OUT   std_logic;
          proc_7_enb                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF1_7_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_7_1_re_dly                  :   IN    signed(31 DOWNTO 0);  -- sfix32
          din_7_1_im_dly                  :   IN    signed(31 DOWNTO 0);  -- sfix32
          din_7_vld_dly                   :   IN    std_logic;
          rd_7_Addr                       :   IN    unsigned(5 DOWNTO 0);  -- ufix6
          rd_7_Enb                        :   IN    std_logic;
          twdl_7_1_re                     :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
          twdl_7_1_im                     :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
          proc_7_enb                      :   IN    std_logic;
          dout_7_1_re                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_7_1_im                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_7_1_vld                    :   OUT   std_logic;
          dinXTwdl_7_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_8_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_7_1_vld                    :   IN    std_logic;
          dinXTwdl_8_1_vld                :   IN    std_logic;
          rd_8_Addr                       :   OUT   unsigned(6 DOWNTO 0);  -- ufix7
          rd_8_Enb                        :   OUT   std_logic;
          proc_8_enb                      :   OUT   std_logic;
          multiply_8_J                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF2_8_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_7_1_re                     :   IN    signed(31 DOWNTO 0);  -- sfix32
          dout_7_1_im                     :   IN    signed(31 DOWNTO 0);  -- sfix32
          dout_7_1_vld                    :   IN    std_logic;
          rd_8_Addr                       :   IN    unsigned(6 DOWNTO 0);  -- ufix7
          rd_8_Enb                        :   IN    std_logic;
          proc_8_enb                      :   IN    std_logic;
          multiply_8_J                    :   IN    std_logic;
          dout_8_1_re                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_8_1_im                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_8_1_vld                    :   OUT   std_logic;
          dinXTwdl_8_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT TWDLROM_9_1_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_8_1_vld                    :   IN    std_logic;
          twdl_9_1_re                     :   OUT   signed(31 DOWNTO 0);  -- sfix32_En30
          twdl_9_1_im                     :   OUT   signed(31 DOWNTO 0)  -- sfix32_En30
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_9_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinXTwdl_9_1_vld                :   IN    std_logic;
          dinXTwdl_9_1_vld_1              :   IN    std_logic;
          rd_9_Addr                       :   OUT   unsigned(7 DOWNTO 0);  -- ufix8
          rd_9_Enb                        :   OUT   std_logic;
          proc_9_enb                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF1_9_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_9_1_re_dly                  :   IN    signed(31 DOWNTO 0);  -- sfix32
          din_9_1_im_dly                  :   IN    signed(31 DOWNTO 0);  -- sfix32
          din_9_vld_dly                   :   IN    std_logic;
          rd_9_Addr                       :   IN    unsigned(7 DOWNTO 0);  -- ufix8
          rd_9_Enb                        :   IN    std_logic;
          twdl_9_1_re                     :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
          twdl_9_1_im                     :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
          proc_9_enb                      :   IN    std_logic;
          dout_9_1_re                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_9_1_im                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_9_1_vld                    :   OUT   std_logic;
          dinXTwdl_9_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_10_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_9_1_vld                    :   IN    std_logic;
          dinXTwdl_10_1_vld               :   IN    std_logic;
          rd_10_Addr                      :   OUT   unsigned(8 DOWNTO 0);  -- ufix9
          rd_10_Enb                       :   OUT   std_logic;
          proc_10_enb                     :   OUT   std_logic;
          multiply_10_J                   :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF2_10_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_9_1_re                     :   IN    signed(31 DOWNTO 0);  -- sfix32
          dout_9_1_im                     :   IN    signed(31 DOWNTO 0);  -- sfix32
          dout_9_1_vld                    :   IN    std_logic;
          rd_10_Addr                      :   IN    unsigned(8 DOWNTO 0);  -- ufix9
          rd_10_Enb                       :   IN    std_logic;
          proc_10_enb                     :   IN    std_logic;
          multiply_10_J                   :   IN    std_logic;
          dout_10_1_re                    :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_10_1_im                    :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_10_1_vld                   :   OUT   std_logic;
          dinXTwdl_10_1_vld               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT TWDLROM_11_1_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_10_1_vld                   :   IN    std_logic;
          twdl_11_1_re                    :   OUT   signed(31 DOWNTO 0);  -- sfix32_En30
          twdl_11_1_im                    :   OUT   signed(31 DOWNTO 0)  -- sfix32_En30
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_11_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinXTwdl_11_1_vld               :   IN    std_logic;
          dinXTwdl_11_1_vld_1             :   IN    std_logic;
          rd_11_Addr                      :   OUT   unsigned(9 DOWNTO 0);  -- ufix10
          rd_11_Enb                       :   OUT   std_logic;
          proc_11_enb                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF1_11_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_11_1_re_dly                 :   IN    signed(31 DOWNTO 0);  -- sfix32
          din_11_1_im_dly                 :   IN    signed(31 DOWNTO 0);  -- sfix32
          din_11_vld_dly                  :   IN    std_logic;
          rd_11_Addr                      :   IN    unsigned(9 DOWNTO 0);  -- ufix10
          rd_11_Enb                       :   IN    std_logic;
          twdl_11_1_re                    :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
          twdl_11_1_im                    :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
          proc_11_enb                     :   IN    std_logic;
          dout_11_1_re                    :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_11_1_im                    :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_11_1_vld                   :   OUT   std_logic;
          dinXTwdl_11_1_vld               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_12_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_11_1_vld                   :   IN    std_logic;
          dinXTwdl_12_1_vld               :   IN    std_logic;
          rd_12_Addr                      :   OUT   unsigned(10 DOWNTO 0);  -- ufix11
          rd_12_Enb                       :   OUT   std_logic;
          proc_12_enb                     :   OUT   std_logic;
          multiply_12_J                   :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF2_12_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_11_1_re                    :   IN    signed(31 DOWNTO 0);  -- sfix32
          dout_11_1_im                    :   IN    signed(31 DOWNTO 0);  -- sfix32
          dout_11_1_vld                   :   IN    std_logic;
          rd_12_Addr                      :   IN    unsigned(10 DOWNTO 0);  -- ufix11
          rd_12_Enb                       :   IN    std_logic;
          proc_12_enb                     :   IN    std_logic;
          multiply_12_J                   :   IN    std_logic;
          dout_12_1_im                    :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_12_1_vld                   :   OUT   std_logic;
          dinXTwdl_12_1_vld               :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : RADIX22FFT_CTRL1_1_block1
    USE ENTITY work.RADIX22FFT_CTRL1_1_block1(rtl);

  FOR ALL : RADIX22FFT_SDF1_1_block1
    USE ENTITY work.RADIX22FFT_SDF1_1_block1(rtl);

  FOR ALL : RADIX22FFT_CTRL1_2_block1
    USE ENTITY work.RADIX22FFT_CTRL1_2_block1(rtl);

  FOR ALL : RADIX22FFT_SDF2_2_block1
    USE ENTITY work.RADIX22FFT_SDF2_2_block1(rtl);

  FOR ALL : TWDLROM_3_1_block1
    USE ENTITY work.TWDLROM_3_1_block1(rtl);

  FOR ALL : RADIX22FFT_CTRL1_3_block1
    USE ENTITY work.RADIX22FFT_CTRL1_3_block1(rtl);

  FOR ALL : RADIX22FFT_SDF1_3_block1
    USE ENTITY work.RADIX22FFT_SDF1_3_block1(rtl);

  FOR ALL : RADIX22FFT_CTRL1_4_block1
    USE ENTITY work.RADIX22FFT_CTRL1_4_block1(rtl);

  FOR ALL : RADIX22FFT_SDF2_4_block1
    USE ENTITY work.RADIX22FFT_SDF2_4_block1(rtl);

  FOR ALL : TWDLROM_5_1_block1
    USE ENTITY work.TWDLROM_5_1_block1(rtl);

  FOR ALL : RADIX22FFT_CTRL1_5_block1
    USE ENTITY work.RADIX22FFT_CTRL1_5_block1(rtl);

  FOR ALL : RADIX22FFT_SDF1_5_block1
    USE ENTITY work.RADIX22FFT_SDF1_5_block1(rtl);

  FOR ALL : RADIX22FFT_CTRL1_6_block1
    USE ENTITY work.RADIX22FFT_CTRL1_6_block1(rtl);

  FOR ALL : RADIX22FFT_SDF2_6_block1
    USE ENTITY work.RADIX22FFT_SDF2_6_block1(rtl);

  FOR ALL : TWDLROM_7_1_block1
    USE ENTITY work.TWDLROM_7_1_block1(rtl);

  FOR ALL : RADIX22FFT_CTRL1_7_block1
    USE ENTITY work.RADIX22FFT_CTRL1_7_block1(rtl);

  FOR ALL : RADIX22FFT_SDF1_7_block1
    USE ENTITY work.RADIX22FFT_SDF1_7_block1(rtl);

  FOR ALL : RADIX22FFT_CTRL1_8_block1
    USE ENTITY work.RADIX22FFT_CTRL1_8_block1(rtl);

  FOR ALL : RADIX22FFT_SDF2_8_block1
    USE ENTITY work.RADIX22FFT_SDF2_8_block1(rtl);

  FOR ALL : TWDLROM_9_1_block1
    USE ENTITY work.TWDLROM_9_1_block1(rtl);

  FOR ALL : RADIX22FFT_CTRL1_9_block1
    USE ENTITY work.RADIX22FFT_CTRL1_9_block1(rtl);

  FOR ALL : RADIX22FFT_SDF1_9_block1
    USE ENTITY work.RADIX22FFT_SDF1_9_block1(rtl);

  FOR ALL : RADIX22FFT_CTRL1_10_block1
    USE ENTITY work.RADIX22FFT_CTRL1_10_block1(rtl);

  FOR ALL : RADIX22FFT_SDF2_10_block1
    USE ENTITY work.RADIX22FFT_SDF2_10_block1(rtl);

  FOR ALL : TWDLROM_11_1_block1
    USE ENTITY work.TWDLROM_11_1_block1(rtl);

  FOR ALL : RADIX22FFT_CTRL1_11_block1
    USE ENTITY work.RADIX22FFT_CTRL1_11_block1(rtl);

  FOR ALL : RADIX22FFT_SDF1_11_block1
    USE ENTITY work.RADIX22FFT_SDF1_11_block1(rtl);

  FOR ALL : RADIX22FFT_CTRL1_12_block1
    USE ENTITY work.RADIX22FFT_CTRL1_12_block1(rtl);

  FOR ALL : RADIX22FFT_SDF2_12_block1
    USE ENTITY work.RADIX22FFT_SDF2_12_block1(rtl);

  -- Signals
  SIGNAL softReset                        : std_logic;
  SIGNAL dataIn_1_cast_re                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dataIn_1_cast_im                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL intdelay_reg                     : vector_of_signed32(0 TO 2);  -- sfix32 [3]
  SIGNAL din_1_1_re_dly                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL intdelay_reg_1                   : vector_of_signed32(0 TO 2);  -- sfix32 [3]
  SIGNAL din_1_1_im_dly                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL intdelay_reg_2                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL din_1_vld_dly                    : std_logic;
  SIGNAL dinXTwdl_1_1_vld                 : std_logic;
  SIGNAL rd_1_Addr                        : std_logic;
  SIGNAL rd_1_Enb                         : std_logic;
  SIGNAL proc_1_enb                       : std_logic;
  SIGNAL dout_1_1_re                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout_1_1_im                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout_1_1_vld                     : std_logic;
  SIGNAL dinXTwdl_2_1_vld                 : std_logic;
  SIGNAL rd_2_Addr                        : std_logic;  -- ufix1
  SIGNAL rd_2_Enb                         : std_logic;
  SIGNAL proc_2_enb                       : std_logic;
  SIGNAL multiply_2_J                     : std_logic;
  SIGNAL dout_2_1_re                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout_2_1_im                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout_2_1_vld                     : std_logic;
  SIGNAL intdelay_reg_3                   : vector_of_signed32(0 TO 2);  -- sfix32 [3]
  SIGNAL din_3_1_re_dly                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL intdelay_reg_4                   : vector_of_signed32(0 TO 2);  -- sfix32 [3]
  SIGNAL din_3_1_im_dly                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL intdelay_reg_5                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL din_3_vld_dly                    : std_logic;
  SIGNAL twdl_3_1_re                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twdl_3_1_im                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL dinXTwdl_3_1_vld                 : std_logic;
  SIGNAL rd_3_Addr                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL rd_3_Enb                         : std_logic;
  SIGNAL proc_3_enb                       : std_logic;
  SIGNAL dout_3_1_re                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout_3_1_im                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout_3_1_vld                     : std_logic;
  SIGNAL dinXTwdl_4_1_vld                 : std_logic;
  SIGNAL rd_4_Addr                        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL rd_4_Enb                         : std_logic;
  SIGNAL proc_4_enb                       : std_logic;
  SIGNAL multiply_4_J                     : std_logic;
  SIGNAL dout_4_1_re                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout_4_1_im                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout_4_1_vld                     : std_logic;
  SIGNAL intdelay_reg_6                   : vector_of_signed32(0 TO 2);  -- sfix32 [3]
  SIGNAL din_5_1_re_dly                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL intdelay_reg_7                   : vector_of_signed32(0 TO 2);  -- sfix32 [3]
  SIGNAL din_5_1_im_dly                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL intdelay_reg_8                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL din_5_vld_dly                    : std_logic;
  SIGNAL twdl_5_1_re                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twdl_5_1_im                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL dinXTwdl_5_1_vld                 : std_logic;
  SIGNAL rd_5_Addr                        : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL rd_5_Enb                         : std_logic;
  SIGNAL proc_5_enb                       : std_logic;
  SIGNAL dout_5_1_re                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout_5_1_im                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout_5_1_vld                     : std_logic;
  SIGNAL dinXTwdl_6_1_vld                 : std_logic;
  SIGNAL rd_6_Addr                        : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL rd_6_Enb                         : std_logic;
  SIGNAL proc_6_enb                       : std_logic;
  SIGNAL multiply_6_J                     : std_logic;
  SIGNAL dout_6_1_re                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout_6_1_im                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout_6_1_vld                     : std_logic;
  SIGNAL intdelay_reg_9                   : vector_of_signed32(0 TO 2);  -- sfix32 [3]
  SIGNAL din_7_1_re_dly                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL intdelay_reg_10                  : vector_of_signed32(0 TO 2);  -- sfix32 [3]
  SIGNAL din_7_1_im_dly                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL intdelay_reg_11                  : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL din_7_vld_dly                    : std_logic;
  SIGNAL twdl_7_1_re                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twdl_7_1_im                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL dinXTwdl_7_1_vld                 : std_logic;
  SIGNAL rd_7_Addr                        : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL rd_7_Enb                         : std_logic;
  SIGNAL proc_7_enb                       : std_logic;
  SIGNAL dout_7_1_re                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout_7_1_im                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout_7_1_vld                     : std_logic;
  SIGNAL dinXTwdl_8_1_vld                 : std_logic;
  SIGNAL rd_8_Addr                        : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL rd_8_Enb                         : std_logic;
  SIGNAL proc_8_enb                       : std_logic;
  SIGNAL multiply_8_J                     : std_logic;
  SIGNAL dout_8_1_re                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout_8_1_im                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout_8_1_vld                     : std_logic;
  SIGNAL intdelay_reg_12                  : vector_of_signed32(0 TO 2);  -- sfix32 [3]
  SIGNAL din_9_1_re_dly                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL intdelay_reg_13                  : vector_of_signed32(0 TO 2);  -- sfix32 [3]
  SIGNAL din_9_1_im_dly                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL intdelay_reg_14                  : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL din_9_vld_dly                    : std_logic;
  SIGNAL twdl_9_1_re                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twdl_9_1_im                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL dinXTwdl_9_1_vld                 : std_logic;
  SIGNAL rd_9_Addr                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_9_Enb                         : std_logic;
  SIGNAL proc_9_enb                       : std_logic;
  SIGNAL dout_9_1_re                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout_9_1_im                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout_9_1_vld                     : std_logic;
  SIGNAL dinXTwdl_10_1_vld                : std_logic;
  SIGNAL rd_10_Addr                       : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL rd_10_Enb                        : std_logic;
  SIGNAL proc_10_enb                      : std_logic;
  SIGNAL multiply_10_J                    : std_logic;
  SIGNAL dout_10_1_re                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout_10_1_im                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout_10_1_vld                    : std_logic;
  SIGNAL intdelay_reg_15                  : vector_of_signed32(0 TO 2);  -- sfix32 [3]
  SIGNAL din_11_1_re_dly                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL intdelay_reg_16                  : vector_of_signed32(0 TO 2);  -- sfix32 [3]
  SIGNAL din_11_1_im_dly                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL intdelay_reg_17                  : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL din_11_vld_dly                   : std_logic;
  SIGNAL twdl_11_1_re                     : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twdl_11_1_im                     : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL dinXTwdl_11_1_vld                : std_logic;
  SIGNAL rd_11_Addr                       : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL rd_11_Enb                        : std_logic;
  SIGNAL proc_11_enb                      : std_logic;
  SIGNAL dout_11_1_re                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout_11_1_im                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout_11_1_vld                    : std_logic;
  SIGNAL dinXTwdl_12_1_vld                : std_logic;
  SIGNAL rd_12_Addr                       : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL rd_12_Enb                        : std_logic;
  SIGNAL proc_12_enb                      : std_logic;
  SIGNAL multiply_12_J                    : std_logic;
  SIGNAL dout_12_1_im                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout_12_1_vld                    : std_logic;

BEGIN
  u_CTRL1_1_1 : RADIX22FFT_CTRL1_1_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dinXTwdl_1_1_vld => dinXTwdl_1_1_vld,
              dinXTwdl_1_1_vld_1 => dinXTwdl_1_1_vld,
              rd_1_Addr => rd_1_Addr,
              rd_1_Enb => rd_1_Enb,
              proc_1_enb => proc_1_enb
              );

  u_SDF1_1_1 : RADIX22FFT_SDF1_1_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_1_1_re_dly => din_1_1_re_dly,  -- sfix32
              din_1_1_im_dly => din_1_1_im_dly,  -- sfix32
              din_1_vld_dly => din_1_vld_dly,
              rd_1_Addr => rd_1_Addr,
              rd_1_Enb => rd_1_Enb,
              proc_1_enb => proc_1_enb,
              dout_1_1_re => dout_1_1_re,  -- sfix32
              dout_1_1_im => dout_1_1_im,  -- sfix32
              dout_1_1_vld => dout_1_1_vld,
              dinXTwdl_1_1_vld => dinXTwdl_1_1_vld
              );

  u_CTRL2_2_1 : RADIX22FFT_CTRL1_2_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_1_1_vld => dout_1_1_vld,
              dinXTwdl_2_1_vld => dinXTwdl_2_1_vld,
              rd_2_Addr => rd_2_Addr,  -- ufix1
              rd_2_Enb => rd_2_Enb,
              proc_2_enb => proc_2_enb,
              multiply_2_J => multiply_2_J
              );

  u_SDF2_2_1 : RADIX22FFT_SDF2_2_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_1_1_re => dout_1_1_re,  -- sfix32
              dout_1_1_im => dout_1_1_im,  -- sfix32
              dout_1_1_vld => dout_1_1_vld,
              rd_2_Addr => rd_2_Addr,  -- ufix1
              rd_2_Enb => rd_2_Enb,
              proc_2_enb => proc_2_enb,
              multiply_2_J => multiply_2_J,
              dout_2_1_re => dout_2_1_re,  -- sfix32
              dout_2_1_im => dout_2_1_im,  -- sfix32
              dout_2_1_vld => dout_2_1_vld,
              dinXTwdl_2_1_vld => dinXTwdl_2_1_vld
              );

  u_twdlROM_3_1 : TWDLROM_3_1_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_2_1_vld => dout_2_1_vld,
              twdl_3_1_re => twdl_3_1_re,  -- sfix32_En30
              twdl_3_1_im => twdl_3_1_im  -- sfix32_En30
              );

  u_CTRL1_3_1 : RADIX22FFT_CTRL1_3_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dinXTwdl_3_1_vld => dinXTwdl_3_1_vld,
              dinXTwdl_3_1_vld_1 => dinXTwdl_3_1_vld,
              rd_3_Addr => rd_3_Addr,  -- ufix2
              rd_3_Enb => rd_3_Enb,
              proc_3_enb => proc_3_enb
              );

  u_SDF1_3_1 : RADIX22FFT_SDF1_3_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_3_1_re_dly => din_3_1_re_dly,  -- sfix32
              din_3_1_im_dly => din_3_1_im_dly,  -- sfix32
              din_3_vld_dly => din_3_vld_dly,
              rd_3_Addr => rd_3_Addr,  -- ufix2
              rd_3_Enb => rd_3_Enb,
              twdl_3_1_re => twdl_3_1_re,  -- sfix32_En30
              twdl_3_1_im => twdl_3_1_im,  -- sfix32_En30
              proc_3_enb => proc_3_enb,
              dout_3_1_re => dout_3_1_re,  -- sfix32
              dout_3_1_im => dout_3_1_im,  -- sfix32
              dout_3_1_vld => dout_3_1_vld,
              dinXTwdl_3_1_vld => dinXTwdl_3_1_vld
              );

  u_CTRL2_4_1 : RADIX22FFT_CTRL1_4_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_3_1_vld => dout_3_1_vld,
              dinXTwdl_4_1_vld => dinXTwdl_4_1_vld,
              rd_4_Addr => rd_4_Addr,  -- ufix3
              rd_4_Enb => rd_4_Enb,
              proc_4_enb => proc_4_enb,
              multiply_4_J => multiply_4_J
              );

  u_SDF2_4_1 : RADIX22FFT_SDF2_4_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_3_1_re => dout_3_1_re,  -- sfix32
              dout_3_1_im => dout_3_1_im,  -- sfix32
              dout_3_1_vld => dout_3_1_vld,
              rd_4_Addr => rd_4_Addr,  -- ufix3
              rd_4_Enb => rd_4_Enb,
              proc_4_enb => proc_4_enb,
              multiply_4_J => multiply_4_J,
              dout_4_1_re => dout_4_1_re,  -- sfix32
              dout_4_1_im => dout_4_1_im,  -- sfix32
              dout_4_1_vld => dout_4_1_vld,
              dinXTwdl_4_1_vld => dinXTwdl_4_1_vld
              );

  u_twdlROM_5_1 : TWDLROM_5_1_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_4_1_vld => dout_4_1_vld,
              twdl_5_1_re => twdl_5_1_re,  -- sfix32_En30
              twdl_5_1_im => twdl_5_1_im  -- sfix32_En30
              );

  u_CTRL1_5_1 : RADIX22FFT_CTRL1_5_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dinXTwdl_5_1_vld => dinXTwdl_5_1_vld,
              dinXTwdl_5_1_vld_1 => dinXTwdl_5_1_vld,
              rd_5_Addr => rd_5_Addr,  -- ufix4
              rd_5_Enb => rd_5_Enb,
              proc_5_enb => proc_5_enb
              );

  u_SDF1_5_1 : RADIX22FFT_SDF1_5_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_5_1_re_dly => din_5_1_re_dly,  -- sfix32
              din_5_1_im_dly => din_5_1_im_dly,  -- sfix32
              din_5_vld_dly => din_5_vld_dly,
              rd_5_Addr => rd_5_Addr,  -- ufix4
              rd_5_Enb => rd_5_Enb,
              twdl_5_1_re => twdl_5_1_re,  -- sfix32_En30
              twdl_5_1_im => twdl_5_1_im,  -- sfix32_En30
              proc_5_enb => proc_5_enb,
              dout_5_1_re => dout_5_1_re,  -- sfix32
              dout_5_1_im => dout_5_1_im,  -- sfix32
              dout_5_1_vld => dout_5_1_vld,
              dinXTwdl_5_1_vld => dinXTwdl_5_1_vld
              );

  u_CTRL2_6_1 : RADIX22FFT_CTRL1_6_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_5_1_vld => dout_5_1_vld,
              dinXTwdl_6_1_vld => dinXTwdl_6_1_vld,
              rd_6_Addr => rd_6_Addr,  -- ufix5
              rd_6_Enb => rd_6_Enb,
              proc_6_enb => proc_6_enb,
              multiply_6_J => multiply_6_J
              );

  u_SDF2_6_1 : RADIX22FFT_SDF2_6_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_5_1_re => dout_5_1_re,  -- sfix32
              dout_5_1_im => dout_5_1_im,  -- sfix32
              dout_5_1_vld => dout_5_1_vld,
              rd_6_Addr => rd_6_Addr,  -- ufix5
              rd_6_Enb => rd_6_Enb,
              proc_6_enb => proc_6_enb,
              multiply_6_J => multiply_6_J,
              dout_6_1_re => dout_6_1_re,  -- sfix32
              dout_6_1_im => dout_6_1_im,  -- sfix32
              dout_6_1_vld => dout_6_1_vld,
              dinXTwdl_6_1_vld => dinXTwdl_6_1_vld
              );

  u_twdlROM_7_1 : TWDLROM_7_1_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_6_1_vld => dout_6_1_vld,
              twdl_7_1_re => twdl_7_1_re,  -- sfix32_En30
              twdl_7_1_im => twdl_7_1_im  -- sfix32_En30
              );

  u_CTRL1_7_1 : RADIX22FFT_CTRL1_7_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dinXTwdl_7_1_vld => dinXTwdl_7_1_vld,
              dinXTwdl_7_1_vld_1 => dinXTwdl_7_1_vld,
              rd_7_Addr => rd_7_Addr,  -- ufix6
              rd_7_Enb => rd_7_Enb,
              proc_7_enb => proc_7_enb
              );

  u_SDF1_7_1 : RADIX22FFT_SDF1_7_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_7_1_re_dly => din_7_1_re_dly,  -- sfix32
              din_7_1_im_dly => din_7_1_im_dly,  -- sfix32
              din_7_vld_dly => din_7_vld_dly,
              rd_7_Addr => rd_7_Addr,  -- ufix6
              rd_7_Enb => rd_7_Enb,
              twdl_7_1_re => twdl_7_1_re,  -- sfix32_En30
              twdl_7_1_im => twdl_7_1_im,  -- sfix32_En30
              proc_7_enb => proc_7_enb,
              dout_7_1_re => dout_7_1_re,  -- sfix32
              dout_7_1_im => dout_7_1_im,  -- sfix32
              dout_7_1_vld => dout_7_1_vld,
              dinXTwdl_7_1_vld => dinXTwdl_7_1_vld
              );

  u_CTRL2_8_1 : RADIX22FFT_CTRL1_8_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_7_1_vld => dout_7_1_vld,
              dinXTwdl_8_1_vld => dinXTwdl_8_1_vld,
              rd_8_Addr => rd_8_Addr,  -- ufix7
              rd_8_Enb => rd_8_Enb,
              proc_8_enb => proc_8_enb,
              multiply_8_J => multiply_8_J
              );

  u_SDF2_8_1 : RADIX22FFT_SDF2_8_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_7_1_re => dout_7_1_re,  -- sfix32
              dout_7_1_im => dout_7_1_im,  -- sfix32
              dout_7_1_vld => dout_7_1_vld,
              rd_8_Addr => rd_8_Addr,  -- ufix7
              rd_8_Enb => rd_8_Enb,
              proc_8_enb => proc_8_enb,
              multiply_8_J => multiply_8_J,
              dout_8_1_re => dout_8_1_re,  -- sfix32
              dout_8_1_im => dout_8_1_im,  -- sfix32
              dout_8_1_vld => dout_8_1_vld,
              dinXTwdl_8_1_vld => dinXTwdl_8_1_vld
              );

  u_twdlROM_9_1 : TWDLROM_9_1_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_8_1_vld => dout_8_1_vld,
              twdl_9_1_re => twdl_9_1_re,  -- sfix32_En30
              twdl_9_1_im => twdl_9_1_im  -- sfix32_En30
              );

  u_CTRL1_9_1 : RADIX22FFT_CTRL1_9_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dinXTwdl_9_1_vld => dinXTwdl_9_1_vld,
              dinXTwdl_9_1_vld_1 => dinXTwdl_9_1_vld,
              rd_9_Addr => rd_9_Addr,  -- ufix8
              rd_9_Enb => rd_9_Enb,
              proc_9_enb => proc_9_enb
              );

  u_SDF1_9_1 : RADIX22FFT_SDF1_9_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_9_1_re_dly => din_9_1_re_dly,  -- sfix32
              din_9_1_im_dly => din_9_1_im_dly,  -- sfix32
              din_9_vld_dly => din_9_vld_dly,
              rd_9_Addr => rd_9_Addr,  -- ufix8
              rd_9_Enb => rd_9_Enb,
              twdl_9_1_re => twdl_9_1_re,  -- sfix32_En30
              twdl_9_1_im => twdl_9_1_im,  -- sfix32_En30
              proc_9_enb => proc_9_enb,
              dout_9_1_re => dout_9_1_re,  -- sfix32
              dout_9_1_im => dout_9_1_im,  -- sfix32
              dout_9_1_vld => dout_9_1_vld,
              dinXTwdl_9_1_vld => dinXTwdl_9_1_vld
              );

  u_CTRL2_10_1 : RADIX22FFT_CTRL1_10_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_9_1_vld => dout_9_1_vld,
              dinXTwdl_10_1_vld => dinXTwdl_10_1_vld,
              rd_10_Addr => rd_10_Addr,  -- ufix9
              rd_10_Enb => rd_10_Enb,
              proc_10_enb => proc_10_enb,
              multiply_10_J => multiply_10_J
              );

  u_SDF2_10_1 : RADIX22FFT_SDF2_10_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_9_1_re => dout_9_1_re,  -- sfix32
              dout_9_1_im => dout_9_1_im,  -- sfix32
              dout_9_1_vld => dout_9_1_vld,
              rd_10_Addr => rd_10_Addr,  -- ufix9
              rd_10_Enb => rd_10_Enb,
              proc_10_enb => proc_10_enb,
              multiply_10_J => multiply_10_J,
              dout_10_1_re => dout_10_1_re,  -- sfix32
              dout_10_1_im => dout_10_1_im,  -- sfix32
              dout_10_1_vld => dout_10_1_vld,
              dinXTwdl_10_1_vld => dinXTwdl_10_1_vld
              );

  u_twdlROM_11_1 : TWDLROM_11_1_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_10_1_vld => dout_10_1_vld,
              twdl_11_1_re => twdl_11_1_re,  -- sfix32_En30
              twdl_11_1_im => twdl_11_1_im  -- sfix32_En30
              );

  u_CTRL1_11_1 : RADIX22FFT_CTRL1_11_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dinXTwdl_11_1_vld => dinXTwdl_11_1_vld,
              dinXTwdl_11_1_vld_1 => dinXTwdl_11_1_vld,
              rd_11_Addr => rd_11_Addr,  -- ufix10
              rd_11_Enb => rd_11_Enb,
              proc_11_enb => proc_11_enb
              );

  u_SDF1_11_1 : RADIX22FFT_SDF1_11_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_11_1_re_dly => din_11_1_re_dly,  -- sfix32
              din_11_1_im_dly => din_11_1_im_dly,  -- sfix32
              din_11_vld_dly => din_11_vld_dly,
              rd_11_Addr => rd_11_Addr,  -- ufix10
              rd_11_Enb => rd_11_Enb,
              twdl_11_1_re => twdl_11_1_re,  -- sfix32_En30
              twdl_11_1_im => twdl_11_1_im,  -- sfix32_En30
              proc_11_enb => proc_11_enb,
              dout_11_1_re => dout_11_1_re,  -- sfix32
              dout_11_1_im => dout_11_1_im,  -- sfix32
              dout_11_1_vld => dout_11_1_vld,
              dinXTwdl_11_1_vld => dinXTwdl_11_1_vld
              );

  u_CTRL2_12_1 : RADIX22FFT_CTRL1_12_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              dout_11_1_vld => dout_11_1_vld,
              dinXTwdl_12_1_vld => dinXTwdl_12_1_vld,
              rd_12_Addr => rd_12_Addr,  -- ufix11
              rd_12_Enb => rd_12_Enb,
              proc_12_enb => proc_12_enb,
              multiply_12_J => multiply_12_J
              );

  u_SDF2_12_1 : RADIX22FFT_SDF2_12_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_11_1_re => dout_11_1_re,  -- sfix32
              dout_11_1_im => dout_11_1_im,  -- sfix32
              dout_11_1_vld => dout_11_1_vld,
              rd_12_Addr => rd_12_Addr,  -- ufix11
              rd_12_Enb => rd_12_Enb,
              proc_12_enb => proc_12_enb,
              multiply_12_J => multiply_12_J,
              dout_12_1_im => dout_12_1_im,  -- sfix32
              dout_12_1_vld => dout_12_1_vld,
              dinXTwdl_12_1_vld => dinXTwdl_12_1_vld
              );

  softReset <= '0';

  dataIn_1_cast_re <= dataIn_re;
  dataIn_1_cast_im <= dataIn_im;

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg <= (OTHERS => to_signed(0, 32));
        ELSE 
          intdelay_reg(0) <= dataIn_1_cast_im;
          intdelay_reg(1 TO 2) <= intdelay_reg(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_process;

  din_1_1_re_dly <= intdelay_reg(2);

  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_1 <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_1 <= (OTHERS => to_signed(0, 32));
        ELSE 
          intdelay_reg_1(0) <= dataIn_1_cast_re;
          intdelay_reg_1(1 TO 2) <= intdelay_reg_1(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;

  din_1_1_im_dly <= intdelay_reg_1(2);

  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_2 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_2 <= (OTHERS => '0');
        ELSE 
          intdelay_reg_2(0) <= validIn;
          intdelay_reg_2(2 DOWNTO 1) <= intdelay_reg_2(1 DOWNTO 0);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;

  din_1_vld_dly <= intdelay_reg_2(2);

  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_3 <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_3 <= (OTHERS => to_signed(0, 32));
        ELSE 
          intdelay_reg_3(0) <= dout_2_1_re;
          intdelay_reg_3(1 TO 2) <= intdelay_reg_3(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;

  din_3_1_re_dly <= intdelay_reg_3(2);

  intdelay_4_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_4 <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_4 <= (OTHERS => to_signed(0, 32));
        ELSE 
          intdelay_reg_4(0) <= dout_2_1_im;
          intdelay_reg_4(1 TO 2) <= intdelay_reg_4(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;

  din_3_1_im_dly <= intdelay_reg_4(2);

  intdelay_5_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_5 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_5 <= (OTHERS => '0');
        ELSE 
          intdelay_reg_5(0) <= dout_2_1_vld;
          intdelay_reg_5(2 DOWNTO 1) <= intdelay_reg_5(1 DOWNTO 0);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;

  din_3_vld_dly <= intdelay_reg_5(2);

  intdelay_6_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_6 <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_6 <= (OTHERS => to_signed(0, 32));
        ELSE 
          intdelay_reg_6(0) <= dout_4_1_re;
          intdelay_reg_6(1 TO 2) <= intdelay_reg_6(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_6_process;

  din_5_1_re_dly <= intdelay_reg_6(2);

  intdelay_7_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_7 <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_7 <= (OTHERS => to_signed(0, 32));
        ELSE 
          intdelay_reg_7(0) <= dout_4_1_im;
          intdelay_reg_7(1 TO 2) <= intdelay_reg_7(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_7_process;

  din_5_1_im_dly <= intdelay_reg_7(2);

  intdelay_8_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_8 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_8 <= (OTHERS => '0');
        ELSE 
          intdelay_reg_8(0) <= dout_4_1_vld;
          intdelay_reg_8(2 DOWNTO 1) <= intdelay_reg_8(1 DOWNTO 0);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_8_process;

  din_5_vld_dly <= intdelay_reg_8(2);

  intdelay_9_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_9 <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_9 <= (OTHERS => to_signed(0, 32));
        ELSE 
          intdelay_reg_9(0) <= dout_6_1_re;
          intdelay_reg_9(1 TO 2) <= intdelay_reg_9(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_9_process;

  din_7_1_re_dly <= intdelay_reg_9(2);

  intdelay_10_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_10 <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_10 <= (OTHERS => to_signed(0, 32));
        ELSE 
          intdelay_reg_10(0) <= dout_6_1_im;
          intdelay_reg_10(1 TO 2) <= intdelay_reg_10(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_10_process;

  din_7_1_im_dly <= intdelay_reg_10(2);

  intdelay_11_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_11 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_11 <= (OTHERS => '0');
        ELSE 
          intdelay_reg_11(0) <= dout_6_1_vld;
          intdelay_reg_11(2 DOWNTO 1) <= intdelay_reg_11(1 DOWNTO 0);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_11_process;

  din_7_vld_dly <= intdelay_reg_11(2);

  intdelay_12_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_12 <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_12 <= (OTHERS => to_signed(0, 32));
        ELSE 
          intdelay_reg_12(0) <= dout_8_1_re;
          intdelay_reg_12(1 TO 2) <= intdelay_reg_12(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_12_process;

  din_9_1_re_dly <= intdelay_reg_12(2);

  intdelay_13_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_13 <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_13 <= (OTHERS => to_signed(0, 32));
        ELSE 
          intdelay_reg_13(0) <= dout_8_1_im;
          intdelay_reg_13(1 TO 2) <= intdelay_reg_13(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_13_process;

  din_9_1_im_dly <= intdelay_reg_13(2);

  intdelay_14_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_14 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_14 <= (OTHERS => '0');
        ELSE 
          intdelay_reg_14(0) <= dout_8_1_vld;
          intdelay_reg_14(2 DOWNTO 1) <= intdelay_reg_14(1 DOWNTO 0);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_14_process;

  din_9_vld_dly <= intdelay_reg_14(2);

  intdelay_15_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_15 <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_15 <= (OTHERS => to_signed(0, 32));
        ELSE 
          intdelay_reg_15(0) <= dout_10_1_re;
          intdelay_reg_15(1 TO 2) <= intdelay_reg_15(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_15_process;

  din_11_1_re_dly <= intdelay_reg_15(2);

  intdelay_16_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_16 <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_16 <= (OTHERS => to_signed(0, 32));
        ELSE 
          intdelay_reg_16(0) <= dout_10_1_im;
          intdelay_reg_16(1 TO 2) <= intdelay_reg_16(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_16_process;

  din_11_1_im_dly <= intdelay_reg_16(2);

  intdelay_17_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        intdelay_reg_17 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_17 <= (OTHERS => '0');
        ELSE 
          intdelay_reg_17(0) <= dout_10_1_vld;
          intdelay_reg_17(2 DOWNTO 1) <= intdelay_reg_17(1 DOWNTO 0);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_17_process;

  din_11_vld_dly <= intdelay_reg_17(2);

  dataOut_re <= dout_12_1_im;

  validOut <= dout_12_1_vld;

END rtl;


-- End of IFFT_HDL_Optimized.vhd --

-- Start of RADIX22FFT_CTRL1_1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_1.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_1
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_CTRL1_1
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dinXTwdl_1_1_vld                  :   IN    std_logic;
        dinXTwdl_1_1_vld_1                :   IN    std_logic;
        rd_1_Addr                         :   OUT   unsigned(10 DOWNTO 0);  -- ufix11
        rd_1_Enb                          :   OUT   std_logic;
        proc_1_enb                        :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_1;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_1 IS

  -- Signals
  SIGNAL SDFController_wrCount            : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;
  SIGNAL multiply_1_J                     : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= to_unsigned(16#000#, 11);
        SDFController_rdAddr_reg <= to_unsigned(16#000#, 11);
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_1_1_vld, dinXTwdl_1_1_vld_1)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next <= SDFController_procEnb_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#000#, 11);
        rd_1_Enb <= '0';
        IF dinXTwdl_1_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#7FF#, 11)) THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_1_Enb <= dinXTwdl_1_1_vld_1;
        IF dinXTwdl_1_1_vld_1 = '1' THEN 
          IF SDFController_rdAddr_reg = to_unsigned(16#7FF#, 11) THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
          END IF;
          SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#001#, 11);
        END IF;
      WHEN "10" =>
        rd_1_Enb <= '1';
        IF SDFController_rdAddr_reg = to_unsigned(16#7FF#, 11) THEN 
          IF dinXTwdl_1_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#7FF#, 11)) THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        END IF;
        SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#001#, 11);
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#000#, 11);
        rd_1_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#000#, 11);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_1_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= to_unsigned(16#001#, 11);
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_1_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#7FF#, 11) THEN 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#001#, 11);
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dinXTwdl_1_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#7FF#, 11) THEN 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
            SDFController_procEnb_reg_next <= '0';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#001#, 11);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#7FF#, 11);
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_1_Addr <= SDFController_rdAddr_reg;
    proc_1_enb <= SDFController_procEnb_reg;
    multiply_1_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_1.vhd --

-- Start of RADIX22FFT_CTRL1_10.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_10.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_10
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_CTRL1_10
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_10 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_9_1_vld                      :   IN    std_logic;
        dinXTwdl_10_1_vld                 :   IN    std_logic;
        rd_10_Addr                        :   OUT   unsigned(1 DOWNTO 0);  -- ufix2
        rd_10_Enb                         :   OUT   std_logic;
        proc_10_enb                       :   OUT   std_logic;
        multiply_10_J                     :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_10;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_10 IS

  -- Signals
  SIGNAL SDFController_wrCount            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg <= to_unsigned(16#0#, 2);
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_10_1_vld, dout_9_1_vld)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next <= SDFController_procEnb_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#0#, 2);
        rd_10_Enb <= '0';
        IF dout_9_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#3#, 2)) THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_10_Enb <= dinXTwdl_10_1_vld;
        IF dinXTwdl_10_1_vld = '1' THEN 
          IF SDFController_rdAddr_reg = to_unsigned(16#3#, 2) THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
          END IF;
          SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#1#, 2);
        END IF;
      WHEN "10" =>
        rd_10_Enb <= '0';
        IF SDFController_rdAddr_reg = to_unsigned(16#3#, 2) THEN 
          IF dout_9_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#3#, 2)) THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        END IF;
        SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#1#, 2);
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#0#, 2);
        rd_10_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dout_9_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dout_9_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#3#, 2) THEN 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#1#, 2);
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dout_9_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#3#, 2) THEN 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
            SDFController_procEnb_reg_next <= '0';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#1#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#3#, 2);
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_10_Addr <= SDFController_rdAddr_reg;
    proc_10_enb <= SDFController_procEnb_reg;
    multiply_10_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_10.vhd --

-- Start of RADIX22FFT_CTRL1_10_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_10_block.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_10_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_CTRL1_10
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_10_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_9_1_vld                      :   IN    std_logic;
        dinXTwdl_10_1_vld                 :   IN    std_logic;
        rd_10_Addr                        :   OUT   unsigned(1 DOWNTO 0);  -- ufix2
        rd_10_Enb                         :   OUT   std_logic;
        proc_10_enb                       :   OUT   std_logic;
        multiply_10_J                     :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_10_block;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_10_block IS

  -- Signals
  SIGNAL SDFController_wrCount            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg <= to_unsigned(16#0#, 2);
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_10_1_vld, dout_9_1_vld)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next <= SDFController_procEnb_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#0#, 2);
        rd_10_Enb <= '0';
        IF dout_9_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#3#, 2)) THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_10_Enb <= dinXTwdl_10_1_vld;
        IF dinXTwdl_10_1_vld = '1' THEN 
          IF SDFController_rdAddr_reg = to_unsigned(16#3#, 2) THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
          END IF;
          SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#1#, 2);
        END IF;
      WHEN "10" =>
        rd_10_Enb <= '0';
        IF SDFController_rdAddr_reg = to_unsigned(16#3#, 2) THEN 
          IF dout_9_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#3#, 2)) THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        END IF;
        SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#1#, 2);
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#0#, 2);
        rd_10_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dout_9_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dout_9_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#3#, 2) THEN 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#1#, 2);
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dout_9_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#3#, 2) THEN 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
            SDFController_procEnb_reg_next <= '0';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#1#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#3#, 2);
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_10_Addr <= SDFController_rdAddr_reg;
    proc_10_enb <= SDFController_procEnb_reg;
    multiply_10_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_10_block.vhd --

-- Start of RADIX22FFT_CTRL1_10_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_10_block1.vhd
-- Created: 2025-03-18 15:26:31
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_10_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_CTRL1_10
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_10_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_9_1_vld                      :   IN    std_logic;
        dinXTwdl_10_1_vld                 :   IN    std_logic;
        rd_10_Addr                        :   OUT   unsigned(8 DOWNTO 0);  -- ufix9
        rd_10_Enb                         :   OUT   std_logic;
        proc_10_enb                       :   OUT   std_logic;
        multiply_10_J                     :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_10_block1;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_10_block1 IS

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL SDFController_wrCount            : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= to_unsigned(16#000#, 9);
        SDFController_rdAddr_reg <= to_unsigned(16#000#, 9);
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_10_1_vld, dout_9_1_vld)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next <= SDFController_procEnb_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= hdlcoder_to_stdlogic( NOT (SDFController_rdAddr_reg <= to_unsigned(16#0FF#, 9)));
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= hdlcoder_to_stdlogic( NOT (SDFController_rdAddr_reg <= to_unsigned(16#0FF#, 9)));
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#000#, 9);
        rd_10_Enb <= '0';
        IF dout_9_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#1FF#, 9)) THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_10_Enb <= dinXTwdl_10_1_vld;
        IF dinXTwdl_10_1_vld = '1' THEN 
          IF SDFController_rdAddr_reg = to_unsigned(16#1FF#, 9) THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
          END IF;
          SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#001#, 9);
        END IF;
      WHEN "10" =>
        rd_10_Enb <= '1';
        IF SDFController_rdAddr_reg = to_unsigned(16#1FF#, 9) THEN 
          IF dout_9_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#1FF#, 9)) THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        END IF;
        SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#001#, 9);
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#000#, 9);
        rd_10_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#000#, 9);
        SDFController_procEnb_reg_next <= '0';
        IF dout_9_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= to_unsigned(16#001#, 9);
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dout_9_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#1FF#, 9) THEN 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#001#, 9);
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dout_9_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#1FF#, 9) THEN 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
            SDFController_procEnb_reg_next <= '0';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#001#, 9);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#1FF#, 9);
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_10_Addr <= SDFController_rdAddr_reg;
    proc_10_enb <= SDFController_procEnb_reg;
    multiply_10_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_10_block1.vhd --

-- Start of RADIX22FFT_CTRL1_11.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_11.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_11
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_CTRL1_11
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_11 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dinXTwdl_11_1_vld                 :   IN    std_logic;
        dinXTwdl_11_1_vld_1               :   IN    std_logic;
        rd_11_Addr                        :   OUT   std_logic;  -- ufix1
        rd_11_Enb                         :   OUT   std_logic;
        proc_11_enb                       :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_11;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_11 IS

  -- Signals
  SIGNAL SDFController_wrCount            : std_logic;  -- ufix1
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : std_logic;  -- ufix1
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : std_logic;  -- ufix1
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : std_logic;  -- ufix1
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;
  SIGNAL multiply_11_J                    : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= '0';
        SDFController_rdAddr_reg <= '0';
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_11_1_vld, dinXTwdl_11_1_vld_1)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= '0';
        rd_11_Enb <= '0';
        IF SDFController_procEnb_reg = '1' THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
          rd_11_Enb <= dinXTwdl_11_1_vld_1;
          IF dinXTwdl_11_1_vld_1 = '1' THEN 
            SDFController_rdAddr_reg_next <= '1';
          END IF;
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_11_Enb <= dinXTwdl_11_1_vld_1;
        IF dinXTwdl_11_1_vld_1 = '1' THEN 
          IF SDFController_rdAddr_reg = '1' THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
            SDFController_rdAddr_reg_next <= '0';
          ELSE 
            SDFController_rdAddr_reg_next <= '1';
          END IF;
        END IF;
      WHEN "10" =>
        rd_11_Enb <= '0';
        IF SDFController_rdAddr_reg = '1' THEN 
          SDFController_rdAddr_reg_next <= '0';
          IF SDFController_procEnb_reg = '1' THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        ELSE 
          SDFController_rdAddr_reg_next <= '1';
        END IF;
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= '0';
        rd_11_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= '0';
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_11_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= '1';
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_11_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#2#, 2);
          SDFController_procEnb_reg_next <= '1';
          SDFController_wrCount_next <= '0';
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        SDFController_procEnb_reg_next <= '1';
        IF dinXTwdl_11_1_vld = '1' THEN 
          IF SDFController_wrCount = '1' THEN 
            SDFController_wrState_next <= to_unsigned(16#0#, 2);
            SDFController_procEnb_reg_next <= '0';
            SDFController_wrCount_next <= '0';
          ELSE 
            SDFController_wrCount_next <= '1';
          END IF;
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= '0';
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_11_Addr <= SDFController_rdAddr_reg;
    proc_11_enb <= SDFController_procEnb_reg;
    multiply_11_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_11.vhd --

-- Start of RADIX22FFT_CTRL1_11_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_11_block.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_11_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_CTRL1_11
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_11_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dinXTwdl_11_1_vld                 :   IN    std_logic;
        dinXTwdl_11_1_vld_1               :   IN    std_logic;
        rd_11_Addr                        :   OUT   std_logic;  -- ufix1
        rd_11_Enb                         :   OUT   std_logic;
        proc_11_enb                       :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_11_block;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_11_block IS

  -- Signals
  SIGNAL SDFController_wrCount            : std_logic;  -- ufix1
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : std_logic;  -- ufix1
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : std_logic;  -- ufix1
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : std_logic;  -- ufix1
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;
  SIGNAL multiply_11_J                    : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= '0';
        SDFController_rdAddr_reg <= '0';
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_11_1_vld, dinXTwdl_11_1_vld_1)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= '0';
        rd_11_Enb <= '0';
        IF SDFController_procEnb_reg = '1' THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
          rd_11_Enb <= dinXTwdl_11_1_vld_1;
          IF dinXTwdl_11_1_vld_1 = '1' THEN 
            SDFController_rdAddr_reg_next <= '1';
          END IF;
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_11_Enb <= dinXTwdl_11_1_vld_1;
        IF dinXTwdl_11_1_vld_1 = '1' THEN 
          IF SDFController_rdAddr_reg = '1' THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
            SDFController_rdAddr_reg_next <= '0';
          ELSE 
            SDFController_rdAddr_reg_next <= '1';
          END IF;
        END IF;
      WHEN "10" =>
        rd_11_Enb <= '0';
        IF SDFController_rdAddr_reg = '1' THEN 
          SDFController_rdAddr_reg_next <= '0';
          IF SDFController_procEnb_reg = '1' THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        ELSE 
          SDFController_rdAddr_reg_next <= '1';
        END IF;
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= '0';
        rd_11_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= '0';
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_11_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= '1';
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_11_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#2#, 2);
          SDFController_procEnb_reg_next <= '1';
          SDFController_wrCount_next <= '0';
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        SDFController_procEnb_reg_next <= '1';
        IF dinXTwdl_11_1_vld = '1' THEN 
          IF SDFController_wrCount = '1' THEN 
            SDFController_wrState_next <= to_unsigned(16#0#, 2);
            SDFController_procEnb_reg_next <= '0';
            SDFController_wrCount_next <= '0';
          ELSE 
            SDFController_wrCount_next <= '1';
          END IF;
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= '0';
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_11_Addr <= SDFController_rdAddr_reg;
    proc_11_enb <= SDFController_procEnb_reg;
    multiply_11_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_11_block.vhd --

-- Start of RADIX22FFT_CTRL1_11_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_11_block1.vhd
-- Created: 2025-03-18 15:26:31
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_11_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_CTRL1_11
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_11_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dinXTwdl_11_1_vld                 :   IN    std_logic;
        dinXTwdl_11_1_vld_1               :   IN    std_logic;
        rd_11_Addr                        :   OUT   unsigned(9 DOWNTO 0);  -- ufix10
        rd_11_Enb                         :   OUT   std_logic;
        proc_11_enb                       :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_11_block1;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_11_block1 IS

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL SDFController_wrCount            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;
  SIGNAL multiply_11_J                    : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= to_unsigned(16#000#, 10);
        SDFController_rdAddr_reg <= to_unsigned(16#000#, 10);
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_11_1_vld, dinXTwdl_11_1_vld_1)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next <= SDFController_procEnb_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= hdlcoder_to_stdlogic( NOT (SDFController_rdAddr_reg <= to_unsigned(16#1FF#, 10)));
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= hdlcoder_to_stdlogic( NOT (SDFController_rdAddr_reg <= to_unsigned(16#1FF#, 10)));
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#000#, 10);
        rd_11_Enb <= '0';
        IF dinXTwdl_11_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#3FF#, 10)) THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_11_Enb <= dinXTwdl_11_1_vld_1;
        IF dinXTwdl_11_1_vld_1 = '1' THEN 
          IF SDFController_rdAddr_reg = to_unsigned(16#3FF#, 10) THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
          END IF;
          SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#001#, 10);
        END IF;
      WHEN "10" =>
        rd_11_Enb <= '1';
        IF SDFController_rdAddr_reg = to_unsigned(16#3FF#, 10) THEN 
          IF dinXTwdl_11_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#3FF#, 10)) THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        END IF;
        SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#001#, 10);
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#000#, 10);
        rd_11_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#000#, 10);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_11_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= to_unsigned(16#001#, 10);
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_11_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#3FF#, 10) THEN 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#001#, 10);
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dinXTwdl_11_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#3FF#, 10) THEN 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
            SDFController_procEnb_reg_next <= '0';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#001#, 10);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#3FF#, 10);
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_11_Addr <= SDFController_rdAddr_reg;
    proc_11_enb <= SDFController_procEnb_reg;
    multiply_11_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_11_block1.vhd --

-- Start of RADIX22FFT_CTRL1_12.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_12.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_12
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_CTRL1_12
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_12 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_11_1_vld                     :   IN    std_logic;
        dinXTwdl_12_1_vld                 :   IN    std_logic;
        rd_12_Addr                        :   OUT   std_logic;
        rd_12_Enb                         :   OUT   std_logic;
        proc_12_enb                       :   OUT   std_logic;
        multiply_12_J                     :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_12;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_12 IS

  -- Signals
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : std_logic;  -- ufix1
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : std_logic;  -- ufix1
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_rdAddr_reg <= '0';
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multjState, SDFController_rdAddr_reg, SDFController_rdState,
       SDFController_wrState, dinXTwdl_12_1_vld, dout_11_1_vld)
  BEGIN
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        multiply_12_J <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        multiply_12_J <= '0';
        IF SDFController_rdState = to_unsigned(16#0#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        multiply_12_J <= '0';
        SDFController_multjState_next <= to_unsigned(16#3#, 2);
      WHEN "11" =>
        multiply_12_J <= '1';
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        multiply_12_J <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= '0';
        rd_12_Enb <= '0';
        IF (SDFController_wrState = to_unsigned(16#3#, 2)) AND dout_11_1_vld = '1' THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
          rd_12_Enb <= dinXTwdl_12_1_vld;
        END IF;
      WHEN "01" =>
        rd_12_Enb <= dinXTwdl_12_1_vld;
        IF dinXTwdl_12_1_vld = '1' THEN 
          SDFController_rdState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= '0';
        rd_12_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        proc_12_enb <= '0';
        IF dout_11_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#3#, 2);
        END IF;
      WHEN "11" =>
        SDFController_wrState_next <= to_unsigned(16#3#, 2);
        proc_12_enb <= '0';
        IF dout_11_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#2#, 2);
          proc_12_enb <= '1';
        END IF;
      WHEN "10" =>
        proc_12_enb <= '0';
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dout_11_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#3#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        proc_12_enb <= '0';
    END CASE;
    rd_12_Addr <= SDFController_rdAddr_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_12.vhd --

-- Start of RADIX22FFT_CTRL1_12_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_12_block.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_12_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_CTRL1_12
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_12_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_11_1_vld                     :   IN    std_logic;
        dinXTwdl_12_1_vld                 :   IN    std_logic;
        rd_12_Addr                        :   OUT   std_logic;
        rd_12_Enb                         :   OUT   std_logic;
        proc_12_enb                       :   OUT   std_logic;
        multiply_12_J                     :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_12_block;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_12_block IS

  -- Signals
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : std_logic;  -- ufix1
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : std_logic;  -- ufix1
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_rdAddr_reg <= '0';
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multjState, SDFController_rdAddr_reg, SDFController_rdState,
       SDFController_wrState, dinXTwdl_12_1_vld, dout_11_1_vld)
  BEGIN
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        multiply_12_J <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        multiply_12_J <= '0';
        IF SDFController_rdState = to_unsigned(16#0#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        multiply_12_J <= '0';
        SDFController_multjState_next <= to_unsigned(16#3#, 2);
      WHEN "11" =>
        multiply_12_J <= '1';
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        multiply_12_J <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= '0';
        rd_12_Enb <= '0';
        IF (SDFController_wrState = to_unsigned(16#3#, 2)) AND dout_11_1_vld = '1' THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
          rd_12_Enb <= dinXTwdl_12_1_vld;
        END IF;
      WHEN "01" =>
        rd_12_Enb <= dinXTwdl_12_1_vld;
        IF dinXTwdl_12_1_vld = '1' THEN 
          SDFController_rdState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= '0';
        rd_12_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        proc_12_enb <= '0';
        IF dout_11_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#3#, 2);
        END IF;
      WHEN "11" =>
        SDFController_wrState_next <= to_unsigned(16#3#, 2);
        proc_12_enb <= '0';
        IF dout_11_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#2#, 2);
          proc_12_enb <= '1';
        END IF;
      WHEN "10" =>
        proc_12_enb <= '0';
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dout_11_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#3#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        proc_12_enb <= '0';
    END CASE;
    rd_12_Addr <= SDFController_rdAddr_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_12_block.vhd --

-- Start of RADIX22FFT_CTRL1_12_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_12_block1.vhd
-- Created: 2025-03-18 15:26:31
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_12_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_CTRL1_12
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_12_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_11_1_vld                     :   IN    std_logic;
        dinXTwdl_12_1_vld                 :   IN    std_logic;
        rd_12_Addr                        :   OUT   unsigned(10 DOWNTO 0);  -- ufix11
        rd_12_Enb                         :   OUT   std_logic;
        proc_12_enb                       :   OUT   std_logic;
        multiply_12_J                     :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_12_block1;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_12_block1 IS

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL SDFController_wrCount            : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= to_unsigned(16#000#, 11);
        SDFController_rdAddr_reg <= to_unsigned(16#000#, 11);
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_12_1_vld, dout_11_1_vld)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next <= SDFController_procEnb_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= hdlcoder_to_stdlogic( NOT (SDFController_rdAddr_reg <= to_unsigned(16#3FF#, 11)));
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= hdlcoder_to_stdlogic( NOT (SDFController_rdAddr_reg <= to_unsigned(16#3FF#, 11)));
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#000#, 11);
        rd_12_Enb <= '0';
        IF dout_11_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#7FF#, 11)) THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_12_Enb <= dinXTwdl_12_1_vld;
        IF dinXTwdl_12_1_vld = '1' THEN 
          IF SDFController_rdAddr_reg = to_unsigned(16#7FF#, 11) THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
          END IF;
          SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#001#, 11);
        END IF;
      WHEN "10" =>
        rd_12_Enb <= '1';
        IF SDFController_rdAddr_reg = to_unsigned(16#7FF#, 11) THEN 
          IF dout_11_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#7FF#, 11)) THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        END IF;
        SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#001#, 11);
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#000#, 11);
        rd_12_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#000#, 11);
        SDFController_procEnb_reg_next <= '0';
        IF dout_11_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= to_unsigned(16#001#, 11);
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dout_11_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#7FF#, 11) THEN 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#001#, 11);
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dout_11_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#7FF#, 11) THEN 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
            SDFController_procEnb_reg_next <= '0';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#001#, 11);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#7FF#, 11);
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_12_Addr <= SDFController_rdAddr_reg;
    proc_12_enb <= SDFController_procEnb_reg;
    multiply_12_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_12_block1.vhd --

-- Start of RADIX22FFT_CTRL1_1_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_1_block.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_1_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_CTRL1_1
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_1_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dinXTwdl_1_1_vld                  :   IN    std_logic;
        dinXTwdl_1_1_vld_1                :   IN    std_logic;
        rd_1_Addr                         :   OUT   unsigned(10 DOWNTO 0);  -- ufix11
        rd_1_Enb                          :   OUT   std_logic;
        proc_1_enb                        :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_1_block;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_1_block IS

  -- Signals
  SIGNAL SDFController_wrCount            : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;
  SIGNAL multiply_1_J                     : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= to_unsigned(16#000#, 11);
        SDFController_rdAddr_reg <= to_unsigned(16#000#, 11);
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_1_1_vld, dinXTwdl_1_1_vld_1)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next <= SDFController_procEnb_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#000#, 11);
        rd_1_Enb <= '0';
        IF dinXTwdl_1_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#7FF#, 11)) THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_1_Enb <= dinXTwdl_1_1_vld_1;
        IF dinXTwdl_1_1_vld_1 = '1' THEN 
          IF SDFController_rdAddr_reg = to_unsigned(16#7FF#, 11) THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
          END IF;
          SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#001#, 11);
        END IF;
      WHEN "10" =>
        rd_1_Enb <= '1';
        IF SDFController_rdAddr_reg = to_unsigned(16#7FF#, 11) THEN 
          IF dinXTwdl_1_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#7FF#, 11)) THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        END IF;
        SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#001#, 11);
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#000#, 11);
        rd_1_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#000#, 11);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_1_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= to_unsigned(16#001#, 11);
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_1_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#7FF#, 11) THEN 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#001#, 11);
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dinXTwdl_1_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#7FF#, 11) THEN 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
            SDFController_procEnb_reg_next <= '0';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#001#, 11);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#7FF#, 11);
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_1_Addr <= SDFController_rdAddr_reg;
    proc_1_enb <= SDFController_procEnb_reg;
    multiply_1_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_1_block.vhd --

-- Start of RADIX22FFT_CTRL1_1_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_1_block1.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_1_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_CTRL1_1
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_1_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dinXTwdl_1_1_vld                  :   IN    std_logic;
        dinXTwdl_1_1_vld_1                :   IN    std_logic;
        rd_1_Addr                         :   OUT   std_logic;
        rd_1_Enb                          :   OUT   std_logic;
        proc_1_enb                        :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_1_block1;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_1_block1 IS

  -- Signals
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : std_logic;  -- ufix1
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : std_logic;  -- ufix1
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL multiply_1_J                     : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_rdAddr_reg <= '0';
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multjState, SDFController_rdAddr_reg, SDFController_rdState,
       SDFController_wrState, dinXTwdl_1_1_vld, dinXTwdl_1_1_vld_1)
  BEGIN
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        multiply_1_J <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        multiply_1_J <= '0';
        IF SDFController_rdState = to_unsigned(16#0#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        multiply_1_J <= '0';
        IF (SDFController_wrState = to_unsigned(16#3#, 2)) AND dinXTwdl_1_1_vld = '1' THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
        END IF;
      WHEN "11" =>
        multiply_1_J <= '1';
        IF dinXTwdl_1_1_vld_1 = '1' THEN 
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        multiply_1_J <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= '0';
        rd_1_Enb <= '0';
        IF (SDFController_wrState = to_unsigned(16#3#, 2)) AND dinXTwdl_1_1_vld = '1' THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
          rd_1_Enb <= dinXTwdl_1_1_vld_1;
        END IF;
      WHEN "01" =>
        rd_1_Enb <= dinXTwdl_1_1_vld_1;
        IF dinXTwdl_1_1_vld_1 = '1' THEN 
          SDFController_rdState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= '0';
        rd_1_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        proc_1_enb <= '0';
        IF dinXTwdl_1_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#3#, 2);
        END IF;
      WHEN "11" =>
        SDFController_wrState_next <= to_unsigned(16#3#, 2);
        proc_1_enb <= '0';
        IF dinXTwdl_1_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#2#, 2);
          proc_1_enb <= '1';
        END IF;
      WHEN "10" =>
        proc_1_enb <= '0';
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dinXTwdl_1_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#3#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        proc_1_enb <= '0';
    END CASE;
    rd_1_Addr <= SDFController_rdAddr_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_1_block1.vhd --

-- Start of RADIX22FFT_CTRL1_2.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_2.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_2
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_CTRL1_2
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_2 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_1_1_vld                      :   IN    std_logic;
        dinXTwdl_2_1_vld                  :   IN    std_logic;
        rd_2_Addr                         :   OUT   unsigned(9 DOWNTO 0);  -- ufix10
        rd_2_Enb                          :   OUT   std_logic;
        proc_2_enb                        :   OUT   std_logic;
        multiply_2_J                      :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_2;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_2 IS

  -- Signals
  SIGNAL SDFController_wrCount            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= to_unsigned(16#000#, 10);
        SDFController_rdAddr_reg <= to_unsigned(16#000#, 10);
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_2_1_vld, dout_1_1_vld)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next <= SDFController_procEnb_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#000#, 10);
        rd_2_Enb <= '0';
        IF dout_1_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#3FF#, 10)) THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_2_Enb <= dinXTwdl_2_1_vld;
        IF dinXTwdl_2_1_vld = '1' THEN 
          IF SDFController_rdAddr_reg = to_unsigned(16#3FF#, 10) THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
          END IF;
          SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#001#, 10);
        END IF;
      WHEN "10" =>
        rd_2_Enb <= '1';
        IF SDFController_rdAddr_reg = to_unsigned(16#3FF#, 10) THEN 
          IF dout_1_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#3FF#, 10)) THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        END IF;
        SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#001#, 10);
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#000#, 10);
        rd_2_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#000#, 10);
        SDFController_procEnb_reg_next <= '0';
        IF dout_1_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= to_unsigned(16#001#, 10);
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dout_1_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#3FF#, 10) THEN 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#001#, 10);
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dout_1_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#3FF#, 10) THEN 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
            SDFController_procEnb_reg_next <= '0';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#001#, 10);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#3FF#, 10);
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_2_Addr <= SDFController_rdAddr_reg;
    proc_2_enb <= SDFController_procEnb_reg;
    multiply_2_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_2.vhd --

-- Start of RADIX22FFT_CTRL1_2_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_2_block.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_2_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_CTRL1_2
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_2_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_1_1_vld                      :   IN    std_logic;
        dinXTwdl_2_1_vld                  :   IN    std_logic;
        rd_2_Addr                         :   OUT   unsigned(9 DOWNTO 0);  -- ufix10
        rd_2_Enb                          :   OUT   std_logic;
        proc_2_enb                        :   OUT   std_logic;
        multiply_2_J                      :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_2_block;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_2_block IS

  -- Signals
  SIGNAL SDFController_wrCount            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= to_unsigned(16#000#, 10);
        SDFController_rdAddr_reg <= to_unsigned(16#000#, 10);
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_2_1_vld, dout_1_1_vld)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next <= SDFController_procEnb_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#000#, 10);
        rd_2_Enb <= '0';
        IF dout_1_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#3FF#, 10)) THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_2_Enb <= dinXTwdl_2_1_vld;
        IF dinXTwdl_2_1_vld = '1' THEN 
          IF SDFController_rdAddr_reg = to_unsigned(16#3FF#, 10) THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
          END IF;
          SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#001#, 10);
        END IF;
      WHEN "10" =>
        rd_2_Enb <= '1';
        IF SDFController_rdAddr_reg = to_unsigned(16#3FF#, 10) THEN 
          IF dout_1_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#3FF#, 10)) THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        END IF;
        SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#001#, 10);
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#000#, 10);
        rd_2_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#000#, 10);
        SDFController_procEnb_reg_next <= '0';
        IF dout_1_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= to_unsigned(16#001#, 10);
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dout_1_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#3FF#, 10) THEN 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#001#, 10);
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dout_1_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#3FF#, 10) THEN 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
            SDFController_procEnb_reg_next <= '0';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#001#, 10);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#3FF#, 10);
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_2_Addr <= SDFController_rdAddr_reg;
    proc_2_enb <= SDFController_procEnb_reg;
    multiply_2_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_2_block.vhd --

-- Start of RADIX22FFT_CTRL1_2_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_2_block1.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_2_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_CTRL1_2
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_2_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_1_1_vld                      :   IN    std_logic;
        dinXTwdl_2_1_vld                  :   IN    std_logic;
        rd_2_Addr                         :   OUT   std_logic;  -- ufix1
        rd_2_Enb                          :   OUT   std_logic;
        proc_2_enb                        :   OUT   std_logic;
        multiply_2_J                      :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_2_block1;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_2_block1 IS

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL SDFController_wrCount            : std_logic;  -- ufix1
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : std_logic;  -- ufix1
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : std_logic;  -- ufix1
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : std_logic;  -- ufix1
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= '0';
        SDFController_rdAddr_reg <= '0';
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_2_1_vld, dout_1_1_vld)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= hdlcoder_to_stdlogic( NOT (SDFController_rdAddr_reg = '0'));
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= hdlcoder_to_stdlogic( NOT (SDFController_rdAddr_reg = '0'));
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= '0';
        rd_2_Enb <= '0';
        IF SDFController_procEnb_reg = '1' THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
          rd_2_Enb <= dinXTwdl_2_1_vld;
          IF dinXTwdl_2_1_vld = '1' THEN 
            SDFController_rdAddr_reg_next <= '1';
          END IF;
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_2_Enb <= dinXTwdl_2_1_vld;
        IF dinXTwdl_2_1_vld = '1' THEN 
          IF SDFController_rdAddr_reg = '1' THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
            SDFController_rdAddr_reg_next <= '0';
          ELSE 
            SDFController_rdAddr_reg_next <= '1';
          END IF;
        END IF;
      WHEN "10" =>
        rd_2_Enb <= '0';
        IF SDFController_rdAddr_reg = '1' THEN 
          SDFController_rdAddr_reg_next <= '0';
          IF SDFController_procEnb_reg = '1' THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        ELSE 
          SDFController_rdAddr_reg_next <= '1';
        END IF;
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= '0';
        rd_2_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= '0';
        SDFController_procEnb_reg_next <= '0';
        IF dout_1_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= '1';
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dout_1_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#2#, 2);
          SDFController_procEnb_reg_next <= '1';
          SDFController_wrCount_next <= '0';
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        SDFController_procEnb_reg_next <= '1';
        IF dout_1_1_vld = '1' THEN 
          IF SDFController_wrCount = '1' THEN 
            SDFController_wrState_next <= to_unsigned(16#0#, 2);
            SDFController_procEnb_reg_next <= '0';
            SDFController_wrCount_next <= '0';
          ELSE 
            SDFController_wrCount_next <= '1';
          END IF;
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= '0';
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_2_Addr <= SDFController_rdAddr_reg;
    proc_2_enb <= SDFController_procEnb_reg;
    multiply_2_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_2_block1.vhd --

-- Start of RADIX22FFT_CTRL1_3.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_3.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_3
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_CTRL1_3
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_3 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dinXTwdl_3_1_vld                  :   IN    std_logic;
        dinXTwdl_3_1_vld_1                :   IN    std_logic;
        rd_3_Addr                         :   OUT   unsigned(8 DOWNTO 0);  -- ufix9
        rd_3_Enb                          :   OUT   std_logic;
        proc_3_enb                        :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_3;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_3 IS

  -- Signals
  SIGNAL SDFController_wrCount            : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;
  SIGNAL multiply_3_J                     : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= to_unsigned(16#000#, 9);
        SDFController_rdAddr_reg <= to_unsigned(16#000#, 9);
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_3_1_vld, dinXTwdl_3_1_vld_1)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next <= SDFController_procEnb_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#000#, 9);
        rd_3_Enb <= '0';
        IF dinXTwdl_3_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#1FF#, 9)) THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_3_Enb <= dinXTwdl_3_1_vld_1;
        IF dinXTwdl_3_1_vld_1 = '1' THEN 
          IF SDFController_rdAddr_reg = to_unsigned(16#1FF#, 9) THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
          END IF;
          SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#001#, 9);
        END IF;
      WHEN "10" =>
        rd_3_Enb <= '1';
        IF SDFController_rdAddr_reg = to_unsigned(16#1FF#, 9) THEN 
          IF dinXTwdl_3_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#1FF#, 9)) THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        END IF;
        SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#001#, 9);
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#000#, 9);
        rd_3_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#000#, 9);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_3_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= to_unsigned(16#001#, 9);
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_3_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#1FF#, 9) THEN 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#001#, 9);
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dinXTwdl_3_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#1FF#, 9) THEN 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
            SDFController_procEnb_reg_next <= '0';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#001#, 9);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#1FF#, 9);
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_3_Addr <= SDFController_rdAddr_reg;
    proc_3_enb <= SDFController_procEnb_reg;
    multiply_3_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_3.vhd --

-- Start of RADIX22FFT_CTRL1_3_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_3_block.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_3_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_CTRL1_3
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_3_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dinXTwdl_3_1_vld                  :   IN    std_logic;
        dinXTwdl_3_1_vld_1                :   IN    std_logic;
        rd_3_Addr                         :   OUT   unsigned(8 DOWNTO 0);  -- ufix9
        rd_3_Enb                          :   OUT   std_logic;
        proc_3_enb                        :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_3_block;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_3_block IS

  -- Signals
  SIGNAL SDFController_wrCount            : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;
  SIGNAL multiply_3_J                     : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= to_unsigned(16#000#, 9);
        SDFController_rdAddr_reg <= to_unsigned(16#000#, 9);
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_3_1_vld, dinXTwdl_3_1_vld_1)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next <= SDFController_procEnb_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#000#, 9);
        rd_3_Enb <= '0';
        IF dinXTwdl_3_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#1FF#, 9)) THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_3_Enb <= dinXTwdl_3_1_vld_1;
        IF dinXTwdl_3_1_vld_1 = '1' THEN 
          IF SDFController_rdAddr_reg = to_unsigned(16#1FF#, 9) THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
          END IF;
          SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#001#, 9);
        END IF;
      WHEN "10" =>
        rd_3_Enb <= '1';
        IF SDFController_rdAddr_reg = to_unsigned(16#1FF#, 9) THEN 
          IF dinXTwdl_3_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#1FF#, 9)) THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        END IF;
        SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#001#, 9);
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#000#, 9);
        rd_3_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#000#, 9);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_3_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= to_unsigned(16#001#, 9);
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_3_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#1FF#, 9) THEN 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#001#, 9);
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dinXTwdl_3_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#1FF#, 9) THEN 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
            SDFController_procEnb_reg_next <= '0';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#001#, 9);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#1FF#, 9);
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_3_Addr <= SDFController_rdAddr_reg;
    proc_3_enb <= SDFController_procEnb_reg;
    multiply_3_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_3_block.vhd --

-- Start of RADIX22FFT_CTRL1_3_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_3_block1.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_3_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_CTRL1_3
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_3_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dinXTwdl_3_1_vld                  :   IN    std_logic;
        dinXTwdl_3_1_vld_1                :   IN    std_logic;
        rd_3_Addr                         :   OUT   unsigned(1 DOWNTO 0);  -- ufix2
        rd_3_Enb                          :   OUT   std_logic;
        proc_3_enb                        :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_3_block1;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_3_block1 IS

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL SDFController_wrCount            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;
  SIGNAL multiply_3_J                     : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg <= to_unsigned(16#0#, 2);
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_3_1_vld, dinXTwdl_3_1_vld_1)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next <= SDFController_procEnb_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= hdlcoder_to_stdlogic( NOT (SDFController_rdAddr_reg <= to_unsigned(16#1#, 2)));
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= hdlcoder_to_stdlogic( NOT (SDFController_rdAddr_reg <= to_unsigned(16#1#, 2)));
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#0#, 2);
        rd_3_Enb <= '0';
        IF dinXTwdl_3_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#3#, 2)) THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_3_Enb <= dinXTwdl_3_1_vld_1;
        IF dinXTwdl_3_1_vld_1 = '1' THEN 
          IF SDFController_rdAddr_reg = to_unsigned(16#3#, 2) THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
          END IF;
          SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#1#, 2);
        END IF;
      WHEN "10" =>
        rd_3_Enb <= '0';
        IF SDFController_rdAddr_reg = to_unsigned(16#3#, 2) THEN 
          IF dinXTwdl_3_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#3#, 2)) THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        END IF;
        SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#1#, 2);
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#0#, 2);
        rd_3_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_3_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_3_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#3#, 2) THEN 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#1#, 2);
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dinXTwdl_3_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#3#, 2) THEN 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
            SDFController_procEnb_reg_next <= '0';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#1#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#3#, 2);
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_3_Addr <= SDFController_rdAddr_reg;
    proc_3_enb <= SDFController_procEnb_reg;
    multiply_3_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_3_block1.vhd --

-- Start of RADIX22FFT_CTRL1_4.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_4.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_4
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_CTRL1_4
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_4 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_3_1_vld                      :   IN    std_logic;
        dinXTwdl_4_1_vld                  :   IN    std_logic;
        rd_4_Addr                         :   OUT   unsigned(7 DOWNTO 0);  -- ufix8
        rd_4_Enb                          :   OUT   std_logic;
        proc_4_enb                        :   OUT   std_logic;
        multiply_4_J                      :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_4;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_4 IS

  -- Signals
  SIGNAL SDFController_wrCount            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= to_unsigned(16#00#, 8);
        SDFController_rdAddr_reg <= to_unsigned(16#00#, 8);
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_4_1_vld, dout_3_1_vld)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next <= SDFController_procEnb_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#00#, 8);
        rd_4_Enb <= '0';
        IF dout_3_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#FF#, 8)) THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_4_Enb <= dinXTwdl_4_1_vld;
        IF dinXTwdl_4_1_vld = '1' THEN 
          IF SDFController_rdAddr_reg = to_unsigned(16#FF#, 8) THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
          END IF;
          SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#01#, 8);
        END IF;
      WHEN "10" =>
        rd_4_Enb <= '1';
        IF SDFController_rdAddr_reg = to_unsigned(16#FF#, 8) THEN 
          IF dout_3_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#FF#, 8)) THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        END IF;
        SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#01#, 8);
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#00#, 8);
        rd_4_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#00#, 8);
        SDFController_procEnb_reg_next <= '0';
        IF dout_3_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= to_unsigned(16#01#, 8);
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dout_3_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#FF#, 8) THEN 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#01#, 8);
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dout_3_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#FF#, 8) THEN 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
            SDFController_procEnb_reg_next <= '0';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#01#, 8);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#FF#, 8);
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_4_Addr <= SDFController_rdAddr_reg;
    proc_4_enb <= SDFController_procEnb_reg;
    multiply_4_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_4.vhd --

-- Start of RADIX22FFT_CTRL1_4_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_4_block.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_4_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_CTRL1_4
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_4_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_3_1_vld                      :   IN    std_logic;
        dinXTwdl_4_1_vld                  :   IN    std_logic;
        rd_4_Addr                         :   OUT   unsigned(7 DOWNTO 0);  -- ufix8
        rd_4_Enb                          :   OUT   std_logic;
        proc_4_enb                        :   OUT   std_logic;
        multiply_4_J                      :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_4_block;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_4_block IS

  -- Signals
  SIGNAL SDFController_wrCount            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= to_unsigned(16#00#, 8);
        SDFController_rdAddr_reg <= to_unsigned(16#00#, 8);
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_4_1_vld, dout_3_1_vld)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next <= SDFController_procEnb_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#00#, 8);
        rd_4_Enb <= '0';
        IF dout_3_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#FF#, 8)) THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_4_Enb <= dinXTwdl_4_1_vld;
        IF dinXTwdl_4_1_vld = '1' THEN 
          IF SDFController_rdAddr_reg = to_unsigned(16#FF#, 8) THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
          END IF;
          SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#01#, 8);
        END IF;
      WHEN "10" =>
        rd_4_Enb <= '1';
        IF SDFController_rdAddr_reg = to_unsigned(16#FF#, 8) THEN 
          IF dout_3_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#FF#, 8)) THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        END IF;
        SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#01#, 8);
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#00#, 8);
        rd_4_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#00#, 8);
        SDFController_procEnb_reg_next <= '0';
        IF dout_3_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= to_unsigned(16#01#, 8);
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dout_3_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#FF#, 8) THEN 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#01#, 8);
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dout_3_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#FF#, 8) THEN 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
            SDFController_procEnb_reg_next <= '0';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#01#, 8);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#FF#, 8);
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_4_Addr <= SDFController_rdAddr_reg;
    proc_4_enb <= SDFController_procEnb_reg;
    multiply_4_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_4_block.vhd --

-- Start of RADIX22FFT_CTRL1_4_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_4_block1.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_4_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_CTRL1_4
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_4_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_3_1_vld                      :   IN    std_logic;
        dinXTwdl_4_1_vld                  :   IN    std_logic;
        rd_4_Addr                         :   OUT   unsigned(2 DOWNTO 0);  -- ufix3
        rd_4_Enb                          :   OUT   std_logic;
        proc_4_enb                        :   OUT   std_logic;
        multiply_4_J                      :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_4_block1;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_4_block1 IS

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL SDFController_wrCount            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= to_unsigned(16#0#, 3);
        SDFController_rdAddr_reg <= to_unsigned(16#0#, 3);
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_4_1_vld, dout_3_1_vld)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next <= SDFController_procEnb_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= hdlcoder_to_stdlogic( NOT (SDFController_rdAddr_reg <= to_unsigned(16#3#, 3)));
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= hdlcoder_to_stdlogic( NOT (SDFController_rdAddr_reg <= to_unsigned(16#3#, 3)));
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#0#, 3);
        rd_4_Enb <= '0';
        IF dout_3_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#7#, 3)) THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_4_Enb <= dinXTwdl_4_1_vld;
        IF dinXTwdl_4_1_vld = '1' THEN 
          IF SDFController_rdAddr_reg = to_unsigned(16#7#, 3) THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
          END IF;
          SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#1#, 3);
        END IF;
      WHEN "10" =>
        rd_4_Enb <= '0';
        IF SDFController_rdAddr_reg = to_unsigned(16#7#, 3) THEN 
          IF dout_3_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#7#, 3)) THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        END IF;
        SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#1#, 3);
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#0#, 3);
        rd_4_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#0#, 3);
        SDFController_procEnb_reg_next <= '0';
        IF dout_3_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= to_unsigned(16#1#, 3);
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dout_3_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#7#, 3) THEN 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#1#, 3);
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dout_3_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#7#, 3) THEN 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
            SDFController_procEnb_reg_next <= '0';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#7#, 3);
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_4_Addr <= SDFController_rdAddr_reg;
    proc_4_enb <= SDFController_procEnb_reg;
    multiply_4_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_4_block1.vhd --

-- Start of RADIX22FFT_CTRL1_5.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_5.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_5
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_CTRL1_5
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_5 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dinXTwdl_5_1_vld                  :   IN    std_logic;
        dinXTwdl_5_1_vld_1                :   IN    std_logic;
        rd_5_Addr                         :   OUT   unsigned(6 DOWNTO 0);  -- ufix7
        rd_5_Enb                          :   OUT   std_logic;
        proc_5_enb                        :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_5;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_5 IS

  -- Signals
  SIGNAL SDFController_wrCount            : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;
  SIGNAL multiply_5_J                     : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= to_unsigned(16#00#, 7);
        SDFController_rdAddr_reg <= to_unsigned(16#00#, 7);
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_5_1_vld, dinXTwdl_5_1_vld_1)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next <= SDFController_procEnb_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#00#, 7);
        rd_5_Enb <= '0';
        IF dinXTwdl_5_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#7F#, 7)) THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_5_Enb <= dinXTwdl_5_1_vld_1;
        IF dinXTwdl_5_1_vld_1 = '1' THEN 
          IF SDFController_rdAddr_reg = to_unsigned(16#7F#, 7) THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
          END IF;
          SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#01#, 7);
        END IF;
      WHEN "10" =>
        rd_5_Enb <= '1';
        IF SDFController_rdAddr_reg = to_unsigned(16#7F#, 7) THEN 
          IF dinXTwdl_5_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#7F#, 7)) THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        END IF;
        SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#01#, 7);
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#00#, 7);
        rd_5_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#00#, 7);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_5_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= to_unsigned(16#01#, 7);
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_5_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#7F#, 7) THEN 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#01#, 7);
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dinXTwdl_5_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#7F#, 7) THEN 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
            SDFController_procEnb_reg_next <= '0';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#01#, 7);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#7F#, 7);
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_5_Addr <= SDFController_rdAddr_reg;
    proc_5_enb <= SDFController_procEnb_reg;
    multiply_5_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_5.vhd --

-- Start of RADIX22FFT_CTRL1_5_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_5_block.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_5_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_CTRL1_5
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_5_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dinXTwdl_5_1_vld                  :   IN    std_logic;
        dinXTwdl_5_1_vld_1                :   IN    std_logic;
        rd_5_Addr                         :   OUT   unsigned(6 DOWNTO 0);  -- ufix7
        rd_5_Enb                          :   OUT   std_logic;
        proc_5_enb                        :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_5_block;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_5_block IS

  -- Signals
  SIGNAL SDFController_wrCount            : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;
  SIGNAL multiply_5_J                     : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= to_unsigned(16#00#, 7);
        SDFController_rdAddr_reg <= to_unsigned(16#00#, 7);
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_5_1_vld, dinXTwdl_5_1_vld_1)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next <= SDFController_procEnb_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#00#, 7);
        rd_5_Enb <= '0';
        IF dinXTwdl_5_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#7F#, 7)) THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_5_Enb <= dinXTwdl_5_1_vld_1;
        IF dinXTwdl_5_1_vld_1 = '1' THEN 
          IF SDFController_rdAddr_reg = to_unsigned(16#7F#, 7) THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
          END IF;
          SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#01#, 7);
        END IF;
      WHEN "10" =>
        rd_5_Enb <= '1';
        IF SDFController_rdAddr_reg = to_unsigned(16#7F#, 7) THEN 
          IF dinXTwdl_5_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#7F#, 7)) THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        END IF;
        SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#01#, 7);
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#00#, 7);
        rd_5_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#00#, 7);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_5_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= to_unsigned(16#01#, 7);
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_5_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#7F#, 7) THEN 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#01#, 7);
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dinXTwdl_5_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#7F#, 7) THEN 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
            SDFController_procEnb_reg_next <= '0';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#01#, 7);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#7F#, 7);
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_5_Addr <= SDFController_rdAddr_reg;
    proc_5_enb <= SDFController_procEnb_reg;
    multiply_5_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_5_block.vhd --

-- Start of RADIX22FFT_CTRL1_5_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_5_block1.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_5_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_CTRL1_5
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_5_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dinXTwdl_5_1_vld                  :   IN    std_logic;
        dinXTwdl_5_1_vld_1                :   IN    std_logic;
        rd_5_Addr                         :   OUT   unsigned(3 DOWNTO 0);  -- ufix4
        rd_5_Enb                          :   OUT   std_logic;
        proc_5_enb                        :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_5_block1;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_5_block1 IS

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL SDFController_wrCount            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;
  SIGNAL multiply_5_J                     : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= to_unsigned(16#0#, 4);
        SDFController_rdAddr_reg <= to_unsigned(16#0#, 4);
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_5_1_vld, dinXTwdl_5_1_vld_1)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next <= SDFController_procEnb_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= hdlcoder_to_stdlogic( NOT (SDFController_rdAddr_reg <= to_unsigned(16#7#, 4)));
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= hdlcoder_to_stdlogic( NOT (SDFController_rdAddr_reg <= to_unsigned(16#7#, 4)));
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#0#, 4);
        rd_5_Enb <= '0';
        IF dinXTwdl_5_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#F#, 4)) THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_5_Enb <= dinXTwdl_5_1_vld_1;
        IF dinXTwdl_5_1_vld_1 = '1' THEN 
          IF SDFController_rdAddr_reg = to_unsigned(16#F#, 4) THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
          END IF;
          SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#1#, 4);
        END IF;
      WHEN "10" =>
        rd_5_Enb <= '1';
        IF SDFController_rdAddr_reg = to_unsigned(16#F#, 4) THEN 
          IF dinXTwdl_5_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#F#, 4)) THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        END IF;
        SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#1#, 4);
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#0#, 4);
        rd_5_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#0#, 4);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_5_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= to_unsigned(16#1#, 4);
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_5_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#F#, 4) THEN 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#1#, 4);
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dinXTwdl_5_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#F#, 4) THEN 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
            SDFController_procEnb_reg_next <= '0';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#1#, 4);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#F#, 4);
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_5_Addr <= SDFController_rdAddr_reg;
    proc_5_enb <= SDFController_procEnb_reg;
    multiply_5_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_5_block1.vhd --

-- Start of RADIX22FFT_CTRL1_6.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_6.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_6
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_CTRL1_6
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_6 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_5_1_vld                      :   IN    std_logic;
        dinXTwdl_6_1_vld                  :   IN    std_logic;
        rd_6_Addr                         :   OUT   unsigned(5 DOWNTO 0);  -- ufix6
        rd_6_Enb                          :   OUT   std_logic;
        proc_6_enb                        :   OUT   std_logic;
        multiply_6_J                      :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_6;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_6 IS

  -- Signals
  SIGNAL SDFController_wrCount            : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= to_unsigned(16#00#, 6);
        SDFController_rdAddr_reg <= to_unsigned(16#00#, 6);
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_6_1_vld, dout_5_1_vld)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next <= SDFController_procEnb_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#00#, 6);
        rd_6_Enb <= '0';
        IF dout_5_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#3F#, 6)) THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_6_Enb <= dinXTwdl_6_1_vld;
        IF dinXTwdl_6_1_vld = '1' THEN 
          IF SDFController_rdAddr_reg = to_unsigned(16#3F#, 6) THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
          END IF;
          SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#01#, 6);
        END IF;
      WHEN "10" =>
        rd_6_Enb <= '1';
        IF SDFController_rdAddr_reg = to_unsigned(16#3F#, 6) THEN 
          IF dout_5_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#3F#, 6)) THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        END IF;
        SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#01#, 6);
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#00#, 6);
        rd_6_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#00#, 6);
        SDFController_procEnb_reg_next <= '0';
        IF dout_5_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= to_unsigned(16#01#, 6);
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dout_5_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#3F#, 6) THEN 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#01#, 6);
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dout_5_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#3F#, 6) THEN 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
            SDFController_procEnb_reg_next <= '0';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#01#, 6);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#3F#, 6);
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_6_Addr <= SDFController_rdAddr_reg;
    proc_6_enb <= SDFController_procEnb_reg;
    multiply_6_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_6.vhd --

-- Start of RADIX22FFT_CTRL1_6_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_6_block.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_6_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_CTRL1_6
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_6_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_5_1_vld                      :   IN    std_logic;
        dinXTwdl_6_1_vld                  :   IN    std_logic;
        rd_6_Addr                         :   OUT   unsigned(5 DOWNTO 0);  -- ufix6
        rd_6_Enb                          :   OUT   std_logic;
        proc_6_enb                        :   OUT   std_logic;
        multiply_6_J                      :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_6_block;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_6_block IS

  -- Signals
  SIGNAL SDFController_wrCount            : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= to_unsigned(16#00#, 6);
        SDFController_rdAddr_reg <= to_unsigned(16#00#, 6);
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_6_1_vld, dout_5_1_vld)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next <= SDFController_procEnb_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#00#, 6);
        rd_6_Enb <= '0';
        IF dout_5_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#3F#, 6)) THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_6_Enb <= dinXTwdl_6_1_vld;
        IF dinXTwdl_6_1_vld = '1' THEN 
          IF SDFController_rdAddr_reg = to_unsigned(16#3F#, 6) THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
          END IF;
          SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#01#, 6);
        END IF;
      WHEN "10" =>
        rd_6_Enb <= '1';
        IF SDFController_rdAddr_reg = to_unsigned(16#3F#, 6) THEN 
          IF dout_5_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#3F#, 6)) THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        END IF;
        SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#01#, 6);
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#00#, 6);
        rd_6_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#00#, 6);
        SDFController_procEnb_reg_next <= '0';
        IF dout_5_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= to_unsigned(16#01#, 6);
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dout_5_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#3F#, 6) THEN 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#01#, 6);
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dout_5_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#3F#, 6) THEN 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
            SDFController_procEnb_reg_next <= '0';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#01#, 6);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#3F#, 6);
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_6_Addr <= SDFController_rdAddr_reg;
    proc_6_enb <= SDFController_procEnb_reg;
    multiply_6_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_6_block.vhd --

-- Start of RADIX22FFT_CTRL1_6_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_6_block1.vhd
-- Created: 2025-03-18 15:26:31
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_6_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_CTRL1_6
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_6_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_5_1_vld                      :   IN    std_logic;
        dinXTwdl_6_1_vld                  :   IN    std_logic;
        rd_6_Addr                         :   OUT   unsigned(4 DOWNTO 0);  -- ufix5
        rd_6_Enb                          :   OUT   std_logic;
        proc_6_enb                        :   OUT   std_logic;
        multiply_6_J                      :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_6_block1;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_6_block1 IS

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL SDFController_wrCount            : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= to_unsigned(16#00#, 5);
        SDFController_rdAddr_reg <= to_unsigned(16#00#, 5);
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_6_1_vld, dout_5_1_vld)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next <= SDFController_procEnb_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= hdlcoder_to_stdlogic( NOT (SDFController_rdAddr_reg <= to_unsigned(16#0F#, 5)));
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= hdlcoder_to_stdlogic( NOT (SDFController_rdAddr_reg <= to_unsigned(16#0F#, 5)));
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#00#, 5);
        rd_6_Enb <= '0';
        IF dout_5_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#1F#, 5)) THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_6_Enb <= dinXTwdl_6_1_vld;
        IF dinXTwdl_6_1_vld = '1' THEN 
          IF SDFController_rdAddr_reg = to_unsigned(16#1F#, 5) THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
          END IF;
          SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#01#, 5);
        END IF;
      WHEN "10" =>
        rd_6_Enb <= '1';
        IF SDFController_rdAddr_reg = to_unsigned(16#1F#, 5) THEN 
          IF dout_5_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#1F#, 5)) THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        END IF;
        SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#01#, 5);
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#00#, 5);
        rd_6_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#00#, 5);
        SDFController_procEnb_reg_next <= '0';
        IF dout_5_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= to_unsigned(16#01#, 5);
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dout_5_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#1F#, 5) THEN 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#01#, 5);
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dout_5_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#1F#, 5) THEN 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
            SDFController_procEnb_reg_next <= '0';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#01#, 5);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#1F#, 5);
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_6_Addr <= SDFController_rdAddr_reg;
    proc_6_enb <= SDFController_procEnb_reg;
    multiply_6_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_6_block1.vhd --

-- Start of RADIX22FFT_CTRL1_7.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_7.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_7
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_CTRL1_7
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_7 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dinXTwdl_7_1_vld                  :   IN    std_logic;
        dinXTwdl_7_1_vld_1                :   IN    std_logic;
        rd_7_Addr                         :   OUT   unsigned(4 DOWNTO 0);  -- ufix5
        rd_7_Enb                          :   OUT   std_logic;
        proc_7_enb                        :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_7;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_7 IS

  -- Signals
  SIGNAL SDFController_wrCount            : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;
  SIGNAL multiply_7_J                     : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= to_unsigned(16#00#, 5);
        SDFController_rdAddr_reg <= to_unsigned(16#00#, 5);
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_7_1_vld, dinXTwdl_7_1_vld_1)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next <= SDFController_procEnb_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#00#, 5);
        rd_7_Enb <= '0';
        IF dinXTwdl_7_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#1F#, 5)) THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_7_Enb <= dinXTwdl_7_1_vld_1;
        IF dinXTwdl_7_1_vld_1 = '1' THEN 
          IF SDFController_rdAddr_reg = to_unsigned(16#1F#, 5) THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
          END IF;
          SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#01#, 5);
        END IF;
      WHEN "10" =>
        rd_7_Enb <= '1';
        IF SDFController_rdAddr_reg = to_unsigned(16#1F#, 5) THEN 
          IF dinXTwdl_7_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#1F#, 5)) THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        END IF;
        SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#01#, 5);
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#00#, 5);
        rd_7_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#00#, 5);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_7_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= to_unsigned(16#01#, 5);
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_7_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#1F#, 5) THEN 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#01#, 5);
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dinXTwdl_7_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#1F#, 5) THEN 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
            SDFController_procEnb_reg_next <= '0';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#01#, 5);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#1F#, 5);
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_7_Addr <= SDFController_rdAddr_reg;
    proc_7_enb <= SDFController_procEnb_reg;
    multiply_7_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_7.vhd --

-- Start of RADIX22FFT_CTRL1_7_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_7_block.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_7_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_CTRL1_7
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_7_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dinXTwdl_7_1_vld                  :   IN    std_logic;
        dinXTwdl_7_1_vld_1                :   IN    std_logic;
        rd_7_Addr                         :   OUT   unsigned(4 DOWNTO 0);  -- ufix5
        rd_7_Enb                          :   OUT   std_logic;
        proc_7_enb                        :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_7_block;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_7_block IS

  -- Signals
  SIGNAL SDFController_wrCount            : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;
  SIGNAL multiply_7_J                     : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= to_unsigned(16#00#, 5);
        SDFController_rdAddr_reg <= to_unsigned(16#00#, 5);
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_7_1_vld, dinXTwdl_7_1_vld_1)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next <= SDFController_procEnb_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#00#, 5);
        rd_7_Enb <= '0';
        IF dinXTwdl_7_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#1F#, 5)) THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_7_Enb <= dinXTwdl_7_1_vld_1;
        IF dinXTwdl_7_1_vld_1 = '1' THEN 
          IF SDFController_rdAddr_reg = to_unsigned(16#1F#, 5) THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
          END IF;
          SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#01#, 5);
        END IF;
      WHEN "10" =>
        rd_7_Enb <= '1';
        IF SDFController_rdAddr_reg = to_unsigned(16#1F#, 5) THEN 
          IF dinXTwdl_7_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#1F#, 5)) THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        END IF;
        SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#01#, 5);
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#00#, 5);
        rd_7_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#00#, 5);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_7_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= to_unsigned(16#01#, 5);
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_7_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#1F#, 5) THEN 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#01#, 5);
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dinXTwdl_7_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#1F#, 5) THEN 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
            SDFController_procEnb_reg_next <= '0';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#01#, 5);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#1F#, 5);
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_7_Addr <= SDFController_rdAddr_reg;
    proc_7_enb <= SDFController_procEnb_reg;
    multiply_7_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_7_block.vhd --

-- Start of RADIX22FFT_CTRL1_7_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_7_block1.vhd
-- Created: 2025-03-18 15:26:31
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_7_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_CTRL1_7
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_7_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dinXTwdl_7_1_vld                  :   IN    std_logic;
        dinXTwdl_7_1_vld_1                :   IN    std_logic;
        rd_7_Addr                         :   OUT   unsigned(5 DOWNTO 0);  -- ufix6
        rd_7_Enb                          :   OUT   std_logic;
        proc_7_enb                        :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_7_block1;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_7_block1 IS

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL SDFController_wrCount            : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;
  SIGNAL multiply_7_J                     : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= to_unsigned(16#00#, 6);
        SDFController_rdAddr_reg <= to_unsigned(16#00#, 6);
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_7_1_vld, dinXTwdl_7_1_vld_1)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next <= SDFController_procEnb_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= hdlcoder_to_stdlogic( NOT (SDFController_rdAddr_reg <= to_unsigned(16#1F#, 6)));
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= hdlcoder_to_stdlogic( NOT (SDFController_rdAddr_reg <= to_unsigned(16#1F#, 6)));
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#00#, 6);
        rd_7_Enb <= '0';
        IF dinXTwdl_7_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#3F#, 6)) THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_7_Enb <= dinXTwdl_7_1_vld_1;
        IF dinXTwdl_7_1_vld_1 = '1' THEN 
          IF SDFController_rdAddr_reg = to_unsigned(16#3F#, 6) THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
          END IF;
          SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#01#, 6);
        END IF;
      WHEN "10" =>
        rd_7_Enb <= '1';
        IF SDFController_rdAddr_reg = to_unsigned(16#3F#, 6) THEN 
          IF dinXTwdl_7_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#3F#, 6)) THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        END IF;
        SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#01#, 6);
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#00#, 6);
        rd_7_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#00#, 6);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_7_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= to_unsigned(16#01#, 6);
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_7_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#3F#, 6) THEN 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#01#, 6);
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dinXTwdl_7_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#3F#, 6) THEN 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
            SDFController_procEnb_reg_next <= '0';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#01#, 6);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#3F#, 6);
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_7_Addr <= SDFController_rdAddr_reg;
    proc_7_enb <= SDFController_procEnb_reg;
    multiply_7_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_7_block1.vhd --

-- Start of RADIX22FFT_CTRL1_8.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_8.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_8
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_CTRL1_8
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_8 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_7_1_vld                      :   IN    std_logic;
        dinXTwdl_8_1_vld                  :   IN    std_logic;
        rd_8_Addr                         :   OUT   unsigned(3 DOWNTO 0);  -- ufix4
        rd_8_Enb                          :   OUT   std_logic;
        proc_8_enb                        :   OUT   std_logic;
        multiply_8_J                      :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_8;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_8 IS

  -- Signals
  SIGNAL SDFController_wrCount            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= to_unsigned(16#0#, 4);
        SDFController_rdAddr_reg <= to_unsigned(16#0#, 4);
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_8_1_vld, dout_7_1_vld)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next <= SDFController_procEnb_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#0#, 4);
        rd_8_Enb <= '0';
        IF dout_7_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#F#, 4)) THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_8_Enb <= dinXTwdl_8_1_vld;
        IF dinXTwdl_8_1_vld = '1' THEN 
          IF SDFController_rdAddr_reg = to_unsigned(16#F#, 4) THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
          END IF;
          SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#1#, 4);
        END IF;
      WHEN "10" =>
        rd_8_Enb <= '1';
        IF SDFController_rdAddr_reg = to_unsigned(16#F#, 4) THEN 
          IF dout_7_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#F#, 4)) THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        END IF;
        SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#1#, 4);
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#0#, 4);
        rd_8_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#0#, 4);
        SDFController_procEnb_reg_next <= '0';
        IF dout_7_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= to_unsigned(16#1#, 4);
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dout_7_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#F#, 4) THEN 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#1#, 4);
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dout_7_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#F#, 4) THEN 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
            SDFController_procEnb_reg_next <= '0';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#1#, 4);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#F#, 4);
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_8_Addr <= SDFController_rdAddr_reg;
    proc_8_enb <= SDFController_procEnb_reg;
    multiply_8_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_8.vhd --

-- Start of RADIX22FFT_CTRL1_8_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_8_block.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_8_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_CTRL1_8
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_8_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_7_1_vld                      :   IN    std_logic;
        dinXTwdl_8_1_vld                  :   IN    std_logic;
        rd_8_Addr                         :   OUT   unsigned(3 DOWNTO 0);  -- ufix4
        rd_8_Enb                          :   OUT   std_logic;
        proc_8_enb                        :   OUT   std_logic;
        multiply_8_J                      :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_8_block;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_8_block IS

  -- Signals
  SIGNAL SDFController_wrCount            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= to_unsigned(16#0#, 4);
        SDFController_rdAddr_reg <= to_unsigned(16#0#, 4);
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_8_1_vld, dout_7_1_vld)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next <= SDFController_procEnb_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#0#, 4);
        rd_8_Enb <= '0';
        IF dout_7_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#F#, 4)) THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_8_Enb <= dinXTwdl_8_1_vld;
        IF dinXTwdl_8_1_vld = '1' THEN 
          IF SDFController_rdAddr_reg = to_unsigned(16#F#, 4) THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
          END IF;
          SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#1#, 4);
        END IF;
      WHEN "10" =>
        rd_8_Enb <= '1';
        IF SDFController_rdAddr_reg = to_unsigned(16#F#, 4) THEN 
          IF dout_7_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#F#, 4)) THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        END IF;
        SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#1#, 4);
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#0#, 4);
        rd_8_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#0#, 4);
        SDFController_procEnb_reg_next <= '0';
        IF dout_7_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= to_unsigned(16#1#, 4);
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dout_7_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#F#, 4) THEN 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#1#, 4);
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dout_7_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#F#, 4) THEN 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
            SDFController_procEnb_reg_next <= '0';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#1#, 4);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#F#, 4);
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_8_Addr <= SDFController_rdAddr_reg;
    proc_8_enb <= SDFController_procEnb_reg;
    multiply_8_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_8_block.vhd --

-- Start of RADIX22FFT_CTRL1_8_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_8_block1.vhd
-- Created: 2025-03-18 15:26:31
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_8_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_CTRL1_8
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_8_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_7_1_vld                      :   IN    std_logic;
        dinXTwdl_8_1_vld                  :   IN    std_logic;
        rd_8_Addr                         :   OUT   unsigned(6 DOWNTO 0);  -- ufix7
        rd_8_Enb                          :   OUT   std_logic;
        proc_8_enb                        :   OUT   std_logic;
        multiply_8_J                      :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_8_block1;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_8_block1 IS

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL SDFController_wrCount            : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= to_unsigned(16#00#, 7);
        SDFController_rdAddr_reg <= to_unsigned(16#00#, 7);
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_8_1_vld, dout_7_1_vld)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next <= SDFController_procEnb_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= hdlcoder_to_stdlogic( NOT (SDFController_rdAddr_reg <= to_unsigned(16#3F#, 7)));
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= hdlcoder_to_stdlogic( NOT (SDFController_rdAddr_reg <= to_unsigned(16#3F#, 7)));
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#00#, 7);
        rd_8_Enb <= '0';
        IF dout_7_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#7F#, 7)) THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_8_Enb <= dinXTwdl_8_1_vld;
        IF dinXTwdl_8_1_vld = '1' THEN 
          IF SDFController_rdAddr_reg = to_unsigned(16#7F#, 7) THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
          END IF;
          SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#01#, 7);
        END IF;
      WHEN "10" =>
        rd_8_Enb <= '1';
        IF SDFController_rdAddr_reg = to_unsigned(16#7F#, 7) THEN 
          IF dout_7_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#7F#, 7)) THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        END IF;
        SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#01#, 7);
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#00#, 7);
        rd_8_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#00#, 7);
        SDFController_procEnb_reg_next <= '0';
        IF dout_7_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= to_unsigned(16#01#, 7);
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dout_7_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#7F#, 7) THEN 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#01#, 7);
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dout_7_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#7F#, 7) THEN 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
            SDFController_procEnb_reg_next <= '0';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#01#, 7);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#7F#, 7);
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_8_Addr <= SDFController_rdAddr_reg;
    proc_8_enb <= SDFController_procEnb_reg;
    multiply_8_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_8_block1.vhd --

-- Start of RADIX22FFT_CTRL1_9.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_9.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_9
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_CTRL1_9
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_9 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dinXTwdl_9_1_vld                  :   IN    std_logic;
        dinXTwdl_9_1_vld_1                :   IN    std_logic;
        rd_9_Addr                         :   OUT   unsigned(2 DOWNTO 0);  -- ufix3
        rd_9_Enb                          :   OUT   std_logic;
        proc_9_enb                        :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_9;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_9 IS

  -- Signals
  SIGNAL SDFController_wrCount            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;
  SIGNAL multiply_9_J                     : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= to_unsigned(16#0#, 3);
        SDFController_rdAddr_reg <= to_unsigned(16#0#, 3);
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_9_1_vld, dinXTwdl_9_1_vld_1)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next <= SDFController_procEnb_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#0#, 3);
        rd_9_Enb <= '0';
        IF dinXTwdl_9_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#7#, 3)) THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_9_Enb <= dinXTwdl_9_1_vld_1;
        IF dinXTwdl_9_1_vld_1 = '1' THEN 
          IF SDFController_rdAddr_reg = to_unsigned(16#7#, 3) THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
          END IF;
          SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#1#, 3);
        END IF;
      WHEN "10" =>
        rd_9_Enb <= '0';
        IF SDFController_rdAddr_reg = to_unsigned(16#7#, 3) THEN 
          IF dinXTwdl_9_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#7#, 3)) THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        END IF;
        SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#1#, 3);
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#0#, 3);
        rd_9_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#0#, 3);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_9_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= to_unsigned(16#1#, 3);
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_9_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#7#, 3) THEN 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#1#, 3);
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dinXTwdl_9_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#7#, 3) THEN 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
            SDFController_procEnb_reg_next <= '0';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#7#, 3);
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_9_Addr <= SDFController_rdAddr_reg;
    proc_9_enb <= SDFController_procEnb_reg;
    multiply_9_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_9.vhd --

-- Start of RADIX22FFT_CTRL1_9_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_9_block.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_9_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_CTRL1_9
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_9_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dinXTwdl_9_1_vld                  :   IN    std_logic;
        dinXTwdl_9_1_vld_1                :   IN    std_logic;
        rd_9_Addr                         :   OUT   unsigned(2 DOWNTO 0);  -- ufix3
        rd_9_Enb                          :   OUT   std_logic;
        proc_9_enb                        :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_9_block;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_9_block IS

  -- Signals
  SIGNAL SDFController_wrCount            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;
  SIGNAL multiply_9_J                     : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= to_unsigned(16#0#, 3);
        SDFController_rdAddr_reg <= to_unsigned(16#0#, 3);
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_9_1_vld, dinXTwdl_9_1_vld_1)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next <= SDFController_procEnb_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= '1';
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#0#, 3);
        rd_9_Enb <= '0';
        IF dinXTwdl_9_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#7#, 3)) THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_9_Enb <= dinXTwdl_9_1_vld_1;
        IF dinXTwdl_9_1_vld_1 = '1' THEN 
          IF SDFController_rdAddr_reg = to_unsigned(16#7#, 3) THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
          END IF;
          SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#1#, 3);
        END IF;
      WHEN "10" =>
        rd_9_Enb <= '0';
        IF SDFController_rdAddr_reg = to_unsigned(16#7#, 3) THEN 
          IF dinXTwdl_9_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#7#, 3)) THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        END IF;
        SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#1#, 3);
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#0#, 3);
        rd_9_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#0#, 3);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_9_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= to_unsigned(16#1#, 3);
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_9_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#7#, 3) THEN 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#1#, 3);
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dinXTwdl_9_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#7#, 3) THEN 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
            SDFController_procEnb_reg_next <= '0';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#7#, 3);
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_9_Addr <= SDFController_rdAddr_reg;
    proc_9_enb <= SDFController_procEnb_reg;
    multiply_9_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_9_block.vhd --

-- Start of RADIX22FFT_CTRL1_9_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_CTRL1_9_block1.vhd
-- Created: 2025-03-18 15:26:31
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_CTRL1_9_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_CTRL1_9
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX22FFT_CTRL1_9_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dinXTwdl_9_1_vld                  :   IN    std_logic;
        dinXTwdl_9_1_vld_1                :   IN    std_logic;
        rd_9_Addr                         :   OUT   unsigned(7 DOWNTO 0);  -- ufix8
        rd_9_Enb                          :   OUT   std_logic;
        proc_9_enb                        :   OUT   std_logic
        );
END RADIX22FFT_CTRL1_9_block1;


ARCHITECTURE rtl OF RADIX22FFT_CTRL1_9_block1 IS

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL SDFController_wrCount            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL SDFController_procEnb_reg        : std_logic;
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg     : std_logic;
  SIGNAL SDFController_wrCount_next       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL SDFController_procEnb_reg_next   : std_logic;
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_multiply_J_reg_next : std_logic;
  SIGNAL multiply_9_J                     : std_logic;

BEGIN
  -- SDFController
  SDFController_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFController_wrCount <= to_unsigned(16#00#, 8);
        SDFController_rdAddr_reg <= to_unsigned(16#00#, 8);
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
        SDFController_procEnb_reg <= '0';
        SDFController_multiply_J_reg <= '0';
      ELSIF enb = '1' THEN
        SDFController_wrCount <= SDFController_wrCount_next;
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
        SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_9_1_vld, dinXTwdl_9_1_vld_1)
  BEGIN
    SDFController_wrCount_next <= SDFController_wrCount;
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next <= SDFController_procEnb_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_multiply_J_reg_next <= hdlcoder_to_stdlogic( NOT (SDFController_rdAddr_reg <= to_unsigned(16#7F#, 8)));
        IF SDFController_rdState = to_unsigned(16#2#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        SDFController_multiply_J_reg_next <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
        END IF;
      WHEN "11" =>
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#3#, 2);
          SDFController_multiply_J_reg_next <= hdlcoder_to_stdlogic( NOT (SDFController_rdAddr_reg <= to_unsigned(16#7F#, 8)));
        ELSE 
          SDFController_multiply_J_reg_next <= '0';
          SDFController_multjState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        SDFController_multiply_J_reg_next <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#00#, 8);
        rd_9_Enb <= '0';
        IF dinXTwdl_9_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#FF#, 8)) THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        SDFController_rdState_next <= to_unsigned(16#1#, 2);
        rd_9_Enb <= dinXTwdl_9_1_vld_1;
        IF dinXTwdl_9_1_vld_1 = '1' THEN 
          IF SDFController_rdAddr_reg = to_unsigned(16#FF#, 8) THEN 
            SDFController_rdState_next <= to_unsigned(16#2#, 2);
          END IF;
          SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#01#, 8);
        END IF;
      WHEN "10" =>
        rd_9_Enb <= '1';
        IF SDFController_rdAddr_reg = to_unsigned(16#FF#, 8) THEN 
          IF dinXTwdl_9_1_vld = '1' AND (SDFController_wrCount = to_unsigned(16#FF#, 8)) THEN 
            SDFController_rdState_next <= to_unsigned(16#1#, 2);
          ELSE 
            SDFController_rdState_next <= to_unsigned(16#0#, 2);
          END IF;
        END IF;
        SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg + to_unsigned(16#01#, 8);
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= to_unsigned(16#00#, 8);
        rd_9_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#00#, 8);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_9_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#1#, 2);
          SDFController_wrCount_next <= to_unsigned(16#01#, 8);
        END IF;
      WHEN "01" =>
        SDFController_wrState_next <= to_unsigned(16#1#, 2);
        SDFController_procEnb_reg_next <= '0';
        IF dinXTwdl_9_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#FF#, 8) THEN 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#01#, 8);
        END IF;
      WHEN "10" =>
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dinXTwdl_9_1_vld = '1' THEN 
          IF SDFController_wrCount = to_unsigned(16#FF#, 8) THEN 
            SDFController_wrState_next <= to_unsigned(16#1#, 2);
            SDFController_procEnb_reg_next <= '0';
          ELSE 
            SDFController_wrState_next <= to_unsigned(16#2#, 2);
            SDFController_procEnb_reg_next <= '1';
          END IF;
          SDFController_wrCount_next <= SDFController_wrCount + to_unsigned(16#01#, 8);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        SDFController_wrCount_next <= to_unsigned(16#FF#, 8);
        SDFController_procEnb_reg_next <= '0';
    END CASE;
    rd_9_Addr <= SDFController_rdAddr_reg;
    proc_9_enb <= SDFController_procEnb_reg;
    multiply_9_J <= SDFController_multiply_J_reg;
  END PROCESS SDFController_output;


END rtl;


-- End of RADIX22FFT_CTRL1_9_block1.vhd --

-- Start of RADIX22FFT_SDF1_1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF1_1.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF1_1
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF1_1
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF1_1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_1_1_re_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_1_1_im_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_1_vld_dly                     :   IN    std_logic;
        rd_1_Addr                         :   IN    unsigned(10 DOWNTO 0);  -- ufix11
        rd_1_Enb                          :   IN    std_logic;
        proc_1_enb                        :   IN    std_logic;
        dout_1_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_1_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_1_1_vld                      :   OUT   std_logic;
        dinXTwdl_1_1_vld                  :   OUT   std_logic
        );
END RADIX22FFT_SDF1_1;


ARCHITECTURE rtl OF RADIX22FFT_SDF1_1 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SDFCommutator1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_1_vld_dly                   :   IN    std_logic;
          xf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_vld                          :   IN    std_logic;
          dinXTwdlf_re                    :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinXTwdlf_im                    :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinxTwdlf_vld                   :   IN    std_logic;
          btf1_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf1_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf_vld                         :   IN    std_logic;
          wrData_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrAddr                          :   OUT   unsigned(10 DOWNTO 0);  -- ufix11
          wrEnb                           :   OUT   std_logic;
          dout_1_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_1_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_1_1_vld                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  FOR ALL : SDFCommutator1
    USE ENTITY work.SDFCommutator1(rtl);

  -- Signals
  SIGNAL dinXTwdl_re                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdl_im                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdl_1_1_vld_1               : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL wrData_re                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrAddr                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL wrEnb                            : std_logic;
  SIGNAL x_re                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_btf1_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf1_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf2_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf2_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_x_re_dly1     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_x_im_dly1     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_x_vld_dly1    : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly1 : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly2 : std_logic;
  SIGNAL Radix22ButterflyG1_sra_temp      : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_1    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_2    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_3    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL xf_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinXTwdlf_re                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdlf_im                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinxTwdlf_vld                    : std_logic;
  SIGNAL btf1_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf1_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf_vld                          : std_logic;

BEGIN
  u_dataMEM_re_0_1_Wrapper_generic : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 11,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_re,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_1_Addr,
              dout => x_re
              );

  u_SDFCOMMUTATOR_1 : SDFCommutator1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_1_vld_dly => din_1_vld_dly,
              xf_re => xf_re,  -- sfix16
              xf_im => xf_im,  -- sfix16
              xf_vld => xf_vld,
              dinXTwdlf_re => dinXTwdlf_re,  -- sfix16
              dinXTwdlf_im => dinXTwdlf_im,  -- sfix16
              dinxTwdlf_vld => dinxTwdlf_vld,
              btf1_re => btf1_re,  -- sfix16
              btf1_im => btf1_im,  -- sfix16
              btf2_re => btf2_re,  -- sfix16
              btf2_im => btf2_im,  -- sfix16
              btf_vld => btf_vld,
              wrData_re => wrData_re,  -- sfix16
              wrAddr => wrAddr,  -- ufix11
              wrEnb => wrEnb,
              dout_1_1_re => dout_1_1_re,  -- sfix16
              dout_1_1_im => dout_1_1_im,  -- sfix16
              dout_1_1_vld => dout_1_1_vld
              );

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        dinXTwdl_re <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        dinXTwdl_re <= din_1_1_re_dly;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        dinXTwdl_im <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        dinXTwdl_im <= din_1_1_im_dly;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        dinXTwdl_1_1_vld_1 <= '0';
      ELSIF enb = '1' THEN
        dinXTwdl_1_1_vld_1 <= din_1_vld_dly;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_1_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Radix22ButterflyG1
  Radix22ButterflyG1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG1_btf1_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf1_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf2_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf2_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_x_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_x_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_x_vld_dly1 <= '0';
        xf_re <= to_signed(16#0000#, 16);
        xf_im <= to_signed(16#0000#, 16);
        xf_vld <= '0';
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= '0';
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= '0';
        btf_vld <= '0';
      ELSIF enb = '1' THEN
        xf_re <= Radix22ButterflyG1_x_re_dly1;
        xf_im <= Radix22ButterflyG1_x_im_dly1;
        xf_vld <= Radix22ButterflyG1_x_vld_dly1;
        btf_vld <= Radix22ButterflyG1_dinXtwdl_vld_dly2;
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= Radix22ButterflyG1_dinXtwdl_vld_dly1;
        Radix22ButterflyG1_btf1_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 17) + resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 17);
        Radix22ButterflyG1_btf2_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 17) - resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 17);
        Radix22ButterflyG1_btf1_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 17) + resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 17);
        Radix22ButterflyG1_btf2_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 17) - resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 17);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= Radix22ButterflyG1_dinXtwdl_re_dly1;
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= Radix22ButterflyG1_dinXtwdl_im_dly1;
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= dinXTwdl_re;
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= dinXTwdl_im;
        Radix22ButterflyG1_x_re_dly1 <= x_re;
        Radix22ButterflyG1_x_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_x_vld_dly1 <= x_vld;
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= proc_1_enb AND dinXTwdl_1_1_vld_1;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG1_process;

  dinxTwdlf_vld <= ( NOT proc_1_enb) AND dinXTwdl_1_1_vld_1;
  dinXTwdlf_re <= dinXTwdl_re;
  dinXTwdlf_im <= dinXTwdl_im;
  Radix22ButterflyG1_sra_temp <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_re_reg, 1);
  btf1_re <= Radix22ButterflyG1_sra_temp(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_1 <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_im_reg, 1);
  btf1_im <= Radix22ButterflyG1_sra_temp_1(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_2 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_re_reg, 1);
  btf2_re <= Radix22ButterflyG1_sra_temp_2(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_3 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_im_reg, 1);
  btf2_im <= Radix22ButterflyG1_sra_temp_3(15 DOWNTO 0);

  dinXTwdl_1_1_vld <= dinXTwdl_1_1_vld_1;

END rtl;


-- End of RADIX22FFT_SDF1_1.vhd --

-- Start of RADIX22FFT_SDF1_11.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF1_11.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF1_11
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF1_11
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF1_11 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_11_1_re_dly                   :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_11_1_im_dly                   :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_11_vld_dly                    :   IN    std_logic;
        rd_11_Addr                        :   IN    std_logic;  -- ufix1
        rd_11_Enb                         :   IN    std_logic;
        twdl_11_1_re                      :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        twdl_11_1_im                      :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        proc_11_enb                       :   IN    std_logic;
        dout_11_1_re                      :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_11_1_im                      :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_11_1_vld                     :   OUT   std_logic;
        dinXTwdl_11_1_vld                 :   OUT   std_logic
        );
END RADIX22FFT_SDF1_11;


ARCHITECTURE rtl OF RADIX22FFT_SDF1_11 IS

  -- Component Declarations
  COMPONENT Complex4Multiply_block3
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_11_1_re_dly                 :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_11_1_im_dly                 :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_11_vld_dly                  :   IN    std_logic;
          twdl_11_1_re                    :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_11_1_im                    :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          dinXTwdl_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dinXTwdl_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dinXTwdl_11_1_vld               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT SDFCommutator11
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_11_vld_dly                  :   IN    std_logic;
          xf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_vld                          :   IN    std_logic;
          dinXTwdlf_re                    :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinXTwdlf_im                    :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinxTwdlf_vld                   :   IN    std_logic;
          btf1_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf1_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf_vld                         :   IN    std_logic;
          wrData_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrData_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrAddr                          :   OUT   std_logic;  -- ufix1
          wrEnb                           :   OUT   std_logic;
          dout_11_1_re                    :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_11_1_im                    :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_11_1_vld                   :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Complex4Multiply_block3
    USE ENTITY work.Complex4Multiply_block3(rtl);

  FOR ALL : SDFCommutator11
    USE ENTITY work.SDFCommutator11(rtl);

  -- Signals
  SIGNAL dinXTwdl_re                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdl_im                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdl_11_1_vld_1              : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL wrData_re                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrData_im                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrAddr                           : std_logic;  -- ufix1
  SIGNAL wrEnb                            : std_logic;
  SIGNAL twoLocationReg_0_MEM_re_0        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_im_0        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_re_1        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_im_1        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_dout_re_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_dout_im_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_re_0_next   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_im_0_next   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_re_1_next   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_im_1_next   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_dout_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_dout_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_im                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_btf1_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf1_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf2_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf2_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_x_re_dly1     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_x_im_dly1     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_x_vld_dly1    : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly1 : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly2 : std_logic;
  SIGNAL Radix22ButterflyG1_sra_temp      : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_1    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_2    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_3    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL xf_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinXTwdlf_re                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdlf_im                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinxTwdlf_vld                    : std_logic;
  SIGNAL btf1_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf1_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf_vld                          : std_logic;

BEGIN
  u_MUL4 : Complex4Multiply_block3
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              din_11_1_re_dly => din_11_1_re_dly,  -- sfix16
              din_11_1_im_dly => din_11_1_im_dly,  -- sfix16
              din_11_vld_dly => din_11_vld_dly,
              twdl_11_1_re => twdl_11_1_re,  -- sfix16_En14
              twdl_11_1_im => twdl_11_1_im,  -- sfix16_En14
              dinXTwdl_re => dinXTwdl_re,  -- sfix16
              dinXTwdl_im => dinXTwdl_im,  -- sfix16
              dinXTwdl_11_1_vld => dinXTwdl_11_1_vld_1
              );

  u_SDFCOMMUTATOR_11 : SDFCommutator11
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_11_vld_dly => din_11_vld_dly,
              xf_re => xf_re,  -- sfix16
              xf_im => xf_im,  -- sfix16
              xf_vld => xf_vld,
              dinXTwdlf_re => dinXTwdlf_re,  -- sfix16
              dinXTwdlf_im => dinXTwdlf_im,  -- sfix16
              dinxTwdlf_vld => dinxTwdlf_vld,
              btf1_re => btf1_re,  -- sfix16
              btf1_im => btf1_im,  -- sfix16
              btf2_re => btf2_re,  -- sfix16
              btf2_im => btf2_im,  -- sfix16
              btf_vld => btf_vld,
              wrData_re => wrData_re,  -- sfix16
              wrData_im => wrData_im,  -- sfix16
              wrAddr => wrAddr,  -- ufix1
              wrEnb => wrEnb,
              dout_11_1_re => dout_11_1_re,  -- sfix16
              dout_11_1_im => dout_11_1_im,  -- sfix16
              dout_11_1_vld => dout_11_1_vld
              );

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_11_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  -- twoLocationReg_0
  twoLocationReg_0_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twoLocationReg_0_MEM_re_0 <= to_signed(16#0000#, 16);
        twoLocationReg_0_MEM_im_0 <= to_signed(16#0000#, 16);
        twoLocationReg_0_MEM_re_1 <= to_signed(16#0000#, 16);
        twoLocationReg_0_MEM_im_1 <= to_signed(16#0000#, 16);
        twoLocationReg_0_dout_re_reg <= to_signed(16#0000#, 16);
        twoLocationReg_0_dout_im_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twoLocationReg_0_MEM_re_0 <= twoLocationReg_0_MEM_re_0_next;
        twoLocationReg_0_MEM_im_0 <= twoLocationReg_0_MEM_im_0_next;
        twoLocationReg_0_MEM_re_1 <= twoLocationReg_0_MEM_re_1_next;
        twoLocationReg_0_MEM_im_1 <= twoLocationReg_0_MEM_im_1_next;
        twoLocationReg_0_dout_re_reg <= twoLocationReg_0_dout_re_reg_next;
        twoLocationReg_0_dout_im_reg <= twoLocationReg_0_dout_im_reg_next;
      END IF;
    END IF;
  END PROCESS twoLocationReg_0_process;

  twoLocationReg_0_output : PROCESS (rd_11_Addr, twoLocationReg_0_MEM_im_0, twoLocationReg_0_MEM_im_1,
       twoLocationReg_0_MEM_re_0, twoLocationReg_0_MEM_re_1,
       twoLocationReg_0_dout_im_reg, twoLocationReg_0_dout_re_reg, wrAddr,
       wrData_im, wrData_re, wrEnb)
  BEGIN
    twoLocationReg_0_MEM_re_0_next <= twoLocationReg_0_MEM_re_0;
    twoLocationReg_0_MEM_im_0_next <= twoLocationReg_0_MEM_im_0;
    twoLocationReg_0_MEM_re_1_next <= twoLocationReg_0_MEM_re_1;
    twoLocationReg_0_MEM_im_1_next <= twoLocationReg_0_MEM_im_1;
    IF rd_11_Addr = '1' THEN 
      twoLocationReg_0_dout_re_reg_next <= twoLocationReg_0_MEM_re_1;
      twoLocationReg_0_dout_im_reg_next <= twoLocationReg_0_MEM_im_1;
    ELSE 
      twoLocationReg_0_dout_re_reg_next <= twoLocationReg_0_MEM_re_0;
      twoLocationReg_0_dout_im_reg_next <= twoLocationReg_0_MEM_im_0;
    END IF;
    IF wrEnb = '1' THEN 
      IF wrAddr = '1' THEN 
        twoLocationReg_0_MEM_re_1_next <= wrData_re;
        twoLocationReg_0_MEM_im_1_next <= wrData_im;
      ELSE 
        twoLocationReg_0_MEM_re_0_next <= wrData_re;
        twoLocationReg_0_MEM_im_0_next <= wrData_im;
      END IF;
    END IF;
    x_re <= twoLocationReg_0_dout_re_reg;
    x_im <= twoLocationReg_0_dout_im_reg;
  END PROCESS twoLocationReg_0_output;


  -- Radix22ButterflyG1
  Radix22ButterflyG1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG1_btf1_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf1_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf2_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf2_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_x_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_x_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_x_vld_dly1 <= '0';
        xf_re <= to_signed(16#0000#, 16);
        xf_im <= to_signed(16#0000#, 16);
        xf_vld <= '0';
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= '0';
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= '0';
        btf_vld <= '0';
      ELSIF enb = '1' THEN
        xf_re <= Radix22ButterflyG1_x_re_dly1;
        xf_im <= Radix22ButterflyG1_x_im_dly1;
        xf_vld <= Radix22ButterflyG1_x_vld_dly1;
        btf_vld <= Radix22ButterflyG1_dinXtwdl_vld_dly2;
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= Radix22ButterflyG1_dinXtwdl_vld_dly1;
        Radix22ButterflyG1_btf1_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 17) + resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 17);
        Radix22ButterflyG1_btf2_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 17) - resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 17);
        Radix22ButterflyG1_btf1_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 17) + resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 17);
        Radix22ButterflyG1_btf2_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 17) - resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 17);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= Radix22ButterflyG1_dinXtwdl_re_dly1;
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= Radix22ButterflyG1_dinXtwdl_im_dly1;
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= dinXTwdl_re;
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= dinXTwdl_im;
        Radix22ButterflyG1_x_re_dly1 <= x_re;
        Radix22ButterflyG1_x_im_dly1 <= x_im;
        Radix22ButterflyG1_x_vld_dly1 <= x_vld;
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= proc_11_enb AND dinXTwdl_11_1_vld_1;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG1_process;

  dinxTwdlf_vld <= ( NOT proc_11_enb) AND dinXTwdl_11_1_vld_1;
  dinXTwdlf_re <= dinXTwdl_re;
  dinXTwdlf_im <= dinXTwdl_im;
  Radix22ButterflyG1_sra_temp <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_re_reg, 1);
  btf1_re <= Radix22ButterflyG1_sra_temp(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_1 <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_im_reg, 1);
  btf1_im <= Radix22ButterflyG1_sra_temp_1(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_2 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_re_reg, 1);
  btf2_re <= Radix22ButterflyG1_sra_temp_2(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_3 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_im_reg, 1);
  btf2_im <= Radix22ButterflyG1_sra_temp_3(15 DOWNTO 0);

  dinXTwdl_11_1_vld <= dinXTwdl_11_1_vld_1;

END rtl;


-- End of RADIX22FFT_SDF1_11.vhd --

-- Start of RADIX22FFT_SDF1_11_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF1_11_block.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF1_11_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_SDF1_11
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF1_11_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_11_1_re_dly                   :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_11_1_im_dly                   :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_11_vld_dly                    :   IN    std_logic;
        rd_11_Addr                        :   IN    std_logic;  -- ufix1
        rd_11_Enb                         :   IN    std_logic;
        twdl_11_1_re                      :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        twdl_11_1_im                      :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        proc_11_enb                       :   IN    std_logic;
        dout_11_1_re                      :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_11_1_im                      :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_11_1_vld                     :   OUT   std_logic;
        dinXTwdl_11_1_vld                 :   OUT   std_logic
        );
END RADIX22FFT_SDF1_11_block;


ARCHITECTURE rtl OF RADIX22FFT_SDF1_11_block IS

  -- Component Declarations
  COMPONENT Complex4Multiply_block8
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_11_1_re_dly                 :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_11_1_im_dly                 :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_11_vld_dly                  :   IN    std_logic;
          twdl_11_1_re                    :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_11_1_im                    :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          dinXTwdl_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dinXTwdl_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dinXTwdl_11_1_vld               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT SDFCommutator11_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_11_vld_dly                  :   IN    std_logic;
          xf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_vld                          :   IN    std_logic;
          dinXTwdlf_re                    :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinXTwdlf_im                    :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinxTwdlf_vld                   :   IN    std_logic;
          btf1_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf1_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf_vld                         :   IN    std_logic;
          wrData_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrData_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrAddr                          :   OUT   std_logic;  -- ufix1
          wrEnb                           :   OUT   std_logic;
          dout_11_1_re                    :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_11_1_im                    :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_11_1_vld                   :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Complex4Multiply_block8
    USE ENTITY work.Complex4Multiply_block8(rtl);

  FOR ALL : SDFCommutator11_block
    USE ENTITY work.SDFCommutator11_block(rtl);

  -- Signals
  SIGNAL dinXTwdl_re                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdl_im                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdl_11_1_vld_1              : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL wrData_re                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrData_im                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrAddr                           : std_logic;  -- ufix1
  SIGNAL wrEnb                            : std_logic;
  SIGNAL twoLocationReg_0_MEM_re_0        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_im_0        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_re_1        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_im_1        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_dout_re_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_dout_im_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_re_0_next   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_im_0_next   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_re_1_next   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_im_1_next   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_dout_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_dout_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_im                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_btf1_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf1_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf2_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf2_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_x_re_dly1     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_x_im_dly1     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_x_vld_dly1    : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly1 : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly2 : std_logic;
  SIGNAL Radix22ButterflyG1_sra_temp      : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_1    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_2    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_3    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL xf_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinXTwdlf_re                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdlf_im                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinxTwdlf_vld                    : std_logic;
  SIGNAL btf1_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf1_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf_vld                          : std_logic;

BEGIN
  u_MUL4 : Complex4Multiply_block8
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              din_11_1_re_dly => din_11_1_re_dly,  -- sfix16
              din_11_1_im_dly => din_11_1_im_dly,  -- sfix16
              din_11_vld_dly => din_11_vld_dly,
              twdl_11_1_re => twdl_11_1_re,  -- sfix16_En14
              twdl_11_1_im => twdl_11_1_im,  -- sfix16_En14
              dinXTwdl_re => dinXTwdl_re,  -- sfix16
              dinXTwdl_im => dinXTwdl_im,  -- sfix16
              dinXTwdl_11_1_vld => dinXTwdl_11_1_vld_1
              );

  u_SDFCOMMUTATOR_11 : SDFCommutator11_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_11_vld_dly => din_11_vld_dly,
              xf_re => xf_re,  -- sfix16
              xf_im => xf_im,  -- sfix16
              xf_vld => xf_vld,
              dinXTwdlf_re => dinXTwdlf_re,  -- sfix16
              dinXTwdlf_im => dinXTwdlf_im,  -- sfix16
              dinxTwdlf_vld => dinxTwdlf_vld,
              btf1_re => btf1_re,  -- sfix16
              btf1_im => btf1_im,  -- sfix16
              btf2_re => btf2_re,  -- sfix16
              btf2_im => btf2_im,  -- sfix16
              btf_vld => btf_vld,
              wrData_re => wrData_re,  -- sfix16
              wrData_im => wrData_im,  -- sfix16
              wrAddr => wrAddr,  -- ufix1
              wrEnb => wrEnb,
              dout_11_1_re => dout_11_1_re,  -- sfix16
              dout_11_1_im => dout_11_1_im,  -- sfix16
              dout_11_1_vld => dout_11_1_vld
              );

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_11_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  -- twoLocationReg_0
  twoLocationReg_0_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twoLocationReg_0_MEM_re_0 <= to_signed(16#0000#, 16);
        twoLocationReg_0_MEM_im_0 <= to_signed(16#0000#, 16);
        twoLocationReg_0_MEM_re_1 <= to_signed(16#0000#, 16);
        twoLocationReg_0_MEM_im_1 <= to_signed(16#0000#, 16);
        twoLocationReg_0_dout_re_reg <= to_signed(16#0000#, 16);
        twoLocationReg_0_dout_im_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twoLocationReg_0_MEM_re_0 <= twoLocationReg_0_MEM_re_0_next;
        twoLocationReg_0_MEM_im_0 <= twoLocationReg_0_MEM_im_0_next;
        twoLocationReg_0_MEM_re_1 <= twoLocationReg_0_MEM_re_1_next;
        twoLocationReg_0_MEM_im_1 <= twoLocationReg_0_MEM_im_1_next;
        twoLocationReg_0_dout_re_reg <= twoLocationReg_0_dout_re_reg_next;
        twoLocationReg_0_dout_im_reg <= twoLocationReg_0_dout_im_reg_next;
      END IF;
    END IF;
  END PROCESS twoLocationReg_0_process;

  twoLocationReg_0_output : PROCESS (rd_11_Addr, twoLocationReg_0_MEM_im_0, twoLocationReg_0_MEM_im_1,
       twoLocationReg_0_MEM_re_0, twoLocationReg_0_MEM_re_1,
       twoLocationReg_0_dout_im_reg, twoLocationReg_0_dout_re_reg, wrAddr,
       wrData_im, wrData_re, wrEnb)
  BEGIN
    twoLocationReg_0_MEM_re_0_next <= twoLocationReg_0_MEM_re_0;
    twoLocationReg_0_MEM_im_0_next <= twoLocationReg_0_MEM_im_0;
    twoLocationReg_0_MEM_re_1_next <= twoLocationReg_0_MEM_re_1;
    twoLocationReg_0_MEM_im_1_next <= twoLocationReg_0_MEM_im_1;
    IF rd_11_Addr = '1' THEN 
      twoLocationReg_0_dout_re_reg_next <= twoLocationReg_0_MEM_re_1;
      twoLocationReg_0_dout_im_reg_next <= twoLocationReg_0_MEM_im_1;
    ELSE 
      twoLocationReg_0_dout_re_reg_next <= twoLocationReg_0_MEM_re_0;
      twoLocationReg_0_dout_im_reg_next <= twoLocationReg_0_MEM_im_0;
    END IF;
    IF wrEnb = '1' THEN 
      IF wrAddr = '1' THEN 
        twoLocationReg_0_MEM_re_1_next <= wrData_re;
        twoLocationReg_0_MEM_im_1_next <= wrData_im;
      ELSE 
        twoLocationReg_0_MEM_re_0_next <= wrData_re;
        twoLocationReg_0_MEM_im_0_next <= wrData_im;
      END IF;
    END IF;
    x_re <= twoLocationReg_0_dout_re_reg;
    x_im <= twoLocationReg_0_dout_im_reg;
  END PROCESS twoLocationReg_0_output;


  -- Radix22ButterflyG1
  Radix22ButterflyG1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG1_btf1_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf1_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf2_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf2_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_x_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_x_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_x_vld_dly1 <= '0';
        xf_re <= to_signed(16#0000#, 16);
        xf_im <= to_signed(16#0000#, 16);
        xf_vld <= '0';
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= '0';
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= '0';
        btf_vld <= '0';
      ELSIF enb = '1' THEN
        xf_re <= Radix22ButterflyG1_x_re_dly1;
        xf_im <= Radix22ButterflyG1_x_im_dly1;
        xf_vld <= Radix22ButterflyG1_x_vld_dly1;
        btf_vld <= Radix22ButterflyG1_dinXtwdl_vld_dly2;
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= Radix22ButterflyG1_dinXtwdl_vld_dly1;
        Radix22ButterflyG1_btf1_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 17) + resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 17);
        Radix22ButterflyG1_btf2_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 17) - resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 17);
        Radix22ButterflyG1_btf1_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 17) + resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 17);
        Radix22ButterflyG1_btf2_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 17) - resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 17);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= Radix22ButterflyG1_dinXtwdl_re_dly1;
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= Radix22ButterflyG1_dinXtwdl_im_dly1;
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= dinXTwdl_re;
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= dinXTwdl_im;
        Radix22ButterflyG1_x_re_dly1 <= x_re;
        Radix22ButterflyG1_x_im_dly1 <= x_im;
        Radix22ButterflyG1_x_vld_dly1 <= x_vld;
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= proc_11_enb AND dinXTwdl_11_1_vld_1;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG1_process;

  dinxTwdlf_vld <= ( NOT proc_11_enb) AND dinXTwdl_11_1_vld_1;
  dinXTwdlf_re <= dinXTwdl_re;
  dinXTwdlf_im <= dinXTwdl_im;
  Radix22ButterflyG1_sra_temp <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_re_reg, 1);
  btf1_re <= Radix22ButterflyG1_sra_temp(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_1 <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_im_reg, 1);
  btf1_im <= Radix22ButterflyG1_sra_temp_1(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_2 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_re_reg, 1);
  btf2_re <= Radix22ButterflyG1_sra_temp_2(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_3 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_im_reg, 1);
  btf2_im <= Radix22ButterflyG1_sra_temp_3(15 DOWNTO 0);

  dinXTwdl_11_1_vld <= dinXTwdl_11_1_vld_1;

END rtl;


-- End of RADIX22FFT_SDF1_11_block.vhd --

-- Start of RADIX22FFT_SDF1_11_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF1_11_block1.vhd
-- Created: 2025-03-18 15:26:31
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF1_11_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_SDF1_11
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF1_11_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_11_1_re_dly                   :   IN    signed(31 DOWNTO 0);  -- sfix32
        din_11_1_im_dly                   :   IN    signed(31 DOWNTO 0);  -- sfix32
        din_11_vld_dly                    :   IN    std_logic;
        rd_11_Addr                        :   IN    unsigned(9 DOWNTO 0);  -- ufix10
        rd_11_Enb                         :   IN    std_logic;
        twdl_11_1_re                      :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
        twdl_11_1_im                      :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
        proc_11_enb                       :   IN    std_logic;
        dout_11_1_re                      :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_11_1_im                      :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_11_1_vld                     :   OUT   std_logic;
        dinXTwdl_11_1_vld                 :   OUT   std_logic
        );
END RADIX22FFT_SDF1_11_block1;


ARCHITECTURE rtl OF RADIX22FFT_SDF1_11_block1 IS

  -- Component Declarations
  COMPONENT Complex4Multiply_block13
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_11_1_re_dly                 :   IN    signed(31 DOWNTO 0);  -- sfix32
          din_11_1_im_dly                 :   IN    signed(31 DOWNTO 0);  -- sfix32
          din_11_vld_dly                  :   IN    std_logic;
          twdl_11_1_re                    :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
          twdl_11_1_im                    :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
          dinXTwdl_re                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dinXTwdl_im                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dinXTwdl_11_1_vld               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SDFCommutator11_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_11_vld_dly                  :   IN    std_logic;
          xf_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
          xf_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
          xf_vld                          :   IN    std_logic;
          dinXTwdlf_re                    :   IN    signed(31 DOWNTO 0);  -- sfix32
          dinXTwdlf_im                    :   IN    signed(31 DOWNTO 0);  -- sfix32
          dinxTwdlf_vld                   :   IN    std_logic;
          btf1_re                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf1_im                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf2_re                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf2_im                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf_vld                         :   IN    std_logic;
          wrData_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
          wrData_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
          wrAddr                          :   OUT   unsigned(9 DOWNTO 0);  -- ufix10
          wrEnb                           :   OUT   std_logic;
          dout_11_1_re                    :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_11_1_im                    :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_11_1_vld                   :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Complex4Multiply_block13
    USE ENTITY work.Complex4Multiply_block13(rtl);

  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  FOR ALL : SDFCommutator11_block1
    USE ENTITY work.SDFCommutator11_block1(rtl);

  -- Signals
  SIGNAL dinXTwdl_re                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinXTwdl_im                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinXTwdl_11_1_vld_1              : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL wrData_im                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrAddr                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL wrEnb                            : std_logic;
  SIGNAL x_im                             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrData_re                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL x_re                             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_btf1_re_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_btf1_im_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_btf2_re_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_btf2_im_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_x_re_dly1     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_x_im_dly1     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_x_vld_dly1    : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly1 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly1 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly2 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly2 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly1 : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly2 : std_logic;
  SIGNAL Radix22ButterflyG1_sra_temp      : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_sra_temp_1    : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_sra_temp_2    : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_sra_temp_3    : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL xf_re                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xf_im                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinXTwdlf_re                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinXTwdlf_im                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinxTwdlf_vld                    : std_logic;
  SIGNAL btf1_re                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf1_im                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf2_re                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf2_im                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf_vld                          : std_logic;

BEGIN
  u_MUL4 : Complex4Multiply_block13
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              din_11_1_re_dly => din_11_1_re_dly,  -- sfix32
              din_11_1_im_dly => din_11_1_im_dly,  -- sfix32
              din_11_vld_dly => din_11_vld_dly,
              twdl_11_1_re => twdl_11_1_re,  -- sfix32_En30
              twdl_11_1_im => twdl_11_1_im,  -- sfix32_En30
              dinXTwdl_re => dinXTwdl_re,  -- sfix32
              dinXTwdl_im => dinXTwdl_im,  -- sfix32
              dinXTwdl_11_1_vld => dinXTwdl_11_1_vld_1
              );

  u_dataMEM_im_0_11_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 10,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_im,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_11_Addr,
              dout => x_im
              );

  u_dataMEM_re_0_11_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 10,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_re,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_11_Addr,
              dout => x_re
              );

  u_SDFCOMMUTATOR_11 : SDFCommutator11_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_11_vld_dly => din_11_vld_dly,
              xf_re => xf_re,  -- sfix32
              xf_im => xf_im,  -- sfix32
              xf_vld => xf_vld,
              dinXTwdlf_re => dinXTwdlf_re,  -- sfix32
              dinXTwdlf_im => dinXTwdlf_im,  -- sfix32
              dinxTwdlf_vld => dinxTwdlf_vld,
              btf1_re => btf1_re,  -- sfix32
              btf1_im => btf1_im,  -- sfix32
              btf2_re => btf2_re,  -- sfix32
              btf2_im => btf2_im,  -- sfix32
              btf_vld => btf_vld,
              wrData_re => wrData_re,  -- sfix32
              wrData_im => wrData_im,  -- sfix32
              wrAddr => wrAddr,  -- ufix10
              wrEnb => wrEnb,
              dout_11_1_re => dout_11_1_re,  -- sfix32
              dout_11_1_im => dout_11_1_im,  -- sfix32
              dout_11_1_vld => dout_11_1_vld
              );

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_11_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  -- Radix22ButterflyG1
  Radix22ButterflyG1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG1_btf1_re_reg <= to_signed(0, 33);
        Radix22ButterflyG1_btf1_im_reg <= to_signed(0, 33);
        Radix22ButterflyG1_btf2_re_reg <= to_signed(0, 33);
        Radix22ButterflyG1_btf2_im_reg <= to_signed(0, 33);
        Radix22ButterflyG1_x_re_dly1 <= to_signed(0, 32);
        Radix22ButterflyG1_x_im_dly1 <= to_signed(0, 32);
        Radix22ButterflyG1_x_vld_dly1 <= '0';
        xf_re <= to_signed(0, 32);
        xf_im <= to_signed(0, 32);
        xf_vld <= '0';
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= to_signed(0, 32);
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= to_signed(0, 32);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= to_signed(0, 32);
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= to_signed(0, 32);
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= '0';
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= '0';
        btf_vld <= '0';
      ELSIF enb = '1' THEN
        xf_re <= Radix22ButterflyG1_x_re_dly1;
        xf_im <= Radix22ButterflyG1_x_im_dly1;
        xf_vld <= Radix22ButterflyG1_x_vld_dly1;
        btf_vld <= Radix22ButterflyG1_dinXtwdl_vld_dly2;
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= Radix22ButterflyG1_dinXtwdl_vld_dly1;
        Radix22ButterflyG1_btf1_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 33) + resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 33);
        Radix22ButterflyG1_btf2_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 33) - resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 33);
        Radix22ButterflyG1_btf1_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 33) + resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 33);
        Radix22ButterflyG1_btf2_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 33) - resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 33);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= Radix22ButterflyG1_dinXtwdl_re_dly1;
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= Radix22ButterflyG1_dinXtwdl_im_dly1;
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= dinXTwdl_re;
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= dinXTwdl_im;
        Radix22ButterflyG1_x_re_dly1 <= x_re;
        Radix22ButterflyG1_x_im_dly1 <= x_im;
        Radix22ButterflyG1_x_vld_dly1 <= x_vld;
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= proc_11_enb AND dinXTwdl_11_1_vld_1;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG1_process;

  dinxTwdlf_vld <= ( NOT proc_11_enb) AND dinXTwdl_11_1_vld_1;
  dinXTwdlf_re <= dinXTwdl_re;
  dinXTwdlf_im <= dinXTwdl_im;
  Radix22ButterflyG1_sra_temp <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_re_reg, 1);
  btf1_re <= Radix22ButterflyG1_sra_temp(31 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_1 <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_im_reg, 1);
  btf1_im <= Radix22ButterflyG1_sra_temp_1(31 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_2 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_re_reg, 1);
  btf2_re <= Radix22ButterflyG1_sra_temp_2(31 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_3 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_im_reg, 1);
  btf2_im <= Radix22ButterflyG1_sra_temp_3(31 DOWNTO 0);

  dinXTwdl_11_1_vld <= dinXTwdl_11_1_vld_1;

END rtl;


-- End of RADIX22FFT_SDF1_11_block1.vhd --

-- Start of RADIX22FFT_SDF1_1_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF1_1_block.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF1_1_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_SDF1_1
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF1_1_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_1_1_re_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_1_1_im_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_1_vld_dly                     :   IN    std_logic;
        rd_1_Addr                         :   IN    unsigned(10 DOWNTO 0);  -- ufix11
        rd_1_Enb                          :   IN    std_logic;
        proc_1_enb                        :   IN    std_logic;
        dout_1_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_1_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_1_1_vld                      :   OUT   std_logic;
        dinXTwdl_1_1_vld                  :   OUT   std_logic
        );
END RADIX22FFT_SDF1_1_block;


ARCHITECTURE rtl OF RADIX22FFT_SDF1_1_block IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SDFCommutator1_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_1_vld_dly                   :   IN    std_logic;
          xf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_vld                          :   IN    std_logic;
          dinXTwdlf_re                    :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinXTwdlf_im                    :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinxTwdlf_vld                   :   IN    std_logic;
          btf1_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf1_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf_vld                         :   IN    std_logic;
          wrData_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrAddr                          :   OUT   unsigned(10 DOWNTO 0);  -- ufix11
          wrEnb                           :   OUT   std_logic;
          dout_1_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_1_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_1_1_vld                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  FOR ALL : SDFCommutator1_block
    USE ENTITY work.SDFCommutator1_block(rtl);

  -- Signals
  SIGNAL dinXTwdl_re                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdl_im                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdl_1_1_vld_1               : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL wrData_re                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrAddr                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL wrEnb                            : std_logic;
  SIGNAL x_re                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_btf1_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf1_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf2_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf2_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_x_re_dly1     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_x_im_dly1     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_x_vld_dly1    : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly1 : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly2 : std_logic;
  SIGNAL Radix22ButterflyG1_sra_temp      : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_1    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_2    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_3    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL xf_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinXTwdlf_re                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdlf_im                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinxTwdlf_vld                    : std_logic;
  SIGNAL btf1_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf1_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf_vld                          : std_logic;

BEGIN
  u_dataMEM_re_0_1_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 11,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_re,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_1_Addr,
              dout => x_re
              );

  u_SDFCOMMUTATOR_1 : SDFCommutator1_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_1_vld_dly => din_1_vld_dly,
              xf_re => xf_re,  -- sfix16
              xf_im => xf_im,  -- sfix16
              xf_vld => xf_vld,
              dinXTwdlf_re => dinXTwdlf_re,  -- sfix16
              dinXTwdlf_im => dinXTwdlf_im,  -- sfix16
              dinxTwdlf_vld => dinxTwdlf_vld,
              btf1_re => btf1_re,  -- sfix16
              btf1_im => btf1_im,  -- sfix16
              btf2_re => btf2_re,  -- sfix16
              btf2_im => btf2_im,  -- sfix16
              btf_vld => btf_vld,
              wrData_re => wrData_re,  -- sfix16
              wrAddr => wrAddr,  -- ufix11
              wrEnb => wrEnb,
              dout_1_1_re => dout_1_1_re,  -- sfix16
              dout_1_1_im => dout_1_1_im,  -- sfix16
              dout_1_1_vld => dout_1_1_vld
              );

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        dinXTwdl_re <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        dinXTwdl_re <= din_1_1_re_dly;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        dinXTwdl_im <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        dinXTwdl_im <= din_1_1_im_dly;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        dinXTwdl_1_1_vld_1 <= '0';
      ELSIF enb = '1' THEN
        dinXTwdl_1_1_vld_1 <= din_1_vld_dly;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_1_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Radix22ButterflyG1
  Radix22ButterflyG1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG1_btf1_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf1_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf2_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf2_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_x_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_x_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_x_vld_dly1 <= '0';
        xf_re <= to_signed(16#0000#, 16);
        xf_im <= to_signed(16#0000#, 16);
        xf_vld <= '0';
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= '0';
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= '0';
        btf_vld <= '0';
      ELSIF enb = '1' THEN
        xf_re <= Radix22ButterflyG1_x_re_dly1;
        xf_im <= Radix22ButterflyG1_x_im_dly1;
        xf_vld <= Radix22ButterflyG1_x_vld_dly1;
        btf_vld <= Radix22ButterflyG1_dinXtwdl_vld_dly2;
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= Radix22ButterflyG1_dinXtwdl_vld_dly1;
        Radix22ButterflyG1_btf1_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 17) + resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 17);
        Radix22ButterflyG1_btf2_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 17) - resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 17);
        Radix22ButterflyG1_btf1_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 17) + resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 17);
        Radix22ButterflyG1_btf2_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 17) - resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 17);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= Radix22ButterflyG1_dinXtwdl_re_dly1;
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= Radix22ButterflyG1_dinXtwdl_im_dly1;
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= dinXTwdl_re;
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= dinXTwdl_im;
        Radix22ButterflyG1_x_re_dly1 <= x_re;
        Radix22ButterflyG1_x_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_x_vld_dly1 <= x_vld;
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= proc_1_enb AND dinXTwdl_1_1_vld_1;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG1_process;

  dinxTwdlf_vld <= ( NOT proc_1_enb) AND dinXTwdl_1_1_vld_1;
  dinXTwdlf_re <= dinXTwdl_re;
  dinXTwdlf_im <= dinXTwdl_im;
  Radix22ButterflyG1_sra_temp <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_re_reg, 1);
  btf1_re <= Radix22ButterflyG1_sra_temp(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_1 <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_im_reg, 1);
  btf1_im <= Radix22ButterflyG1_sra_temp_1(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_2 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_re_reg, 1);
  btf2_re <= Radix22ButterflyG1_sra_temp_2(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_3 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_im_reg, 1);
  btf2_im <= Radix22ButterflyG1_sra_temp_3(15 DOWNTO 0);

  dinXTwdl_1_1_vld <= dinXTwdl_1_1_vld_1;

END rtl;


-- End of RADIX22FFT_SDF1_1_block.vhd --

-- Start of RADIX22FFT_SDF1_1_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF1_1_block1.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF1_1_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_SDF1_1
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF1_1_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_1_1_re_dly                    :   IN    signed(31 DOWNTO 0);  -- sfix32
        din_1_1_im_dly                    :   IN    signed(31 DOWNTO 0);  -- sfix32
        din_1_vld_dly                     :   IN    std_logic;
        rd_1_Addr                         :   IN    std_logic;
        rd_1_Enb                          :   IN    std_logic;
        proc_1_enb                        :   IN    std_logic;
        dout_1_1_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_1_1_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_1_1_vld                      :   OUT   std_logic;
        dinXTwdl_1_1_vld                  :   OUT   std_logic
        );
END RADIX22FFT_SDF1_1_block1;


ARCHITECTURE rtl OF RADIX22FFT_SDF1_1_block1 IS

  -- Component Declarations
  COMPONENT SDFCommutator1_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_1_vld_dly                   :   IN    std_logic;
          xf_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
          xf_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
          xf_vld                          :   IN    std_logic;
          dinXTwdlf_re                    :   IN    signed(31 DOWNTO 0);  -- sfix32
          dinXTwdlf_im                    :   IN    signed(31 DOWNTO 0);  -- sfix32
          dinxTwdlf_vld                   :   IN    std_logic;
          btf1_re                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf1_im                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf2_re                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf2_im                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf_vld                         :   IN    std_logic;
          wrData_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
          wrData_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
          wrAddr                          :   OUT   std_logic;  -- ufix1
          wrEnb                           :   OUT   std_logic;
          dout_1_1_re                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_1_1_im                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_1_1_vld                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : SDFCommutator1_block1
    USE ENTITY work.SDFCommutator1_block1(rtl);

  -- Signals
  SIGNAL dinXTwdl_re                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinXTwdl_im                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinXTwdl_1_1_vld_1               : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL wrData_re                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrData_im                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrAddr                           : std_logic;  -- ufix1
  SIGNAL wrEnb                            : std_logic;
  SIGNAL twoLocationReg_0_MEM_re_0        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL twoLocationReg_0_MEM_im_0        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL twoLocationReg_0_MEM_re_1        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL twoLocationReg_0_MEM_im_1        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL twoLocationReg_0_dout_re_reg     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL twoLocationReg_0_dout_im_reg     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL twoLocationReg_0_MEM_re_0_next   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL twoLocationReg_0_MEM_im_0_next   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL twoLocationReg_0_MEM_re_1_next   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL twoLocationReg_0_MEM_im_1_next   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL twoLocationReg_0_dout_re_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL twoLocationReg_0_dout_im_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL x_re                             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL x_im                             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_btf1_re_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_btf1_im_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_btf2_re_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_btf2_im_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly1 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly1 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly2 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly2 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly1 : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly2 : std_logic;
  SIGNAL Radix22ButterflyG1_sra_temp      : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_sra_temp_1    : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_sra_temp_2    : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_sra_temp_3    : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL xf_re                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xf_im                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinXTwdlf_re                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinXTwdlf_im                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinxTwdlf_vld                    : std_logic;
  SIGNAL btf1_re                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf1_im                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf2_re                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf2_im                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf_vld                          : std_logic;

BEGIN
  u_SDFCOMMUTATOR_1 : SDFCommutator1_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_1_vld_dly => din_1_vld_dly,
              xf_re => xf_re,  -- sfix32
              xf_im => xf_im,  -- sfix32
              xf_vld => xf_vld,
              dinXTwdlf_re => dinXTwdlf_re,  -- sfix32
              dinXTwdlf_im => dinXTwdlf_im,  -- sfix32
              dinxTwdlf_vld => dinxTwdlf_vld,
              btf1_re => btf1_re,  -- sfix32
              btf1_im => btf1_im,  -- sfix32
              btf2_re => btf2_re,  -- sfix32
              btf2_im => btf2_im,  -- sfix32
              btf_vld => btf_vld,
              wrData_re => wrData_re,  -- sfix32
              wrData_im => wrData_im,  -- sfix32
              wrAddr => wrAddr,  -- ufix1
              wrEnb => wrEnb,
              dout_1_1_re => dout_1_1_re,  -- sfix32
              dout_1_1_im => dout_1_1_im,  -- sfix32
              dout_1_1_vld => dout_1_1_vld
              );

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        dinXTwdl_re <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        dinXTwdl_re <= din_1_1_re_dly;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        dinXTwdl_im <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        dinXTwdl_im <= din_1_1_im_dly;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        dinXTwdl_1_1_vld_1 <= '0';
      ELSIF enb = '1' THEN
        dinXTwdl_1_1_vld_1 <= din_1_vld_dly;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_1_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- twoLocationReg_0
  twoLocationReg_0_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twoLocationReg_0_MEM_re_0 <= to_signed(0, 32);
        twoLocationReg_0_MEM_im_0 <= to_signed(0, 32);
        twoLocationReg_0_MEM_re_1 <= to_signed(0, 32);
        twoLocationReg_0_MEM_im_1 <= to_signed(0, 32);
        twoLocationReg_0_dout_re_reg <= to_signed(0, 32);
        twoLocationReg_0_dout_im_reg <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        twoLocationReg_0_MEM_re_0 <= twoLocationReg_0_MEM_re_0_next;
        twoLocationReg_0_MEM_im_0 <= twoLocationReg_0_MEM_im_0_next;
        twoLocationReg_0_MEM_re_1 <= twoLocationReg_0_MEM_re_1_next;
        twoLocationReg_0_MEM_im_1 <= twoLocationReg_0_MEM_im_1_next;
        twoLocationReg_0_dout_re_reg <= twoLocationReg_0_dout_re_reg_next;
        twoLocationReg_0_dout_im_reg <= twoLocationReg_0_dout_im_reg_next;
      END IF;
    END IF;
  END PROCESS twoLocationReg_0_process;

  twoLocationReg_0_output : PROCESS (rd_1_Addr, twoLocationReg_0_MEM_im_0, twoLocationReg_0_MEM_im_1,
       twoLocationReg_0_MEM_re_0, twoLocationReg_0_MEM_re_1,
       twoLocationReg_0_dout_im_reg, twoLocationReg_0_dout_re_reg, wrAddr,
       wrData_im, wrData_re, wrEnb)
  BEGIN
    twoLocationReg_0_MEM_re_0_next <= twoLocationReg_0_MEM_re_0;
    twoLocationReg_0_MEM_im_0_next <= twoLocationReg_0_MEM_im_0;
    twoLocationReg_0_MEM_re_1_next <= twoLocationReg_0_MEM_re_1;
    twoLocationReg_0_MEM_im_1_next <= twoLocationReg_0_MEM_im_1;
    IF rd_1_Addr = '1' THEN 
      twoLocationReg_0_dout_re_reg_next <= twoLocationReg_0_MEM_re_1;
      twoLocationReg_0_dout_im_reg_next <= twoLocationReg_0_MEM_im_1;
    ELSE 
      twoLocationReg_0_dout_re_reg_next <= twoLocationReg_0_MEM_re_0;
      twoLocationReg_0_dout_im_reg_next <= twoLocationReg_0_MEM_im_0;
    END IF;
    IF wrEnb = '1' THEN 
      IF wrAddr = '1' THEN 
        twoLocationReg_0_MEM_re_1_next <= wrData_re;
        twoLocationReg_0_MEM_im_1_next <= wrData_im;
      ELSE 
        twoLocationReg_0_MEM_re_0_next <= wrData_re;
        twoLocationReg_0_MEM_im_0_next <= wrData_im;
      END IF;
    END IF;
    x_re <= twoLocationReg_0_dout_re_reg;
    x_im <= twoLocationReg_0_dout_im_reg;
  END PROCESS twoLocationReg_0_output;


  -- Radix22ButterflyG1
  Radix22ButterflyG1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG1_btf1_re_reg <= to_signed(0, 33);
        Radix22ButterflyG1_btf1_im_reg <= to_signed(0, 33);
        Radix22ButterflyG1_btf2_re_reg <= to_signed(0, 33);
        Radix22ButterflyG1_btf2_im_reg <= to_signed(0, 33);
        xf_re <= to_signed(0, 32);
        xf_im <= to_signed(0, 32);
        xf_vld <= '0';
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= to_signed(0, 32);
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= to_signed(0, 32);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= to_signed(0, 32);
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= to_signed(0, 32);
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= '0';
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= '0';
        btf_vld <= '0';
      ELSIF enb = '1' THEN
        btf_vld <= Radix22ButterflyG1_dinXtwdl_vld_dly2;
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= Radix22ButterflyG1_dinXtwdl_vld_dly1;
        Radix22ButterflyG1_btf1_re_reg <= resize(x_re, 33) + resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 33);
        Radix22ButterflyG1_btf2_re_reg <= resize(x_re, 33) - resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 33);
        Radix22ButterflyG1_btf1_im_reg <= resize(x_im, 33) + resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 33);
        Radix22ButterflyG1_btf2_im_reg <= resize(x_im, 33) - resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 33);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= Radix22ButterflyG1_dinXtwdl_re_dly1;
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= Radix22ButterflyG1_dinXtwdl_im_dly1;
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= dinXTwdl_re;
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= dinXTwdl_im;
        xf_re <= x_re;
        xf_im <= x_im;
        xf_vld <= x_vld;
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= proc_1_enb AND dinXTwdl_1_1_vld_1;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG1_process;

  dinxTwdlf_vld <= ( NOT proc_1_enb) AND dinXTwdl_1_1_vld_1;
  dinXTwdlf_re <= dinXTwdl_re;
  dinXTwdlf_im <= dinXTwdl_im;
  Radix22ButterflyG1_sra_temp <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_re_reg, 1);
  btf1_re <= Radix22ButterflyG1_sra_temp(31 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_1 <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_im_reg, 1);
  btf1_im <= Radix22ButterflyG1_sra_temp_1(31 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_2 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_re_reg, 1);
  btf2_re <= Radix22ButterflyG1_sra_temp_2(31 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_3 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_im_reg, 1);
  btf2_im <= Radix22ButterflyG1_sra_temp_3(31 DOWNTO 0);

  dinXTwdl_1_1_vld <= dinXTwdl_1_1_vld_1;

END rtl;


-- End of RADIX22FFT_SDF1_1_block1.vhd --

-- Start of RADIX22FFT_SDF1_3.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF1_3.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF1_3
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF1_3
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF1_3 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_3_1_re_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_3_1_im_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_3_vld_dly                     :   IN    std_logic;
        rd_3_Addr                         :   IN    unsigned(8 DOWNTO 0);  -- ufix9
        rd_3_Enb                          :   IN    std_logic;
        twdl_3_1_re                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        twdl_3_1_im                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        proc_3_enb                        :   IN    std_logic;
        dout_3_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_3_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_3_1_vld                      :   OUT   std_logic;
        dinXTwdl_3_1_vld                  :   OUT   std_logic
        );
END RADIX22FFT_SDF1_3;


ARCHITECTURE rtl OF RADIX22FFT_SDF1_3 IS

  -- Component Declarations
  COMPONENT Complex4Multiply
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_3_1_re_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_3_1_im_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_3_vld_dly                   :   IN    std_logic;
          twdl_3_1_re                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_3_1_im                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          dinXTwdl_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dinXTwdl_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dinXTwdl_3_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SDFCommutator3
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_3_vld_dly                   :   IN    std_logic;
          xf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_vld                          :   IN    std_logic;
          dinXTwdlf_re                    :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinXTwdlf_im                    :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinxTwdlf_vld                   :   IN    std_logic;
          btf1_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf1_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf_vld                         :   IN    std_logic;
          wrData_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrData_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrAddr                          :   OUT   unsigned(8 DOWNTO 0);  -- ufix9
          wrEnb                           :   OUT   std_logic;
          dout_3_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_3_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_3_1_vld                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Complex4Multiply
    USE ENTITY work.Complex4Multiply(rtl);

  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  FOR ALL : SDFCommutator3
    USE ENTITY work.SDFCommutator3(rtl);

  -- Signals
  SIGNAL dinXTwdl_re                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdl_im                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdl_3_1_vld_1               : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL wrData_im                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrAddr                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL wrEnb                            : std_logic;
  SIGNAL x_im                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrData_re                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_btf1_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf1_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf2_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf2_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_x_re_dly1     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_x_im_dly1     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_x_vld_dly1    : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly1 : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly2 : std_logic;
  SIGNAL Radix22ButterflyG1_sra_temp      : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_1    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_2    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_3    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL xf_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinXTwdlf_re                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdlf_im                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinxTwdlf_vld                    : std_logic;
  SIGNAL btf1_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf1_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf_vld                          : std_logic;

BEGIN
  u_MUL4 : Complex4Multiply
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              din_3_1_re_dly => din_3_1_re_dly,  -- sfix16
              din_3_1_im_dly => din_3_1_im_dly,  -- sfix16
              din_3_vld_dly => din_3_vld_dly,
              twdl_3_1_re => twdl_3_1_re,  -- sfix16_En14
              twdl_3_1_im => twdl_3_1_im,  -- sfix16_En14
              dinXTwdl_re => dinXTwdl_re,  -- sfix16
              dinXTwdl_im => dinXTwdl_im,  -- sfix16
              dinXTwdl_3_1_vld => dinXTwdl_3_1_vld_1
              );

  u_dataMEM_im_0_3_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 9,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_im,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_3_Addr,
              dout => x_im
              );

  u_dataMEM_re_0_3_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 9,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_re,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_3_Addr,
              dout => x_re
              );

  u_SDFCOMMUTATOR_3 : SDFCommutator3
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_3_vld_dly => din_3_vld_dly,
              xf_re => xf_re,  -- sfix16
              xf_im => xf_im,  -- sfix16
              xf_vld => xf_vld,
              dinXTwdlf_re => dinXTwdlf_re,  -- sfix16
              dinXTwdlf_im => dinXTwdlf_im,  -- sfix16
              dinxTwdlf_vld => dinxTwdlf_vld,
              btf1_re => btf1_re,  -- sfix16
              btf1_im => btf1_im,  -- sfix16
              btf2_re => btf2_re,  -- sfix16
              btf2_im => btf2_im,  -- sfix16
              btf_vld => btf_vld,
              wrData_re => wrData_re,  -- sfix16
              wrData_im => wrData_im,  -- sfix16
              wrAddr => wrAddr,  -- ufix9
              wrEnb => wrEnb,
              dout_3_1_re => dout_3_1_re,  -- sfix16
              dout_3_1_im => dout_3_1_im,  -- sfix16
              dout_3_1_vld => dout_3_1_vld
              );

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_3_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  -- Radix22ButterflyG1
  Radix22ButterflyG1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG1_btf1_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf1_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf2_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf2_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_x_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_x_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_x_vld_dly1 <= '0';
        xf_re <= to_signed(16#0000#, 16);
        xf_im <= to_signed(16#0000#, 16);
        xf_vld <= '0';
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= '0';
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= '0';
        btf_vld <= '0';
      ELSIF enb = '1' THEN
        xf_re <= Radix22ButterflyG1_x_re_dly1;
        xf_im <= Radix22ButterflyG1_x_im_dly1;
        xf_vld <= Radix22ButterflyG1_x_vld_dly1;
        btf_vld <= Radix22ButterflyG1_dinXtwdl_vld_dly2;
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= Radix22ButterflyG1_dinXtwdl_vld_dly1;
        Radix22ButterflyG1_btf1_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 17) + resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 17);
        Radix22ButterflyG1_btf2_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 17) - resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 17);
        Radix22ButterflyG1_btf1_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 17) + resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 17);
        Radix22ButterflyG1_btf2_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 17) - resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 17);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= Radix22ButterflyG1_dinXtwdl_re_dly1;
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= Radix22ButterflyG1_dinXtwdl_im_dly1;
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= dinXTwdl_re;
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= dinXTwdl_im;
        Radix22ButterflyG1_x_re_dly1 <= x_re;
        Radix22ButterflyG1_x_im_dly1 <= x_im;
        Radix22ButterflyG1_x_vld_dly1 <= x_vld;
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= proc_3_enb AND dinXTwdl_3_1_vld_1;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG1_process;

  dinxTwdlf_vld <= ( NOT proc_3_enb) AND dinXTwdl_3_1_vld_1;
  dinXTwdlf_re <= dinXTwdl_re;
  dinXTwdlf_im <= dinXTwdl_im;
  Radix22ButterflyG1_sra_temp <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_re_reg, 1);
  btf1_re <= Radix22ButterflyG1_sra_temp(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_1 <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_im_reg, 1);
  btf1_im <= Radix22ButterflyG1_sra_temp_1(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_2 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_re_reg, 1);
  btf2_re <= Radix22ButterflyG1_sra_temp_2(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_3 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_im_reg, 1);
  btf2_im <= Radix22ButterflyG1_sra_temp_3(15 DOWNTO 0);

  dinXTwdl_3_1_vld <= dinXTwdl_3_1_vld_1;

END rtl;


-- End of RADIX22FFT_SDF1_3.vhd --

-- Start of RADIX22FFT_SDF1_3_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF1_3_block.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF1_3_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_SDF1_3
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF1_3_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_3_1_re_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_3_1_im_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_3_vld_dly                     :   IN    std_logic;
        rd_3_Addr                         :   IN    unsigned(8 DOWNTO 0);  -- ufix9
        rd_3_Enb                          :   IN    std_logic;
        twdl_3_1_re                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        twdl_3_1_im                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        proc_3_enb                        :   IN    std_logic;
        dout_3_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_3_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_3_1_vld                      :   OUT   std_logic;
        dinXTwdl_3_1_vld                  :   OUT   std_logic
        );
END RADIX22FFT_SDF1_3_block;


ARCHITECTURE rtl OF RADIX22FFT_SDF1_3_block IS

  -- Component Declarations
  COMPONENT Complex4Multiply_block4
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_3_1_re_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_3_1_im_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_3_vld_dly                   :   IN    std_logic;
          twdl_3_1_re                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_3_1_im                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          dinXTwdl_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dinXTwdl_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dinXTwdl_3_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SDFCommutator3_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_3_vld_dly                   :   IN    std_logic;
          xf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_vld                          :   IN    std_logic;
          dinXTwdlf_re                    :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinXTwdlf_im                    :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinxTwdlf_vld                   :   IN    std_logic;
          btf1_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf1_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf_vld                         :   IN    std_logic;
          wrData_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrData_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrAddr                          :   OUT   unsigned(8 DOWNTO 0);  -- ufix9
          wrEnb                           :   OUT   std_logic;
          dout_3_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_3_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_3_1_vld                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Complex4Multiply_block4
    USE ENTITY work.Complex4Multiply_block4(rtl);

  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  FOR ALL : SDFCommutator3_block
    USE ENTITY work.SDFCommutator3_block(rtl);

  -- Signals
  SIGNAL dinXTwdl_re                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdl_im                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdl_3_1_vld_1               : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL wrData_im                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrAddr                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL wrEnb                            : std_logic;
  SIGNAL x_im                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrData_re                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_btf1_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf1_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf2_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf2_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_x_re_dly1     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_x_im_dly1     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_x_vld_dly1    : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly1 : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly2 : std_logic;
  SIGNAL Radix22ButterflyG1_sra_temp      : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_1    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_2    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_3    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL xf_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinXTwdlf_re                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdlf_im                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinxTwdlf_vld                    : std_logic;
  SIGNAL btf1_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf1_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf_vld                          : std_logic;

BEGIN
  u_MUL4 : Complex4Multiply_block4
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              din_3_1_re_dly => din_3_1_re_dly,  -- sfix16
              din_3_1_im_dly => din_3_1_im_dly,  -- sfix16
              din_3_vld_dly => din_3_vld_dly,
              twdl_3_1_re => twdl_3_1_re,  -- sfix16_En14
              twdl_3_1_im => twdl_3_1_im,  -- sfix16_En14
              dinXTwdl_re => dinXTwdl_re,  -- sfix16
              dinXTwdl_im => dinXTwdl_im,  -- sfix16
              dinXTwdl_3_1_vld => dinXTwdl_3_1_vld_1
              );

  u_dataMEM_im_0_3_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 9,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_im,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_3_Addr,
              dout => x_im
              );

  u_dataMEM_re_0_3_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 9,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_re,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_3_Addr,
              dout => x_re
              );

  u_SDFCOMMUTATOR_3 : SDFCommutator3_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_3_vld_dly => din_3_vld_dly,
              xf_re => xf_re,  -- sfix16
              xf_im => xf_im,  -- sfix16
              xf_vld => xf_vld,
              dinXTwdlf_re => dinXTwdlf_re,  -- sfix16
              dinXTwdlf_im => dinXTwdlf_im,  -- sfix16
              dinxTwdlf_vld => dinxTwdlf_vld,
              btf1_re => btf1_re,  -- sfix16
              btf1_im => btf1_im,  -- sfix16
              btf2_re => btf2_re,  -- sfix16
              btf2_im => btf2_im,  -- sfix16
              btf_vld => btf_vld,
              wrData_re => wrData_re,  -- sfix16
              wrData_im => wrData_im,  -- sfix16
              wrAddr => wrAddr,  -- ufix9
              wrEnb => wrEnb,
              dout_3_1_re => dout_3_1_re,  -- sfix16
              dout_3_1_im => dout_3_1_im,  -- sfix16
              dout_3_1_vld => dout_3_1_vld
              );

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_3_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  -- Radix22ButterflyG1
  Radix22ButterflyG1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG1_btf1_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf1_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf2_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf2_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_x_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_x_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_x_vld_dly1 <= '0';
        xf_re <= to_signed(16#0000#, 16);
        xf_im <= to_signed(16#0000#, 16);
        xf_vld <= '0';
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= '0';
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= '0';
        btf_vld <= '0';
      ELSIF enb = '1' THEN
        xf_re <= Radix22ButterflyG1_x_re_dly1;
        xf_im <= Radix22ButterflyG1_x_im_dly1;
        xf_vld <= Radix22ButterflyG1_x_vld_dly1;
        btf_vld <= Radix22ButterflyG1_dinXtwdl_vld_dly2;
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= Radix22ButterflyG1_dinXtwdl_vld_dly1;
        Radix22ButterflyG1_btf1_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 17) + resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 17);
        Radix22ButterflyG1_btf2_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 17) - resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 17);
        Radix22ButterflyG1_btf1_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 17) + resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 17);
        Radix22ButterflyG1_btf2_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 17) - resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 17);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= Radix22ButterflyG1_dinXtwdl_re_dly1;
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= Radix22ButterflyG1_dinXtwdl_im_dly1;
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= dinXTwdl_re;
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= dinXTwdl_im;
        Radix22ButterflyG1_x_re_dly1 <= x_re;
        Radix22ButterflyG1_x_im_dly1 <= x_im;
        Radix22ButterflyG1_x_vld_dly1 <= x_vld;
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= proc_3_enb AND dinXTwdl_3_1_vld_1;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG1_process;

  dinxTwdlf_vld <= ( NOT proc_3_enb) AND dinXTwdl_3_1_vld_1;
  dinXTwdlf_re <= dinXTwdl_re;
  dinXTwdlf_im <= dinXTwdl_im;
  Radix22ButterflyG1_sra_temp <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_re_reg, 1);
  btf1_re <= Radix22ButterflyG1_sra_temp(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_1 <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_im_reg, 1);
  btf1_im <= Radix22ButterflyG1_sra_temp_1(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_2 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_re_reg, 1);
  btf2_re <= Radix22ButterflyG1_sra_temp_2(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_3 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_im_reg, 1);
  btf2_im <= Radix22ButterflyG1_sra_temp_3(15 DOWNTO 0);

  dinXTwdl_3_1_vld <= dinXTwdl_3_1_vld_1;

END rtl;


-- End of RADIX22FFT_SDF1_3_block.vhd --

-- Start of RADIX22FFT_SDF1_3_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF1_3_block1.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF1_3_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_SDF1_3
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF1_3_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_3_1_re_dly                    :   IN    signed(31 DOWNTO 0);  -- sfix32
        din_3_1_im_dly                    :   IN    signed(31 DOWNTO 0);  -- sfix32
        din_3_vld_dly                     :   IN    std_logic;
        rd_3_Addr                         :   IN    unsigned(1 DOWNTO 0);  -- ufix2
        rd_3_Enb                          :   IN    std_logic;
        twdl_3_1_re                       :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
        twdl_3_1_im                       :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
        proc_3_enb                        :   IN    std_logic;
        dout_3_1_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_3_1_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_3_1_vld                      :   OUT   std_logic;
        dinXTwdl_3_1_vld                  :   OUT   std_logic
        );
END RADIX22FFT_SDF1_3_block1;


ARCHITECTURE rtl OF RADIX22FFT_SDF1_3_block1 IS

  -- Component Declarations
  COMPONENT Complex4Multiply_block9
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_3_1_re_dly                  :   IN    signed(31 DOWNTO 0);  -- sfix32
          din_3_1_im_dly                  :   IN    signed(31 DOWNTO 0);  -- sfix32
          din_3_vld_dly                   :   IN    std_logic;
          twdl_3_1_re                     :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
          twdl_3_1_im                     :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
          dinXTwdl_re                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dinXTwdl_im                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dinXTwdl_3_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SDFCommutator3_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_3_vld_dly                   :   IN    std_logic;
          xf_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
          xf_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
          xf_vld                          :   IN    std_logic;
          dinXTwdlf_re                    :   IN    signed(31 DOWNTO 0);  -- sfix32
          dinXTwdlf_im                    :   IN    signed(31 DOWNTO 0);  -- sfix32
          dinxTwdlf_vld                   :   IN    std_logic;
          btf1_re                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf1_im                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf2_re                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf2_im                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf_vld                         :   IN    std_logic;
          wrData_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
          wrData_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
          wrAddr                          :   OUT   unsigned(1 DOWNTO 0);  -- ufix2
          wrEnb                           :   OUT   std_logic;
          dout_3_1_re                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_3_1_im                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_3_1_vld                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Complex4Multiply_block9
    USE ENTITY work.Complex4Multiply_block9(rtl);

  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  FOR ALL : SDFCommutator3_block1
    USE ENTITY work.SDFCommutator3_block1(rtl);

  -- Signals
  SIGNAL dinXTwdl_re                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinXTwdl_im                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinXTwdl_3_1_vld_1               : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL wrData_im                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrAddr                           : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL wrEnb                            : std_logic;
  SIGNAL x_im                             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrData_re                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL x_re                             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_btf1_re_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_btf1_im_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_btf2_re_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_btf2_im_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_x_re_dly1     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_x_im_dly1     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_x_vld_dly1    : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly1 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly1 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly2 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly2 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly1 : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly2 : std_logic;
  SIGNAL Radix22ButterflyG1_sra_temp      : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_sra_temp_1    : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_sra_temp_2    : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_sra_temp_3    : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL xf_re                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xf_im                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinXTwdlf_re                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinXTwdlf_im                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinxTwdlf_vld                    : std_logic;
  SIGNAL btf1_re                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf1_im                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf2_re                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf2_im                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf_vld                          : std_logic;

BEGIN
  u_MUL4 : Complex4Multiply_block9
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              din_3_1_re_dly => din_3_1_re_dly,  -- sfix32
              din_3_1_im_dly => din_3_1_im_dly,  -- sfix32
              din_3_vld_dly => din_3_vld_dly,
              twdl_3_1_re => twdl_3_1_re,  -- sfix32_En30
              twdl_3_1_im => twdl_3_1_im,  -- sfix32_En30
              dinXTwdl_re => dinXTwdl_re,  -- sfix32
              dinXTwdl_im => dinXTwdl_im,  -- sfix32
              dinXTwdl_3_1_vld => dinXTwdl_3_1_vld_1
              );

  u_dataMEM_im_0_3_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 2,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_im,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_3_Addr,
              dout => x_im
              );

  u_dataMEM_re_0_3_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 2,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_re,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_3_Addr,
              dout => x_re
              );

  u_SDFCOMMUTATOR_3 : SDFCommutator3_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_3_vld_dly => din_3_vld_dly,
              xf_re => xf_re,  -- sfix32
              xf_im => xf_im,  -- sfix32
              xf_vld => xf_vld,
              dinXTwdlf_re => dinXTwdlf_re,  -- sfix32
              dinXTwdlf_im => dinXTwdlf_im,  -- sfix32
              dinxTwdlf_vld => dinxTwdlf_vld,
              btf1_re => btf1_re,  -- sfix32
              btf1_im => btf1_im,  -- sfix32
              btf2_re => btf2_re,  -- sfix32
              btf2_im => btf2_im,  -- sfix32
              btf_vld => btf_vld,
              wrData_re => wrData_re,  -- sfix32
              wrData_im => wrData_im,  -- sfix32
              wrAddr => wrAddr,  -- ufix2
              wrEnb => wrEnb,
              dout_3_1_re => dout_3_1_re,  -- sfix32
              dout_3_1_im => dout_3_1_im,  -- sfix32
              dout_3_1_vld => dout_3_1_vld
              );

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_3_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  -- Radix22ButterflyG1
  Radix22ButterflyG1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG1_btf1_re_reg <= to_signed(0, 33);
        Radix22ButterflyG1_btf1_im_reg <= to_signed(0, 33);
        Radix22ButterflyG1_btf2_re_reg <= to_signed(0, 33);
        Radix22ButterflyG1_btf2_im_reg <= to_signed(0, 33);
        Radix22ButterflyG1_x_re_dly1 <= to_signed(0, 32);
        Radix22ButterflyG1_x_im_dly1 <= to_signed(0, 32);
        Radix22ButterflyG1_x_vld_dly1 <= '0';
        xf_re <= to_signed(0, 32);
        xf_im <= to_signed(0, 32);
        xf_vld <= '0';
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= to_signed(0, 32);
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= to_signed(0, 32);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= to_signed(0, 32);
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= to_signed(0, 32);
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= '0';
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= '0';
        btf_vld <= '0';
      ELSIF enb = '1' THEN
        xf_re <= Radix22ButterflyG1_x_re_dly1;
        xf_im <= Radix22ButterflyG1_x_im_dly1;
        xf_vld <= Radix22ButterflyG1_x_vld_dly1;
        btf_vld <= Radix22ButterflyG1_dinXtwdl_vld_dly2;
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= Radix22ButterflyG1_dinXtwdl_vld_dly1;
        Radix22ButterflyG1_btf1_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 33) + resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 33);
        Radix22ButterflyG1_btf2_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 33) - resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 33);
        Radix22ButterflyG1_btf1_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 33) + resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 33);
        Radix22ButterflyG1_btf2_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 33) - resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 33);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= Radix22ButterflyG1_dinXtwdl_re_dly1;
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= Radix22ButterflyG1_dinXtwdl_im_dly1;
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= dinXTwdl_re;
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= dinXTwdl_im;
        Radix22ButterflyG1_x_re_dly1 <= x_re;
        Radix22ButterflyG1_x_im_dly1 <= x_im;
        Radix22ButterflyG1_x_vld_dly1 <= x_vld;
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= proc_3_enb AND dinXTwdl_3_1_vld_1;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG1_process;

  dinxTwdlf_vld <= ( NOT proc_3_enb) AND dinXTwdl_3_1_vld_1;
  dinXTwdlf_re <= dinXTwdl_re;
  dinXTwdlf_im <= dinXTwdl_im;
  Radix22ButterflyG1_sra_temp <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_re_reg, 1);
  btf1_re <= Radix22ButterflyG1_sra_temp(31 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_1 <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_im_reg, 1);
  btf1_im <= Radix22ButterflyG1_sra_temp_1(31 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_2 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_re_reg, 1);
  btf2_re <= Radix22ButterflyG1_sra_temp_2(31 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_3 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_im_reg, 1);
  btf2_im <= Radix22ButterflyG1_sra_temp_3(31 DOWNTO 0);

  dinXTwdl_3_1_vld <= dinXTwdl_3_1_vld_1;

END rtl;


-- End of RADIX22FFT_SDF1_3_block1.vhd --

-- Start of RADIX22FFT_SDF1_5.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF1_5.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF1_5
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF1_5
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF1_5 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_5_1_re_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_5_1_im_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_5_vld_dly                     :   IN    std_logic;
        rd_5_Addr                         :   IN    unsigned(6 DOWNTO 0);  -- ufix7
        rd_5_Enb                          :   IN    std_logic;
        twdl_5_1_re                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        twdl_5_1_im                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        proc_5_enb                        :   IN    std_logic;
        dout_5_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_5_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_5_1_vld                      :   OUT   std_logic;
        dinXTwdl_5_1_vld                  :   OUT   std_logic
        );
END RADIX22FFT_SDF1_5;


ARCHITECTURE rtl OF RADIX22FFT_SDF1_5 IS

  -- Component Declarations
  COMPONENT Complex4Multiply_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_5_1_re_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_5_1_im_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_5_vld_dly                   :   IN    std_logic;
          twdl_5_1_re                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_5_1_im                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          dinXTwdl_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dinXTwdl_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dinXTwdl_5_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SDFCommutator5
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_5_vld_dly                   :   IN    std_logic;
          xf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_vld                          :   IN    std_logic;
          dinXTwdlf_re                    :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinXTwdlf_im                    :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinxTwdlf_vld                   :   IN    std_logic;
          btf1_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf1_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf_vld                         :   IN    std_logic;
          wrData_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrData_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrAddr                          :   OUT   unsigned(6 DOWNTO 0);  -- ufix7
          wrEnb                           :   OUT   std_logic;
          dout_5_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_5_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_5_1_vld                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Complex4Multiply_block
    USE ENTITY work.Complex4Multiply_block(rtl);

  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  FOR ALL : SDFCommutator5
    USE ENTITY work.SDFCommutator5(rtl);

  -- Signals
  SIGNAL dinXTwdl_re                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdl_im                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdl_5_1_vld_1               : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL wrData_im                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrAddr                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL wrEnb                            : std_logic;
  SIGNAL x_im                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrData_re                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_btf1_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf1_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf2_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf2_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_x_re_dly1     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_x_im_dly1     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_x_vld_dly1    : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly1 : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly2 : std_logic;
  SIGNAL Radix22ButterflyG1_sra_temp      : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_1    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_2    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_3    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL xf_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinXTwdlf_re                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdlf_im                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinxTwdlf_vld                    : std_logic;
  SIGNAL btf1_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf1_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf_vld                          : std_logic;

BEGIN
  u_MUL4 : Complex4Multiply_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              din_5_1_re_dly => din_5_1_re_dly,  -- sfix16
              din_5_1_im_dly => din_5_1_im_dly,  -- sfix16
              din_5_vld_dly => din_5_vld_dly,
              twdl_5_1_re => twdl_5_1_re,  -- sfix16_En14
              twdl_5_1_im => twdl_5_1_im,  -- sfix16_En14
              dinXTwdl_re => dinXTwdl_re,  -- sfix16
              dinXTwdl_im => dinXTwdl_im,  -- sfix16
              dinXTwdl_5_1_vld => dinXTwdl_5_1_vld_1
              );

  u_dataMEM_im_0_5_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 7,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_im,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_5_Addr,
              dout => x_im
              );

  u_dataMEM_re_0_5_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 7,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_re,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_5_Addr,
              dout => x_re
              );

  u_SDFCOMMUTATOR_5 : SDFCommutator5
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_5_vld_dly => din_5_vld_dly,
              xf_re => xf_re,  -- sfix16
              xf_im => xf_im,  -- sfix16
              xf_vld => xf_vld,
              dinXTwdlf_re => dinXTwdlf_re,  -- sfix16
              dinXTwdlf_im => dinXTwdlf_im,  -- sfix16
              dinxTwdlf_vld => dinxTwdlf_vld,
              btf1_re => btf1_re,  -- sfix16
              btf1_im => btf1_im,  -- sfix16
              btf2_re => btf2_re,  -- sfix16
              btf2_im => btf2_im,  -- sfix16
              btf_vld => btf_vld,
              wrData_re => wrData_re,  -- sfix16
              wrData_im => wrData_im,  -- sfix16
              wrAddr => wrAddr,  -- ufix7
              wrEnb => wrEnb,
              dout_5_1_re => dout_5_1_re,  -- sfix16
              dout_5_1_im => dout_5_1_im,  -- sfix16
              dout_5_1_vld => dout_5_1_vld
              );

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_5_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  -- Radix22ButterflyG1
  Radix22ButterflyG1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG1_btf1_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf1_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf2_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf2_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_x_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_x_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_x_vld_dly1 <= '0';
        xf_re <= to_signed(16#0000#, 16);
        xf_im <= to_signed(16#0000#, 16);
        xf_vld <= '0';
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= '0';
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= '0';
        btf_vld <= '0';
      ELSIF enb = '1' THEN
        xf_re <= Radix22ButterflyG1_x_re_dly1;
        xf_im <= Radix22ButterflyG1_x_im_dly1;
        xf_vld <= Radix22ButterflyG1_x_vld_dly1;
        btf_vld <= Radix22ButterflyG1_dinXtwdl_vld_dly2;
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= Radix22ButterflyG1_dinXtwdl_vld_dly1;
        Radix22ButterflyG1_btf1_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 17) + resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 17);
        Radix22ButterflyG1_btf2_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 17) - resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 17);
        Radix22ButterflyG1_btf1_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 17) + resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 17);
        Radix22ButterflyG1_btf2_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 17) - resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 17);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= Radix22ButterflyG1_dinXtwdl_re_dly1;
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= Radix22ButterflyG1_dinXtwdl_im_dly1;
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= dinXTwdl_re;
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= dinXTwdl_im;
        Radix22ButterflyG1_x_re_dly1 <= x_re;
        Radix22ButterflyG1_x_im_dly1 <= x_im;
        Radix22ButterflyG1_x_vld_dly1 <= x_vld;
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= proc_5_enb AND dinXTwdl_5_1_vld_1;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG1_process;

  dinxTwdlf_vld <= ( NOT proc_5_enb) AND dinXTwdl_5_1_vld_1;
  dinXTwdlf_re <= dinXTwdl_re;
  dinXTwdlf_im <= dinXTwdl_im;
  Radix22ButterflyG1_sra_temp <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_re_reg, 1);
  btf1_re <= Radix22ButterflyG1_sra_temp(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_1 <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_im_reg, 1);
  btf1_im <= Radix22ButterflyG1_sra_temp_1(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_2 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_re_reg, 1);
  btf2_re <= Radix22ButterflyG1_sra_temp_2(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_3 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_im_reg, 1);
  btf2_im <= Radix22ButterflyG1_sra_temp_3(15 DOWNTO 0);

  dinXTwdl_5_1_vld <= dinXTwdl_5_1_vld_1;

END rtl;


-- End of RADIX22FFT_SDF1_5.vhd --

-- Start of RADIX22FFT_SDF1_5_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF1_5_block.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF1_5_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_SDF1_5
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF1_5_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_5_1_re_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_5_1_im_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_5_vld_dly                     :   IN    std_logic;
        rd_5_Addr                         :   IN    unsigned(6 DOWNTO 0);  -- ufix7
        rd_5_Enb                          :   IN    std_logic;
        twdl_5_1_re                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        twdl_5_1_im                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        proc_5_enb                        :   IN    std_logic;
        dout_5_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_5_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_5_1_vld                      :   OUT   std_logic;
        dinXTwdl_5_1_vld                  :   OUT   std_logic
        );
END RADIX22FFT_SDF1_5_block;


ARCHITECTURE rtl OF RADIX22FFT_SDF1_5_block IS

  -- Component Declarations
  COMPONENT Complex4Multiply_block5
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_5_1_re_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_5_1_im_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_5_vld_dly                   :   IN    std_logic;
          twdl_5_1_re                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_5_1_im                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          dinXTwdl_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dinXTwdl_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dinXTwdl_5_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SDFCommutator5_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_5_vld_dly                   :   IN    std_logic;
          xf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_vld                          :   IN    std_logic;
          dinXTwdlf_re                    :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinXTwdlf_im                    :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinxTwdlf_vld                   :   IN    std_logic;
          btf1_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf1_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf_vld                         :   IN    std_logic;
          wrData_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrData_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrAddr                          :   OUT   unsigned(6 DOWNTO 0);  -- ufix7
          wrEnb                           :   OUT   std_logic;
          dout_5_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_5_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_5_1_vld                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Complex4Multiply_block5
    USE ENTITY work.Complex4Multiply_block5(rtl);

  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  FOR ALL : SDFCommutator5_block
    USE ENTITY work.SDFCommutator5_block(rtl);

  -- Signals
  SIGNAL dinXTwdl_re                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdl_im                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdl_5_1_vld_1               : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL wrData_im                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrAddr                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL wrEnb                            : std_logic;
  SIGNAL x_im                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrData_re                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_btf1_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf1_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf2_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf2_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_x_re_dly1     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_x_im_dly1     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_x_vld_dly1    : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly1 : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly2 : std_logic;
  SIGNAL Radix22ButterflyG1_sra_temp      : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_1    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_2    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_3    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL xf_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinXTwdlf_re                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdlf_im                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinxTwdlf_vld                    : std_logic;
  SIGNAL btf1_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf1_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf_vld                          : std_logic;

BEGIN
  u_MUL4 : Complex4Multiply_block5
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              din_5_1_re_dly => din_5_1_re_dly,  -- sfix16
              din_5_1_im_dly => din_5_1_im_dly,  -- sfix16
              din_5_vld_dly => din_5_vld_dly,
              twdl_5_1_re => twdl_5_1_re,  -- sfix16_En14
              twdl_5_1_im => twdl_5_1_im,  -- sfix16_En14
              dinXTwdl_re => dinXTwdl_re,  -- sfix16
              dinXTwdl_im => dinXTwdl_im,  -- sfix16
              dinXTwdl_5_1_vld => dinXTwdl_5_1_vld_1
              );

  u_dataMEM_im_0_5_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 7,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_im,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_5_Addr,
              dout => x_im
              );

  u_dataMEM_re_0_5_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 7,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_re,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_5_Addr,
              dout => x_re
              );

  u_SDFCOMMUTATOR_5 : SDFCommutator5_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_5_vld_dly => din_5_vld_dly,
              xf_re => xf_re,  -- sfix16
              xf_im => xf_im,  -- sfix16
              xf_vld => xf_vld,
              dinXTwdlf_re => dinXTwdlf_re,  -- sfix16
              dinXTwdlf_im => dinXTwdlf_im,  -- sfix16
              dinxTwdlf_vld => dinxTwdlf_vld,
              btf1_re => btf1_re,  -- sfix16
              btf1_im => btf1_im,  -- sfix16
              btf2_re => btf2_re,  -- sfix16
              btf2_im => btf2_im,  -- sfix16
              btf_vld => btf_vld,
              wrData_re => wrData_re,  -- sfix16
              wrData_im => wrData_im,  -- sfix16
              wrAddr => wrAddr,  -- ufix7
              wrEnb => wrEnb,
              dout_5_1_re => dout_5_1_re,  -- sfix16
              dout_5_1_im => dout_5_1_im,  -- sfix16
              dout_5_1_vld => dout_5_1_vld
              );

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_5_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  -- Radix22ButterflyG1
  Radix22ButterflyG1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG1_btf1_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf1_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf2_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf2_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_x_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_x_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_x_vld_dly1 <= '0';
        xf_re <= to_signed(16#0000#, 16);
        xf_im <= to_signed(16#0000#, 16);
        xf_vld <= '0';
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= '0';
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= '0';
        btf_vld <= '0';
      ELSIF enb = '1' THEN
        xf_re <= Radix22ButterflyG1_x_re_dly1;
        xf_im <= Radix22ButterflyG1_x_im_dly1;
        xf_vld <= Radix22ButterflyG1_x_vld_dly1;
        btf_vld <= Radix22ButterflyG1_dinXtwdl_vld_dly2;
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= Radix22ButterflyG1_dinXtwdl_vld_dly1;
        Radix22ButterflyG1_btf1_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 17) + resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 17);
        Radix22ButterflyG1_btf2_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 17) - resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 17);
        Radix22ButterflyG1_btf1_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 17) + resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 17);
        Radix22ButterflyG1_btf2_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 17) - resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 17);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= Radix22ButterflyG1_dinXtwdl_re_dly1;
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= Radix22ButterflyG1_dinXtwdl_im_dly1;
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= dinXTwdl_re;
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= dinXTwdl_im;
        Radix22ButterflyG1_x_re_dly1 <= x_re;
        Radix22ButterflyG1_x_im_dly1 <= x_im;
        Radix22ButterflyG1_x_vld_dly1 <= x_vld;
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= proc_5_enb AND dinXTwdl_5_1_vld_1;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG1_process;

  dinxTwdlf_vld <= ( NOT proc_5_enb) AND dinXTwdl_5_1_vld_1;
  dinXTwdlf_re <= dinXTwdl_re;
  dinXTwdlf_im <= dinXTwdl_im;
  Radix22ButterflyG1_sra_temp <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_re_reg, 1);
  btf1_re <= Radix22ButterflyG1_sra_temp(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_1 <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_im_reg, 1);
  btf1_im <= Radix22ButterflyG1_sra_temp_1(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_2 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_re_reg, 1);
  btf2_re <= Radix22ButterflyG1_sra_temp_2(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_3 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_im_reg, 1);
  btf2_im <= Radix22ButterflyG1_sra_temp_3(15 DOWNTO 0);

  dinXTwdl_5_1_vld <= dinXTwdl_5_1_vld_1;

END rtl;


-- End of RADIX22FFT_SDF1_5_block.vhd --

-- Start of RADIX22FFT_SDF1_5_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF1_5_block1.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF1_5_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_SDF1_5
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF1_5_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_5_1_re_dly                    :   IN    signed(31 DOWNTO 0);  -- sfix32
        din_5_1_im_dly                    :   IN    signed(31 DOWNTO 0);  -- sfix32
        din_5_vld_dly                     :   IN    std_logic;
        rd_5_Addr                         :   IN    unsigned(3 DOWNTO 0);  -- ufix4
        rd_5_Enb                          :   IN    std_logic;
        twdl_5_1_re                       :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
        twdl_5_1_im                       :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
        proc_5_enb                        :   IN    std_logic;
        dout_5_1_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_5_1_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_5_1_vld                      :   OUT   std_logic;
        dinXTwdl_5_1_vld                  :   OUT   std_logic
        );
END RADIX22FFT_SDF1_5_block1;


ARCHITECTURE rtl OF RADIX22FFT_SDF1_5_block1 IS

  -- Component Declarations
  COMPONENT Complex4Multiply_block10
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_5_1_re_dly                  :   IN    signed(31 DOWNTO 0);  -- sfix32
          din_5_1_im_dly                  :   IN    signed(31 DOWNTO 0);  -- sfix32
          din_5_vld_dly                   :   IN    std_logic;
          twdl_5_1_re                     :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
          twdl_5_1_im                     :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
          dinXTwdl_re                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dinXTwdl_im                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dinXTwdl_5_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SDFCommutator5_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_5_vld_dly                   :   IN    std_logic;
          xf_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
          xf_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
          xf_vld                          :   IN    std_logic;
          dinXTwdlf_re                    :   IN    signed(31 DOWNTO 0);  -- sfix32
          dinXTwdlf_im                    :   IN    signed(31 DOWNTO 0);  -- sfix32
          dinxTwdlf_vld                   :   IN    std_logic;
          btf1_re                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf1_im                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf2_re                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf2_im                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf_vld                         :   IN    std_logic;
          wrData_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
          wrData_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
          wrAddr                          :   OUT   unsigned(3 DOWNTO 0);  -- ufix4
          wrEnb                           :   OUT   std_logic;
          dout_5_1_re                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_5_1_im                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_5_1_vld                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Complex4Multiply_block10
    USE ENTITY work.Complex4Multiply_block10(rtl);

  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  FOR ALL : SDFCommutator5_block1
    USE ENTITY work.SDFCommutator5_block1(rtl);

  -- Signals
  SIGNAL dinXTwdl_re                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinXTwdl_im                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinXTwdl_5_1_vld_1               : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL wrData_im                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrAddr                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL wrEnb                            : std_logic;
  SIGNAL x_im                             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrData_re                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL x_re                             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_btf1_re_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_btf1_im_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_btf2_re_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_btf2_im_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_x_re_dly1     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_x_im_dly1     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_x_vld_dly1    : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly1 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly1 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly2 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly2 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly1 : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly2 : std_logic;
  SIGNAL Radix22ButterflyG1_sra_temp      : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_sra_temp_1    : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_sra_temp_2    : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_sra_temp_3    : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL xf_re                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xf_im                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinXTwdlf_re                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinXTwdlf_im                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinxTwdlf_vld                    : std_logic;
  SIGNAL btf1_re                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf1_im                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf2_re                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf2_im                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf_vld                          : std_logic;

BEGIN
  u_MUL4 : Complex4Multiply_block10
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              din_5_1_re_dly => din_5_1_re_dly,  -- sfix32
              din_5_1_im_dly => din_5_1_im_dly,  -- sfix32
              din_5_vld_dly => din_5_vld_dly,
              twdl_5_1_re => twdl_5_1_re,  -- sfix32_En30
              twdl_5_1_im => twdl_5_1_im,  -- sfix32_En30
              dinXTwdl_re => dinXTwdl_re,  -- sfix32
              dinXTwdl_im => dinXTwdl_im,  -- sfix32
              dinXTwdl_5_1_vld => dinXTwdl_5_1_vld_1
              );

  u_dataMEM_im_0_5_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_im,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_5_Addr,
              dout => x_im
              );

  u_dataMEM_re_0_5_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_re,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_5_Addr,
              dout => x_re
              );

  u_SDFCOMMUTATOR_5 : SDFCommutator5_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_5_vld_dly => din_5_vld_dly,
              xf_re => xf_re,  -- sfix32
              xf_im => xf_im,  -- sfix32
              xf_vld => xf_vld,
              dinXTwdlf_re => dinXTwdlf_re,  -- sfix32
              dinXTwdlf_im => dinXTwdlf_im,  -- sfix32
              dinxTwdlf_vld => dinxTwdlf_vld,
              btf1_re => btf1_re,  -- sfix32
              btf1_im => btf1_im,  -- sfix32
              btf2_re => btf2_re,  -- sfix32
              btf2_im => btf2_im,  -- sfix32
              btf_vld => btf_vld,
              wrData_re => wrData_re,  -- sfix32
              wrData_im => wrData_im,  -- sfix32
              wrAddr => wrAddr,  -- ufix4
              wrEnb => wrEnb,
              dout_5_1_re => dout_5_1_re,  -- sfix32
              dout_5_1_im => dout_5_1_im,  -- sfix32
              dout_5_1_vld => dout_5_1_vld
              );

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_5_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  -- Radix22ButterflyG1
  Radix22ButterflyG1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG1_btf1_re_reg <= to_signed(0, 33);
        Radix22ButterflyG1_btf1_im_reg <= to_signed(0, 33);
        Radix22ButterflyG1_btf2_re_reg <= to_signed(0, 33);
        Radix22ButterflyG1_btf2_im_reg <= to_signed(0, 33);
        Radix22ButterflyG1_x_re_dly1 <= to_signed(0, 32);
        Radix22ButterflyG1_x_im_dly1 <= to_signed(0, 32);
        Radix22ButterflyG1_x_vld_dly1 <= '0';
        xf_re <= to_signed(0, 32);
        xf_im <= to_signed(0, 32);
        xf_vld <= '0';
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= to_signed(0, 32);
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= to_signed(0, 32);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= to_signed(0, 32);
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= to_signed(0, 32);
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= '0';
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= '0';
        btf_vld <= '0';
      ELSIF enb = '1' THEN
        xf_re <= Radix22ButterflyG1_x_re_dly1;
        xf_im <= Radix22ButterflyG1_x_im_dly1;
        xf_vld <= Radix22ButterflyG1_x_vld_dly1;
        btf_vld <= Radix22ButterflyG1_dinXtwdl_vld_dly2;
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= Radix22ButterflyG1_dinXtwdl_vld_dly1;
        Radix22ButterflyG1_btf1_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 33) + resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 33);
        Radix22ButterflyG1_btf2_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 33) - resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 33);
        Radix22ButterflyG1_btf1_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 33) + resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 33);
        Radix22ButterflyG1_btf2_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 33) - resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 33);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= Radix22ButterflyG1_dinXtwdl_re_dly1;
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= Radix22ButterflyG1_dinXtwdl_im_dly1;
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= dinXTwdl_re;
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= dinXTwdl_im;
        Radix22ButterflyG1_x_re_dly1 <= x_re;
        Radix22ButterflyG1_x_im_dly1 <= x_im;
        Radix22ButterflyG1_x_vld_dly1 <= x_vld;
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= proc_5_enb AND dinXTwdl_5_1_vld_1;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG1_process;

  dinxTwdlf_vld <= ( NOT proc_5_enb) AND dinXTwdl_5_1_vld_1;
  dinXTwdlf_re <= dinXTwdl_re;
  dinXTwdlf_im <= dinXTwdl_im;
  Radix22ButterflyG1_sra_temp <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_re_reg, 1);
  btf1_re <= Radix22ButterflyG1_sra_temp(31 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_1 <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_im_reg, 1);
  btf1_im <= Radix22ButterflyG1_sra_temp_1(31 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_2 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_re_reg, 1);
  btf2_re <= Radix22ButterflyG1_sra_temp_2(31 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_3 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_im_reg, 1);
  btf2_im <= Radix22ButterflyG1_sra_temp_3(31 DOWNTO 0);

  dinXTwdl_5_1_vld <= dinXTwdl_5_1_vld_1;

END rtl;


-- End of RADIX22FFT_SDF1_5_block1.vhd --

-- Start of RADIX22FFT_SDF1_7.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF1_7.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF1_7
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF1_7
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF1_7 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_7_1_re_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_7_1_im_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_7_vld_dly                     :   IN    std_logic;
        rd_7_Addr                         :   IN    unsigned(4 DOWNTO 0);  -- ufix5
        rd_7_Enb                          :   IN    std_logic;
        twdl_7_1_re                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        twdl_7_1_im                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        proc_7_enb                        :   IN    std_logic;
        dout_7_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_7_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_7_1_vld                      :   OUT   std_logic;
        dinXTwdl_7_1_vld                  :   OUT   std_logic
        );
END RADIX22FFT_SDF1_7;


ARCHITECTURE rtl OF RADIX22FFT_SDF1_7 IS

  -- Component Declarations
  COMPONENT Complex4Multiply_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_7_1_re_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_7_1_im_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_7_vld_dly                   :   IN    std_logic;
          twdl_7_1_re                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_7_1_im                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          dinXTwdl_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dinXTwdl_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dinXTwdl_7_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SDFCommutator7
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_7_vld_dly                   :   IN    std_logic;
          xf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_vld                          :   IN    std_logic;
          dinXTwdlf_re                    :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinXTwdlf_im                    :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinxTwdlf_vld                   :   IN    std_logic;
          btf1_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf1_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf_vld                         :   IN    std_logic;
          wrData_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrData_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrAddr                          :   OUT   unsigned(4 DOWNTO 0);  -- ufix5
          wrEnb                           :   OUT   std_logic;
          dout_7_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_7_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_7_1_vld                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Complex4Multiply_block1
    USE ENTITY work.Complex4Multiply_block1(rtl);

  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  FOR ALL : SDFCommutator7
    USE ENTITY work.SDFCommutator7(rtl);

  -- Signals
  SIGNAL dinXTwdl_re                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdl_im                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdl_7_1_vld_1               : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL wrData_im                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrAddr                           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL wrEnb                            : std_logic;
  SIGNAL x_im                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrData_re                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_btf1_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf1_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf2_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf2_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_x_re_dly1     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_x_im_dly1     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_x_vld_dly1    : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly1 : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly2 : std_logic;
  SIGNAL Radix22ButterflyG1_sra_temp      : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_1    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_2    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_3    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL xf_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinXTwdlf_re                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdlf_im                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinxTwdlf_vld                    : std_logic;
  SIGNAL btf1_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf1_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf_vld                          : std_logic;

BEGIN
  u_MUL4 : Complex4Multiply_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              din_7_1_re_dly => din_7_1_re_dly,  -- sfix16
              din_7_1_im_dly => din_7_1_im_dly,  -- sfix16
              din_7_vld_dly => din_7_vld_dly,
              twdl_7_1_re => twdl_7_1_re,  -- sfix16_En14
              twdl_7_1_im => twdl_7_1_im,  -- sfix16_En14
              dinXTwdl_re => dinXTwdl_re,  -- sfix16
              dinXTwdl_im => dinXTwdl_im,  -- sfix16
              dinXTwdl_7_1_vld => dinXTwdl_7_1_vld_1
              );

  u_dataMEM_im_0_7_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_im,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_7_Addr,
              dout => x_im
              );

  u_dataMEM_re_0_7_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_re,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_7_Addr,
              dout => x_re
              );

  u_SDFCOMMUTATOR_7 : SDFCommutator7
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_7_vld_dly => din_7_vld_dly,
              xf_re => xf_re,  -- sfix16
              xf_im => xf_im,  -- sfix16
              xf_vld => xf_vld,
              dinXTwdlf_re => dinXTwdlf_re,  -- sfix16
              dinXTwdlf_im => dinXTwdlf_im,  -- sfix16
              dinxTwdlf_vld => dinxTwdlf_vld,
              btf1_re => btf1_re,  -- sfix16
              btf1_im => btf1_im,  -- sfix16
              btf2_re => btf2_re,  -- sfix16
              btf2_im => btf2_im,  -- sfix16
              btf_vld => btf_vld,
              wrData_re => wrData_re,  -- sfix16
              wrData_im => wrData_im,  -- sfix16
              wrAddr => wrAddr,  -- ufix5
              wrEnb => wrEnb,
              dout_7_1_re => dout_7_1_re,  -- sfix16
              dout_7_1_im => dout_7_1_im,  -- sfix16
              dout_7_1_vld => dout_7_1_vld
              );

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_7_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  -- Radix22ButterflyG1
  Radix22ButterflyG1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG1_btf1_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf1_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf2_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf2_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_x_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_x_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_x_vld_dly1 <= '0';
        xf_re <= to_signed(16#0000#, 16);
        xf_im <= to_signed(16#0000#, 16);
        xf_vld <= '0';
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= '0';
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= '0';
        btf_vld <= '0';
      ELSIF enb = '1' THEN
        xf_re <= Radix22ButterflyG1_x_re_dly1;
        xf_im <= Radix22ButterflyG1_x_im_dly1;
        xf_vld <= Radix22ButterflyG1_x_vld_dly1;
        btf_vld <= Radix22ButterflyG1_dinXtwdl_vld_dly2;
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= Radix22ButterflyG1_dinXtwdl_vld_dly1;
        Radix22ButterflyG1_btf1_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 17) + resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 17);
        Radix22ButterflyG1_btf2_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 17) - resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 17);
        Radix22ButterflyG1_btf1_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 17) + resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 17);
        Radix22ButterflyG1_btf2_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 17) - resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 17);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= Radix22ButterflyG1_dinXtwdl_re_dly1;
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= Radix22ButterflyG1_dinXtwdl_im_dly1;
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= dinXTwdl_re;
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= dinXTwdl_im;
        Radix22ButterflyG1_x_re_dly1 <= x_re;
        Radix22ButterflyG1_x_im_dly1 <= x_im;
        Radix22ButterflyG1_x_vld_dly1 <= x_vld;
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= proc_7_enb AND dinXTwdl_7_1_vld_1;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG1_process;

  dinxTwdlf_vld <= ( NOT proc_7_enb) AND dinXTwdl_7_1_vld_1;
  dinXTwdlf_re <= dinXTwdl_re;
  dinXTwdlf_im <= dinXTwdl_im;
  Radix22ButterflyG1_sra_temp <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_re_reg, 1);
  btf1_re <= Radix22ButterflyG1_sra_temp(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_1 <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_im_reg, 1);
  btf1_im <= Radix22ButterflyG1_sra_temp_1(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_2 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_re_reg, 1);
  btf2_re <= Radix22ButterflyG1_sra_temp_2(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_3 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_im_reg, 1);
  btf2_im <= Radix22ButterflyG1_sra_temp_3(15 DOWNTO 0);

  dinXTwdl_7_1_vld <= dinXTwdl_7_1_vld_1;

END rtl;


-- End of RADIX22FFT_SDF1_7.vhd --

-- Start of RADIX22FFT_SDF1_7_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF1_7_block.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF1_7_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_SDF1_7
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF1_7_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_7_1_re_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_7_1_im_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_7_vld_dly                     :   IN    std_logic;
        rd_7_Addr                         :   IN    unsigned(4 DOWNTO 0);  -- ufix5
        rd_7_Enb                          :   IN    std_logic;
        twdl_7_1_re                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        twdl_7_1_im                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        proc_7_enb                        :   IN    std_logic;
        dout_7_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_7_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_7_1_vld                      :   OUT   std_logic;
        dinXTwdl_7_1_vld                  :   OUT   std_logic
        );
END RADIX22FFT_SDF1_7_block;


ARCHITECTURE rtl OF RADIX22FFT_SDF1_7_block IS

  -- Component Declarations
  COMPONENT Complex4Multiply_block6
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_7_1_re_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_7_1_im_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_7_vld_dly                   :   IN    std_logic;
          twdl_7_1_re                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_7_1_im                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          dinXTwdl_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dinXTwdl_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dinXTwdl_7_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SDFCommutator7_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_7_vld_dly                   :   IN    std_logic;
          xf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_vld                          :   IN    std_logic;
          dinXTwdlf_re                    :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinXTwdlf_im                    :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinxTwdlf_vld                   :   IN    std_logic;
          btf1_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf1_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf_vld                         :   IN    std_logic;
          wrData_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrData_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrAddr                          :   OUT   unsigned(4 DOWNTO 0);  -- ufix5
          wrEnb                           :   OUT   std_logic;
          dout_7_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_7_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_7_1_vld                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Complex4Multiply_block6
    USE ENTITY work.Complex4Multiply_block6(rtl);

  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  FOR ALL : SDFCommutator7_block
    USE ENTITY work.SDFCommutator7_block(rtl);

  -- Signals
  SIGNAL dinXTwdl_re                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdl_im                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdl_7_1_vld_1               : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL wrData_im                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrAddr                           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL wrEnb                            : std_logic;
  SIGNAL x_im                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrData_re                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_btf1_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf1_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf2_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf2_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_x_re_dly1     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_x_im_dly1     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_x_vld_dly1    : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly1 : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly2 : std_logic;
  SIGNAL Radix22ButterflyG1_sra_temp      : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_1    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_2    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_3    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL xf_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinXTwdlf_re                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdlf_im                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinxTwdlf_vld                    : std_logic;
  SIGNAL btf1_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf1_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf_vld                          : std_logic;

BEGIN
  u_MUL4 : Complex4Multiply_block6
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              din_7_1_re_dly => din_7_1_re_dly,  -- sfix16
              din_7_1_im_dly => din_7_1_im_dly,  -- sfix16
              din_7_vld_dly => din_7_vld_dly,
              twdl_7_1_re => twdl_7_1_re,  -- sfix16_En14
              twdl_7_1_im => twdl_7_1_im,  -- sfix16_En14
              dinXTwdl_re => dinXTwdl_re,  -- sfix16
              dinXTwdl_im => dinXTwdl_im,  -- sfix16
              dinXTwdl_7_1_vld => dinXTwdl_7_1_vld_1
              );

  u_dataMEM_im_0_7_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_im,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_7_Addr,
              dout => x_im
              );

  u_dataMEM_re_0_7_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_re,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_7_Addr,
              dout => x_re
              );

  u_SDFCOMMUTATOR_7 : SDFCommutator7_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_7_vld_dly => din_7_vld_dly,
              xf_re => xf_re,  -- sfix16
              xf_im => xf_im,  -- sfix16
              xf_vld => xf_vld,
              dinXTwdlf_re => dinXTwdlf_re,  -- sfix16
              dinXTwdlf_im => dinXTwdlf_im,  -- sfix16
              dinxTwdlf_vld => dinxTwdlf_vld,
              btf1_re => btf1_re,  -- sfix16
              btf1_im => btf1_im,  -- sfix16
              btf2_re => btf2_re,  -- sfix16
              btf2_im => btf2_im,  -- sfix16
              btf_vld => btf_vld,
              wrData_re => wrData_re,  -- sfix16
              wrData_im => wrData_im,  -- sfix16
              wrAddr => wrAddr,  -- ufix5
              wrEnb => wrEnb,
              dout_7_1_re => dout_7_1_re,  -- sfix16
              dout_7_1_im => dout_7_1_im,  -- sfix16
              dout_7_1_vld => dout_7_1_vld
              );

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_7_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  -- Radix22ButterflyG1
  Radix22ButterflyG1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG1_btf1_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf1_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf2_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf2_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_x_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_x_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_x_vld_dly1 <= '0';
        xf_re <= to_signed(16#0000#, 16);
        xf_im <= to_signed(16#0000#, 16);
        xf_vld <= '0';
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= '0';
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= '0';
        btf_vld <= '0';
      ELSIF enb = '1' THEN
        xf_re <= Radix22ButterflyG1_x_re_dly1;
        xf_im <= Radix22ButterflyG1_x_im_dly1;
        xf_vld <= Radix22ButterflyG1_x_vld_dly1;
        btf_vld <= Radix22ButterflyG1_dinXtwdl_vld_dly2;
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= Radix22ButterflyG1_dinXtwdl_vld_dly1;
        Radix22ButterflyG1_btf1_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 17) + resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 17);
        Radix22ButterflyG1_btf2_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 17) - resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 17);
        Radix22ButterflyG1_btf1_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 17) + resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 17);
        Radix22ButterflyG1_btf2_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 17) - resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 17);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= Radix22ButterflyG1_dinXtwdl_re_dly1;
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= Radix22ButterflyG1_dinXtwdl_im_dly1;
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= dinXTwdl_re;
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= dinXTwdl_im;
        Radix22ButterflyG1_x_re_dly1 <= x_re;
        Radix22ButterflyG1_x_im_dly1 <= x_im;
        Radix22ButterflyG1_x_vld_dly1 <= x_vld;
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= proc_7_enb AND dinXTwdl_7_1_vld_1;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG1_process;

  dinxTwdlf_vld <= ( NOT proc_7_enb) AND dinXTwdl_7_1_vld_1;
  dinXTwdlf_re <= dinXTwdl_re;
  dinXTwdlf_im <= dinXTwdl_im;
  Radix22ButterflyG1_sra_temp <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_re_reg, 1);
  btf1_re <= Radix22ButterflyG1_sra_temp(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_1 <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_im_reg, 1);
  btf1_im <= Radix22ButterflyG1_sra_temp_1(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_2 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_re_reg, 1);
  btf2_re <= Radix22ButterflyG1_sra_temp_2(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_3 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_im_reg, 1);
  btf2_im <= Radix22ButterflyG1_sra_temp_3(15 DOWNTO 0);

  dinXTwdl_7_1_vld <= dinXTwdl_7_1_vld_1;

END rtl;


-- End of RADIX22FFT_SDF1_7_block.vhd --

-- Start of RADIX22FFT_SDF1_7_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF1_7_block1.vhd
-- Created: 2025-03-18 15:26:31
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF1_7_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_SDF1_7
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF1_7_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_7_1_re_dly                    :   IN    signed(31 DOWNTO 0);  -- sfix32
        din_7_1_im_dly                    :   IN    signed(31 DOWNTO 0);  -- sfix32
        din_7_vld_dly                     :   IN    std_logic;
        rd_7_Addr                         :   IN    unsigned(5 DOWNTO 0);  -- ufix6
        rd_7_Enb                          :   IN    std_logic;
        twdl_7_1_re                       :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
        twdl_7_1_im                       :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
        proc_7_enb                        :   IN    std_logic;
        dout_7_1_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_7_1_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_7_1_vld                      :   OUT   std_logic;
        dinXTwdl_7_1_vld                  :   OUT   std_logic
        );
END RADIX22FFT_SDF1_7_block1;


ARCHITECTURE rtl OF RADIX22FFT_SDF1_7_block1 IS

  -- Component Declarations
  COMPONENT Complex4Multiply_block11
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_7_1_re_dly                  :   IN    signed(31 DOWNTO 0);  -- sfix32
          din_7_1_im_dly                  :   IN    signed(31 DOWNTO 0);  -- sfix32
          din_7_vld_dly                   :   IN    std_logic;
          twdl_7_1_re                     :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
          twdl_7_1_im                     :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
          dinXTwdl_re                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dinXTwdl_im                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dinXTwdl_7_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SDFCommutator7_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_7_vld_dly                   :   IN    std_logic;
          xf_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
          xf_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
          xf_vld                          :   IN    std_logic;
          dinXTwdlf_re                    :   IN    signed(31 DOWNTO 0);  -- sfix32
          dinXTwdlf_im                    :   IN    signed(31 DOWNTO 0);  -- sfix32
          dinxTwdlf_vld                   :   IN    std_logic;
          btf1_re                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf1_im                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf2_re                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf2_im                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf_vld                         :   IN    std_logic;
          wrData_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
          wrData_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
          wrAddr                          :   OUT   unsigned(5 DOWNTO 0);  -- ufix6
          wrEnb                           :   OUT   std_logic;
          dout_7_1_re                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_7_1_im                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_7_1_vld                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Complex4Multiply_block11
    USE ENTITY work.Complex4Multiply_block11(rtl);

  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  FOR ALL : SDFCommutator7_block1
    USE ENTITY work.SDFCommutator7_block1(rtl);

  -- Signals
  SIGNAL dinXTwdl_re                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinXTwdl_im                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinXTwdl_7_1_vld_1               : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL wrData_im                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrAddr                           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL wrEnb                            : std_logic;
  SIGNAL x_im                             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrData_re                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL x_re                             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_btf1_re_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_btf1_im_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_btf2_re_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_btf2_im_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_x_re_dly1     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_x_im_dly1     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_x_vld_dly1    : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly1 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly1 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly2 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly2 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly1 : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly2 : std_logic;
  SIGNAL Radix22ButterflyG1_sra_temp      : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_sra_temp_1    : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_sra_temp_2    : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_sra_temp_3    : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL xf_re                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xf_im                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinXTwdlf_re                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinXTwdlf_im                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinxTwdlf_vld                    : std_logic;
  SIGNAL btf1_re                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf1_im                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf2_re                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf2_im                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf_vld                          : std_logic;

BEGIN
  u_MUL4 : Complex4Multiply_block11
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              din_7_1_re_dly => din_7_1_re_dly,  -- sfix32
              din_7_1_im_dly => din_7_1_im_dly,  -- sfix32
              din_7_vld_dly => din_7_vld_dly,
              twdl_7_1_re => twdl_7_1_re,  -- sfix32_En30
              twdl_7_1_im => twdl_7_1_im,  -- sfix32_En30
              dinXTwdl_re => dinXTwdl_re,  -- sfix32
              dinXTwdl_im => dinXTwdl_im,  -- sfix32
              dinXTwdl_7_1_vld => dinXTwdl_7_1_vld_1
              );

  u_dataMEM_im_0_7_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 6,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_im,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_7_Addr,
              dout => x_im
              );

  u_dataMEM_re_0_7_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 6,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_re,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_7_Addr,
              dout => x_re
              );

  u_SDFCOMMUTATOR_7 : SDFCommutator7_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_7_vld_dly => din_7_vld_dly,
              xf_re => xf_re,  -- sfix32
              xf_im => xf_im,  -- sfix32
              xf_vld => xf_vld,
              dinXTwdlf_re => dinXTwdlf_re,  -- sfix32
              dinXTwdlf_im => dinXTwdlf_im,  -- sfix32
              dinxTwdlf_vld => dinxTwdlf_vld,
              btf1_re => btf1_re,  -- sfix32
              btf1_im => btf1_im,  -- sfix32
              btf2_re => btf2_re,  -- sfix32
              btf2_im => btf2_im,  -- sfix32
              btf_vld => btf_vld,
              wrData_re => wrData_re,  -- sfix32
              wrData_im => wrData_im,  -- sfix32
              wrAddr => wrAddr,  -- ufix6
              wrEnb => wrEnb,
              dout_7_1_re => dout_7_1_re,  -- sfix32
              dout_7_1_im => dout_7_1_im,  -- sfix32
              dout_7_1_vld => dout_7_1_vld
              );

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_7_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  -- Radix22ButterflyG1
  Radix22ButterflyG1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG1_btf1_re_reg <= to_signed(0, 33);
        Radix22ButterflyG1_btf1_im_reg <= to_signed(0, 33);
        Radix22ButterflyG1_btf2_re_reg <= to_signed(0, 33);
        Radix22ButterflyG1_btf2_im_reg <= to_signed(0, 33);
        Radix22ButterflyG1_x_re_dly1 <= to_signed(0, 32);
        Radix22ButterflyG1_x_im_dly1 <= to_signed(0, 32);
        Radix22ButterflyG1_x_vld_dly1 <= '0';
        xf_re <= to_signed(0, 32);
        xf_im <= to_signed(0, 32);
        xf_vld <= '0';
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= to_signed(0, 32);
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= to_signed(0, 32);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= to_signed(0, 32);
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= to_signed(0, 32);
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= '0';
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= '0';
        btf_vld <= '0';
      ELSIF enb = '1' THEN
        xf_re <= Radix22ButterflyG1_x_re_dly1;
        xf_im <= Radix22ButterflyG1_x_im_dly1;
        xf_vld <= Radix22ButterflyG1_x_vld_dly1;
        btf_vld <= Radix22ButterflyG1_dinXtwdl_vld_dly2;
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= Radix22ButterflyG1_dinXtwdl_vld_dly1;
        Radix22ButterflyG1_btf1_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 33) + resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 33);
        Radix22ButterflyG1_btf2_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 33) - resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 33);
        Radix22ButterflyG1_btf1_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 33) + resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 33);
        Radix22ButterflyG1_btf2_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 33) - resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 33);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= Radix22ButterflyG1_dinXtwdl_re_dly1;
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= Radix22ButterflyG1_dinXtwdl_im_dly1;
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= dinXTwdl_re;
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= dinXTwdl_im;
        Radix22ButterflyG1_x_re_dly1 <= x_re;
        Radix22ButterflyG1_x_im_dly1 <= x_im;
        Radix22ButterflyG1_x_vld_dly1 <= x_vld;
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= proc_7_enb AND dinXTwdl_7_1_vld_1;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG1_process;

  dinxTwdlf_vld <= ( NOT proc_7_enb) AND dinXTwdl_7_1_vld_1;
  dinXTwdlf_re <= dinXTwdl_re;
  dinXTwdlf_im <= dinXTwdl_im;
  Radix22ButterflyG1_sra_temp <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_re_reg, 1);
  btf1_re <= Radix22ButterflyG1_sra_temp(31 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_1 <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_im_reg, 1);
  btf1_im <= Radix22ButterflyG1_sra_temp_1(31 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_2 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_re_reg, 1);
  btf2_re <= Radix22ButterflyG1_sra_temp_2(31 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_3 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_im_reg, 1);
  btf2_im <= Radix22ButterflyG1_sra_temp_3(31 DOWNTO 0);

  dinXTwdl_7_1_vld <= dinXTwdl_7_1_vld_1;

END rtl;


-- End of RADIX22FFT_SDF1_7_block1.vhd --

-- Start of RADIX22FFT_SDF1_9.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF1_9.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF1_9
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF1_9
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF1_9 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_9_1_re_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_9_1_im_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_9_vld_dly                     :   IN    std_logic;
        rd_9_Addr                         :   IN    unsigned(2 DOWNTO 0);  -- ufix3
        rd_9_Enb                          :   IN    std_logic;
        twdl_9_1_re                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        twdl_9_1_im                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        proc_9_enb                        :   IN    std_logic;
        dout_9_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_9_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_9_1_vld                      :   OUT   std_logic;
        dinXTwdl_9_1_vld                  :   OUT   std_logic
        );
END RADIX22FFT_SDF1_9;


ARCHITECTURE rtl OF RADIX22FFT_SDF1_9 IS

  -- Component Declarations
  COMPONENT Complex4Multiply_block2
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_9_1_re_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_9_1_im_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_9_vld_dly                   :   IN    std_logic;
          twdl_9_1_re                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_9_1_im                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          dinXTwdl_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dinXTwdl_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dinXTwdl_9_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SDFCommutator9
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_9_vld_dly                   :   IN    std_logic;
          xf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_vld                          :   IN    std_logic;
          dinXTwdlf_re                    :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinXTwdlf_im                    :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinxTwdlf_vld                   :   IN    std_logic;
          btf1_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf1_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf_vld                         :   IN    std_logic;
          wrData_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrData_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrAddr                          :   OUT   unsigned(2 DOWNTO 0);  -- ufix3
          wrEnb                           :   OUT   std_logic;
          dout_9_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_9_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_9_1_vld                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Complex4Multiply_block2
    USE ENTITY work.Complex4Multiply_block2(rtl);

  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  FOR ALL : SDFCommutator9
    USE ENTITY work.SDFCommutator9(rtl);

  -- Signals
  SIGNAL dinXTwdl_re                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdl_im                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdl_9_1_vld_1               : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL wrData_im                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrAddr                           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrEnb                            : std_logic;
  SIGNAL x_im                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrData_re                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_btf1_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf1_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf2_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf2_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_x_re_dly1     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_x_im_dly1     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_x_vld_dly1    : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly1 : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly2 : std_logic;
  SIGNAL Radix22ButterflyG1_sra_temp      : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_1    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_2    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_3    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL xf_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinXTwdlf_re                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdlf_im                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinxTwdlf_vld                    : std_logic;
  SIGNAL btf1_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf1_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf_vld                          : std_logic;

BEGIN
  u_MUL4 : Complex4Multiply_block2
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              din_9_1_re_dly => din_9_1_re_dly,  -- sfix16
              din_9_1_im_dly => din_9_1_im_dly,  -- sfix16
              din_9_vld_dly => din_9_vld_dly,
              twdl_9_1_re => twdl_9_1_re,  -- sfix16_En14
              twdl_9_1_im => twdl_9_1_im,  -- sfix16_En14
              dinXTwdl_re => dinXTwdl_re,  -- sfix16
              dinXTwdl_im => dinXTwdl_im,  -- sfix16
              dinXTwdl_9_1_vld => dinXTwdl_9_1_vld_1
              );

  u_dataMEM_im_0_9_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_im,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_9_Addr,
              dout => x_im
              );

  u_dataMEM_re_0_9_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_re,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_9_Addr,
              dout => x_re
              );

  u_SDFCOMMUTATOR_9 : SDFCommutator9
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_9_vld_dly => din_9_vld_dly,
              xf_re => xf_re,  -- sfix16
              xf_im => xf_im,  -- sfix16
              xf_vld => xf_vld,
              dinXTwdlf_re => dinXTwdlf_re,  -- sfix16
              dinXTwdlf_im => dinXTwdlf_im,  -- sfix16
              dinxTwdlf_vld => dinxTwdlf_vld,
              btf1_re => btf1_re,  -- sfix16
              btf1_im => btf1_im,  -- sfix16
              btf2_re => btf2_re,  -- sfix16
              btf2_im => btf2_im,  -- sfix16
              btf_vld => btf_vld,
              wrData_re => wrData_re,  -- sfix16
              wrData_im => wrData_im,  -- sfix16
              wrAddr => wrAddr,  -- ufix3
              wrEnb => wrEnb,
              dout_9_1_re => dout_9_1_re,  -- sfix16
              dout_9_1_im => dout_9_1_im,  -- sfix16
              dout_9_1_vld => dout_9_1_vld
              );

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_9_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  -- Radix22ButterflyG1
  Radix22ButterflyG1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG1_btf1_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf1_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf2_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf2_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_x_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_x_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_x_vld_dly1 <= '0';
        xf_re <= to_signed(16#0000#, 16);
        xf_im <= to_signed(16#0000#, 16);
        xf_vld <= '0';
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= '0';
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= '0';
        btf_vld <= '0';
      ELSIF enb = '1' THEN
        xf_re <= Radix22ButterflyG1_x_re_dly1;
        xf_im <= Radix22ButterflyG1_x_im_dly1;
        xf_vld <= Radix22ButterflyG1_x_vld_dly1;
        btf_vld <= Radix22ButterflyG1_dinXtwdl_vld_dly2;
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= Radix22ButterflyG1_dinXtwdl_vld_dly1;
        Radix22ButterflyG1_btf1_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 17) + resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 17);
        Radix22ButterflyG1_btf2_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 17) - resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 17);
        Radix22ButterflyG1_btf1_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 17) + resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 17);
        Radix22ButterflyG1_btf2_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 17) - resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 17);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= Radix22ButterflyG1_dinXtwdl_re_dly1;
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= Radix22ButterflyG1_dinXtwdl_im_dly1;
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= dinXTwdl_re;
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= dinXTwdl_im;
        Radix22ButterflyG1_x_re_dly1 <= x_re;
        Radix22ButterflyG1_x_im_dly1 <= x_im;
        Radix22ButterflyG1_x_vld_dly1 <= x_vld;
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= proc_9_enb AND dinXTwdl_9_1_vld_1;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG1_process;

  dinxTwdlf_vld <= ( NOT proc_9_enb) AND dinXTwdl_9_1_vld_1;
  dinXTwdlf_re <= dinXTwdl_re;
  dinXTwdlf_im <= dinXTwdl_im;
  Radix22ButterflyG1_sra_temp <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_re_reg, 1);
  btf1_re <= Radix22ButterflyG1_sra_temp(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_1 <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_im_reg, 1);
  btf1_im <= Radix22ButterflyG1_sra_temp_1(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_2 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_re_reg, 1);
  btf2_re <= Radix22ButterflyG1_sra_temp_2(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_3 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_im_reg, 1);
  btf2_im <= Radix22ButterflyG1_sra_temp_3(15 DOWNTO 0);

  dinXTwdl_9_1_vld <= dinXTwdl_9_1_vld_1;

END rtl;


-- End of RADIX22FFT_SDF1_9.vhd --

-- Start of RADIX22FFT_SDF1_9_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF1_9_block.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF1_9_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_SDF1_9
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF1_9_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_9_1_re_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_9_1_im_dly                    :   IN    signed(15 DOWNTO 0);  -- sfix16
        din_9_vld_dly                     :   IN    std_logic;
        rd_9_Addr                         :   IN    unsigned(2 DOWNTO 0);  -- ufix3
        rd_9_Enb                          :   IN    std_logic;
        twdl_9_1_re                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        twdl_9_1_im                       :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
        proc_9_enb                        :   IN    std_logic;
        dout_9_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_9_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_9_1_vld                      :   OUT   std_logic;
        dinXTwdl_9_1_vld                  :   OUT   std_logic
        );
END RADIX22FFT_SDF1_9_block;


ARCHITECTURE rtl OF RADIX22FFT_SDF1_9_block IS

  -- Component Declarations
  COMPONENT Complex4Multiply_block7
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_9_1_re_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_9_1_im_dly                  :   IN    signed(15 DOWNTO 0);  -- sfix16
          din_9_vld_dly                   :   IN    std_logic;
          twdl_9_1_re                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          twdl_9_1_im                     :   IN    signed(15 DOWNTO 0);  -- sfix16_En14
          dinXTwdl_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dinXTwdl_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dinXTwdl_9_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SDFCommutator9_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_9_vld_dly                   :   IN    std_logic;
          xf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_vld                          :   IN    std_logic;
          dinXTwdlf_re                    :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinXTwdlf_im                    :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinxTwdlf_vld                   :   IN    std_logic;
          btf1_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf1_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf_vld                         :   IN    std_logic;
          wrData_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrData_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrAddr                          :   OUT   unsigned(2 DOWNTO 0);  -- ufix3
          wrEnb                           :   OUT   std_logic;
          dout_9_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_9_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_9_1_vld                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Complex4Multiply_block7
    USE ENTITY work.Complex4Multiply_block7(rtl);

  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  FOR ALL : SDFCommutator9_block
    USE ENTITY work.SDFCommutator9_block(rtl);

  -- Signals
  SIGNAL dinXTwdl_re                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdl_im                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdl_9_1_vld_1               : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL wrData_im                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrAddr                           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrEnb                            : std_logic;
  SIGNAL x_im                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrData_re                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_btf1_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf1_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf2_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_btf2_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_x_re_dly1     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_x_im_dly1     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_x_vld_dly1    : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly1 : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly2 : std_logic;
  SIGNAL Radix22ButterflyG1_sra_temp      : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_1    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_2    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG1_sra_temp_3    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL xf_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinXTwdlf_re                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinXTwdlf_im                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinxTwdlf_vld                    : std_logic;
  SIGNAL btf1_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf1_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf_vld                          : std_logic;

BEGIN
  u_MUL4 : Complex4Multiply_block7
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              din_9_1_re_dly => din_9_1_re_dly,  -- sfix16
              din_9_1_im_dly => din_9_1_im_dly,  -- sfix16
              din_9_vld_dly => din_9_vld_dly,
              twdl_9_1_re => twdl_9_1_re,  -- sfix16_En14
              twdl_9_1_im => twdl_9_1_im,  -- sfix16_En14
              dinXTwdl_re => dinXTwdl_re,  -- sfix16
              dinXTwdl_im => dinXTwdl_im,  -- sfix16
              dinXTwdl_9_1_vld => dinXTwdl_9_1_vld_1
              );

  u_dataMEM_im_0_9_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_im,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_9_Addr,
              dout => x_im
              );

  u_dataMEM_re_0_9_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_re,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_9_Addr,
              dout => x_re
              );

  u_SDFCOMMUTATOR_9 : SDFCommutator9_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_9_vld_dly => din_9_vld_dly,
              xf_re => xf_re,  -- sfix16
              xf_im => xf_im,  -- sfix16
              xf_vld => xf_vld,
              dinXTwdlf_re => dinXTwdlf_re,  -- sfix16
              dinXTwdlf_im => dinXTwdlf_im,  -- sfix16
              dinxTwdlf_vld => dinxTwdlf_vld,
              btf1_re => btf1_re,  -- sfix16
              btf1_im => btf1_im,  -- sfix16
              btf2_re => btf2_re,  -- sfix16
              btf2_im => btf2_im,  -- sfix16
              btf_vld => btf_vld,
              wrData_re => wrData_re,  -- sfix16
              wrData_im => wrData_im,  -- sfix16
              wrAddr => wrAddr,  -- ufix3
              wrEnb => wrEnb,
              dout_9_1_re => dout_9_1_re,  -- sfix16
              dout_9_1_im => dout_9_1_im,  -- sfix16
              dout_9_1_vld => dout_9_1_vld
              );

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_9_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  -- Radix22ButterflyG1
  Radix22ButterflyG1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG1_btf1_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf1_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf2_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_btf2_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG1_x_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_x_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_x_vld_dly1 <= '0';
        xf_re <= to_signed(16#0000#, 16);
        xf_im <= to_signed(16#0000#, 16);
        xf_vld <= '0';
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= '0';
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= '0';
        btf_vld <= '0';
      ELSIF enb = '1' THEN
        xf_re <= Radix22ButterflyG1_x_re_dly1;
        xf_im <= Radix22ButterflyG1_x_im_dly1;
        xf_vld <= Radix22ButterflyG1_x_vld_dly1;
        btf_vld <= Radix22ButterflyG1_dinXtwdl_vld_dly2;
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= Radix22ButterflyG1_dinXtwdl_vld_dly1;
        Radix22ButterflyG1_btf1_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 17) + resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 17);
        Radix22ButterflyG1_btf2_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 17) - resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 17);
        Radix22ButterflyG1_btf1_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 17) + resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 17);
        Radix22ButterflyG1_btf2_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 17) - resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 17);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= Radix22ButterflyG1_dinXtwdl_re_dly1;
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= Radix22ButterflyG1_dinXtwdl_im_dly1;
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= dinXTwdl_re;
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= dinXTwdl_im;
        Radix22ButterflyG1_x_re_dly1 <= x_re;
        Radix22ButterflyG1_x_im_dly1 <= x_im;
        Radix22ButterflyG1_x_vld_dly1 <= x_vld;
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= proc_9_enb AND dinXTwdl_9_1_vld_1;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG1_process;

  dinxTwdlf_vld <= ( NOT proc_9_enb) AND dinXTwdl_9_1_vld_1;
  dinXTwdlf_re <= dinXTwdl_re;
  dinXTwdlf_im <= dinXTwdl_im;
  Radix22ButterflyG1_sra_temp <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_re_reg, 1);
  btf1_re <= Radix22ButterflyG1_sra_temp(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_1 <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_im_reg, 1);
  btf1_im <= Radix22ButterflyG1_sra_temp_1(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_2 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_re_reg, 1);
  btf2_re <= Radix22ButterflyG1_sra_temp_2(15 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_3 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_im_reg, 1);
  btf2_im <= Radix22ButterflyG1_sra_temp_3(15 DOWNTO 0);

  dinXTwdl_9_1_vld <= dinXTwdl_9_1_vld_1;

END rtl;


-- End of RADIX22FFT_SDF1_9_block.vhd --

-- Start of RADIX22FFT_SDF1_9_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF1_9_block1.vhd
-- Created: 2025-03-18 15:26:31
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF1_9_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_SDF1_9
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF1_9_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_9_1_re_dly                    :   IN    signed(31 DOWNTO 0);  -- sfix32
        din_9_1_im_dly                    :   IN    signed(31 DOWNTO 0);  -- sfix32
        din_9_vld_dly                     :   IN    std_logic;
        rd_9_Addr                         :   IN    unsigned(7 DOWNTO 0);  -- ufix8
        rd_9_Enb                          :   IN    std_logic;
        twdl_9_1_re                       :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
        twdl_9_1_im                       :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
        proc_9_enb                        :   IN    std_logic;
        dout_9_1_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_9_1_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_9_1_vld                      :   OUT   std_logic;
        dinXTwdl_9_1_vld                  :   OUT   std_logic
        );
END RADIX22FFT_SDF1_9_block1;


ARCHITECTURE rtl OF RADIX22FFT_SDF1_9_block1 IS

  -- Component Declarations
  COMPONENT Complex4Multiply_block12
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_9_1_re_dly                  :   IN    signed(31 DOWNTO 0);  -- sfix32
          din_9_1_im_dly                  :   IN    signed(31 DOWNTO 0);  -- sfix32
          din_9_vld_dly                   :   IN    std_logic;
          twdl_9_1_re                     :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
          twdl_9_1_im                     :   IN    signed(31 DOWNTO 0);  -- sfix32_En30
          dinXTwdl_re                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dinXTwdl_im                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dinXTwdl_9_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SDFCommutator9_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          din_9_vld_dly                   :   IN    std_logic;
          xf_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
          xf_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
          xf_vld                          :   IN    std_logic;
          dinXTwdlf_re                    :   IN    signed(31 DOWNTO 0);  -- sfix32
          dinXTwdlf_im                    :   IN    signed(31 DOWNTO 0);  -- sfix32
          dinxTwdlf_vld                   :   IN    std_logic;
          btf1_re                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf1_im                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf2_re                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf2_im                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf_vld                         :   IN    std_logic;
          wrData_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
          wrData_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
          wrAddr                          :   OUT   unsigned(7 DOWNTO 0);  -- ufix8
          wrEnb                           :   OUT   std_logic;
          dout_9_1_re                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_9_1_im                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_9_1_vld                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Complex4Multiply_block12
    USE ENTITY work.Complex4Multiply_block12(rtl);

  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  FOR ALL : SDFCommutator9_block1
    USE ENTITY work.SDFCommutator9_block1(rtl);

  -- Signals
  SIGNAL dinXTwdl_re                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinXTwdl_im                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinXTwdl_9_1_vld_1               : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL wrData_im                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrAddr                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wrEnb                            : std_logic;
  SIGNAL x_im                             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrData_re                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL x_re                             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_btf1_re_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_btf1_im_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_btf2_re_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_btf2_im_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_x_re_dly1     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_x_im_dly1     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_x_vld_dly1    : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly1 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly1 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_dinXtwdl_re_dly2 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_dinXtwdl_im_dly2 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly1 : std_logic;
  SIGNAL Radix22ButterflyG1_dinXtwdl_vld_dly2 : std_logic;
  SIGNAL Radix22ButterflyG1_sra_temp      : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_sra_temp_1    : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_sra_temp_2    : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG1_sra_temp_3    : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL xf_re                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xf_im                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinXTwdlf_re                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinXTwdlf_im                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinxTwdlf_vld                    : std_logic;
  SIGNAL btf1_re                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf1_im                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf2_re                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf2_im                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf_vld                          : std_logic;

BEGIN
  u_MUL4 : Complex4Multiply_block12
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              din_9_1_re_dly => din_9_1_re_dly,  -- sfix32
              din_9_1_im_dly => din_9_1_im_dly,  -- sfix32
              din_9_vld_dly => din_9_vld_dly,
              twdl_9_1_re => twdl_9_1_re,  -- sfix32_En30
              twdl_9_1_im => twdl_9_1_im,  -- sfix32_En30
              dinXTwdl_re => dinXTwdl_re,  -- sfix32
              dinXTwdl_im => dinXTwdl_im,  -- sfix32
              dinXTwdl_9_1_vld => dinXTwdl_9_1_vld_1
              );

  u_dataMEM_im_0_9_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_im,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_9_Addr,
              dout => x_im
              );

  u_dataMEM_re_0_9_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_re,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_9_Addr,
              dout => x_re
              );

  u_SDFCOMMUTATOR_9 : SDFCommutator9_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              din_9_vld_dly => din_9_vld_dly,
              xf_re => xf_re,  -- sfix32
              xf_im => xf_im,  -- sfix32
              xf_vld => xf_vld,
              dinXTwdlf_re => dinXTwdlf_re,  -- sfix32
              dinXTwdlf_im => dinXTwdlf_im,  -- sfix32
              dinxTwdlf_vld => dinxTwdlf_vld,
              btf1_re => btf1_re,  -- sfix32
              btf1_im => btf1_im,  -- sfix32
              btf2_re => btf2_re,  -- sfix32
              btf2_im => btf2_im,  -- sfix32
              btf_vld => btf_vld,
              wrData_re => wrData_re,  -- sfix32
              wrData_im => wrData_im,  -- sfix32
              wrAddr => wrAddr,  -- ufix8
              wrEnb => wrEnb,
              dout_9_1_re => dout_9_1_re,  -- sfix32
              dout_9_1_im => dout_9_1_im,  -- sfix32
              dout_9_1_vld => dout_9_1_vld
              );

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_9_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  -- Radix22ButterflyG1
  Radix22ButterflyG1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG1_btf1_re_reg <= to_signed(0, 33);
        Radix22ButterflyG1_btf1_im_reg <= to_signed(0, 33);
        Radix22ButterflyG1_btf2_re_reg <= to_signed(0, 33);
        Radix22ButterflyG1_btf2_im_reg <= to_signed(0, 33);
        Radix22ButterflyG1_x_re_dly1 <= to_signed(0, 32);
        Radix22ButterflyG1_x_im_dly1 <= to_signed(0, 32);
        Radix22ButterflyG1_x_vld_dly1 <= '0';
        xf_re <= to_signed(0, 32);
        xf_im <= to_signed(0, 32);
        xf_vld <= '0';
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= to_signed(0, 32);
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= to_signed(0, 32);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= to_signed(0, 32);
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= to_signed(0, 32);
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= '0';
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= '0';
        btf_vld <= '0';
      ELSIF enb = '1' THEN
        xf_re <= Radix22ButterflyG1_x_re_dly1;
        xf_im <= Radix22ButterflyG1_x_im_dly1;
        xf_vld <= Radix22ButterflyG1_x_vld_dly1;
        btf_vld <= Radix22ButterflyG1_dinXtwdl_vld_dly2;
        Radix22ButterflyG1_dinXtwdl_vld_dly2 <= Radix22ButterflyG1_dinXtwdl_vld_dly1;
        Radix22ButterflyG1_btf1_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 33) + resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 33);
        Radix22ButterflyG1_btf2_re_reg <= resize(Radix22ButterflyG1_x_re_dly1, 33) - resize(Radix22ButterflyG1_dinXtwdl_re_dly2, 33);
        Radix22ButterflyG1_btf1_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 33) + resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 33);
        Radix22ButterflyG1_btf2_im_reg <= resize(Radix22ButterflyG1_x_im_dly1, 33) - resize(Radix22ButterflyG1_dinXtwdl_im_dly2, 33);
        Radix22ButterflyG1_dinXtwdl_re_dly2 <= Radix22ButterflyG1_dinXtwdl_re_dly1;
        Radix22ButterflyG1_dinXtwdl_im_dly2 <= Radix22ButterflyG1_dinXtwdl_im_dly1;
        Radix22ButterflyG1_dinXtwdl_re_dly1 <= dinXTwdl_re;
        Radix22ButterflyG1_dinXtwdl_im_dly1 <= dinXTwdl_im;
        Radix22ButterflyG1_x_re_dly1 <= x_re;
        Radix22ButterflyG1_x_im_dly1 <= x_im;
        Radix22ButterflyG1_x_vld_dly1 <= x_vld;
        Radix22ButterflyG1_dinXtwdl_vld_dly1 <= proc_9_enb AND dinXTwdl_9_1_vld_1;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG1_process;

  dinxTwdlf_vld <= ( NOT proc_9_enb) AND dinXTwdl_9_1_vld_1;
  dinXTwdlf_re <= dinXTwdl_re;
  dinXTwdlf_im <= dinXTwdl_im;
  Radix22ButterflyG1_sra_temp <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_re_reg, 1);
  btf1_re <= Radix22ButterflyG1_sra_temp(31 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_1 <= SHIFT_RIGHT(Radix22ButterflyG1_btf1_im_reg, 1);
  btf1_im <= Radix22ButterflyG1_sra_temp_1(31 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_2 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_re_reg, 1);
  btf2_re <= Radix22ButterflyG1_sra_temp_2(31 DOWNTO 0);
  Radix22ButterflyG1_sra_temp_3 <= SHIFT_RIGHT(Radix22ButterflyG1_btf2_im_reg, 1);
  btf2_im <= Radix22ButterflyG1_sra_temp_3(31 DOWNTO 0);

  dinXTwdl_9_1_vld <= dinXTwdl_9_1_vld_1;

END rtl;


-- End of RADIX22FFT_SDF1_9_block1.vhd --

-- Start of RADIX22FFT_SDF2_10.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF2_10.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF2_10
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF2_10
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF2_10 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_9_1_re                       :   IN    signed(15 DOWNTO 0);  -- sfix16
        dout_9_1_im                       :   IN    signed(15 DOWNTO 0);  -- sfix16
        dout_9_1_vld                      :   IN    std_logic;
        rd_10_Addr                        :   IN    unsigned(1 DOWNTO 0);  -- ufix2
        rd_10_Enb                         :   IN    std_logic;
        proc_10_enb                       :   IN    std_logic;
        multiply_10_J                     :   IN    std_logic;
        dout_10_1_re                      :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_10_1_im                      :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_10_1_vld                     :   OUT   std_logic;
        dinXTwdl_10_1_vld                 :   OUT   std_logic
        );
END RADIX22FFT_SDF2_10;


ARCHITECTURE rtl OF RADIX22FFT_SDF2_10 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SDFCommutator10
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_9_1_vld                    :   IN    std_logic;
          xf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_vld                          :   IN    std_logic;
          dinf_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinf_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinf_vld                        :   IN    std_logic;
          btf1_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf1_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btfout_vld                      :   IN    std_logic;
          wrData_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrData_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrAddr                          :   OUT   unsigned(1 DOWNTO 0);  -- ufix2
          wrEnb                           :   OUT   std_logic;
          dout_10_1_re                    :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_10_1_im                    :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_10_1_vld                   :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  FOR ALL : SDFCommutator10
    USE ENTITY work.SDFCommutator10(rtl);

  -- Signals
  SIGNAL btfin_vld                        : std_logic;
  SIGNAL saveEnb                          : std_logic;
  SIGNAL dinVld                           : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL x_vld_dly                        : std_logic;
  SIGNAL wrData_im                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrAddr                           : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL wrEnb                            : std_logic;
  SIGNAL x_im                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_im_dly                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrData_re                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re_dly                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_procEnb_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1  : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2  : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf1_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_din_re_dly    : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_im_dly    : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_vld_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_im_dly      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_vld_dly     : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_multiply_J_dly1 : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2_next : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf1_im_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_re_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_im_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_din_re_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_im_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_im_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_multiply_J_dly1_next : std_logic;
  SIGNAL xf_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinf_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinf_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinf_vld                         : std_logic;
  SIGNAL btf1_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf1_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btfout_vld                       : std_logic;

BEGIN
  u_dataMEM_im_0_10_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 2,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_im,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_10_Addr,
              dout => x_im
              );

  u_dataMEM_re_0_10_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 2,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_re,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_10_Addr,
              dout => x_re
              );

  u_SDFCOMMUTATOR_10 : SDFCommutator10
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_9_1_vld => dout_9_1_vld,
              xf_re => xf_re,  -- sfix16
              xf_im => xf_im,  -- sfix16
              xf_vld => xf_vld,
              dinf_re => dinf_re,  -- sfix16
              dinf_im => dinf_im,  -- sfix16
              dinf_vld => dinf_vld,
              btf1_re => btf1_re,  -- sfix16
              btf1_im => btf1_im,  -- sfix16
              btf2_re => btf2_re,  -- sfix16
              btf2_im => btf2_im,  -- sfix16
              btfout_vld => btfout_vld,
              wrData_re => wrData_re,  -- sfix16
              wrData_im => wrData_im,  -- sfix16
              wrAddr => wrAddr,  -- ufix2
              wrEnb => wrEnb,
              dout_10_1_re => dout_10_1_re,  -- sfix16
              dout_10_1_im => dout_10_1_im,  -- sfix16
              dout_10_1_vld => dout_10_1_vld
              );

  btfin_vld <= dout_9_1_vld AND proc_10_enb;

  saveEnb <=  NOT btfin_vld;

  dinVld <= dout_9_1_vld AND saveEnb;

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_10_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld_dly <= '0';
      ELSIF enb = '1' THEN
        x_vld_dly <= x_vld;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_im_dly <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        x_im_dly <= x_im;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_re_dly <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        x_re_dly <= x_re;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Radix22ButterflyG2
  Radix22ButterflyG2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= '0';
        Radix22ButterflyG2_procEnb_dly1 <= '0';
        Radix22ButterflyG2_procEnb_dly2 <= '0';
        Radix22ButterflyG2_btf1_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf1_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf2_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf2_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_din_re_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_din_im_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_din_vld_dly <= '0';
        Radix22ButterflyG2_x_re_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_x_im_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_x_vld_dly <= '0';
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_multiply_J_dly1 <= '0';
      ELSIF enb = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= Radix22ButterflyG2_procEnb_dly_next;
        Radix22ButterflyG2_procEnb_dly1 <= Radix22ButterflyG2_procEnb_dly1_next;
        Radix22ButterflyG2_procEnb_dly2 <= Radix22ButterflyG2_procEnb_dly2_next;
        Radix22ButterflyG2_btf1_re_reg <= Radix22ButterflyG2_btf1_re_reg_next;
        Radix22ButterflyG2_btf1_im_reg <= Radix22ButterflyG2_btf1_im_reg_next;
        Radix22ButterflyG2_btf2_re_reg <= Radix22ButterflyG2_btf2_re_reg_next;
        Radix22ButterflyG2_btf2_im_reg <= Radix22ButterflyG2_btf2_im_reg_next;
        Radix22ButterflyG2_din_re_dly <= Radix22ButterflyG2_din_re_dly_next;
        Radix22ButterflyG2_din_im_dly <= Radix22ButterflyG2_din_im_dly_next;
        Radix22ButterflyG2_din_vld_dly <= Radix22ButterflyG2_din_vld_dly_next;
        Radix22ButterflyG2_x_re_dly <= Radix22ButterflyG2_x_re_dly_next;
        Radix22ButterflyG2_x_im_dly <= Radix22ButterflyG2_x_im_dly_next;
        Radix22ButterflyG2_x_vld_dly <= Radix22ButterflyG2_x_vld_dly_next;
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= Radix22ButterflyG2_dinXTwdl_re_dly1_next;
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= Radix22ButterflyG2_dinXTwdl_im_dly1_next;
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= Radix22ButterflyG2_dinXTwdl_re_dly2_next;
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= Radix22ButterflyG2_dinXTwdl_im_dly2_next;
        Radix22ButterflyG2_multiply_J_dly1 <= Radix22ButterflyG2_multiply_J_dly1_next;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG2_process;

  Radix22ButterflyG2_output : PROCESS (Radix22ButterflyG2_btf1_im_reg, Radix22ButterflyG2_btf1_re_reg,
       Radix22ButterflyG2_btf2_im_reg, Radix22ButterflyG2_btf2_re_reg,
       Radix22ButterflyG2_dinXTwdl_im_dly1, Radix22ButterflyG2_dinXTwdl_im_dly2,
       Radix22ButterflyG2_dinXTwdl_re_dly1, Radix22ButterflyG2_dinXTwdl_re_dly2,
       Radix22ButterflyG2_din_im_dly, Radix22ButterflyG2_din_re_dly,
       Radix22ButterflyG2_din_vld_dly, Radix22ButterflyG2_multiply_J_dly1,
       Radix22ButterflyG2_procEnb_dly, Radix22ButterflyG2_procEnb_dly1,
       Radix22ButterflyG2_procEnb_dly2, Radix22ButterflyG2_x_im_dly,
       Radix22ButterflyG2_x_re_dly, Radix22ButterflyG2_x_vld_dly, btfin_vld,
       dinVld, dout_9_1_im, dout_9_1_re, multiply_10_J, x_im_dly, x_re_dly,
       x_vld_dly)
    VARIABLE sra_temp : signed(16 DOWNTO 0);
    VARIABLE sra_temp_0 : signed(16 DOWNTO 0);
    VARIABLE sra_temp_1 : signed(16 DOWNTO 0);
    VARIABLE sra_temp_2 : signed(16 DOWNTO 0);
  BEGIN
    Radix22ButterflyG2_x_re_dly_next <= x_re_dly;
    Radix22ButterflyG2_x_im_dly_next <= x_im_dly;
    Radix22ButterflyG2_x_vld_dly_next <= x_vld_dly;
    Radix22ButterflyG2_din_re_dly_next <= dout_9_1_re;
    Radix22ButterflyG2_din_im_dly_next <= dout_9_1_im;
    Radix22ButterflyG2_din_vld_dly_next <= dinVld;
    Radix22ButterflyG2_procEnb_dly2_next <= Radix22ButterflyG2_procEnb_dly1;
    Radix22ButterflyG2_procEnb_dly1_next <= Radix22ButterflyG2_procEnb_dly;
    Radix22ButterflyG2_procEnb_dly_next <= btfin_vld;
    IF Radix22ButterflyG2_multiply_J_dly1 = '1' THEN 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
    ELSE 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
    END IF;
    Radix22ButterflyG2_dinXTwdl_re_dly2_next <= Radix22ButterflyG2_dinXTwdl_re_dly1;
    Radix22ButterflyG2_dinXTwdl_im_dly2_next <= Radix22ButterflyG2_dinXTwdl_im_dly1;
    Radix22ButterflyG2_dinXTwdl_re_dly1_next <= dout_9_1_re;
    Radix22ButterflyG2_dinXTwdl_im_dly1_next <= dout_9_1_im;
    Radix22ButterflyG2_multiply_J_dly1_next <= multiply_10_J;
    xf_re <= Radix22ButterflyG2_x_re_dly;
    xf_im <= Radix22ButterflyG2_x_im_dly;
    xf_vld <= Radix22ButterflyG2_x_vld_dly;
    dinf_re <= Radix22ButterflyG2_din_re_dly;
    dinf_im <= Radix22ButterflyG2_din_im_dly;
    dinf_vld <= Radix22ButterflyG2_din_vld_dly;
    sra_temp := SHIFT_RIGHT(Radix22ButterflyG2_btf1_re_reg, 1);
    btf1_re <= sra_temp(15 DOWNTO 0);
    sra_temp_0 := SHIFT_RIGHT(Radix22ButterflyG2_btf1_im_reg, 1);
    btf1_im <= sra_temp_0(15 DOWNTO 0);
    sra_temp_1 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_re_reg, 1);
    btf2_re <= sra_temp_1(15 DOWNTO 0);
    sra_temp_2 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_im_reg, 1);
    btf2_im <= sra_temp_2(15 DOWNTO 0);
    btfout_vld <= Radix22ButterflyG2_procEnb_dly2;
  END PROCESS Radix22ButterflyG2_output;


  dinXTwdl_10_1_vld <= btfin_vld;

END rtl;


-- End of RADIX22FFT_SDF2_10.vhd --

-- Start of RADIX22FFT_SDF2_10_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF2_10_block.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF2_10_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_SDF2_10
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF2_10_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_9_1_re                       :   IN    signed(15 DOWNTO 0);  -- sfix16
        dout_9_1_im                       :   IN    signed(15 DOWNTO 0);  -- sfix16
        dout_9_1_vld                      :   IN    std_logic;
        rd_10_Addr                        :   IN    unsigned(1 DOWNTO 0);  -- ufix2
        rd_10_Enb                         :   IN    std_logic;
        proc_10_enb                       :   IN    std_logic;
        multiply_10_J                     :   IN    std_logic;
        dout_10_1_re                      :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_10_1_im                      :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_10_1_vld                     :   OUT   std_logic;
        dinXTwdl_10_1_vld                 :   OUT   std_logic
        );
END RADIX22FFT_SDF2_10_block;


ARCHITECTURE rtl OF RADIX22FFT_SDF2_10_block IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SDFCommutator10_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_9_1_vld                    :   IN    std_logic;
          xf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_vld                          :   IN    std_logic;
          dinf_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinf_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinf_vld                        :   IN    std_logic;
          btf1_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf1_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btfout_vld                      :   IN    std_logic;
          wrData_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrData_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrAddr                          :   OUT   unsigned(1 DOWNTO 0);  -- ufix2
          wrEnb                           :   OUT   std_logic;
          dout_10_1_re                    :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_10_1_im                    :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_10_1_vld                   :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  FOR ALL : SDFCommutator10_block
    USE ENTITY work.SDFCommutator10_block(rtl);

  -- Signals
  SIGNAL btfin_vld                        : std_logic;
  SIGNAL saveEnb                          : std_logic;
  SIGNAL dinVld                           : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL x_vld_dly                        : std_logic;
  SIGNAL wrData_im                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrAddr                           : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL wrEnb                            : std_logic;
  SIGNAL x_im                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_im_dly                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrData_re                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re_dly                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_procEnb_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1  : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2  : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf1_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_din_re_dly    : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_im_dly    : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_vld_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_im_dly      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_vld_dly     : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_multiply_J_dly1 : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2_next : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf1_im_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_re_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_im_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_din_re_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_im_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_im_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_multiply_J_dly1_next : std_logic;
  SIGNAL xf_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinf_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinf_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinf_vld                         : std_logic;
  SIGNAL btf1_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf1_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btfout_vld                       : std_logic;

BEGIN
  u_dataMEM_im_0_10_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 2,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_im,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_10_Addr,
              dout => x_im
              );

  u_dataMEM_re_0_10_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 2,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_re,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_10_Addr,
              dout => x_re
              );

  u_SDFCOMMUTATOR_10 : SDFCommutator10_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_9_1_vld => dout_9_1_vld,
              xf_re => xf_re,  -- sfix16
              xf_im => xf_im,  -- sfix16
              xf_vld => xf_vld,
              dinf_re => dinf_re,  -- sfix16
              dinf_im => dinf_im,  -- sfix16
              dinf_vld => dinf_vld,
              btf1_re => btf1_re,  -- sfix16
              btf1_im => btf1_im,  -- sfix16
              btf2_re => btf2_re,  -- sfix16
              btf2_im => btf2_im,  -- sfix16
              btfout_vld => btfout_vld,
              wrData_re => wrData_re,  -- sfix16
              wrData_im => wrData_im,  -- sfix16
              wrAddr => wrAddr,  -- ufix2
              wrEnb => wrEnb,
              dout_10_1_re => dout_10_1_re,  -- sfix16
              dout_10_1_im => dout_10_1_im,  -- sfix16
              dout_10_1_vld => dout_10_1_vld
              );

  btfin_vld <= dout_9_1_vld AND proc_10_enb;

  saveEnb <=  NOT btfin_vld;

  dinVld <= dout_9_1_vld AND saveEnb;

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_10_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld_dly <= '0';
      ELSIF enb = '1' THEN
        x_vld_dly <= x_vld;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_im_dly <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        x_im_dly <= x_im;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_re_dly <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        x_re_dly <= x_re;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Radix22ButterflyG2
  Radix22ButterflyG2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= '0';
        Radix22ButterflyG2_procEnb_dly1 <= '0';
        Radix22ButterflyG2_procEnb_dly2 <= '0';
        Radix22ButterflyG2_btf1_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf1_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf2_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf2_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_din_re_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_din_im_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_din_vld_dly <= '0';
        Radix22ButterflyG2_x_re_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_x_im_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_x_vld_dly <= '0';
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_multiply_J_dly1 <= '0';
      ELSIF enb = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= Radix22ButterflyG2_procEnb_dly_next;
        Radix22ButterflyG2_procEnb_dly1 <= Radix22ButterflyG2_procEnb_dly1_next;
        Radix22ButterflyG2_procEnb_dly2 <= Radix22ButterflyG2_procEnb_dly2_next;
        Radix22ButterflyG2_btf1_re_reg <= Radix22ButterflyG2_btf1_re_reg_next;
        Radix22ButterflyG2_btf1_im_reg <= Radix22ButterflyG2_btf1_im_reg_next;
        Radix22ButterflyG2_btf2_re_reg <= Radix22ButterflyG2_btf2_re_reg_next;
        Radix22ButterflyG2_btf2_im_reg <= Radix22ButterflyG2_btf2_im_reg_next;
        Radix22ButterflyG2_din_re_dly <= Radix22ButterflyG2_din_re_dly_next;
        Radix22ButterflyG2_din_im_dly <= Radix22ButterflyG2_din_im_dly_next;
        Radix22ButterflyG2_din_vld_dly <= Radix22ButterflyG2_din_vld_dly_next;
        Radix22ButterflyG2_x_re_dly <= Radix22ButterflyG2_x_re_dly_next;
        Radix22ButterflyG2_x_im_dly <= Radix22ButterflyG2_x_im_dly_next;
        Radix22ButterflyG2_x_vld_dly <= Radix22ButterflyG2_x_vld_dly_next;
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= Radix22ButterflyG2_dinXTwdl_re_dly1_next;
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= Radix22ButterflyG2_dinXTwdl_im_dly1_next;
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= Radix22ButterflyG2_dinXTwdl_re_dly2_next;
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= Radix22ButterflyG2_dinXTwdl_im_dly2_next;
        Radix22ButterflyG2_multiply_J_dly1 <= Radix22ButterflyG2_multiply_J_dly1_next;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG2_process;

  Radix22ButterflyG2_output : PROCESS (Radix22ButterflyG2_btf1_im_reg, Radix22ButterflyG2_btf1_re_reg,
       Radix22ButterflyG2_btf2_im_reg, Radix22ButterflyG2_btf2_re_reg,
       Radix22ButterflyG2_dinXTwdl_im_dly1, Radix22ButterflyG2_dinXTwdl_im_dly2,
       Radix22ButterflyG2_dinXTwdl_re_dly1, Radix22ButterflyG2_dinXTwdl_re_dly2,
       Radix22ButterflyG2_din_im_dly, Radix22ButterflyG2_din_re_dly,
       Radix22ButterflyG2_din_vld_dly, Radix22ButterflyG2_multiply_J_dly1,
       Radix22ButterflyG2_procEnb_dly, Radix22ButterflyG2_procEnb_dly1,
       Radix22ButterflyG2_procEnb_dly2, Radix22ButterflyG2_x_im_dly,
       Radix22ButterflyG2_x_re_dly, Radix22ButterflyG2_x_vld_dly, btfin_vld,
       dinVld, dout_9_1_im, dout_9_1_re, multiply_10_J, x_im_dly, x_re_dly,
       x_vld_dly)
    VARIABLE sra_temp : signed(16 DOWNTO 0);
    VARIABLE sra_temp_0 : signed(16 DOWNTO 0);
    VARIABLE sra_temp_1 : signed(16 DOWNTO 0);
    VARIABLE sra_temp_2 : signed(16 DOWNTO 0);
  BEGIN
    Radix22ButterflyG2_x_re_dly_next <= x_re_dly;
    Radix22ButterflyG2_x_im_dly_next <= x_im_dly;
    Radix22ButterflyG2_x_vld_dly_next <= x_vld_dly;
    Radix22ButterflyG2_din_re_dly_next <= dout_9_1_re;
    Radix22ButterflyG2_din_im_dly_next <= dout_9_1_im;
    Radix22ButterflyG2_din_vld_dly_next <= dinVld;
    Radix22ButterflyG2_procEnb_dly2_next <= Radix22ButterflyG2_procEnb_dly1;
    Radix22ButterflyG2_procEnb_dly1_next <= Radix22ButterflyG2_procEnb_dly;
    Radix22ButterflyG2_procEnb_dly_next <= btfin_vld;
    IF Radix22ButterflyG2_multiply_J_dly1 = '1' THEN 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
    ELSE 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
    END IF;
    Radix22ButterflyG2_dinXTwdl_re_dly2_next <= Radix22ButterflyG2_dinXTwdl_re_dly1;
    Radix22ButterflyG2_dinXTwdl_im_dly2_next <= Radix22ButterflyG2_dinXTwdl_im_dly1;
    Radix22ButterflyG2_dinXTwdl_re_dly1_next <= dout_9_1_re;
    Radix22ButterflyG2_dinXTwdl_im_dly1_next <= dout_9_1_im;
    Radix22ButterflyG2_multiply_J_dly1_next <= multiply_10_J;
    xf_re <= Radix22ButterflyG2_x_re_dly;
    xf_im <= Radix22ButterflyG2_x_im_dly;
    xf_vld <= Radix22ButterflyG2_x_vld_dly;
    dinf_re <= Radix22ButterflyG2_din_re_dly;
    dinf_im <= Radix22ButterflyG2_din_im_dly;
    dinf_vld <= Radix22ButterflyG2_din_vld_dly;
    sra_temp := SHIFT_RIGHT(Radix22ButterflyG2_btf1_re_reg, 1);
    btf1_re <= sra_temp(15 DOWNTO 0);
    sra_temp_0 := SHIFT_RIGHT(Radix22ButterflyG2_btf1_im_reg, 1);
    btf1_im <= sra_temp_0(15 DOWNTO 0);
    sra_temp_1 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_re_reg, 1);
    btf2_re <= sra_temp_1(15 DOWNTO 0);
    sra_temp_2 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_im_reg, 1);
    btf2_im <= sra_temp_2(15 DOWNTO 0);
    btfout_vld <= Radix22ButterflyG2_procEnb_dly2;
  END PROCESS Radix22ButterflyG2_output;


  dinXTwdl_10_1_vld <= btfin_vld;

END rtl;


-- End of RADIX22FFT_SDF2_10_block.vhd --

-- Start of RADIX22FFT_SDF2_10_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF2_10_block1.vhd
-- Created: 2025-03-18 15:26:31
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF2_10_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_SDF2_10
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF2_10_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_9_1_re                       :   IN    signed(31 DOWNTO 0);  -- sfix32
        dout_9_1_im                       :   IN    signed(31 DOWNTO 0);  -- sfix32
        dout_9_1_vld                      :   IN    std_logic;
        rd_10_Addr                        :   IN    unsigned(8 DOWNTO 0);  -- ufix9
        rd_10_Enb                         :   IN    std_logic;
        proc_10_enb                       :   IN    std_logic;
        multiply_10_J                     :   IN    std_logic;
        dout_10_1_re                      :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_10_1_im                      :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_10_1_vld                     :   OUT   std_logic;
        dinXTwdl_10_1_vld                 :   OUT   std_logic
        );
END RADIX22FFT_SDF2_10_block1;


ARCHITECTURE rtl OF RADIX22FFT_SDF2_10_block1 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SDFCommutator10_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_9_1_vld                    :   IN    std_logic;
          xf_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
          xf_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
          xf_vld                          :   IN    std_logic;
          dinf_re                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          dinf_im                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          dinf_vld                        :   IN    std_logic;
          btf1_re                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf1_im                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf2_re                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf2_im                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btfout_vld                      :   IN    std_logic;
          wrData_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
          wrData_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
          wrAddr                          :   OUT   unsigned(8 DOWNTO 0);  -- ufix9
          wrEnb                           :   OUT   std_logic;
          dout_10_1_re                    :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_10_1_im                    :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_10_1_vld                   :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  FOR ALL : SDFCommutator10_block1
    USE ENTITY work.SDFCommutator10_block1(rtl);

  -- Signals
  SIGNAL btfin_vld                        : std_logic;
  SIGNAL saveEnb                          : std_logic;
  SIGNAL dinVld                           : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL x_vld_dly                        : std_logic;
  SIGNAL wrData_im                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrAddr                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL wrEnb                            : std_logic;
  SIGNAL x_im                             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL x_im_dly                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrData_re                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL x_re                             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL x_re_dly                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_procEnb_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1  : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2  : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf1_im_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf2_re_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf2_im_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_din_re_dly    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_din_im_dly    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_din_vld_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_x_im_dly      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_x_vld_dly     : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_multiply_J_dly1 : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2_next : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg_next : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf1_im_reg_next : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf2_re_reg_next : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf2_im_reg_next : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_din_re_dly_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_din_im_dly_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_din_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_x_im_dly_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_x_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_multiply_J_dly1_next : std_logic;
  SIGNAL xf_re                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xf_im                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinf_re                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinf_im                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinf_vld                         : std_logic;
  SIGNAL btf1_re                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf1_im                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf2_re                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf2_im                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btfout_vld                       : std_logic;

BEGIN
  u_dataMEM_im_0_10_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 9,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_im,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_10_Addr,
              dout => x_im
              );

  u_dataMEM_re_0_10_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 9,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_re,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_10_Addr,
              dout => x_re
              );

  u_SDFCOMMUTATOR_10 : SDFCommutator10_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_9_1_vld => dout_9_1_vld,
              xf_re => xf_re,  -- sfix32
              xf_im => xf_im,  -- sfix32
              xf_vld => xf_vld,
              dinf_re => dinf_re,  -- sfix32
              dinf_im => dinf_im,  -- sfix32
              dinf_vld => dinf_vld,
              btf1_re => btf1_re,  -- sfix32
              btf1_im => btf1_im,  -- sfix32
              btf2_re => btf2_re,  -- sfix32
              btf2_im => btf2_im,  -- sfix32
              btfout_vld => btfout_vld,
              wrData_re => wrData_re,  -- sfix32
              wrData_im => wrData_im,  -- sfix32
              wrAddr => wrAddr,  -- ufix9
              wrEnb => wrEnb,
              dout_10_1_re => dout_10_1_re,  -- sfix32
              dout_10_1_im => dout_10_1_im,  -- sfix32
              dout_10_1_vld => dout_10_1_vld
              );

  btfin_vld <= dout_9_1_vld AND proc_10_enb;

  saveEnb <=  NOT btfin_vld;

  dinVld <= dout_9_1_vld AND saveEnb;

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_10_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld_dly <= '0';
      ELSIF enb = '1' THEN
        x_vld_dly <= x_vld;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_im_dly <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        x_im_dly <= x_im;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_re_dly <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        x_re_dly <= x_re;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Radix22ButterflyG2
  Radix22ButterflyG2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= '0';
        Radix22ButterflyG2_procEnb_dly1 <= '0';
        Radix22ButterflyG2_procEnb_dly2 <= '0';
        Radix22ButterflyG2_btf1_re_reg <= to_signed(0, 33);
        Radix22ButterflyG2_btf1_im_reg <= to_signed(0, 33);
        Radix22ButterflyG2_btf2_re_reg <= to_signed(0, 33);
        Radix22ButterflyG2_btf2_im_reg <= to_signed(0, 33);
        Radix22ButterflyG2_din_re_dly <= to_signed(0, 32);
        Radix22ButterflyG2_din_im_dly <= to_signed(0, 32);
        Radix22ButterflyG2_din_vld_dly <= '0';
        Radix22ButterflyG2_x_re_dly <= to_signed(0, 32);
        Radix22ButterflyG2_x_im_dly <= to_signed(0, 32);
        Radix22ButterflyG2_x_vld_dly <= '0';
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= to_signed(0, 32);
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= to_signed(0, 32);
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= to_signed(0, 32);
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= to_signed(0, 32);
        Radix22ButterflyG2_multiply_J_dly1 <= '0';
      ELSIF enb = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= Radix22ButterflyG2_procEnb_dly_next;
        Radix22ButterflyG2_procEnb_dly1 <= Radix22ButterflyG2_procEnb_dly1_next;
        Radix22ButterflyG2_procEnb_dly2 <= Radix22ButterflyG2_procEnb_dly2_next;
        Radix22ButterflyG2_btf1_re_reg <= Radix22ButterflyG2_btf1_re_reg_next;
        Radix22ButterflyG2_btf1_im_reg <= Radix22ButterflyG2_btf1_im_reg_next;
        Radix22ButterflyG2_btf2_re_reg <= Radix22ButterflyG2_btf2_re_reg_next;
        Radix22ButterflyG2_btf2_im_reg <= Radix22ButterflyG2_btf2_im_reg_next;
        Radix22ButterflyG2_din_re_dly <= Radix22ButterflyG2_din_re_dly_next;
        Radix22ButterflyG2_din_im_dly <= Radix22ButterflyG2_din_im_dly_next;
        Radix22ButterflyG2_din_vld_dly <= Radix22ButterflyG2_din_vld_dly_next;
        Radix22ButterflyG2_x_re_dly <= Radix22ButterflyG2_x_re_dly_next;
        Radix22ButterflyG2_x_im_dly <= Radix22ButterflyG2_x_im_dly_next;
        Radix22ButterflyG2_x_vld_dly <= Radix22ButterflyG2_x_vld_dly_next;
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= Radix22ButterflyG2_dinXTwdl_re_dly1_next;
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= Radix22ButterflyG2_dinXTwdl_im_dly1_next;
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= Radix22ButterflyG2_dinXTwdl_re_dly2_next;
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= Radix22ButterflyG2_dinXTwdl_im_dly2_next;
        Radix22ButterflyG2_multiply_J_dly1 <= Radix22ButterflyG2_multiply_J_dly1_next;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG2_process;

  Radix22ButterflyG2_output : PROCESS (Radix22ButterflyG2_btf1_im_reg, Radix22ButterflyG2_btf1_re_reg,
       Radix22ButterflyG2_btf2_im_reg, Radix22ButterflyG2_btf2_re_reg,
       Radix22ButterflyG2_dinXTwdl_im_dly1, Radix22ButterflyG2_dinXTwdl_im_dly2,
       Radix22ButterflyG2_dinXTwdl_re_dly1, Radix22ButterflyG2_dinXTwdl_re_dly2,
       Radix22ButterflyG2_din_im_dly, Radix22ButterflyG2_din_re_dly,
       Radix22ButterflyG2_din_vld_dly, Radix22ButterflyG2_multiply_J_dly1,
       Radix22ButterflyG2_procEnb_dly, Radix22ButterflyG2_procEnb_dly1,
       Radix22ButterflyG2_procEnb_dly2, Radix22ButterflyG2_x_im_dly,
       Radix22ButterflyG2_x_re_dly, Radix22ButterflyG2_x_vld_dly, btfin_vld,
       dinVld, dout_9_1_im, dout_9_1_re, multiply_10_J, x_im_dly, x_re_dly,
       x_vld_dly)
    VARIABLE sra_temp : signed(32 DOWNTO 0);
    VARIABLE sra_temp_0 : signed(32 DOWNTO 0);
    VARIABLE sra_temp_1 : signed(32 DOWNTO 0);
    VARIABLE sra_temp_2 : signed(32 DOWNTO 0);
  BEGIN
    Radix22ButterflyG2_x_re_dly_next <= x_re_dly;
    Radix22ButterflyG2_x_im_dly_next <= x_im_dly;
    Radix22ButterflyG2_x_vld_dly_next <= x_vld_dly;
    Radix22ButterflyG2_din_re_dly_next <= dout_9_1_re;
    Radix22ButterflyG2_din_im_dly_next <= dout_9_1_im;
    Radix22ButterflyG2_din_vld_dly_next <= dinVld;
    Radix22ButterflyG2_procEnb_dly2_next <= Radix22ButterflyG2_procEnb_dly1;
    Radix22ButterflyG2_procEnb_dly1_next <= Radix22ButterflyG2_procEnb_dly;
    Radix22ButterflyG2_procEnb_dly_next <= btfin_vld;
    IF Radix22ButterflyG2_multiply_J_dly1 = '1' THEN 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 33) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 33);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 33) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 33);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 33) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 33);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 33) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 33);
    ELSE 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 33) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 33);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 33) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 33);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 33) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 33);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 33) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 33);
    END IF;
    Radix22ButterflyG2_dinXTwdl_re_dly2_next <= Radix22ButterflyG2_dinXTwdl_re_dly1;
    Radix22ButterflyG2_dinXTwdl_im_dly2_next <= Radix22ButterflyG2_dinXTwdl_im_dly1;
    Radix22ButterflyG2_dinXTwdl_re_dly1_next <= dout_9_1_re;
    Radix22ButterflyG2_dinXTwdl_im_dly1_next <= dout_9_1_im;
    Radix22ButterflyG2_multiply_J_dly1_next <= multiply_10_J;
    xf_re <= Radix22ButterflyG2_x_re_dly;
    xf_im <= Radix22ButterflyG2_x_im_dly;
    xf_vld <= Radix22ButterflyG2_x_vld_dly;
    dinf_re <= Radix22ButterflyG2_din_re_dly;
    dinf_im <= Radix22ButterflyG2_din_im_dly;
    dinf_vld <= Radix22ButterflyG2_din_vld_dly;
    sra_temp := SHIFT_RIGHT(Radix22ButterflyG2_btf1_re_reg, 1);
    btf1_re <= sra_temp(31 DOWNTO 0);
    sra_temp_0 := SHIFT_RIGHT(Radix22ButterflyG2_btf1_im_reg, 1);
    btf1_im <= sra_temp_0(31 DOWNTO 0);
    sra_temp_1 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_re_reg, 1);
    btf2_re <= sra_temp_1(31 DOWNTO 0);
    sra_temp_2 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_im_reg, 1);
    btf2_im <= sra_temp_2(31 DOWNTO 0);
    btfout_vld <= Radix22ButterflyG2_procEnb_dly2;
  END PROCESS Radix22ButterflyG2_output;


  dinXTwdl_10_1_vld <= btfin_vld;

END rtl;


-- End of RADIX22FFT_SDF2_10_block1.vhd --

-- Start of RADIX22FFT_SDF2_12.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF2_12.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF2_12
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF2_12
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF2_12 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_11_1_re                      :   IN    signed(15 DOWNTO 0);  -- sfix16
        dout_11_1_im                      :   IN    signed(15 DOWNTO 0);  -- sfix16
        dout_11_1_vld                     :   IN    std_logic;
        rd_12_Addr                        :   IN    std_logic;
        rd_12_Enb                         :   IN    std_logic;
        proc_12_enb                       :   IN    std_logic;
        multiply_12_J                     :   IN    std_logic;
        dout_12_1_re                      :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_12_1_im                      :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_12_1_vld                     :   OUT   std_logic;
        dinXTwdl_12_1_vld                 :   OUT   std_logic
        );
END RADIX22FFT_SDF2_12;


ARCHITECTURE rtl OF RADIX22FFT_SDF2_12 IS

  -- Component Declarations
  COMPONENT SDFCommutator12
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_11_1_vld                   :   IN    std_logic;
          xf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_vld                          :   IN    std_logic;
          dinf_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinf_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinf_vld                        :   IN    std_logic;
          btf1_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf1_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btfout_vld                      :   IN    std_logic;
          wrData_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrData_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrAddr                          :   OUT   std_logic;  -- ufix1
          wrEnb                           :   OUT   std_logic;
          dout_12_1_re                    :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_12_1_im                    :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_12_1_vld                   :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : SDFCommutator12
    USE ENTITY work.SDFCommutator12(rtl);

  -- Signals
  SIGNAL saveEnb                          : std_logic;
  SIGNAL dinVld                           : std_logic;
  SIGNAL din_re_dly1                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btfin_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL din_im_dly1                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btfin_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL mulIn_vld                        : std_logic;
  SIGNAL procEnb_dly1                     : std_logic;
  SIGNAL btfin_vld                        : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL x_vld_dly                        : std_logic;
  SIGNAL x_im                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_im_dly                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrData_re                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrData_im                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrAddr                           : std_logic;  -- ufix1
  SIGNAL wrEnb                            : std_logic;
  SIGNAL twoLocationReg_0_MEM_re_0        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_im_0        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_re_1        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_im_1        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_dout_re_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_dout_im_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_re_0_next   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_im_0_next   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_re_1_next   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_im_1_next   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_dout_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_dout_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re_dly                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_procEnb_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1  : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2  : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf1_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_din_re_dly    : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_im_dly    : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_vld_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_im_dly      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_vld_dly     : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_multiply_J_dly1 : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2_next : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf1_im_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_re_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_im_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_din_re_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_im_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_im_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_multiply_J_dly1_next : std_logic;
  SIGNAL xf_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinf_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinf_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinf_vld                         : std_logic;
  SIGNAL btf1_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf1_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btfout_vld                       : std_logic;

BEGIN
  u_SDFCOMMUTATOR_12 : SDFCommutator12
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_11_1_vld => dout_11_1_vld,
              xf_re => xf_re,  -- sfix16
              xf_im => xf_im,  -- sfix16
              xf_vld => xf_vld,
              dinf_re => dinf_re,  -- sfix16
              dinf_im => dinf_im,  -- sfix16
              dinf_vld => dinf_vld,
              btf1_re => btf1_re,  -- sfix16
              btf1_im => btf1_im,  -- sfix16
              btf2_re => btf2_re,  -- sfix16
              btf2_im => btf2_im,  -- sfix16
              btfout_vld => btfout_vld,
              wrData_re => wrData_re,  -- sfix16
              wrData_im => wrData_im,  -- sfix16
              wrAddr => wrAddr,  -- ufix1
              wrEnb => wrEnb,
              dout_12_1_re => dout_12_1_re,  -- sfix16
              dout_12_1_im => dout_12_1_im,  -- sfix16
              dout_12_1_vld => dout_12_1_vld
              );

  saveEnb <=  NOT proc_12_enb;

  dinVld <= dout_11_1_vld AND saveEnb;

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_re_dly1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        din_re_dly1 <= dout_11_1_re;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        btfin_re <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        btfin_re <= din_re_dly1;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_im_dly1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        din_im_dly1 <= dout_11_1_im;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        btfin_im <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        btfin_im <= din_im_dly1;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  mulIn_vld <= dout_11_1_vld AND proc_12_enb;

  intdelay_4_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        procEnb_dly1 <= '0';
      ELSIF enb = '1' THEN
        procEnb_dly1 <= mulIn_vld;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;


  intdelay_5_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        btfin_vld <= '0';
      ELSIF enb = '1' THEN
        btfin_vld <= procEnb_dly1;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;


  intdelay_6_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_12_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_6_process;


  intdelay_7_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld_dly <= '0';
      ELSIF enb = '1' THEN
        x_vld_dly <= x_vld;
      END IF;
    END IF;
  END PROCESS intdelay_7_process;


  intdelay_8_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_im_dly <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        x_im_dly <= x_im;
      END IF;
    END IF;
  END PROCESS intdelay_8_process;


  -- twoLocationReg_0
  twoLocationReg_0_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twoLocationReg_0_MEM_re_0 <= to_signed(16#0000#, 16);
        twoLocationReg_0_MEM_im_0 <= to_signed(16#0000#, 16);
        twoLocationReg_0_MEM_re_1 <= to_signed(16#0000#, 16);
        twoLocationReg_0_MEM_im_1 <= to_signed(16#0000#, 16);
        twoLocationReg_0_dout_re_reg <= to_signed(16#0000#, 16);
        twoLocationReg_0_dout_im_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twoLocationReg_0_MEM_re_0 <= twoLocationReg_0_MEM_re_0_next;
        twoLocationReg_0_MEM_im_0 <= twoLocationReg_0_MEM_im_0_next;
        twoLocationReg_0_MEM_re_1 <= twoLocationReg_0_MEM_re_1_next;
        twoLocationReg_0_MEM_im_1 <= twoLocationReg_0_MEM_im_1_next;
        twoLocationReg_0_dout_re_reg <= twoLocationReg_0_dout_re_reg_next;
        twoLocationReg_0_dout_im_reg <= twoLocationReg_0_dout_im_reg_next;
      END IF;
    END IF;
  END PROCESS twoLocationReg_0_process;

  twoLocationReg_0_output : PROCESS (rd_12_Addr, twoLocationReg_0_MEM_im_0, twoLocationReg_0_MEM_im_1,
       twoLocationReg_0_MEM_re_0, twoLocationReg_0_MEM_re_1,
       twoLocationReg_0_dout_im_reg, twoLocationReg_0_dout_re_reg, wrAddr,
       wrData_im, wrData_re, wrEnb)
  BEGIN
    twoLocationReg_0_MEM_re_0_next <= twoLocationReg_0_MEM_re_0;
    twoLocationReg_0_MEM_im_0_next <= twoLocationReg_0_MEM_im_0;
    twoLocationReg_0_MEM_re_1_next <= twoLocationReg_0_MEM_re_1;
    twoLocationReg_0_MEM_im_1_next <= twoLocationReg_0_MEM_im_1;
    IF rd_12_Addr = '1' THEN 
      twoLocationReg_0_dout_re_reg_next <= twoLocationReg_0_MEM_re_1;
      twoLocationReg_0_dout_im_reg_next <= twoLocationReg_0_MEM_im_1;
    ELSE 
      twoLocationReg_0_dout_re_reg_next <= twoLocationReg_0_MEM_re_0;
      twoLocationReg_0_dout_im_reg_next <= twoLocationReg_0_MEM_im_0;
    END IF;
    IF wrEnb = '1' THEN 
      IF wrAddr = '1' THEN 
        twoLocationReg_0_MEM_re_1_next <= wrData_re;
        twoLocationReg_0_MEM_im_1_next <= wrData_im;
      ELSE 
        twoLocationReg_0_MEM_re_0_next <= wrData_re;
        twoLocationReg_0_MEM_im_0_next <= wrData_im;
      END IF;
    END IF;
    x_re <= twoLocationReg_0_dout_re_reg;
    x_im <= twoLocationReg_0_dout_im_reg;
  END PROCESS twoLocationReg_0_output;


  intdelay_9_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_re_dly <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        x_re_dly <= x_re;
      END IF;
    END IF;
  END PROCESS intdelay_9_process;


  -- Radix22ButterflyG2
  Radix22ButterflyG2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= '0';
        Radix22ButterflyG2_procEnb_dly1 <= '0';
        Radix22ButterflyG2_procEnb_dly2 <= '0';
        Radix22ButterflyG2_btf1_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf1_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf2_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf2_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_din_re_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_din_im_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_din_vld_dly <= '0';
        Radix22ButterflyG2_x_re_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_x_im_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_x_vld_dly <= '0';
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_multiply_J_dly1 <= '0';
      ELSIF enb = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= Radix22ButterflyG2_procEnb_dly_next;
        Radix22ButterflyG2_procEnb_dly1 <= Radix22ButterflyG2_procEnb_dly1_next;
        Radix22ButterflyG2_procEnb_dly2 <= Radix22ButterflyG2_procEnb_dly2_next;
        Radix22ButterflyG2_btf1_re_reg <= Radix22ButterflyG2_btf1_re_reg_next;
        Radix22ButterflyG2_btf1_im_reg <= Radix22ButterflyG2_btf1_im_reg_next;
        Radix22ButterflyG2_btf2_re_reg <= Radix22ButterflyG2_btf2_re_reg_next;
        Radix22ButterflyG2_btf2_im_reg <= Radix22ButterflyG2_btf2_im_reg_next;
        Radix22ButterflyG2_din_re_dly <= Radix22ButterflyG2_din_re_dly_next;
        Radix22ButterflyG2_din_im_dly <= Radix22ButterflyG2_din_im_dly_next;
        Radix22ButterflyG2_din_vld_dly <= Radix22ButterflyG2_din_vld_dly_next;
        Radix22ButterflyG2_x_re_dly <= Radix22ButterflyG2_x_re_dly_next;
        Radix22ButterflyG2_x_im_dly <= Radix22ButterflyG2_x_im_dly_next;
        Radix22ButterflyG2_x_vld_dly <= Radix22ButterflyG2_x_vld_dly_next;
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= Radix22ButterflyG2_dinXTwdl_re_dly1_next;
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= Radix22ButterflyG2_dinXTwdl_im_dly1_next;
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= Radix22ButterflyG2_dinXTwdl_re_dly2_next;
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= Radix22ButterflyG2_dinXTwdl_im_dly2_next;
        Radix22ButterflyG2_multiply_J_dly1 <= Radix22ButterflyG2_multiply_J_dly1_next;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG2_process;

  Radix22ButterflyG2_output : PROCESS (Radix22ButterflyG2_btf1_im_reg, Radix22ButterflyG2_btf1_re_reg,
       Radix22ButterflyG2_btf2_im_reg, Radix22ButterflyG2_btf2_re_reg,
       Radix22ButterflyG2_dinXTwdl_im_dly1, Radix22ButterflyG2_dinXTwdl_im_dly2,
       Radix22ButterflyG2_dinXTwdl_re_dly1, Radix22ButterflyG2_dinXTwdl_re_dly2,
       Radix22ButterflyG2_din_im_dly, Radix22ButterflyG2_din_re_dly,
       Radix22ButterflyG2_din_vld_dly, Radix22ButterflyG2_multiply_J_dly1,
       Radix22ButterflyG2_procEnb_dly, Radix22ButterflyG2_procEnb_dly1,
       Radix22ButterflyG2_procEnb_dly2, Radix22ButterflyG2_x_im_dly,
       Radix22ButterflyG2_x_re_dly, Radix22ButterflyG2_x_vld_dly, btfin_im,
       btfin_re, btfin_vld, dinVld, dout_11_1_im, dout_11_1_re, multiply_12_J,
       x_im_dly, x_re_dly, x_vld_dly)
    VARIABLE sra_temp : signed(16 DOWNTO 0);
    VARIABLE sra_temp_0 : signed(16 DOWNTO 0);
    VARIABLE sra_temp_1 : signed(16 DOWNTO 0);
    VARIABLE sra_temp_2 : signed(16 DOWNTO 0);
  BEGIN
    Radix22ButterflyG2_x_re_dly_next <= x_re_dly;
    Radix22ButterflyG2_x_im_dly_next <= x_im_dly;
    Radix22ButterflyG2_x_vld_dly_next <= x_vld_dly;
    Radix22ButterflyG2_din_re_dly_next <= dout_11_1_re;
    Radix22ButterflyG2_din_im_dly_next <= dout_11_1_im;
    Radix22ButterflyG2_din_vld_dly_next <= dinVld;
    Radix22ButterflyG2_procEnb_dly2_next <= Radix22ButterflyG2_procEnb_dly1;
    Radix22ButterflyG2_procEnb_dly1_next <= Radix22ButterflyG2_procEnb_dly;
    Radix22ButterflyG2_procEnb_dly_next <= btfin_vld;
    IF Radix22ButterflyG2_multiply_J_dly1 = '1' THEN 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
    ELSE 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
    END IF;
    Radix22ButterflyG2_dinXTwdl_re_dly2_next <= Radix22ButterflyG2_dinXTwdl_re_dly1;
    Radix22ButterflyG2_dinXTwdl_im_dly2_next <= Radix22ButterflyG2_dinXTwdl_im_dly1;
    Radix22ButterflyG2_dinXTwdl_re_dly1_next <= btfin_re;
    Radix22ButterflyG2_dinXTwdl_im_dly1_next <= btfin_im;
    Radix22ButterflyG2_multiply_J_dly1_next <= multiply_12_J;
    xf_re <= Radix22ButterflyG2_x_re_dly;
    xf_im <= Radix22ButterflyG2_x_im_dly;
    xf_vld <= Radix22ButterflyG2_x_vld_dly;
    dinf_re <= Radix22ButterflyG2_din_re_dly;
    dinf_im <= Radix22ButterflyG2_din_im_dly;
    dinf_vld <= Radix22ButterflyG2_din_vld_dly;
    sra_temp := SHIFT_RIGHT(Radix22ButterflyG2_btf1_re_reg, 1);
    btf1_re <= sra_temp(15 DOWNTO 0);
    sra_temp_0 := SHIFT_RIGHT(Radix22ButterflyG2_btf1_im_reg, 1);
    btf1_im <= sra_temp_0(15 DOWNTO 0);
    sra_temp_1 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_re_reg, 1);
    btf2_re <= sra_temp_1(15 DOWNTO 0);
    sra_temp_2 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_im_reg, 1);
    btf2_im <= sra_temp_2(15 DOWNTO 0);
    btfout_vld <= Radix22ButterflyG2_procEnb_dly2;
  END PROCESS Radix22ButterflyG2_output;


  dinXTwdl_12_1_vld <= btfin_vld;

END rtl;


-- End of RADIX22FFT_SDF2_12.vhd --

-- Start of RADIX22FFT_SDF2_12_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF2_12_block.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF2_12_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_SDF2_12
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF2_12_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_11_1_re                      :   IN    signed(15 DOWNTO 0);  -- sfix16
        dout_11_1_im                      :   IN    signed(15 DOWNTO 0);  -- sfix16
        dout_11_1_vld                     :   IN    std_logic;
        rd_12_Addr                        :   IN    std_logic;
        rd_12_Enb                         :   IN    std_logic;
        proc_12_enb                       :   IN    std_logic;
        multiply_12_J                     :   IN    std_logic;
        dout_12_1_re                      :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_12_1_im                      :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_12_1_vld                     :   OUT   std_logic;
        dinXTwdl_12_1_vld                 :   OUT   std_logic
        );
END RADIX22FFT_SDF2_12_block;


ARCHITECTURE rtl OF RADIX22FFT_SDF2_12_block IS

  -- Component Declarations
  COMPONENT SDFCommutator12_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_11_1_vld                   :   IN    std_logic;
          xf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_vld                          :   IN    std_logic;
          dinf_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinf_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinf_vld                        :   IN    std_logic;
          btf1_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf1_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btfout_vld                      :   IN    std_logic;
          wrData_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrData_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrAddr                          :   OUT   std_logic;  -- ufix1
          wrEnb                           :   OUT   std_logic;
          dout_12_1_re                    :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_12_1_im                    :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_12_1_vld                   :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : SDFCommutator12_block
    USE ENTITY work.SDFCommutator12_block(rtl);

  -- Signals
  SIGNAL saveEnb                          : std_logic;
  SIGNAL dinVld                           : std_logic;
  SIGNAL din_re_dly1                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btfin_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL din_im_dly1                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btfin_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL mulIn_vld                        : std_logic;
  SIGNAL procEnb_dly1                     : std_logic;
  SIGNAL btfin_vld                        : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL x_vld_dly                        : std_logic;
  SIGNAL x_im                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_im_dly                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrData_re                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrData_im                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrAddr                           : std_logic;  -- ufix1
  SIGNAL wrEnb                            : std_logic;
  SIGNAL twoLocationReg_0_MEM_re_0        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_im_0        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_re_1        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_im_1        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_dout_re_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_dout_im_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_re_0_next   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_im_0_next   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_re_1_next   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_im_1_next   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_dout_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_dout_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re_dly                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_procEnb_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1  : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2  : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf1_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_din_re_dly    : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_im_dly    : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_vld_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_im_dly      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_vld_dly     : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_multiply_J_dly1 : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2_next : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf1_im_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_re_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_im_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_din_re_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_im_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_im_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_multiply_J_dly1_next : std_logic;
  SIGNAL xf_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinf_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinf_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinf_vld                         : std_logic;
  SIGNAL btf1_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf1_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btfout_vld                       : std_logic;

BEGIN
  u_SDFCOMMUTATOR_12 : SDFCommutator12_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_11_1_vld => dout_11_1_vld,
              xf_re => xf_re,  -- sfix16
              xf_im => xf_im,  -- sfix16
              xf_vld => xf_vld,
              dinf_re => dinf_re,  -- sfix16
              dinf_im => dinf_im,  -- sfix16
              dinf_vld => dinf_vld,
              btf1_re => btf1_re,  -- sfix16
              btf1_im => btf1_im,  -- sfix16
              btf2_re => btf2_re,  -- sfix16
              btf2_im => btf2_im,  -- sfix16
              btfout_vld => btfout_vld,
              wrData_re => wrData_re,  -- sfix16
              wrData_im => wrData_im,  -- sfix16
              wrAddr => wrAddr,  -- ufix1
              wrEnb => wrEnb,
              dout_12_1_re => dout_12_1_re,  -- sfix16
              dout_12_1_im => dout_12_1_im,  -- sfix16
              dout_12_1_vld => dout_12_1_vld
              );

  saveEnb <=  NOT proc_12_enb;

  dinVld <= dout_11_1_vld AND saveEnb;

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_re_dly1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        din_re_dly1 <= dout_11_1_re;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        btfin_re <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        btfin_re <= din_re_dly1;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_im_dly1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        din_im_dly1 <= dout_11_1_im;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        btfin_im <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        btfin_im <= din_im_dly1;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  mulIn_vld <= dout_11_1_vld AND proc_12_enb;

  intdelay_4_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        procEnb_dly1 <= '0';
      ELSIF enb = '1' THEN
        procEnb_dly1 <= mulIn_vld;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;


  intdelay_5_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        btfin_vld <= '0';
      ELSIF enb = '1' THEN
        btfin_vld <= procEnb_dly1;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;


  intdelay_6_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_12_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_6_process;


  intdelay_7_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld_dly <= '0';
      ELSIF enb = '1' THEN
        x_vld_dly <= x_vld;
      END IF;
    END IF;
  END PROCESS intdelay_7_process;


  intdelay_8_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_im_dly <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        x_im_dly <= x_im;
      END IF;
    END IF;
  END PROCESS intdelay_8_process;


  -- twoLocationReg_0
  twoLocationReg_0_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twoLocationReg_0_MEM_re_0 <= to_signed(16#0000#, 16);
        twoLocationReg_0_MEM_im_0 <= to_signed(16#0000#, 16);
        twoLocationReg_0_MEM_re_1 <= to_signed(16#0000#, 16);
        twoLocationReg_0_MEM_im_1 <= to_signed(16#0000#, 16);
        twoLocationReg_0_dout_re_reg <= to_signed(16#0000#, 16);
        twoLocationReg_0_dout_im_reg <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twoLocationReg_0_MEM_re_0 <= twoLocationReg_0_MEM_re_0_next;
        twoLocationReg_0_MEM_im_0 <= twoLocationReg_0_MEM_im_0_next;
        twoLocationReg_0_MEM_re_1 <= twoLocationReg_0_MEM_re_1_next;
        twoLocationReg_0_MEM_im_1 <= twoLocationReg_0_MEM_im_1_next;
        twoLocationReg_0_dout_re_reg <= twoLocationReg_0_dout_re_reg_next;
        twoLocationReg_0_dout_im_reg <= twoLocationReg_0_dout_im_reg_next;
      END IF;
    END IF;
  END PROCESS twoLocationReg_0_process;

  twoLocationReg_0_output : PROCESS (rd_12_Addr, twoLocationReg_0_MEM_im_0, twoLocationReg_0_MEM_im_1,
       twoLocationReg_0_MEM_re_0, twoLocationReg_0_MEM_re_1,
       twoLocationReg_0_dout_im_reg, twoLocationReg_0_dout_re_reg, wrAddr,
       wrData_im, wrData_re, wrEnb)
  BEGIN
    twoLocationReg_0_MEM_re_0_next <= twoLocationReg_0_MEM_re_0;
    twoLocationReg_0_MEM_im_0_next <= twoLocationReg_0_MEM_im_0;
    twoLocationReg_0_MEM_re_1_next <= twoLocationReg_0_MEM_re_1;
    twoLocationReg_0_MEM_im_1_next <= twoLocationReg_0_MEM_im_1;
    IF rd_12_Addr = '1' THEN 
      twoLocationReg_0_dout_re_reg_next <= twoLocationReg_0_MEM_re_1;
      twoLocationReg_0_dout_im_reg_next <= twoLocationReg_0_MEM_im_1;
    ELSE 
      twoLocationReg_0_dout_re_reg_next <= twoLocationReg_0_MEM_re_0;
      twoLocationReg_0_dout_im_reg_next <= twoLocationReg_0_MEM_im_0;
    END IF;
    IF wrEnb = '1' THEN 
      IF wrAddr = '1' THEN 
        twoLocationReg_0_MEM_re_1_next <= wrData_re;
        twoLocationReg_0_MEM_im_1_next <= wrData_im;
      ELSE 
        twoLocationReg_0_MEM_re_0_next <= wrData_re;
        twoLocationReg_0_MEM_im_0_next <= wrData_im;
      END IF;
    END IF;
    x_re <= twoLocationReg_0_dout_re_reg;
    x_im <= twoLocationReg_0_dout_im_reg;
  END PROCESS twoLocationReg_0_output;


  intdelay_9_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_re_dly <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        x_re_dly <= x_re;
      END IF;
    END IF;
  END PROCESS intdelay_9_process;


  -- Radix22ButterflyG2
  Radix22ButterflyG2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= '0';
        Radix22ButterflyG2_procEnb_dly1 <= '0';
        Radix22ButterflyG2_procEnb_dly2 <= '0';
        Radix22ButterflyG2_btf1_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf1_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf2_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf2_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_din_re_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_din_im_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_din_vld_dly <= '0';
        Radix22ButterflyG2_x_re_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_x_im_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_x_vld_dly <= '0';
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_multiply_J_dly1 <= '0';
      ELSIF enb = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= Radix22ButterflyG2_procEnb_dly_next;
        Radix22ButterflyG2_procEnb_dly1 <= Radix22ButterflyG2_procEnb_dly1_next;
        Radix22ButterflyG2_procEnb_dly2 <= Radix22ButterflyG2_procEnb_dly2_next;
        Radix22ButterflyG2_btf1_re_reg <= Radix22ButterflyG2_btf1_re_reg_next;
        Radix22ButterflyG2_btf1_im_reg <= Radix22ButterflyG2_btf1_im_reg_next;
        Radix22ButterflyG2_btf2_re_reg <= Radix22ButterflyG2_btf2_re_reg_next;
        Radix22ButterflyG2_btf2_im_reg <= Radix22ButterflyG2_btf2_im_reg_next;
        Radix22ButterflyG2_din_re_dly <= Radix22ButterflyG2_din_re_dly_next;
        Radix22ButterflyG2_din_im_dly <= Radix22ButterflyG2_din_im_dly_next;
        Radix22ButterflyG2_din_vld_dly <= Radix22ButterflyG2_din_vld_dly_next;
        Radix22ButterflyG2_x_re_dly <= Radix22ButterflyG2_x_re_dly_next;
        Radix22ButterflyG2_x_im_dly <= Radix22ButterflyG2_x_im_dly_next;
        Radix22ButterflyG2_x_vld_dly <= Radix22ButterflyG2_x_vld_dly_next;
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= Radix22ButterflyG2_dinXTwdl_re_dly1_next;
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= Radix22ButterflyG2_dinXTwdl_im_dly1_next;
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= Radix22ButterflyG2_dinXTwdl_re_dly2_next;
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= Radix22ButterflyG2_dinXTwdl_im_dly2_next;
        Radix22ButterflyG2_multiply_J_dly1 <= Radix22ButterflyG2_multiply_J_dly1_next;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG2_process;

  Radix22ButterflyG2_output : PROCESS (Radix22ButterflyG2_btf1_im_reg, Radix22ButterflyG2_btf1_re_reg,
       Radix22ButterflyG2_btf2_im_reg, Radix22ButterflyG2_btf2_re_reg,
       Radix22ButterflyG2_dinXTwdl_im_dly1, Radix22ButterflyG2_dinXTwdl_im_dly2,
       Radix22ButterflyG2_dinXTwdl_re_dly1, Radix22ButterflyG2_dinXTwdl_re_dly2,
       Radix22ButterflyG2_din_im_dly, Radix22ButterflyG2_din_re_dly,
       Radix22ButterflyG2_din_vld_dly, Radix22ButterflyG2_multiply_J_dly1,
       Radix22ButterflyG2_procEnb_dly, Radix22ButterflyG2_procEnb_dly1,
       Radix22ButterflyG2_procEnb_dly2, Radix22ButterflyG2_x_im_dly,
       Radix22ButterflyG2_x_re_dly, Radix22ButterflyG2_x_vld_dly, btfin_im,
       btfin_re, btfin_vld, dinVld, dout_11_1_im, dout_11_1_re, multiply_12_J,
       x_im_dly, x_re_dly, x_vld_dly)
    VARIABLE sra_temp : signed(16 DOWNTO 0);
    VARIABLE sra_temp_0 : signed(16 DOWNTO 0);
    VARIABLE sra_temp_1 : signed(16 DOWNTO 0);
    VARIABLE sra_temp_2 : signed(16 DOWNTO 0);
  BEGIN
    Radix22ButterflyG2_x_re_dly_next <= x_re_dly;
    Radix22ButterflyG2_x_im_dly_next <= x_im_dly;
    Radix22ButterflyG2_x_vld_dly_next <= x_vld_dly;
    Radix22ButterflyG2_din_re_dly_next <= dout_11_1_re;
    Radix22ButterflyG2_din_im_dly_next <= dout_11_1_im;
    Radix22ButterflyG2_din_vld_dly_next <= dinVld;
    Radix22ButterflyG2_procEnb_dly2_next <= Radix22ButterflyG2_procEnb_dly1;
    Radix22ButterflyG2_procEnb_dly1_next <= Radix22ButterflyG2_procEnb_dly;
    Radix22ButterflyG2_procEnb_dly_next <= btfin_vld;
    IF Radix22ButterflyG2_multiply_J_dly1 = '1' THEN 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
    ELSE 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
    END IF;
    Radix22ButterflyG2_dinXTwdl_re_dly2_next <= Radix22ButterflyG2_dinXTwdl_re_dly1;
    Radix22ButterflyG2_dinXTwdl_im_dly2_next <= Radix22ButterflyG2_dinXTwdl_im_dly1;
    Radix22ButterflyG2_dinXTwdl_re_dly1_next <= btfin_re;
    Radix22ButterflyG2_dinXTwdl_im_dly1_next <= btfin_im;
    Radix22ButterflyG2_multiply_J_dly1_next <= multiply_12_J;
    xf_re <= Radix22ButterflyG2_x_re_dly;
    xf_im <= Radix22ButterflyG2_x_im_dly;
    xf_vld <= Radix22ButterflyG2_x_vld_dly;
    dinf_re <= Radix22ButterflyG2_din_re_dly;
    dinf_im <= Radix22ButterflyG2_din_im_dly;
    dinf_vld <= Radix22ButterflyG2_din_vld_dly;
    sra_temp := SHIFT_RIGHT(Radix22ButterflyG2_btf1_re_reg, 1);
    btf1_re <= sra_temp(15 DOWNTO 0);
    sra_temp_0 := SHIFT_RIGHT(Radix22ButterflyG2_btf1_im_reg, 1);
    btf1_im <= sra_temp_0(15 DOWNTO 0);
    sra_temp_1 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_re_reg, 1);
    btf2_re <= sra_temp_1(15 DOWNTO 0);
    sra_temp_2 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_im_reg, 1);
    btf2_im <= sra_temp_2(15 DOWNTO 0);
    btfout_vld <= Radix22ButterflyG2_procEnb_dly2;
  END PROCESS Radix22ButterflyG2_output;


  dinXTwdl_12_1_vld <= btfin_vld;

END rtl;


-- End of RADIX22FFT_SDF2_12_block.vhd --

-- Start of RADIX22FFT_SDF2_12_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF2_12_block1.vhd
-- Created: 2025-03-18 15:26:31
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF2_12_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_SDF2_12
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF2_12_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_11_1_re                      :   IN    signed(31 DOWNTO 0);  -- sfix32
        dout_11_1_im                      :   IN    signed(31 DOWNTO 0);  -- sfix32
        dout_11_1_vld                     :   IN    std_logic;
        rd_12_Addr                        :   IN    unsigned(10 DOWNTO 0);  -- ufix11
        rd_12_Enb                         :   IN    std_logic;
        proc_12_enb                       :   IN    std_logic;
        multiply_12_J                     :   IN    std_logic;
        dout_12_1_im                      :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_12_1_vld                     :   OUT   std_logic;
        dinXTwdl_12_1_vld                 :   OUT   std_logic
        );
END RADIX22FFT_SDF2_12_block1;


ARCHITECTURE rtl OF RADIX22FFT_SDF2_12_block1 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SDFCommutator12_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_11_1_vld                   :   IN    std_logic;
          xf_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
          xf_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
          xf_vld                          :   IN    std_logic;
          dinf_re                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          dinf_im                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          dinf_vld                        :   IN    std_logic;
          btf1_re                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf1_im                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf2_re                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf2_im                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btfout_vld                      :   IN    std_logic;
          wrData_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
          wrData_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
          wrAddr                          :   OUT   unsigned(10 DOWNTO 0);  -- ufix11
          wrEnb                           :   OUT   std_logic;
          dout_12_1_im                    :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_12_1_vld                   :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  FOR ALL : SDFCommutator12_block1
    USE ENTITY work.SDFCommutator12_block1(rtl);

  -- Signals
  SIGNAL btfin_vld                        : std_logic;
  SIGNAL saveEnb                          : std_logic;
  SIGNAL dinVld                           : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL x_vld_dly                        : std_logic;
  SIGNAL wrData_im                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrAddr                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL wrEnb                            : std_logic;
  SIGNAL x_im                             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL x_im_dly                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrData_re                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL x_re                             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL x_re_dly                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_procEnb_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1  : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2  : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf1_im_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf2_re_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf2_im_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_din_re_dly    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_din_im_dly    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_din_vld_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_x_im_dly      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_x_vld_dly     : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_multiply_J_dly1 : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2_next : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg_next : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf1_im_reg_next : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf2_re_reg_next : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf2_im_reg_next : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_din_re_dly_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_din_im_dly_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_din_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_x_im_dly_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_x_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_multiply_J_dly1_next : std_logic;
  SIGNAL xf_re                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xf_im                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinf_re                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinf_im                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinf_vld                         : std_logic;
  SIGNAL btf1_re                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf1_im                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf2_re                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf2_im                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btfout_vld                       : std_logic;

BEGIN
  u_dataMEM_im_0_12_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 11,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_im,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_12_Addr,
              dout => x_im
              );

  u_dataMEM_re_0_12_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 11,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_re,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_12_Addr,
              dout => x_re
              );

  u_SDFCOMMUTATOR_12 : SDFCommutator12_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_11_1_vld => dout_11_1_vld,
              xf_re => xf_re,  -- sfix32
              xf_im => xf_im,  -- sfix32
              xf_vld => xf_vld,
              dinf_re => dinf_re,  -- sfix32
              dinf_im => dinf_im,  -- sfix32
              dinf_vld => dinf_vld,
              btf1_re => btf1_re,  -- sfix32
              btf1_im => btf1_im,  -- sfix32
              btf2_re => btf2_re,  -- sfix32
              btf2_im => btf2_im,  -- sfix32
              btfout_vld => btfout_vld,
              wrData_re => wrData_re,  -- sfix32
              wrData_im => wrData_im,  -- sfix32
              wrAddr => wrAddr,  -- ufix11
              wrEnb => wrEnb,
              dout_12_1_im => dout_12_1_im,  -- sfix32
              dout_12_1_vld => dout_12_1_vld
              );

  btfin_vld <= dout_11_1_vld AND proc_12_enb;

  saveEnb <=  NOT btfin_vld;

  dinVld <= dout_11_1_vld AND saveEnb;

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_12_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld_dly <= '0';
      ELSIF enb = '1' THEN
        x_vld_dly <= x_vld;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_im_dly <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        x_im_dly <= x_im;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_re_dly <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        x_re_dly <= x_re;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Radix22ButterflyG2
  Radix22ButterflyG2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= '0';
        Radix22ButterflyG2_procEnb_dly1 <= '0';
        Radix22ButterflyG2_procEnb_dly2 <= '0';
        Radix22ButterflyG2_btf1_re_reg <= to_signed(0, 33);
        Radix22ButterflyG2_btf1_im_reg <= to_signed(0, 33);
        Radix22ButterflyG2_btf2_re_reg <= to_signed(0, 33);
        Radix22ButterflyG2_btf2_im_reg <= to_signed(0, 33);
        Radix22ButterflyG2_din_re_dly <= to_signed(0, 32);
        Radix22ButterflyG2_din_im_dly <= to_signed(0, 32);
        Radix22ButterflyG2_din_vld_dly <= '0';
        Radix22ButterflyG2_x_re_dly <= to_signed(0, 32);
        Radix22ButterflyG2_x_im_dly <= to_signed(0, 32);
        Radix22ButterflyG2_x_vld_dly <= '0';
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= to_signed(0, 32);
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= to_signed(0, 32);
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= to_signed(0, 32);
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= to_signed(0, 32);
        Radix22ButterflyG2_multiply_J_dly1 <= '0';
      ELSIF enb = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= Radix22ButterflyG2_procEnb_dly_next;
        Radix22ButterflyG2_procEnb_dly1 <= Radix22ButterflyG2_procEnb_dly1_next;
        Radix22ButterflyG2_procEnb_dly2 <= Radix22ButterflyG2_procEnb_dly2_next;
        Radix22ButterflyG2_btf1_re_reg <= Radix22ButterflyG2_btf1_re_reg_next;
        Radix22ButterflyG2_btf1_im_reg <= Radix22ButterflyG2_btf1_im_reg_next;
        Radix22ButterflyG2_btf2_re_reg <= Radix22ButterflyG2_btf2_re_reg_next;
        Radix22ButterflyG2_btf2_im_reg <= Radix22ButterflyG2_btf2_im_reg_next;
        Radix22ButterflyG2_din_re_dly <= Radix22ButterflyG2_din_re_dly_next;
        Radix22ButterflyG2_din_im_dly <= Radix22ButterflyG2_din_im_dly_next;
        Radix22ButterflyG2_din_vld_dly <= Radix22ButterflyG2_din_vld_dly_next;
        Radix22ButterflyG2_x_re_dly <= Radix22ButterflyG2_x_re_dly_next;
        Radix22ButterflyG2_x_im_dly <= Radix22ButterflyG2_x_im_dly_next;
        Radix22ButterflyG2_x_vld_dly <= Radix22ButterflyG2_x_vld_dly_next;
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= Radix22ButterflyG2_dinXTwdl_re_dly1_next;
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= Radix22ButterflyG2_dinXTwdl_im_dly1_next;
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= Radix22ButterflyG2_dinXTwdl_re_dly2_next;
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= Radix22ButterflyG2_dinXTwdl_im_dly2_next;
        Radix22ButterflyG2_multiply_J_dly1 <= Radix22ButterflyG2_multiply_J_dly1_next;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG2_process;

  Radix22ButterflyG2_output : PROCESS (Radix22ButterflyG2_btf1_im_reg, Radix22ButterflyG2_btf1_re_reg,
       Radix22ButterflyG2_btf2_im_reg, Radix22ButterflyG2_btf2_re_reg,
       Radix22ButterflyG2_dinXTwdl_im_dly1, Radix22ButterflyG2_dinXTwdl_im_dly2,
       Radix22ButterflyG2_dinXTwdl_re_dly1, Radix22ButterflyG2_dinXTwdl_re_dly2,
       Radix22ButterflyG2_din_im_dly, Radix22ButterflyG2_din_re_dly,
       Radix22ButterflyG2_din_vld_dly, Radix22ButterflyG2_multiply_J_dly1,
       Radix22ButterflyG2_procEnb_dly, Radix22ButterflyG2_procEnb_dly1,
       Radix22ButterflyG2_procEnb_dly2, Radix22ButterflyG2_x_im_dly,
       Radix22ButterflyG2_x_re_dly, Radix22ButterflyG2_x_vld_dly, btfin_vld,
       dinVld, dout_11_1_im, dout_11_1_re, multiply_12_J, x_im_dly, x_re_dly,
       x_vld_dly)
    VARIABLE sra_temp : signed(32 DOWNTO 0);
    VARIABLE sra_temp_0 : signed(32 DOWNTO 0);
    VARIABLE sra_temp_1 : signed(32 DOWNTO 0);
    VARIABLE sra_temp_2 : signed(32 DOWNTO 0);
  BEGIN
    Radix22ButterflyG2_x_re_dly_next <= x_re_dly;
    Radix22ButterflyG2_x_im_dly_next <= x_im_dly;
    Radix22ButterflyG2_x_vld_dly_next <= x_vld_dly;
    Radix22ButterflyG2_din_re_dly_next <= dout_11_1_re;
    Radix22ButterflyG2_din_im_dly_next <= dout_11_1_im;
    Radix22ButterflyG2_din_vld_dly_next <= dinVld;
    Radix22ButterflyG2_procEnb_dly2_next <= Radix22ButterflyG2_procEnb_dly1;
    Radix22ButterflyG2_procEnb_dly1_next <= Radix22ButterflyG2_procEnb_dly;
    Radix22ButterflyG2_procEnb_dly_next <= btfin_vld;
    IF Radix22ButterflyG2_multiply_J_dly1 = '1' THEN 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 33) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 33);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 33) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 33);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 33) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 33);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 33) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 33);
    ELSE 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 33) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 33);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 33) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 33);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 33) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 33);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 33) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 33);
    END IF;
    Radix22ButterflyG2_dinXTwdl_re_dly2_next <= Radix22ButterflyG2_dinXTwdl_re_dly1;
    Radix22ButterflyG2_dinXTwdl_im_dly2_next <= Radix22ButterflyG2_dinXTwdl_im_dly1;
    Radix22ButterflyG2_dinXTwdl_re_dly1_next <= dout_11_1_re;
    Radix22ButterflyG2_dinXTwdl_im_dly1_next <= dout_11_1_im;
    Radix22ButterflyG2_multiply_J_dly1_next <= multiply_12_J;
    xf_re <= Radix22ButterflyG2_x_re_dly;
    xf_im <= Radix22ButterflyG2_x_im_dly;
    xf_vld <= Radix22ButterflyG2_x_vld_dly;
    dinf_re <= Radix22ButterflyG2_din_re_dly;
    dinf_im <= Radix22ButterflyG2_din_im_dly;
    dinf_vld <= Radix22ButterflyG2_din_vld_dly;
    sra_temp := SHIFT_RIGHT(Radix22ButterflyG2_btf1_re_reg, 1);
    btf1_re <= sra_temp(31 DOWNTO 0);
    sra_temp_0 := SHIFT_RIGHT(Radix22ButterflyG2_btf1_im_reg, 1);
    btf1_im <= sra_temp_0(31 DOWNTO 0);
    sra_temp_1 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_re_reg, 1);
    btf2_re <= sra_temp_1(31 DOWNTO 0);
    sra_temp_2 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_im_reg, 1);
    btf2_im <= sra_temp_2(31 DOWNTO 0);
    btfout_vld <= Radix22ButterflyG2_procEnb_dly2;
  END PROCESS Radix22ButterflyG2_output;


  dinXTwdl_12_1_vld <= btfin_vld;

END rtl;


-- End of RADIX22FFT_SDF2_12_block1.vhd --

-- Start of RADIX22FFT_SDF2_2.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF2_2.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF2_2
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF2_2
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF2_2 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_1_1_re                       :   IN    signed(15 DOWNTO 0);  -- sfix16
        dout_1_1_im                       :   IN    signed(15 DOWNTO 0);  -- sfix16
        dout_1_1_vld                      :   IN    std_logic;
        rd_2_Addr                         :   IN    unsigned(9 DOWNTO 0);  -- ufix10
        rd_2_Enb                          :   IN    std_logic;
        proc_2_enb                        :   IN    std_logic;
        multiply_2_J                      :   IN    std_logic;
        dout_2_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_2_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_2_1_vld                      :   OUT   std_logic;
        dinXTwdl_2_1_vld                  :   OUT   std_logic
        );
END RADIX22FFT_SDF2_2;


ARCHITECTURE rtl OF RADIX22FFT_SDF2_2 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SDFCommutator2
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_1_1_vld                    :   IN    std_logic;
          xf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_vld                          :   IN    std_logic;
          dinf_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinf_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinf_vld                        :   IN    std_logic;
          btf1_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf1_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btfout_vld                      :   IN    std_logic;
          wrData_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrData_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrAddr                          :   OUT   unsigned(9 DOWNTO 0);  -- ufix10
          wrEnb                           :   OUT   std_logic;
          dout_2_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_2_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_2_1_vld                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  FOR ALL : SDFCommutator2
    USE ENTITY work.SDFCommutator2(rtl);

  -- Signals
  SIGNAL btfin_vld                        : std_logic;
  SIGNAL saveEnb                          : std_logic;
  SIGNAL dinVld                           : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL x_vld_dly                        : std_logic;
  SIGNAL wrData_im                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrAddr                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL wrEnb                            : std_logic;
  SIGNAL x_im                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_im_dly                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrData_re                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re_dly                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_procEnb_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1  : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2  : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf1_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_din_re_dly    : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_im_dly    : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_vld_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_im_dly      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_vld_dly     : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_multiply_J_dly1 : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2_next : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf1_im_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_re_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_im_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_din_re_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_im_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_im_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_multiply_J_dly1_next : std_logic;
  SIGNAL xf_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinf_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinf_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinf_vld                         : std_logic;
  SIGNAL btf1_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf1_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btfout_vld                       : std_logic;

BEGIN
  u_dataMEM_im_0_2_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 10,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_im,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_2_Addr,
              dout => x_im
              );

  u_dataMEM_re_0_2_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 10,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_re,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_2_Addr,
              dout => x_re
              );

  u_SDFCOMMUTATOR_2 : SDFCommutator2
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_1_1_vld => dout_1_1_vld,
              xf_re => xf_re,  -- sfix16
              xf_im => xf_im,  -- sfix16
              xf_vld => xf_vld,
              dinf_re => dinf_re,  -- sfix16
              dinf_im => dinf_im,  -- sfix16
              dinf_vld => dinf_vld,
              btf1_re => btf1_re,  -- sfix16
              btf1_im => btf1_im,  -- sfix16
              btf2_re => btf2_re,  -- sfix16
              btf2_im => btf2_im,  -- sfix16
              btfout_vld => btfout_vld,
              wrData_re => wrData_re,  -- sfix16
              wrData_im => wrData_im,  -- sfix16
              wrAddr => wrAddr,  -- ufix10
              wrEnb => wrEnb,
              dout_2_1_re => dout_2_1_re,  -- sfix16
              dout_2_1_im => dout_2_1_im,  -- sfix16
              dout_2_1_vld => dout_2_1_vld
              );

  btfin_vld <= dout_1_1_vld AND proc_2_enb;

  saveEnb <=  NOT btfin_vld;

  dinVld <= dout_1_1_vld AND saveEnb;

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_2_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld_dly <= '0';
      ELSIF enb = '1' THEN
        x_vld_dly <= x_vld;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_im_dly <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        x_im_dly <= x_im;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_re_dly <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        x_re_dly <= x_re;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Radix22ButterflyG2
  Radix22ButterflyG2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= '0';
        Radix22ButterflyG2_procEnb_dly1 <= '0';
        Radix22ButterflyG2_procEnb_dly2 <= '0';
        Radix22ButterflyG2_btf1_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf1_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf2_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf2_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_din_re_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_din_im_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_din_vld_dly <= '0';
        Radix22ButterflyG2_x_re_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_x_im_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_x_vld_dly <= '0';
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_multiply_J_dly1 <= '0';
      ELSIF enb = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= Radix22ButterflyG2_procEnb_dly_next;
        Radix22ButterflyG2_procEnb_dly1 <= Radix22ButterflyG2_procEnb_dly1_next;
        Radix22ButterflyG2_procEnb_dly2 <= Radix22ButterflyG2_procEnb_dly2_next;
        Radix22ButterflyG2_btf1_re_reg <= Radix22ButterflyG2_btf1_re_reg_next;
        Radix22ButterflyG2_btf1_im_reg <= Radix22ButterflyG2_btf1_im_reg_next;
        Radix22ButterflyG2_btf2_re_reg <= Radix22ButterflyG2_btf2_re_reg_next;
        Radix22ButterflyG2_btf2_im_reg <= Radix22ButterflyG2_btf2_im_reg_next;
        Radix22ButterflyG2_din_re_dly <= Radix22ButterflyG2_din_re_dly_next;
        Radix22ButterflyG2_din_im_dly <= Radix22ButterflyG2_din_im_dly_next;
        Radix22ButterflyG2_din_vld_dly <= Radix22ButterflyG2_din_vld_dly_next;
        Radix22ButterflyG2_x_re_dly <= Radix22ButterflyG2_x_re_dly_next;
        Radix22ButterflyG2_x_im_dly <= Radix22ButterflyG2_x_im_dly_next;
        Radix22ButterflyG2_x_vld_dly <= Radix22ButterflyG2_x_vld_dly_next;
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= Radix22ButterflyG2_dinXTwdl_re_dly1_next;
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= Radix22ButterflyG2_dinXTwdl_im_dly1_next;
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= Radix22ButterflyG2_dinXTwdl_re_dly2_next;
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= Radix22ButterflyG2_dinXTwdl_im_dly2_next;
        Radix22ButterflyG2_multiply_J_dly1 <= Radix22ButterflyG2_multiply_J_dly1_next;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG2_process;

  Radix22ButterflyG2_output : PROCESS (Radix22ButterflyG2_btf1_im_reg, Radix22ButterflyG2_btf1_re_reg,
       Radix22ButterflyG2_btf2_im_reg, Radix22ButterflyG2_btf2_re_reg,
       Radix22ButterflyG2_dinXTwdl_im_dly1, Radix22ButterflyG2_dinXTwdl_im_dly2,
       Radix22ButterflyG2_dinXTwdl_re_dly1, Radix22ButterflyG2_dinXTwdl_re_dly2,
       Radix22ButterflyG2_din_im_dly, Radix22ButterflyG2_din_re_dly,
       Radix22ButterflyG2_din_vld_dly, Radix22ButterflyG2_multiply_J_dly1,
       Radix22ButterflyG2_procEnb_dly, Radix22ButterflyG2_procEnb_dly1,
       Radix22ButterflyG2_procEnb_dly2, Radix22ButterflyG2_x_im_dly,
       Radix22ButterflyG2_x_re_dly, Radix22ButterflyG2_x_vld_dly, btfin_vld,
       dinVld, dout_1_1_im, dout_1_1_re, multiply_2_J, x_im_dly, x_re_dly,
       x_vld_dly)
    VARIABLE sra_temp : signed(16 DOWNTO 0);
    VARIABLE sra_temp_0 : signed(16 DOWNTO 0);
    VARIABLE sra_temp_1 : signed(16 DOWNTO 0);
    VARIABLE sra_temp_2 : signed(16 DOWNTO 0);
  BEGIN
    Radix22ButterflyG2_x_re_dly_next <= x_re_dly;
    Radix22ButterflyG2_x_im_dly_next <= x_im_dly;
    Radix22ButterflyG2_x_vld_dly_next <= x_vld_dly;
    Radix22ButterflyG2_din_re_dly_next <= dout_1_1_re;
    Radix22ButterflyG2_din_im_dly_next <= dout_1_1_im;
    Radix22ButterflyG2_din_vld_dly_next <= dinVld;
    Radix22ButterflyG2_procEnb_dly2_next <= Radix22ButterflyG2_procEnb_dly1;
    Radix22ButterflyG2_procEnb_dly1_next <= Radix22ButterflyG2_procEnb_dly;
    Radix22ButterflyG2_procEnb_dly_next <= btfin_vld;
    IF Radix22ButterflyG2_multiply_J_dly1 = '1' THEN 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
    ELSE 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
    END IF;
    Radix22ButterflyG2_dinXTwdl_re_dly2_next <= Radix22ButterflyG2_dinXTwdl_re_dly1;
    Radix22ButterflyG2_dinXTwdl_im_dly2_next <= Radix22ButterflyG2_dinXTwdl_im_dly1;
    Radix22ButterflyG2_dinXTwdl_re_dly1_next <= dout_1_1_re;
    Radix22ButterflyG2_dinXTwdl_im_dly1_next <= dout_1_1_im;
    Radix22ButterflyG2_multiply_J_dly1_next <= multiply_2_J;
    xf_re <= Radix22ButterflyG2_x_re_dly;
    xf_im <= Radix22ButterflyG2_x_im_dly;
    xf_vld <= Radix22ButterflyG2_x_vld_dly;
    dinf_re <= Radix22ButterflyG2_din_re_dly;
    dinf_im <= Radix22ButterflyG2_din_im_dly;
    dinf_vld <= Radix22ButterflyG2_din_vld_dly;
    sra_temp := SHIFT_RIGHT(Radix22ButterflyG2_btf1_re_reg, 1);
    btf1_re <= sra_temp(15 DOWNTO 0);
    sra_temp_0 := SHIFT_RIGHT(Radix22ButterflyG2_btf1_im_reg, 1);
    btf1_im <= sra_temp_0(15 DOWNTO 0);
    sra_temp_1 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_re_reg, 1);
    btf2_re <= sra_temp_1(15 DOWNTO 0);
    sra_temp_2 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_im_reg, 1);
    btf2_im <= sra_temp_2(15 DOWNTO 0);
    btfout_vld <= Radix22ButterflyG2_procEnb_dly2;
  END PROCESS Radix22ButterflyG2_output;


  dinXTwdl_2_1_vld <= btfin_vld;

END rtl;


-- End of RADIX22FFT_SDF2_2.vhd --

-- Start of RADIX22FFT_SDF2_2_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF2_2_block.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF2_2_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_SDF2_2
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF2_2_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_1_1_re                       :   IN    signed(15 DOWNTO 0);  -- sfix16
        dout_1_1_im                       :   IN    signed(15 DOWNTO 0);  -- sfix16
        dout_1_1_vld                      :   IN    std_logic;
        rd_2_Addr                         :   IN    unsigned(9 DOWNTO 0);  -- ufix10
        rd_2_Enb                          :   IN    std_logic;
        proc_2_enb                        :   IN    std_logic;
        multiply_2_J                      :   IN    std_logic;
        dout_2_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_2_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_2_1_vld                      :   OUT   std_logic;
        dinXTwdl_2_1_vld                  :   OUT   std_logic
        );
END RADIX22FFT_SDF2_2_block;


ARCHITECTURE rtl OF RADIX22FFT_SDF2_2_block IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SDFCommutator2_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_1_1_vld                    :   IN    std_logic;
          xf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_vld                          :   IN    std_logic;
          dinf_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinf_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinf_vld                        :   IN    std_logic;
          btf1_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf1_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btfout_vld                      :   IN    std_logic;
          wrData_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrData_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrAddr                          :   OUT   unsigned(9 DOWNTO 0);  -- ufix10
          wrEnb                           :   OUT   std_logic;
          dout_2_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_2_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_2_1_vld                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  FOR ALL : SDFCommutator2_block
    USE ENTITY work.SDFCommutator2_block(rtl);

  -- Signals
  SIGNAL btfin_vld                        : std_logic;
  SIGNAL saveEnb                          : std_logic;
  SIGNAL dinVld                           : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL x_vld_dly                        : std_logic;
  SIGNAL wrData_im                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrAddr                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL wrEnb                            : std_logic;
  SIGNAL x_im                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_im_dly                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrData_re                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re_dly                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_procEnb_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1  : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2  : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf1_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_din_re_dly    : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_im_dly    : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_vld_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_im_dly      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_vld_dly     : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_multiply_J_dly1 : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2_next : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf1_im_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_re_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_im_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_din_re_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_im_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_im_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_multiply_J_dly1_next : std_logic;
  SIGNAL xf_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinf_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinf_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinf_vld                         : std_logic;
  SIGNAL btf1_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf1_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btfout_vld                       : std_logic;

BEGIN
  u_dataMEM_im_0_2_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 10,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_im,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_2_Addr,
              dout => x_im
              );

  u_dataMEM_re_0_2_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 10,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_re,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_2_Addr,
              dout => x_re
              );

  u_SDFCOMMUTATOR_2 : SDFCommutator2_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_1_1_vld => dout_1_1_vld,
              xf_re => xf_re,  -- sfix16
              xf_im => xf_im,  -- sfix16
              xf_vld => xf_vld,
              dinf_re => dinf_re,  -- sfix16
              dinf_im => dinf_im,  -- sfix16
              dinf_vld => dinf_vld,
              btf1_re => btf1_re,  -- sfix16
              btf1_im => btf1_im,  -- sfix16
              btf2_re => btf2_re,  -- sfix16
              btf2_im => btf2_im,  -- sfix16
              btfout_vld => btfout_vld,
              wrData_re => wrData_re,  -- sfix16
              wrData_im => wrData_im,  -- sfix16
              wrAddr => wrAddr,  -- ufix10
              wrEnb => wrEnb,
              dout_2_1_re => dout_2_1_re,  -- sfix16
              dout_2_1_im => dout_2_1_im,  -- sfix16
              dout_2_1_vld => dout_2_1_vld
              );

  btfin_vld <= dout_1_1_vld AND proc_2_enb;

  saveEnb <=  NOT btfin_vld;

  dinVld <= dout_1_1_vld AND saveEnb;

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_2_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld_dly <= '0';
      ELSIF enb = '1' THEN
        x_vld_dly <= x_vld;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_im_dly <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        x_im_dly <= x_im;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_re_dly <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        x_re_dly <= x_re;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Radix22ButterflyG2
  Radix22ButterflyG2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= '0';
        Radix22ButterflyG2_procEnb_dly1 <= '0';
        Radix22ButterflyG2_procEnb_dly2 <= '0';
        Radix22ButterflyG2_btf1_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf1_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf2_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf2_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_din_re_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_din_im_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_din_vld_dly <= '0';
        Radix22ButterflyG2_x_re_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_x_im_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_x_vld_dly <= '0';
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_multiply_J_dly1 <= '0';
      ELSIF enb = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= Radix22ButterflyG2_procEnb_dly_next;
        Radix22ButterflyG2_procEnb_dly1 <= Radix22ButterflyG2_procEnb_dly1_next;
        Radix22ButterflyG2_procEnb_dly2 <= Radix22ButterflyG2_procEnb_dly2_next;
        Radix22ButterflyG2_btf1_re_reg <= Radix22ButterflyG2_btf1_re_reg_next;
        Radix22ButterflyG2_btf1_im_reg <= Radix22ButterflyG2_btf1_im_reg_next;
        Radix22ButterflyG2_btf2_re_reg <= Radix22ButterflyG2_btf2_re_reg_next;
        Radix22ButterflyG2_btf2_im_reg <= Radix22ButterflyG2_btf2_im_reg_next;
        Radix22ButterflyG2_din_re_dly <= Radix22ButterflyG2_din_re_dly_next;
        Radix22ButterflyG2_din_im_dly <= Radix22ButterflyG2_din_im_dly_next;
        Radix22ButterflyG2_din_vld_dly <= Radix22ButterflyG2_din_vld_dly_next;
        Radix22ButterflyG2_x_re_dly <= Radix22ButterflyG2_x_re_dly_next;
        Radix22ButterflyG2_x_im_dly <= Radix22ButterflyG2_x_im_dly_next;
        Radix22ButterflyG2_x_vld_dly <= Radix22ButterflyG2_x_vld_dly_next;
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= Radix22ButterflyG2_dinXTwdl_re_dly1_next;
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= Radix22ButterflyG2_dinXTwdl_im_dly1_next;
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= Radix22ButterflyG2_dinXTwdl_re_dly2_next;
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= Radix22ButterflyG2_dinXTwdl_im_dly2_next;
        Radix22ButterflyG2_multiply_J_dly1 <= Radix22ButterflyG2_multiply_J_dly1_next;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG2_process;

  Radix22ButterflyG2_output : PROCESS (Radix22ButterflyG2_btf1_im_reg, Radix22ButterflyG2_btf1_re_reg,
       Radix22ButterflyG2_btf2_im_reg, Radix22ButterflyG2_btf2_re_reg,
       Radix22ButterflyG2_dinXTwdl_im_dly1, Radix22ButterflyG2_dinXTwdl_im_dly2,
       Radix22ButterflyG2_dinXTwdl_re_dly1, Radix22ButterflyG2_dinXTwdl_re_dly2,
       Radix22ButterflyG2_din_im_dly, Radix22ButterflyG2_din_re_dly,
       Radix22ButterflyG2_din_vld_dly, Radix22ButterflyG2_multiply_J_dly1,
       Radix22ButterflyG2_procEnb_dly, Radix22ButterflyG2_procEnb_dly1,
       Radix22ButterflyG2_procEnb_dly2, Radix22ButterflyG2_x_im_dly,
       Radix22ButterflyG2_x_re_dly, Radix22ButterflyG2_x_vld_dly, btfin_vld,
       dinVld, dout_1_1_im, dout_1_1_re, multiply_2_J, x_im_dly, x_re_dly,
       x_vld_dly)
    VARIABLE sra_temp : signed(16 DOWNTO 0);
    VARIABLE sra_temp_0 : signed(16 DOWNTO 0);
    VARIABLE sra_temp_1 : signed(16 DOWNTO 0);
    VARIABLE sra_temp_2 : signed(16 DOWNTO 0);
  BEGIN
    Radix22ButterflyG2_x_re_dly_next <= x_re_dly;
    Radix22ButterflyG2_x_im_dly_next <= x_im_dly;
    Radix22ButterflyG2_x_vld_dly_next <= x_vld_dly;
    Radix22ButterflyG2_din_re_dly_next <= dout_1_1_re;
    Radix22ButterflyG2_din_im_dly_next <= dout_1_1_im;
    Radix22ButterflyG2_din_vld_dly_next <= dinVld;
    Radix22ButterflyG2_procEnb_dly2_next <= Radix22ButterflyG2_procEnb_dly1;
    Radix22ButterflyG2_procEnb_dly1_next <= Radix22ButterflyG2_procEnb_dly;
    Radix22ButterflyG2_procEnb_dly_next <= btfin_vld;
    IF Radix22ButterflyG2_multiply_J_dly1 = '1' THEN 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
    ELSE 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
    END IF;
    Radix22ButterflyG2_dinXTwdl_re_dly2_next <= Radix22ButterflyG2_dinXTwdl_re_dly1;
    Radix22ButterflyG2_dinXTwdl_im_dly2_next <= Radix22ButterflyG2_dinXTwdl_im_dly1;
    Radix22ButterflyG2_dinXTwdl_re_dly1_next <= dout_1_1_re;
    Radix22ButterflyG2_dinXTwdl_im_dly1_next <= dout_1_1_im;
    Radix22ButterflyG2_multiply_J_dly1_next <= multiply_2_J;
    xf_re <= Radix22ButterflyG2_x_re_dly;
    xf_im <= Radix22ButterflyG2_x_im_dly;
    xf_vld <= Radix22ButterflyG2_x_vld_dly;
    dinf_re <= Radix22ButterflyG2_din_re_dly;
    dinf_im <= Radix22ButterflyG2_din_im_dly;
    dinf_vld <= Radix22ButterflyG2_din_vld_dly;
    sra_temp := SHIFT_RIGHT(Radix22ButterflyG2_btf1_re_reg, 1);
    btf1_re <= sra_temp(15 DOWNTO 0);
    sra_temp_0 := SHIFT_RIGHT(Radix22ButterflyG2_btf1_im_reg, 1);
    btf1_im <= sra_temp_0(15 DOWNTO 0);
    sra_temp_1 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_re_reg, 1);
    btf2_re <= sra_temp_1(15 DOWNTO 0);
    sra_temp_2 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_im_reg, 1);
    btf2_im <= sra_temp_2(15 DOWNTO 0);
    btfout_vld <= Radix22ButterflyG2_procEnb_dly2;
  END PROCESS Radix22ButterflyG2_output;


  dinXTwdl_2_1_vld <= btfin_vld;

END rtl;


-- End of RADIX22FFT_SDF2_2_block.vhd --

-- Start of RADIX22FFT_SDF2_2_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF2_2_block1.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF2_2_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_SDF2_2
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF2_2_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_1_1_re                       :   IN    signed(31 DOWNTO 0);  -- sfix32
        dout_1_1_im                       :   IN    signed(31 DOWNTO 0);  -- sfix32
        dout_1_1_vld                      :   IN    std_logic;
        rd_2_Addr                         :   IN    std_logic;  -- ufix1
        rd_2_Enb                          :   IN    std_logic;
        proc_2_enb                        :   IN    std_logic;
        multiply_2_J                      :   IN    std_logic;
        dout_2_1_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_2_1_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_2_1_vld                      :   OUT   std_logic;
        dinXTwdl_2_1_vld                  :   OUT   std_logic
        );
END RADIX22FFT_SDF2_2_block1;


ARCHITECTURE rtl OF RADIX22FFT_SDF2_2_block1 IS

  -- Component Declarations
  COMPONENT SDFCommutator2_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_1_1_vld                    :   IN    std_logic;
          xf_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
          xf_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
          xf_vld                          :   IN    std_logic;
          dinf_re                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          dinf_im                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          dinf_vld                        :   IN    std_logic;
          btf1_re                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf1_im                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf2_re                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf2_im                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btfout_vld                      :   IN    std_logic;
          wrData_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
          wrData_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
          wrAddr                          :   OUT   std_logic;  -- ufix1
          wrEnb                           :   OUT   std_logic;
          dout_2_1_re                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_2_1_im                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_2_1_vld                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : SDFCommutator2_block1
    USE ENTITY work.SDFCommutator2_block1(rtl);

  -- Signals
  SIGNAL saveEnb                          : std_logic;
  SIGNAL dinVld                           : std_logic;
  SIGNAL din_re_dly1                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btfin_re                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL din_im_dly1                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btfin_im                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL mulIn_vld                        : std_logic;
  SIGNAL procEnb_dly1                     : std_logic;
  SIGNAL btfin_vld                        : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL x_vld_dly                        : std_logic;
  SIGNAL x_im                             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL x_im_dly                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrData_re                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrData_im                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrAddr                           : std_logic;  -- ufix1
  SIGNAL wrEnb                            : std_logic;
  SIGNAL twoLocationReg_0_MEM_re_0        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL twoLocationReg_0_MEM_im_0        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL twoLocationReg_0_MEM_re_1        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL twoLocationReg_0_MEM_im_1        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL twoLocationReg_0_dout_re_reg     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL twoLocationReg_0_dout_im_reg     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL twoLocationReg_0_MEM_re_0_next   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL twoLocationReg_0_MEM_im_0_next   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL twoLocationReg_0_MEM_re_1_next   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL twoLocationReg_0_MEM_im_1_next   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL twoLocationReg_0_dout_re_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL twoLocationReg_0_dout_im_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL x_re                             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL x_re_dly                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_procEnb_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1  : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2  : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf1_im_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf2_re_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf2_im_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_din_re_dly    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_din_im_dly    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_din_vld_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_x_im_dly      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_x_vld_dly     : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_multiply_J_dly1 : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2_next : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg_next : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf1_im_reg_next : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf2_re_reg_next : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf2_im_reg_next : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_din_re_dly_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_din_im_dly_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_din_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_x_im_dly_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_x_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_multiply_J_dly1_next : std_logic;
  SIGNAL xf_re                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xf_im                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinf_re                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinf_im                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinf_vld                         : std_logic;
  SIGNAL btf1_re                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf1_im                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf2_re                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf2_im                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btfout_vld                       : std_logic;

BEGIN
  u_SDFCOMMUTATOR_2 : SDFCommutator2_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_1_1_vld => dout_1_1_vld,
              xf_re => xf_re,  -- sfix32
              xf_im => xf_im,  -- sfix32
              xf_vld => xf_vld,
              dinf_re => dinf_re,  -- sfix32
              dinf_im => dinf_im,  -- sfix32
              dinf_vld => dinf_vld,
              btf1_re => btf1_re,  -- sfix32
              btf1_im => btf1_im,  -- sfix32
              btf2_re => btf2_re,  -- sfix32
              btf2_im => btf2_im,  -- sfix32
              btfout_vld => btfout_vld,
              wrData_re => wrData_re,  -- sfix32
              wrData_im => wrData_im,  -- sfix32
              wrAddr => wrAddr,  -- ufix1
              wrEnb => wrEnb,
              dout_2_1_re => dout_2_1_re,  -- sfix32
              dout_2_1_im => dout_2_1_im,  -- sfix32
              dout_2_1_vld => dout_2_1_vld
              );

  saveEnb <=  NOT proc_2_enb;

  dinVld <= dout_1_1_vld AND saveEnb;

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_re_dly1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        din_re_dly1 <= dout_1_1_re;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        btfin_re <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        btfin_re <= din_re_dly1;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        din_im_dly1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        din_im_dly1 <= dout_1_1_im;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        btfin_im <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        btfin_im <= din_im_dly1;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  mulIn_vld <= dout_1_1_vld AND proc_2_enb;

  intdelay_4_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        procEnb_dly1 <= '0';
      ELSIF enb = '1' THEN
        procEnb_dly1 <= mulIn_vld;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;


  intdelay_5_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        btfin_vld <= '0';
      ELSIF enb = '1' THEN
        btfin_vld <= procEnb_dly1;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;


  intdelay_6_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_2_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_6_process;


  intdelay_7_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld_dly <= '0';
      ELSIF enb = '1' THEN
        x_vld_dly <= x_vld;
      END IF;
    END IF;
  END PROCESS intdelay_7_process;


  intdelay_8_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_im_dly <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        x_im_dly <= x_im;
      END IF;
    END IF;
  END PROCESS intdelay_8_process;


  -- twoLocationReg_0
  twoLocationReg_0_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twoLocationReg_0_MEM_re_0 <= to_signed(0, 32);
        twoLocationReg_0_MEM_im_0 <= to_signed(0, 32);
        twoLocationReg_0_MEM_re_1 <= to_signed(0, 32);
        twoLocationReg_0_MEM_im_1 <= to_signed(0, 32);
        twoLocationReg_0_dout_re_reg <= to_signed(0, 32);
        twoLocationReg_0_dout_im_reg <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        twoLocationReg_0_MEM_re_0 <= twoLocationReg_0_MEM_re_0_next;
        twoLocationReg_0_MEM_im_0 <= twoLocationReg_0_MEM_im_0_next;
        twoLocationReg_0_MEM_re_1 <= twoLocationReg_0_MEM_re_1_next;
        twoLocationReg_0_MEM_im_1 <= twoLocationReg_0_MEM_im_1_next;
        twoLocationReg_0_dout_re_reg <= twoLocationReg_0_dout_re_reg_next;
        twoLocationReg_0_dout_im_reg <= twoLocationReg_0_dout_im_reg_next;
      END IF;
    END IF;
  END PROCESS twoLocationReg_0_process;

  twoLocationReg_0_output : PROCESS (rd_2_Addr, twoLocationReg_0_MEM_im_0, twoLocationReg_0_MEM_im_1,
       twoLocationReg_0_MEM_re_0, twoLocationReg_0_MEM_re_1,
       twoLocationReg_0_dout_im_reg, twoLocationReg_0_dout_re_reg, wrAddr,
       wrData_im, wrData_re, wrEnb)
  BEGIN
    twoLocationReg_0_MEM_re_0_next <= twoLocationReg_0_MEM_re_0;
    twoLocationReg_0_MEM_im_0_next <= twoLocationReg_0_MEM_im_0;
    twoLocationReg_0_MEM_re_1_next <= twoLocationReg_0_MEM_re_1;
    twoLocationReg_0_MEM_im_1_next <= twoLocationReg_0_MEM_im_1;
    IF rd_2_Addr = '1' THEN 
      twoLocationReg_0_dout_re_reg_next <= twoLocationReg_0_MEM_re_1;
      twoLocationReg_0_dout_im_reg_next <= twoLocationReg_0_MEM_im_1;
    ELSE 
      twoLocationReg_0_dout_re_reg_next <= twoLocationReg_0_MEM_re_0;
      twoLocationReg_0_dout_im_reg_next <= twoLocationReg_0_MEM_im_0;
    END IF;
    IF wrEnb = '1' THEN 
      IF wrAddr = '1' THEN 
        twoLocationReg_0_MEM_re_1_next <= wrData_re;
        twoLocationReg_0_MEM_im_1_next <= wrData_im;
      ELSE 
        twoLocationReg_0_MEM_re_0_next <= wrData_re;
        twoLocationReg_0_MEM_im_0_next <= wrData_im;
      END IF;
    END IF;
    x_re <= twoLocationReg_0_dout_re_reg;
    x_im <= twoLocationReg_0_dout_im_reg;
  END PROCESS twoLocationReg_0_output;


  intdelay_9_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_re_dly <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        x_re_dly <= x_re;
      END IF;
    END IF;
  END PROCESS intdelay_9_process;


  -- Radix22ButterflyG2
  Radix22ButterflyG2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= '0';
        Radix22ButterflyG2_procEnb_dly1 <= '0';
        Radix22ButterflyG2_procEnb_dly2 <= '0';
        Radix22ButterflyG2_btf1_re_reg <= to_signed(0, 33);
        Radix22ButterflyG2_btf1_im_reg <= to_signed(0, 33);
        Radix22ButterflyG2_btf2_re_reg <= to_signed(0, 33);
        Radix22ButterflyG2_btf2_im_reg <= to_signed(0, 33);
        Radix22ButterflyG2_din_re_dly <= to_signed(0, 32);
        Radix22ButterflyG2_din_im_dly <= to_signed(0, 32);
        Radix22ButterflyG2_din_vld_dly <= '0';
        Radix22ButterflyG2_x_re_dly <= to_signed(0, 32);
        Radix22ButterflyG2_x_im_dly <= to_signed(0, 32);
        Radix22ButterflyG2_x_vld_dly <= '0';
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= to_signed(0, 32);
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= to_signed(0, 32);
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= to_signed(0, 32);
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= to_signed(0, 32);
        Radix22ButterflyG2_multiply_J_dly1 <= '0';
      ELSIF enb = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= Radix22ButterflyG2_procEnb_dly_next;
        Radix22ButterflyG2_procEnb_dly1 <= Radix22ButterflyG2_procEnb_dly1_next;
        Radix22ButterflyG2_procEnb_dly2 <= Radix22ButterflyG2_procEnb_dly2_next;
        Radix22ButterflyG2_btf1_re_reg <= Radix22ButterflyG2_btf1_re_reg_next;
        Radix22ButterflyG2_btf1_im_reg <= Radix22ButterflyG2_btf1_im_reg_next;
        Radix22ButterflyG2_btf2_re_reg <= Radix22ButterflyG2_btf2_re_reg_next;
        Radix22ButterflyG2_btf2_im_reg <= Radix22ButterflyG2_btf2_im_reg_next;
        Radix22ButterflyG2_din_re_dly <= Radix22ButterflyG2_din_re_dly_next;
        Radix22ButterflyG2_din_im_dly <= Radix22ButterflyG2_din_im_dly_next;
        Radix22ButterflyG2_din_vld_dly <= Radix22ButterflyG2_din_vld_dly_next;
        Radix22ButterflyG2_x_re_dly <= Radix22ButterflyG2_x_re_dly_next;
        Radix22ButterflyG2_x_im_dly <= Radix22ButterflyG2_x_im_dly_next;
        Radix22ButterflyG2_x_vld_dly <= Radix22ButterflyG2_x_vld_dly_next;
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= Radix22ButterflyG2_dinXTwdl_re_dly1_next;
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= Radix22ButterflyG2_dinXTwdl_im_dly1_next;
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= Radix22ButterflyG2_dinXTwdl_re_dly2_next;
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= Radix22ButterflyG2_dinXTwdl_im_dly2_next;
        Radix22ButterflyG2_multiply_J_dly1 <= Radix22ButterflyG2_multiply_J_dly1_next;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG2_process;

  Radix22ButterflyG2_output : PROCESS (Radix22ButterflyG2_btf1_im_reg, Radix22ButterflyG2_btf1_re_reg,
       Radix22ButterflyG2_btf2_im_reg, Radix22ButterflyG2_btf2_re_reg,
       Radix22ButterflyG2_dinXTwdl_im_dly1, Radix22ButterflyG2_dinXTwdl_im_dly2,
       Radix22ButterflyG2_dinXTwdl_re_dly1, Radix22ButterflyG2_dinXTwdl_re_dly2,
       Radix22ButterflyG2_din_im_dly, Radix22ButterflyG2_din_re_dly,
       Radix22ButterflyG2_din_vld_dly, Radix22ButterflyG2_multiply_J_dly1,
       Radix22ButterflyG2_procEnb_dly, Radix22ButterflyG2_procEnb_dly1,
       Radix22ButterflyG2_procEnb_dly2, Radix22ButterflyG2_x_im_dly,
       Radix22ButterflyG2_x_re_dly, Radix22ButterflyG2_x_vld_dly, btfin_im,
       btfin_re, btfin_vld, dinVld, dout_1_1_im, dout_1_1_re, multiply_2_J,
       x_im_dly, x_re_dly, x_vld_dly)
    VARIABLE sra_temp : signed(32 DOWNTO 0);
    VARIABLE sra_temp_0 : signed(32 DOWNTO 0);
    VARIABLE sra_temp_1 : signed(32 DOWNTO 0);
    VARIABLE sra_temp_2 : signed(32 DOWNTO 0);
  BEGIN
    Radix22ButterflyG2_x_re_dly_next <= x_re_dly;
    Radix22ButterflyG2_x_im_dly_next <= x_im_dly;
    Radix22ButterflyG2_x_vld_dly_next <= x_vld_dly;
    Radix22ButterflyG2_din_re_dly_next <= dout_1_1_re;
    Radix22ButterflyG2_din_im_dly_next <= dout_1_1_im;
    Radix22ButterflyG2_din_vld_dly_next <= dinVld;
    Radix22ButterflyG2_procEnb_dly2_next <= Radix22ButterflyG2_procEnb_dly1;
    Radix22ButterflyG2_procEnb_dly1_next <= Radix22ButterflyG2_procEnb_dly;
    Radix22ButterflyG2_procEnb_dly_next <= btfin_vld;
    IF Radix22ButterflyG2_multiply_J_dly1 = '1' THEN 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 33) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 33);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 33) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 33);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 33) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 33);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 33) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 33);
    ELSE 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 33) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 33);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 33) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 33);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 33) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 33);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 33) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 33);
    END IF;
    Radix22ButterflyG2_dinXTwdl_re_dly2_next <= Radix22ButterflyG2_dinXTwdl_re_dly1;
    Radix22ButterflyG2_dinXTwdl_im_dly2_next <= Radix22ButterflyG2_dinXTwdl_im_dly1;
    Radix22ButterflyG2_dinXTwdl_re_dly1_next <= btfin_re;
    Radix22ButterflyG2_dinXTwdl_im_dly1_next <= btfin_im;
    Radix22ButterflyG2_multiply_J_dly1_next <= multiply_2_J;
    xf_re <= Radix22ButterflyG2_x_re_dly;
    xf_im <= Radix22ButterflyG2_x_im_dly;
    xf_vld <= Radix22ButterflyG2_x_vld_dly;
    dinf_re <= Radix22ButterflyG2_din_re_dly;
    dinf_im <= Radix22ButterflyG2_din_im_dly;
    dinf_vld <= Radix22ButterflyG2_din_vld_dly;
    sra_temp := SHIFT_RIGHT(Radix22ButterflyG2_btf1_re_reg, 1);
    btf1_re <= sra_temp(31 DOWNTO 0);
    sra_temp_0 := SHIFT_RIGHT(Radix22ButterflyG2_btf1_im_reg, 1);
    btf1_im <= sra_temp_0(31 DOWNTO 0);
    sra_temp_1 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_re_reg, 1);
    btf2_re <= sra_temp_1(31 DOWNTO 0);
    sra_temp_2 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_im_reg, 1);
    btf2_im <= sra_temp_2(31 DOWNTO 0);
    btfout_vld <= Radix22ButterflyG2_procEnb_dly2;
  END PROCESS Radix22ButterflyG2_output;


  dinXTwdl_2_1_vld <= btfin_vld;

END rtl;


-- End of RADIX22FFT_SDF2_2_block1.vhd --

-- Start of RADIX22FFT_SDF2_4.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF2_4.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF2_4
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF2_4
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF2_4 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_3_1_re                       :   IN    signed(15 DOWNTO 0);  -- sfix16
        dout_3_1_im                       :   IN    signed(15 DOWNTO 0);  -- sfix16
        dout_3_1_vld                      :   IN    std_logic;
        rd_4_Addr                         :   IN    unsigned(7 DOWNTO 0);  -- ufix8
        rd_4_Enb                          :   IN    std_logic;
        proc_4_enb                        :   IN    std_logic;
        multiply_4_J                      :   IN    std_logic;
        dout_4_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_4_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_4_1_vld                      :   OUT   std_logic;
        dinXTwdl_4_1_vld                  :   OUT   std_logic
        );
END RADIX22FFT_SDF2_4;


ARCHITECTURE rtl OF RADIX22FFT_SDF2_4 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SDFCommutator4
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_3_1_vld                    :   IN    std_logic;
          xf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_vld                          :   IN    std_logic;
          dinf_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinf_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinf_vld                        :   IN    std_logic;
          btf1_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf1_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btfout_vld                      :   IN    std_logic;
          wrData_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrData_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrAddr                          :   OUT   unsigned(7 DOWNTO 0);  -- ufix8
          wrEnb                           :   OUT   std_logic;
          dout_4_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_4_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_4_1_vld                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  FOR ALL : SDFCommutator4
    USE ENTITY work.SDFCommutator4(rtl);

  -- Signals
  SIGNAL btfin_vld                        : std_logic;
  SIGNAL saveEnb                          : std_logic;
  SIGNAL dinVld                           : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL x_vld_dly                        : std_logic;
  SIGNAL wrData_im                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrAddr                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wrEnb                            : std_logic;
  SIGNAL x_im                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_im_dly                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrData_re                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re_dly                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_procEnb_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1  : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2  : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf1_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_din_re_dly    : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_im_dly    : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_vld_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_im_dly      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_vld_dly     : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_multiply_J_dly1 : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2_next : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf1_im_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_re_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_im_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_din_re_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_im_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_im_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_multiply_J_dly1_next : std_logic;
  SIGNAL xf_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinf_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinf_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinf_vld                         : std_logic;
  SIGNAL btf1_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf1_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btfout_vld                       : std_logic;

BEGIN
  u_dataMEM_im_0_4_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_im,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_4_Addr,
              dout => x_im
              );

  u_dataMEM_re_0_4_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_re,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_4_Addr,
              dout => x_re
              );

  u_SDFCOMMUTATOR_4 : SDFCommutator4
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_3_1_vld => dout_3_1_vld,
              xf_re => xf_re,  -- sfix16
              xf_im => xf_im,  -- sfix16
              xf_vld => xf_vld,
              dinf_re => dinf_re,  -- sfix16
              dinf_im => dinf_im,  -- sfix16
              dinf_vld => dinf_vld,
              btf1_re => btf1_re,  -- sfix16
              btf1_im => btf1_im,  -- sfix16
              btf2_re => btf2_re,  -- sfix16
              btf2_im => btf2_im,  -- sfix16
              btfout_vld => btfout_vld,
              wrData_re => wrData_re,  -- sfix16
              wrData_im => wrData_im,  -- sfix16
              wrAddr => wrAddr,  -- ufix8
              wrEnb => wrEnb,
              dout_4_1_re => dout_4_1_re,  -- sfix16
              dout_4_1_im => dout_4_1_im,  -- sfix16
              dout_4_1_vld => dout_4_1_vld
              );

  btfin_vld <= dout_3_1_vld AND proc_4_enb;

  saveEnb <=  NOT btfin_vld;

  dinVld <= dout_3_1_vld AND saveEnb;

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_4_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld_dly <= '0';
      ELSIF enb = '1' THEN
        x_vld_dly <= x_vld;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_im_dly <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        x_im_dly <= x_im;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_re_dly <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        x_re_dly <= x_re;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Radix22ButterflyG2
  Radix22ButterflyG2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= '0';
        Radix22ButterflyG2_procEnb_dly1 <= '0';
        Radix22ButterflyG2_procEnb_dly2 <= '0';
        Radix22ButterflyG2_btf1_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf1_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf2_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf2_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_din_re_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_din_im_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_din_vld_dly <= '0';
        Radix22ButterflyG2_x_re_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_x_im_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_x_vld_dly <= '0';
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_multiply_J_dly1 <= '0';
      ELSIF enb = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= Radix22ButterflyG2_procEnb_dly_next;
        Radix22ButterflyG2_procEnb_dly1 <= Radix22ButterflyG2_procEnb_dly1_next;
        Radix22ButterflyG2_procEnb_dly2 <= Radix22ButterflyG2_procEnb_dly2_next;
        Radix22ButterflyG2_btf1_re_reg <= Radix22ButterflyG2_btf1_re_reg_next;
        Radix22ButterflyG2_btf1_im_reg <= Radix22ButterflyG2_btf1_im_reg_next;
        Radix22ButterflyG2_btf2_re_reg <= Radix22ButterflyG2_btf2_re_reg_next;
        Radix22ButterflyG2_btf2_im_reg <= Radix22ButterflyG2_btf2_im_reg_next;
        Radix22ButterflyG2_din_re_dly <= Radix22ButterflyG2_din_re_dly_next;
        Radix22ButterflyG2_din_im_dly <= Radix22ButterflyG2_din_im_dly_next;
        Radix22ButterflyG2_din_vld_dly <= Radix22ButterflyG2_din_vld_dly_next;
        Radix22ButterflyG2_x_re_dly <= Radix22ButterflyG2_x_re_dly_next;
        Radix22ButterflyG2_x_im_dly <= Radix22ButterflyG2_x_im_dly_next;
        Radix22ButterflyG2_x_vld_dly <= Radix22ButterflyG2_x_vld_dly_next;
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= Radix22ButterflyG2_dinXTwdl_re_dly1_next;
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= Radix22ButterflyG2_dinXTwdl_im_dly1_next;
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= Radix22ButterflyG2_dinXTwdl_re_dly2_next;
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= Radix22ButterflyG2_dinXTwdl_im_dly2_next;
        Radix22ButterflyG2_multiply_J_dly1 <= Radix22ButterflyG2_multiply_J_dly1_next;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG2_process;

  Radix22ButterflyG2_output : PROCESS (Radix22ButterflyG2_btf1_im_reg, Radix22ButterflyG2_btf1_re_reg,
       Radix22ButterflyG2_btf2_im_reg, Radix22ButterflyG2_btf2_re_reg,
       Radix22ButterflyG2_dinXTwdl_im_dly1, Radix22ButterflyG2_dinXTwdl_im_dly2,
       Radix22ButterflyG2_dinXTwdl_re_dly1, Radix22ButterflyG2_dinXTwdl_re_dly2,
       Radix22ButterflyG2_din_im_dly, Radix22ButterflyG2_din_re_dly,
       Radix22ButterflyG2_din_vld_dly, Radix22ButterflyG2_multiply_J_dly1,
       Radix22ButterflyG2_procEnb_dly, Radix22ButterflyG2_procEnb_dly1,
       Radix22ButterflyG2_procEnb_dly2, Radix22ButterflyG2_x_im_dly,
       Radix22ButterflyG2_x_re_dly, Radix22ButterflyG2_x_vld_dly, btfin_vld,
       dinVld, dout_3_1_im, dout_3_1_re, multiply_4_J, x_im_dly, x_re_dly,
       x_vld_dly)
    VARIABLE sra_temp : signed(16 DOWNTO 0);
    VARIABLE sra_temp_0 : signed(16 DOWNTO 0);
    VARIABLE sra_temp_1 : signed(16 DOWNTO 0);
    VARIABLE sra_temp_2 : signed(16 DOWNTO 0);
  BEGIN
    Radix22ButterflyG2_x_re_dly_next <= x_re_dly;
    Radix22ButterflyG2_x_im_dly_next <= x_im_dly;
    Radix22ButterflyG2_x_vld_dly_next <= x_vld_dly;
    Radix22ButterflyG2_din_re_dly_next <= dout_3_1_re;
    Radix22ButterflyG2_din_im_dly_next <= dout_3_1_im;
    Radix22ButterflyG2_din_vld_dly_next <= dinVld;
    Radix22ButterflyG2_procEnb_dly2_next <= Radix22ButterflyG2_procEnb_dly1;
    Radix22ButterflyG2_procEnb_dly1_next <= Radix22ButterflyG2_procEnb_dly;
    Radix22ButterflyG2_procEnb_dly_next <= btfin_vld;
    IF Radix22ButterflyG2_multiply_J_dly1 = '1' THEN 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
    ELSE 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
    END IF;
    Radix22ButterflyG2_dinXTwdl_re_dly2_next <= Radix22ButterflyG2_dinXTwdl_re_dly1;
    Radix22ButterflyG2_dinXTwdl_im_dly2_next <= Radix22ButterflyG2_dinXTwdl_im_dly1;
    Radix22ButterflyG2_dinXTwdl_re_dly1_next <= dout_3_1_re;
    Radix22ButterflyG2_dinXTwdl_im_dly1_next <= dout_3_1_im;
    Radix22ButterflyG2_multiply_J_dly1_next <= multiply_4_J;
    xf_re <= Radix22ButterflyG2_x_re_dly;
    xf_im <= Radix22ButterflyG2_x_im_dly;
    xf_vld <= Radix22ButterflyG2_x_vld_dly;
    dinf_re <= Radix22ButterflyG2_din_re_dly;
    dinf_im <= Radix22ButterflyG2_din_im_dly;
    dinf_vld <= Radix22ButterflyG2_din_vld_dly;
    sra_temp := SHIFT_RIGHT(Radix22ButterflyG2_btf1_re_reg, 1);
    btf1_re <= sra_temp(15 DOWNTO 0);
    sra_temp_0 := SHIFT_RIGHT(Radix22ButterflyG2_btf1_im_reg, 1);
    btf1_im <= sra_temp_0(15 DOWNTO 0);
    sra_temp_1 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_re_reg, 1);
    btf2_re <= sra_temp_1(15 DOWNTO 0);
    sra_temp_2 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_im_reg, 1);
    btf2_im <= sra_temp_2(15 DOWNTO 0);
    btfout_vld <= Radix22ButterflyG2_procEnb_dly2;
  END PROCESS Radix22ButterflyG2_output;


  dinXTwdl_4_1_vld <= btfin_vld;

END rtl;


-- End of RADIX22FFT_SDF2_4.vhd --

-- Start of RADIX22FFT_SDF2_4_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF2_4_block.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF2_4_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_SDF2_4
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF2_4_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_3_1_re                       :   IN    signed(15 DOWNTO 0);  -- sfix16
        dout_3_1_im                       :   IN    signed(15 DOWNTO 0);  -- sfix16
        dout_3_1_vld                      :   IN    std_logic;
        rd_4_Addr                         :   IN    unsigned(7 DOWNTO 0);  -- ufix8
        rd_4_Enb                          :   IN    std_logic;
        proc_4_enb                        :   IN    std_logic;
        multiply_4_J                      :   IN    std_logic;
        dout_4_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_4_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_4_1_vld                      :   OUT   std_logic;
        dinXTwdl_4_1_vld                  :   OUT   std_logic
        );
END RADIX22FFT_SDF2_4_block;


ARCHITECTURE rtl OF RADIX22FFT_SDF2_4_block IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SDFCommutator4_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_3_1_vld                    :   IN    std_logic;
          xf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_vld                          :   IN    std_logic;
          dinf_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinf_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinf_vld                        :   IN    std_logic;
          btf1_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf1_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btfout_vld                      :   IN    std_logic;
          wrData_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrData_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrAddr                          :   OUT   unsigned(7 DOWNTO 0);  -- ufix8
          wrEnb                           :   OUT   std_logic;
          dout_4_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_4_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_4_1_vld                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  FOR ALL : SDFCommutator4_block
    USE ENTITY work.SDFCommutator4_block(rtl);

  -- Signals
  SIGNAL btfin_vld                        : std_logic;
  SIGNAL saveEnb                          : std_logic;
  SIGNAL dinVld                           : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL x_vld_dly                        : std_logic;
  SIGNAL wrData_im                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrAddr                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wrEnb                            : std_logic;
  SIGNAL x_im                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_im_dly                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrData_re                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re_dly                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_procEnb_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1  : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2  : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf1_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_din_re_dly    : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_im_dly    : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_vld_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_im_dly      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_vld_dly     : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_multiply_J_dly1 : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2_next : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf1_im_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_re_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_im_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_din_re_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_im_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_im_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_multiply_J_dly1_next : std_logic;
  SIGNAL xf_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinf_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinf_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinf_vld                         : std_logic;
  SIGNAL btf1_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf1_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btfout_vld                       : std_logic;

BEGIN
  u_dataMEM_im_0_4_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_im,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_4_Addr,
              dout => x_im
              );

  u_dataMEM_re_0_4_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_re,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_4_Addr,
              dout => x_re
              );

  u_SDFCOMMUTATOR_4 : SDFCommutator4_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_3_1_vld => dout_3_1_vld,
              xf_re => xf_re,  -- sfix16
              xf_im => xf_im,  -- sfix16
              xf_vld => xf_vld,
              dinf_re => dinf_re,  -- sfix16
              dinf_im => dinf_im,  -- sfix16
              dinf_vld => dinf_vld,
              btf1_re => btf1_re,  -- sfix16
              btf1_im => btf1_im,  -- sfix16
              btf2_re => btf2_re,  -- sfix16
              btf2_im => btf2_im,  -- sfix16
              btfout_vld => btfout_vld,
              wrData_re => wrData_re,  -- sfix16
              wrData_im => wrData_im,  -- sfix16
              wrAddr => wrAddr,  -- ufix8
              wrEnb => wrEnb,
              dout_4_1_re => dout_4_1_re,  -- sfix16
              dout_4_1_im => dout_4_1_im,  -- sfix16
              dout_4_1_vld => dout_4_1_vld
              );

  btfin_vld <= dout_3_1_vld AND proc_4_enb;

  saveEnb <=  NOT btfin_vld;

  dinVld <= dout_3_1_vld AND saveEnb;

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_4_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld_dly <= '0';
      ELSIF enb = '1' THEN
        x_vld_dly <= x_vld;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_im_dly <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        x_im_dly <= x_im;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_re_dly <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        x_re_dly <= x_re;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Radix22ButterflyG2
  Radix22ButterflyG2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= '0';
        Radix22ButterflyG2_procEnb_dly1 <= '0';
        Radix22ButterflyG2_procEnb_dly2 <= '0';
        Radix22ButterflyG2_btf1_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf1_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf2_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf2_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_din_re_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_din_im_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_din_vld_dly <= '0';
        Radix22ButterflyG2_x_re_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_x_im_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_x_vld_dly <= '0';
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_multiply_J_dly1 <= '0';
      ELSIF enb = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= Radix22ButterflyG2_procEnb_dly_next;
        Radix22ButterflyG2_procEnb_dly1 <= Radix22ButterflyG2_procEnb_dly1_next;
        Radix22ButterflyG2_procEnb_dly2 <= Radix22ButterflyG2_procEnb_dly2_next;
        Radix22ButterflyG2_btf1_re_reg <= Radix22ButterflyG2_btf1_re_reg_next;
        Radix22ButterflyG2_btf1_im_reg <= Radix22ButterflyG2_btf1_im_reg_next;
        Radix22ButterflyG2_btf2_re_reg <= Radix22ButterflyG2_btf2_re_reg_next;
        Radix22ButterflyG2_btf2_im_reg <= Radix22ButterflyG2_btf2_im_reg_next;
        Radix22ButterflyG2_din_re_dly <= Radix22ButterflyG2_din_re_dly_next;
        Radix22ButterflyG2_din_im_dly <= Radix22ButterflyG2_din_im_dly_next;
        Radix22ButterflyG2_din_vld_dly <= Radix22ButterflyG2_din_vld_dly_next;
        Radix22ButterflyG2_x_re_dly <= Radix22ButterflyG2_x_re_dly_next;
        Radix22ButterflyG2_x_im_dly <= Radix22ButterflyG2_x_im_dly_next;
        Radix22ButterflyG2_x_vld_dly <= Radix22ButterflyG2_x_vld_dly_next;
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= Radix22ButterflyG2_dinXTwdl_re_dly1_next;
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= Radix22ButterflyG2_dinXTwdl_im_dly1_next;
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= Radix22ButterflyG2_dinXTwdl_re_dly2_next;
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= Radix22ButterflyG2_dinXTwdl_im_dly2_next;
        Radix22ButterflyG2_multiply_J_dly1 <= Radix22ButterflyG2_multiply_J_dly1_next;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG2_process;

  Radix22ButterflyG2_output : PROCESS (Radix22ButterflyG2_btf1_im_reg, Radix22ButterflyG2_btf1_re_reg,
       Radix22ButterflyG2_btf2_im_reg, Radix22ButterflyG2_btf2_re_reg,
       Radix22ButterflyG2_dinXTwdl_im_dly1, Radix22ButterflyG2_dinXTwdl_im_dly2,
       Radix22ButterflyG2_dinXTwdl_re_dly1, Radix22ButterflyG2_dinXTwdl_re_dly2,
       Radix22ButterflyG2_din_im_dly, Radix22ButterflyG2_din_re_dly,
       Radix22ButterflyG2_din_vld_dly, Radix22ButterflyG2_multiply_J_dly1,
       Radix22ButterflyG2_procEnb_dly, Radix22ButterflyG2_procEnb_dly1,
       Radix22ButterflyG2_procEnb_dly2, Radix22ButterflyG2_x_im_dly,
       Radix22ButterflyG2_x_re_dly, Radix22ButterflyG2_x_vld_dly, btfin_vld,
       dinVld, dout_3_1_im, dout_3_1_re, multiply_4_J, x_im_dly, x_re_dly,
       x_vld_dly)
    VARIABLE sra_temp : signed(16 DOWNTO 0);
    VARIABLE sra_temp_0 : signed(16 DOWNTO 0);
    VARIABLE sra_temp_1 : signed(16 DOWNTO 0);
    VARIABLE sra_temp_2 : signed(16 DOWNTO 0);
  BEGIN
    Radix22ButterflyG2_x_re_dly_next <= x_re_dly;
    Radix22ButterflyG2_x_im_dly_next <= x_im_dly;
    Radix22ButterflyG2_x_vld_dly_next <= x_vld_dly;
    Radix22ButterflyG2_din_re_dly_next <= dout_3_1_re;
    Radix22ButterflyG2_din_im_dly_next <= dout_3_1_im;
    Radix22ButterflyG2_din_vld_dly_next <= dinVld;
    Radix22ButterflyG2_procEnb_dly2_next <= Radix22ButterflyG2_procEnb_dly1;
    Radix22ButterflyG2_procEnb_dly1_next <= Radix22ButterflyG2_procEnb_dly;
    Radix22ButterflyG2_procEnb_dly_next <= btfin_vld;
    IF Radix22ButterflyG2_multiply_J_dly1 = '1' THEN 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
    ELSE 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
    END IF;
    Radix22ButterflyG2_dinXTwdl_re_dly2_next <= Radix22ButterflyG2_dinXTwdl_re_dly1;
    Radix22ButterflyG2_dinXTwdl_im_dly2_next <= Radix22ButterflyG2_dinXTwdl_im_dly1;
    Radix22ButterflyG2_dinXTwdl_re_dly1_next <= dout_3_1_re;
    Radix22ButterflyG2_dinXTwdl_im_dly1_next <= dout_3_1_im;
    Radix22ButterflyG2_multiply_J_dly1_next <= multiply_4_J;
    xf_re <= Radix22ButterflyG2_x_re_dly;
    xf_im <= Radix22ButterflyG2_x_im_dly;
    xf_vld <= Radix22ButterflyG2_x_vld_dly;
    dinf_re <= Radix22ButterflyG2_din_re_dly;
    dinf_im <= Radix22ButterflyG2_din_im_dly;
    dinf_vld <= Radix22ButterflyG2_din_vld_dly;
    sra_temp := SHIFT_RIGHT(Radix22ButterflyG2_btf1_re_reg, 1);
    btf1_re <= sra_temp(15 DOWNTO 0);
    sra_temp_0 := SHIFT_RIGHT(Radix22ButterflyG2_btf1_im_reg, 1);
    btf1_im <= sra_temp_0(15 DOWNTO 0);
    sra_temp_1 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_re_reg, 1);
    btf2_re <= sra_temp_1(15 DOWNTO 0);
    sra_temp_2 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_im_reg, 1);
    btf2_im <= sra_temp_2(15 DOWNTO 0);
    btfout_vld <= Radix22ButterflyG2_procEnb_dly2;
  END PROCESS Radix22ButterflyG2_output;


  dinXTwdl_4_1_vld <= btfin_vld;

END rtl;


-- End of RADIX22FFT_SDF2_4_block.vhd --

-- Start of RADIX22FFT_SDF2_4_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF2_4_block1.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF2_4_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_SDF2_4
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF2_4_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_3_1_re                       :   IN    signed(31 DOWNTO 0);  -- sfix32
        dout_3_1_im                       :   IN    signed(31 DOWNTO 0);  -- sfix32
        dout_3_1_vld                      :   IN    std_logic;
        rd_4_Addr                         :   IN    unsigned(2 DOWNTO 0);  -- ufix3
        rd_4_Enb                          :   IN    std_logic;
        proc_4_enb                        :   IN    std_logic;
        multiply_4_J                      :   IN    std_logic;
        dout_4_1_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_4_1_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_4_1_vld                      :   OUT   std_logic;
        dinXTwdl_4_1_vld                  :   OUT   std_logic
        );
END RADIX22FFT_SDF2_4_block1;


ARCHITECTURE rtl OF RADIX22FFT_SDF2_4_block1 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SDFCommutator4_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_3_1_vld                    :   IN    std_logic;
          xf_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
          xf_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
          xf_vld                          :   IN    std_logic;
          dinf_re                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          dinf_im                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          dinf_vld                        :   IN    std_logic;
          btf1_re                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf1_im                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf2_re                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf2_im                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btfout_vld                      :   IN    std_logic;
          wrData_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
          wrData_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
          wrAddr                          :   OUT   unsigned(2 DOWNTO 0);  -- ufix3
          wrEnb                           :   OUT   std_logic;
          dout_4_1_re                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_4_1_im                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_4_1_vld                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  FOR ALL : SDFCommutator4_block1
    USE ENTITY work.SDFCommutator4_block1(rtl);

  -- Signals
  SIGNAL btfin_vld                        : std_logic;
  SIGNAL saveEnb                          : std_logic;
  SIGNAL dinVld                           : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL x_vld_dly                        : std_logic;
  SIGNAL wrData_im                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrAddr                           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrEnb                            : std_logic;
  SIGNAL x_im                             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL x_im_dly                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrData_re                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL x_re                             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL x_re_dly                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_procEnb_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1  : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2  : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf1_im_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf2_re_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf2_im_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_din_re_dly    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_din_im_dly    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_din_vld_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_x_im_dly      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_x_vld_dly     : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_multiply_J_dly1 : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2_next : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg_next : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf1_im_reg_next : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf2_re_reg_next : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf2_im_reg_next : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_din_re_dly_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_din_im_dly_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_din_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_x_im_dly_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_x_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_multiply_J_dly1_next : std_logic;
  SIGNAL xf_re                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xf_im                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinf_re                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinf_im                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinf_vld                         : std_logic;
  SIGNAL btf1_re                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf1_im                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf2_re                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf2_im                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btfout_vld                       : std_logic;

BEGIN
  u_dataMEM_im_0_4_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_im,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_4_Addr,
              dout => x_im
              );

  u_dataMEM_re_0_4_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_re,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_4_Addr,
              dout => x_re
              );

  u_SDFCOMMUTATOR_4 : SDFCommutator4_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_3_1_vld => dout_3_1_vld,
              xf_re => xf_re,  -- sfix32
              xf_im => xf_im,  -- sfix32
              xf_vld => xf_vld,
              dinf_re => dinf_re,  -- sfix32
              dinf_im => dinf_im,  -- sfix32
              dinf_vld => dinf_vld,
              btf1_re => btf1_re,  -- sfix32
              btf1_im => btf1_im,  -- sfix32
              btf2_re => btf2_re,  -- sfix32
              btf2_im => btf2_im,  -- sfix32
              btfout_vld => btfout_vld,
              wrData_re => wrData_re,  -- sfix32
              wrData_im => wrData_im,  -- sfix32
              wrAddr => wrAddr,  -- ufix3
              wrEnb => wrEnb,
              dout_4_1_re => dout_4_1_re,  -- sfix32
              dout_4_1_im => dout_4_1_im,  -- sfix32
              dout_4_1_vld => dout_4_1_vld
              );

  btfin_vld <= dout_3_1_vld AND proc_4_enb;

  saveEnb <=  NOT btfin_vld;

  dinVld <= dout_3_1_vld AND saveEnb;

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_4_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld_dly <= '0';
      ELSIF enb = '1' THEN
        x_vld_dly <= x_vld;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_im_dly <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        x_im_dly <= x_im;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_re_dly <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        x_re_dly <= x_re;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Radix22ButterflyG2
  Radix22ButterflyG2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= '0';
        Radix22ButterflyG2_procEnb_dly1 <= '0';
        Radix22ButterflyG2_procEnb_dly2 <= '0';
        Radix22ButterflyG2_btf1_re_reg <= to_signed(0, 33);
        Radix22ButterflyG2_btf1_im_reg <= to_signed(0, 33);
        Radix22ButterflyG2_btf2_re_reg <= to_signed(0, 33);
        Radix22ButterflyG2_btf2_im_reg <= to_signed(0, 33);
        Radix22ButterflyG2_din_re_dly <= to_signed(0, 32);
        Radix22ButterflyG2_din_im_dly <= to_signed(0, 32);
        Radix22ButterflyG2_din_vld_dly <= '0';
        Radix22ButterflyG2_x_re_dly <= to_signed(0, 32);
        Radix22ButterflyG2_x_im_dly <= to_signed(0, 32);
        Radix22ButterflyG2_x_vld_dly <= '0';
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= to_signed(0, 32);
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= to_signed(0, 32);
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= to_signed(0, 32);
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= to_signed(0, 32);
        Radix22ButterflyG2_multiply_J_dly1 <= '0';
      ELSIF enb = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= Radix22ButterflyG2_procEnb_dly_next;
        Radix22ButterflyG2_procEnb_dly1 <= Radix22ButterflyG2_procEnb_dly1_next;
        Radix22ButterflyG2_procEnb_dly2 <= Radix22ButterflyG2_procEnb_dly2_next;
        Radix22ButterflyG2_btf1_re_reg <= Radix22ButterflyG2_btf1_re_reg_next;
        Radix22ButterflyG2_btf1_im_reg <= Radix22ButterflyG2_btf1_im_reg_next;
        Radix22ButterflyG2_btf2_re_reg <= Radix22ButterflyG2_btf2_re_reg_next;
        Radix22ButterflyG2_btf2_im_reg <= Radix22ButterflyG2_btf2_im_reg_next;
        Radix22ButterflyG2_din_re_dly <= Radix22ButterflyG2_din_re_dly_next;
        Radix22ButterflyG2_din_im_dly <= Radix22ButterflyG2_din_im_dly_next;
        Radix22ButterflyG2_din_vld_dly <= Radix22ButterflyG2_din_vld_dly_next;
        Radix22ButterflyG2_x_re_dly <= Radix22ButterflyG2_x_re_dly_next;
        Radix22ButterflyG2_x_im_dly <= Radix22ButterflyG2_x_im_dly_next;
        Radix22ButterflyG2_x_vld_dly <= Radix22ButterflyG2_x_vld_dly_next;
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= Radix22ButterflyG2_dinXTwdl_re_dly1_next;
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= Radix22ButterflyG2_dinXTwdl_im_dly1_next;
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= Radix22ButterflyG2_dinXTwdl_re_dly2_next;
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= Radix22ButterflyG2_dinXTwdl_im_dly2_next;
        Radix22ButterflyG2_multiply_J_dly1 <= Radix22ButterflyG2_multiply_J_dly1_next;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG2_process;

  Radix22ButterflyG2_output : PROCESS (Radix22ButterflyG2_btf1_im_reg, Radix22ButterflyG2_btf1_re_reg,
       Radix22ButterflyG2_btf2_im_reg, Radix22ButterflyG2_btf2_re_reg,
       Radix22ButterflyG2_dinXTwdl_im_dly1, Radix22ButterflyG2_dinXTwdl_im_dly2,
       Radix22ButterflyG2_dinXTwdl_re_dly1, Radix22ButterflyG2_dinXTwdl_re_dly2,
       Radix22ButterflyG2_din_im_dly, Radix22ButterflyG2_din_re_dly,
       Radix22ButterflyG2_din_vld_dly, Radix22ButterflyG2_multiply_J_dly1,
       Radix22ButterflyG2_procEnb_dly, Radix22ButterflyG2_procEnb_dly1,
       Radix22ButterflyG2_procEnb_dly2, Radix22ButterflyG2_x_im_dly,
       Radix22ButterflyG2_x_re_dly, Radix22ButterflyG2_x_vld_dly, btfin_vld,
       dinVld, dout_3_1_im, dout_3_1_re, multiply_4_J, x_im_dly, x_re_dly,
       x_vld_dly)
    VARIABLE sra_temp : signed(32 DOWNTO 0);
    VARIABLE sra_temp_0 : signed(32 DOWNTO 0);
    VARIABLE sra_temp_1 : signed(32 DOWNTO 0);
    VARIABLE sra_temp_2 : signed(32 DOWNTO 0);
  BEGIN
    Radix22ButterflyG2_x_re_dly_next <= x_re_dly;
    Radix22ButterflyG2_x_im_dly_next <= x_im_dly;
    Radix22ButterflyG2_x_vld_dly_next <= x_vld_dly;
    Radix22ButterflyG2_din_re_dly_next <= dout_3_1_re;
    Radix22ButterflyG2_din_im_dly_next <= dout_3_1_im;
    Radix22ButterflyG2_din_vld_dly_next <= dinVld;
    Radix22ButterflyG2_procEnb_dly2_next <= Radix22ButterflyG2_procEnb_dly1;
    Radix22ButterflyG2_procEnb_dly1_next <= Radix22ButterflyG2_procEnb_dly;
    Radix22ButterflyG2_procEnb_dly_next <= btfin_vld;
    IF Radix22ButterflyG2_multiply_J_dly1 = '1' THEN 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 33) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 33);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 33) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 33);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 33) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 33);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 33) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 33);
    ELSE 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 33) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 33);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 33) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 33);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 33) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 33);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 33) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 33);
    END IF;
    Radix22ButterflyG2_dinXTwdl_re_dly2_next <= Radix22ButterflyG2_dinXTwdl_re_dly1;
    Radix22ButterflyG2_dinXTwdl_im_dly2_next <= Radix22ButterflyG2_dinXTwdl_im_dly1;
    Radix22ButterflyG2_dinXTwdl_re_dly1_next <= dout_3_1_re;
    Radix22ButterflyG2_dinXTwdl_im_dly1_next <= dout_3_1_im;
    Radix22ButterflyG2_multiply_J_dly1_next <= multiply_4_J;
    xf_re <= Radix22ButterflyG2_x_re_dly;
    xf_im <= Radix22ButterflyG2_x_im_dly;
    xf_vld <= Radix22ButterflyG2_x_vld_dly;
    dinf_re <= Radix22ButterflyG2_din_re_dly;
    dinf_im <= Radix22ButterflyG2_din_im_dly;
    dinf_vld <= Radix22ButterflyG2_din_vld_dly;
    sra_temp := SHIFT_RIGHT(Radix22ButterflyG2_btf1_re_reg, 1);
    btf1_re <= sra_temp(31 DOWNTO 0);
    sra_temp_0 := SHIFT_RIGHT(Radix22ButterflyG2_btf1_im_reg, 1);
    btf1_im <= sra_temp_0(31 DOWNTO 0);
    sra_temp_1 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_re_reg, 1);
    btf2_re <= sra_temp_1(31 DOWNTO 0);
    sra_temp_2 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_im_reg, 1);
    btf2_im <= sra_temp_2(31 DOWNTO 0);
    btfout_vld <= Radix22ButterflyG2_procEnb_dly2;
  END PROCESS Radix22ButterflyG2_output;


  dinXTwdl_4_1_vld <= btfin_vld;

END rtl;


-- End of RADIX22FFT_SDF2_4_block1.vhd --

-- Start of RADIX22FFT_SDF2_6.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF2_6.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF2_6
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF2_6
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF2_6 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_5_1_re                       :   IN    signed(15 DOWNTO 0);  -- sfix16
        dout_5_1_im                       :   IN    signed(15 DOWNTO 0);  -- sfix16
        dout_5_1_vld                      :   IN    std_logic;
        rd_6_Addr                         :   IN    unsigned(5 DOWNTO 0);  -- ufix6
        rd_6_Enb                          :   IN    std_logic;
        proc_6_enb                        :   IN    std_logic;
        multiply_6_J                      :   IN    std_logic;
        dout_6_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_6_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_6_1_vld                      :   OUT   std_logic;
        dinXTwdl_6_1_vld                  :   OUT   std_logic
        );
END RADIX22FFT_SDF2_6;


ARCHITECTURE rtl OF RADIX22FFT_SDF2_6 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SDFCommutator6
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_5_1_vld                    :   IN    std_logic;
          xf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_vld                          :   IN    std_logic;
          dinf_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinf_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinf_vld                        :   IN    std_logic;
          btf1_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf1_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btfout_vld                      :   IN    std_logic;
          wrData_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrData_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrAddr                          :   OUT   unsigned(5 DOWNTO 0);  -- ufix6
          wrEnb                           :   OUT   std_logic;
          dout_6_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_6_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_6_1_vld                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  FOR ALL : SDFCommutator6
    USE ENTITY work.SDFCommutator6(rtl);

  -- Signals
  SIGNAL btfin_vld                        : std_logic;
  SIGNAL saveEnb                          : std_logic;
  SIGNAL dinVld                           : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL x_vld_dly                        : std_logic;
  SIGNAL wrData_im                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrAddr                           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL wrEnb                            : std_logic;
  SIGNAL x_im                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_im_dly                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrData_re                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re_dly                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_procEnb_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1  : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2  : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf1_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_din_re_dly    : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_im_dly    : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_vld_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_im_dly      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_vld_dly     : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_multiply_J_dly1 : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2_next : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf1_im_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_re_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_im_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_din_re_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_im_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_im_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_multiply_J_dly1_next : std_logic;
  SIGNAL xf_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinf_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinf_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinf_vld                         : std_logic;
  SIGNAL btf1_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf1_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btfout_vld                       : std_logic;

BEGIN
  u_dataMEM_im_0_6_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 6,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_im,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_6_Addr,
              dout => x_im
              );

  u_dataMEM_re_0_6_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 6,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_re,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_6_Addr,
              dout => x_re
              );

  u_SDFCOMMUTATOR_6 : SDFCommutator6
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_5_1_vld => dout_5_1_vld,
              xf_re => xf_re,  -- sfix16
              xf_im => xf_im,  -- sfix16
              xf_vld => xf_vld,
              dinf_re => dinf_re,  -- sfix16
              dinf_im => dinf_im,  -- sfix16
              dinf_vld => dinf_vld,
              btf1_re => btf1_re,  -- sfix16
              btf1_im => btf1_im,  -- sfix16
              btf2_re => btf2_re,  -- sfix16
              btf2_im => btf2_im,  -- sfix16
              btfout_vld => btfout_vld,
              wrData_re => wrData_re,  -- sfix16
              wrData_im => wrData_im,  -- sfix16
              wrAddr => wrAddr,  -- ufix6
              wrEnb => wrEnb,
              dout_6_1_re => dout_6_1_re,  -- sfix16
              dout_6_1_im => dout_6_1_im,  -- sfix16
              dout_6_1_vld => dout_6_1_vld
              );

  btfin_vld <= dout_5_1_vld AND proc_6_enb;

  saveEnb <=  NOT btfin_vld;

  dinVld <= dout_5_1_vld AND saveEnb;

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_6_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld_dly <= '0';
      ELSIF enb = '1' THEN
        x_vld_dly <= x_vld;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_im_dly <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        x_im_dly <= x_im;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_re_dly <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        x_re_dly <= x_re;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Radix22ButterflyG2
  Radix22ButterflyG2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= '0';
        Radix22ButterflyG2_procEnb_dly1 <= '0';
        Radix22ButterflyG2_procEnb_dly2 <= '0';
        Radix22ButterflyG2_btf1_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf1_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf2_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf2_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_din_re_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_din_im_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_din_vld_dly <= '0';
        Radix22ButterflyG2_x_re_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_x_im_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_x_vld_dly <= '0';
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_multiply_J_dly1 <= '0';
      ELSIF enb = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= Radix22ButterflyG2_procEnb_dly_next;
        Radix22ButterflyG2_procEnb_dly1 <= Radix22ButterflyG2_procEnb_dly1_next;
        Radix22ButterflyG2_procEnb_dly2 <= Radix22ButterflyG2_procEnb_dly2_next;
        Radix22ButterflyG2_btf1_re_reg <= Radix22ButterflyG2_btf1_re_reg_next;
        Radix22ButterflyG2_btf1_im_reg <= Radix22ButterflyG2_btf1_im_reg_next;
        Radix22ButterflyG2_btf2_re_reg <= Radix22ButterflyG2_btf2_re_reg_next;
        Radix22ButterflyG2_btf2_im_reg <= Radix22ButterflyG2_btf2_im_reg_next;
        Radix22ButterflyG2_din_re_dly <= Radix22ButterflyG2_din_re_dly_next;
        Radix22ButterflyG2_din_im_dly <= Radix22ButterflyG2_din_im_dly_next;
        Radix22ButterflyG2_din_vld_dly <= Radix22ButterflyG2_din_vld_dly_next;
        Radix22ButterflyG2_x_re_dly <= Radix22ButterflyG2_x_re_dly_next;
        Radix22ButterflyG2_x_im_dly <= Radix22ButterflyG2_x_im_dly_next;
        Radix22ButterflyG2_x_vld_dly <= Radix22ButterflyG2_x_vld_dly_next;
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= Radix22ButterflyG2_dinXTwdl_re_dly1_next;
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= Radix22ButterflyG2_dinXTwdl_im_dly1_next;
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= Radix22ButterflyG2_dinXTwdl_re_dly2_next;
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= Radix22ButterflyG2_dinXTwdl_im_dly2_next;
        Radix22ButterflyG2_multiply_J_dly1 <= Radix22ButterflyG2_multiply_J_dly1_next;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG2_process;

  Radix22ButterflyG2_output : PROCESS (Radix22ButterflyG2_btf1_im_reg, Radix22ButterflyG2_btf1_re_reg,
       Radix22ButterflyG2_btf2_im_reg, Radix22ButterflyG2_btf2_re_reg,
       Radix22ButterflyG2_dinXTwdl_im_dly1, Radix22ButterflyG2_dinXTwdl_im_dly2,
       Radix22ButterflyG2_dinXTwdl_re_dly1, Radix22ButterflyG2_dinXTwdl_re_dly2,
       Radix22ButterflyG2_din_im_dly, Radix22ButterflyG2_din_re_dly,
       Radix22ButterflyG2_din_vld_dly, Radix22ButterflyG2_multiply_J_dly1,
       Radix22ButterflyG2_procEnb_dly, Radix22ButterflyG2_procEnb_dly1,
       Radix22ButterflyG2_procEnb_dly2, Radix22ButterflyG2_x_im_dly,
       Radix22ButterflyG2_x_re_dly, Radix22ButterflyG2_x_vld_dly, btfin_vld,
       dinVld, dout_5_1_im, dout_5_1_re, multiply_6_J, x_im_dly, x_re_dly,
       x_vld_dly)
    VARIABLE sra_temp : signed(16 DOWNTO 0);
    VARIABLE sra_temp_0 : signed(16 DOWNTO 0);
    VARIABLE sra_temp_1 : signed(16 DOWNTO 0);
    VARIABLE sra_temp_2 : signed(16 DOWNTO 0);
  BEGIN
    Radix22ButterflyG2_x_re_dly_next <= x_re_dly;
    Radix22ButterflyG2_x_im_dly_next <= x_im_dly;
    Radix22ButterflyG2_x_vld_dly_next <= x_vld_dly;
    Radix22ButterflyG2_din_re_dly_next <= dout_5_1_re;
    Radix22ButterflyG2_din_im_dly_next <= dout_5_1_im;
    Radix22ButterflyG2_din_vld_dly_next <= dinVld;
    Radix22ButterflyG2_procEnb_dly2_next <= Radix22ButterflyG2_procEnb_dly1;
    Radix22ButterflyG2_procEnb_dly1_next <= Radix22ButterflyG2_procEnb_dly;
    Radix22ButterflyG2_procEnb_dly_next <= btfin_vld;
    IF Radix22ButterflyG2_multiply_J_dly1 = '1' THEN 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
    ELSE 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
    END IF;
    Radix22ButterflyG2_dinXTwdl_re_dly2_next <= Radix22ButterflyG2_dinXTwdl_re_dly1;
    Radix22ButterflyG2_dinXTwdl_im_dly2_next <= Radix22ButterflyG2_dinXTwdl_im_dly1;
    Radix22ButterflyG2_dinXTwdl_re_dly1_next <= dout_5_1_re;
    Radix22ButterflyG2_dinXTwdl_im_dly1_next <= dout_5_1_im;
    Radix22ButterflyG2_multiply_J_dly1_next <= multiply_6_J;
    xf_re <= Radix22ButterflyG2_x_re_dly;
    xf_im <= Radix22ButterflyG2_x_im_dly;
    xf_vld <= Radix22ButterflyG2_x_vld_dly;
    dinf_re <= Radix22ButterflyG2_din_re_dly;
    dinf_im <= Radix22ButterflyG2_din_im_dly;
    dinf_vld <= Radix22ButterflyG2_din_vld_dly;
    sra_temp := SHIFT_RIGHT(Radix22ButterflyG2_btf1_re_reg, 1);
    btf1_re <= sra_temp(15 DOWNTO 0);
    sra_temp_0 := SHIFT_RIGHT(Radix22ButterflyG2_btf1_im_reg, 1);
    btf1_im <= sra_temp_0(15 DOWNTO 0);
    sra_temp_1 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_re_reg, 1);
    btf2_re <= sra_temp_1(15 DOWNTO 0);
    sra_temp_2 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_im_reg, 1);
    btf2_im <= sra_temp_2(15 DOWNTO 0);
    btfout_vld <= Radix22ButterflyG2_procEnb_dly2;
  END PROCESS Radix22ButterflyG2_output;


  dinXTwdl_6_1_vld <= btfin_vld;

END rtl;


-- End of RADIX22FFT_SDF2_6.vhd --

-- Start of RADIX22FFT_SDF2_6_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF2_6_block.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF2_6_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_SDF2_6
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF2_6_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_5_1_re                       :   IN    signed(15 DOWNTO 0);  -- sfix16
        dout_5_1_im                       :   IN    signed(15 DOWNTO 0);  -- sfix16
        dout_5_1_vld                      :   IN    std_logic;
        rd_6_Addr                         :   IN    unsigned(5 DOWNTO 0);  -- ufix6
        rd_6_Enb                          :   IN    std_logic;
        proc_6_enb                        :   IN    std_logic;
        multiply_6_J                      :   IN    std_logic;
        dout_6_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_6_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_6_1_vld                      :   OUT   std_logic;
        dinXTwdl_6_1_vld                  :   OUT   std_logic
        );
END RADIX22FFT_SDF2_6_block;


ARCHITECTURE rtl OF RADIX22FFT_SDF2_6_block IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SDFCommutator6_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_5_1_vld                    :   IN    std_logic;
          xf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_vld                          :   IN    std_logic;
          dinf_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinf_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinf_vld                        :   IN    std_logic;
          btf1_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf1_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btfout_vld                      :   IN    std_logic;
          wrData_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrData_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrAddr                          :   OUT   unsigned(5 DOWNTO 0);  -- ufix6
          wrEnb                           :   OUT   std_logic;
          dout_6_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_6_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_6_1_vld                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  FOR ALL : SDFCommutator6_block
    USE ENTITY work.SDFCommutator6_block(rtl);

  -- Signals
  SIGNAL btfin_vld                        : std_logic;
  SIGNAL saveEnb                          : std_logic;
  SIGNAL dinVld                           : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL x_vld_dly                        : std_logic;
  SIGNAL wrData_im                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrAddr                           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL wrEnb                            : std_logic;
  SIGNAL x_im                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_im_dly                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrData_re                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re_dly                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_procEnb_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1  : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2  : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf1_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_din_re_dly    : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_im_dly    : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_vld_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_im_dly      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_vld_dly     : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_multiply_J_dly1 : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2_next : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf1_im_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_re_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_im_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_din_re_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_im_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_im_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_multiply_J_dly1_next : std_logic;
  SIGNAL xf_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinf_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinf_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinf_vld                         : std_logic;
  SIGNAL btf1_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf1_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btfout_vld                       : std_logic;

BEGIN
  u_dataMEM_im_0_6_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 6,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_im,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_6_Addr,
              dout => x_im
              );

  u_dataMEM_re_0_6_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 6,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_re,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_6_Addr,
              dout => x_re
              );

  u_SDFCOMMUTATOR_6 : SDFCommutator6_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_5_1_vld => dout_5_1_vld,
              xf_re => xf_re,  -- sfix16
              xf_im => xf_im,  -- sfix16
              xf_vld => xf_vld,
              dinf_re => dinf_re,  -- sfix16
              dinf_im => dinf_im,  -- sfix16
              dinf_vld => dinf_vld,
              btf1_re => btf1_re,  -- sfix16
              btf1_im => btf1_im,  -- sfix16
              btf2_re => btf2_re,  -- sfix16
              btf2_im => btf2_im,  -- sfix16
              btfout_vld => btfout_vld,
              wrData_re => wrData_re,  -- sfix16
              wrData_im => wrData_im,  -- sfix16
              wrAddr => wrAddr,  -- ufix6
              wrEnb => wrEnb,
              dout_6_1_re => dout_6_1_re,  -- sfix16
              dout_6_1_im => dout_6_1_im,  -- sfix16
              dout_6_1_vld => dout_6_1_vld
              );

  btfin_vld <= dout_5_1_vld AND proc_6_enb;

  saveEnb <=  NOT btfin_vld;

  dinVld <= dout_5_1_vld AND saveEnb;

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_6_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld_dly <= '0';
      ELSIF enb = '1' THEN
        x_vld_dly <= x_vld;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_im_dly <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        x_im_dly <= x_im;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_re_dly <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        x_re_dly <= x_re;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Radix22ButterflyG2
  Radix22ButterflyG2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= '0';
        Radix22ButterflyG2_procEnb_dly1 <= '0';
        Radix22ButterflyG2_procEnb_dly2 <= '0';
        Radix22ButterflyG2_btf1_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf1_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf2_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf2_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_din_re_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_din_im_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_din_vld_dly <= '0';
        Radix22ButterflyG2_x_re_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_x_im_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_x_vld_dly <= '0';
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_multiply_J_dly1 <= '0';
      ELSIF enb = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= Radix22ButterflyG2_procEnb_dly_next;
        Radix22ButterflyG2_procEnb_dly1 <= Radix22ButterflyG2_procEnb_dly1_next;
        Radix22ButterflyG2_procEnb_dly2 <= Radix22ButterflyG2_procEnb_dly2_next;
        Radix22ButterflyG2_btf1_re_reg <= Radix22ButterflyG2_btf1_re_reg_next;
        Radix22ButterflyG2_btf1_im_reg <= Radix22ButterflyG2_btf1_im_reg_next;
        Radix22ButterflyG2_btf2_re_reg <= Radix22ButterflyG2_btf2_re_reg_next;
        Radix22ButterflyG2_btf2_im_reg <= Radix22ButterflyG2_btf2_im_reg_next;
        Radix22ButterflyG2_din_re_dly <= Radix22ButterflyG2_din_re_dly_next;
        Radix22ButterflyG2_din_im_dly <= Radix22ButterflyG2_din_im_dly_next;
        Radix22ButterflyG2_din_vld_dly <= Radix22ButterflyG2_din_vld_dly_next;
        Radix22ButterflyG2_x_re_dly <= Radix22ButterflyG2_x_re_dly_next;
        Radix22ButterflyG2_x_im_dly <= Radix22ButterflyG2_x_im_dly_next;
        Radix22ButterflyG2_x_vld_dly <= Radix22ButterflyG2_x_vld_dly_next;
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= Radix22ButterflyG2_dinXTwdl_re_dly1_next;
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= Radix22ButterflyG2_dinXTwdl_im_dly1_next;
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= Radix22ButterflyG2_dinXTwdl_re_dly2_next;
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= Radix22ButterflyG2_dinXTwdl_im_dly2_next;
        Radix22ButterflyG2_multiply_J_dly1 <= Radix22ButterflyG2_multiply_J_dly1_next;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG2_process;

  Radix22ButterflyG2_output : PROCESS (Radix22ButterflyG2_btf1_im_reg, Radix22ButterflyG2_btf1_re_reg,
       Radix22ButterflyG2_btf2_im_reg, Radix22ButterflyG2_btf2_re_reg,
       Radix22ButterflyG2_dinXTwdl_im_dly1, Radix22ButterflyG2_dinXTwdl_im_dly2,
       Radix22ButterflyG2_dinXTwdl_re_dly1, Radix22ButterflyG2_dinXTwdl_re_dly2,
       Radix22ButterflyG2_din_im_dly, Radix22ButterflyG2_din_re_dly,
       Radix22ButterflyG2_din_vld_dly, Radix22ButterflyG2_multiply_J_dly1,
       Radix22ButterflyG2_procEnb_dly, Radix22ButterflyG2_procEnb_dly1,
       Radix22ButterflyG2_procEnb_dly2, Radix22ButterflyG2_x_im_dly,
       Radix22ButterflyG2_x_re_dly, Radix22ButterflyG2_x_vld_dly, btfin_vld,
       dinVld, dout_5_1_im, dout_5_1_re, multiply_6_J, x_im_dly, x_re_dly,
       x_vld_dly)
    VARIABLE sra_temp : signed(16 DOWNTO 0);
    VARIABLE sra_temp_0 : signed(16 DOWNTO 0);
    VARIABLE sra_temp_1 : signed(16 DOWNTO 0);
    VARIABLE sra_temp_2 : signed(16 DOWNTO 0);
  BEGIN
    Radix22ButterflyG2_x_re_dly_next <= x_re_dly;
    Radix22ButterflyG2_x_im_dly_next <= x_im_dly;
    Radix22ButterflyG2_x_vld_dly_next <= x_vld_dly;
    Radix22ButterflyG2_din_re_dly_next <= dout_5_1_re;
    Radix22ButterflyG2_din_im_dly_next <= dout_5_1_im;
    Radix22ButterflyG2_din_vld_dly_next <= dinVld;
    Radix22ButterflyG2_procEnb_dly2_next <= Radix22ButterflyG2_procEnb_dly1;
    Radix22ButterflyG2_procEnb_dly1_next <= Radix22ButterflyG2_procEnb_dly;
    Radix22ButterflyG2_procEnb_dly_next <= btfin_vld;
    IF Radix22ButterflyG2_multiply_J_dly1 = '1' THEN 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
    ELSE 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
    END IF;
    Radix22ButterflyG2_dinXTwdl_re_dly2_next <= Radix22ButterflyG2_dinXTwdl_re_dly1;
    Radix22ButterflyG2_dinXTwdl_im_dly2_next <= Radix22ButterflyG2_dinXTwdl_im_dly1;
    Radix22ButterflyG2_dinXTwdl_re_dly1_next <= dout_5_1_re;
    Radix22ButterflyG2_dinXTwdl_im_dly1_next <= dout_5_1_im;
    Radix22ButterflyG2_multiply_J_dly1_next <= multiply_6_J;
    xf_re <= Radix22ButterflyG2_x_re_dly;
    xf_im <= Radix22ButterflyG2_x_im_dly;
    xf_vld <= Radix22ButterflyG2_x_vld_dly;
    dinf_re <= Radix22ButterflyG2_din_re_dly;
    dinf_im <= Radix22ButterflyG2_din_im_dly;
    dinf_vld <= Radix22ButterflyG2_din_vld_dly;
    sra_temp := SHIFT_RIGHT(Radix22ButterflyG2_btf1_re_reg, 1);
    btf1_re <= sra_temp(15 DOWNTO 0);
    sra_temp_0 := SHIFT_RIGHT(Radix22ButterflyG2_btf1_im_reg, 1);
    btf1_im <= sra_temp_0(15 DOWNTO 0);
    sra_temp_1 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_re_reg, 1);
    btf2_re <= sra_temp_1(15 DOWNTO 0);
    sra_temp_2 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_im_reg, 1);
    btf2_im <= sra_temp_2(15 DOWNTO 0);
    btfout_vld <= Radix22ButterflyG2_procEnb_dly2;
  END PROCESS Radix22ButterflyG2_output;


  dinXTwdl_6_1_vld <= btfin_vld;

END rtl;


-- End of RADIX22FFT_SDF2_6_block.vhd --

-- Start of RADIX22FFT_SDF2_6_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF2_6_block1.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF2_6_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_SDF2_6
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF2_6_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_5_1_re                       :   IN    signed(31 DOWNTO 0);  -- sfix32
        dout_5_1_im                       :   IN    signed(31 DOWNTO 0);  -- sfix32
        dout_5_1_vld                      :   IN    std_logic;
        rd_6_Addr                         :   IN    unsigned(4 DOWNTO 0);  -- ufix5
        rd_6_Enb                          :   IN    std_logic;
        proc_6_enb                        :   IN    std_logic;
        multiply_6_J                      :   IN    std_logic;
        dout_6_1_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_6_1_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_6_1_vld                      :   OUT   std_logic;
        dinXTwdl_6_1_vld                  :   OUT   std_logic
        );
END RADIX22FFT_SDF2_6_block1;


ARCHITECTURE rtl OF RADIX22FFT_SDF2_6_block1 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SDFCommutator6_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_5_1_vld                    :   IN    std_logic;
          xf_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
          xf_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
          xf_vld                          :   IN    std_logic;
          dinf_re                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          dinf_im                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          dinf_vld                        :   IN    std_logic;
          btf1_re                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf1_im                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf2_re                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf2_im                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btfout_vld                      :   IN    std_logic;
          wrData_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
          wrData_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
          wrAddr                          :   OUT   unsigned(4 DOWNTO 0);  -- ufix5
          wrEnb                           :   OUT   std_logic;
          dout_6_1_re                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_6_1_im                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_6_1_vld                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  FOR ALL : SDFCommutator6_block1
    USE ENTITY work.SDFCommutator6_block1(rtl);

  -- Signals
  SIGNAL btfin_vld                        : std_logic;
  SIGNAL saveEnb                          : std_logic;
  SIGNAL dinVld                           : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL x_vld_dly                        : std_logic;
  SIGNAL wrData_im                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrAddr                           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL wrEnb                            : std_logic;
  SIGNAL x_im                             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL x_im_dly                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrData_re                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL x_re                             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL x_re_dly                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_procEnb_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1  : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2  : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf1_im_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf2_re_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf2_im_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_din_re_dly    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_din_im_dly    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_din_vld_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_x_im_dly      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_x_vld_dly     : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_multiply_J_dly1 : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2_next : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg_next : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf1_im_reg_next : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf2_re_reg_next : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf2_im_reg_next : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_din_re_dly_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_din_im_dly_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_din_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_x_im_dly_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_x_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_multiply_J_dly1_next : std_logic;
  SIGNAL xf_re                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xf_im                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinf_re                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinf_im                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinf_vld                         : std_logic;
  SIGNAL btf1_re                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf1_im                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf2_re                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf2_im                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btfout_vld                       : std_logic;

BEGIN
  u_dataMEM_im_0_6_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_im,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_6_Addr,
              dout => x_im
              );

  u_dataMEM_re_0_6_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 5,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_re,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_6_Addr,
              dout => x_re
              );

  u_SDFCOMMUTATOR_6 : SDFCommutator6_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_5_1_vld => dout_5_1_vld,
              xf_re => xf_re,  -- sfix32
              xf_im => xf_im,  -- sfix32
              xf_vld => xf_vld,
              dinf_re => dinf_re,  -- sfix32
              dinf_im => dinf_im,  -- sfix32
              dinf_vld => dinf_vld,
              btf1_re => btf1_re,  -- sfix32
              btf1_im => btf1_im,  -- sfix32
              btf2_re => btf2_re,  -- sfix32
              btf2_im => btf2_im,  -- sfix32
              btfout_vld => btfout_vld,
              wrData_re => wrData_re,  -- sfix32
              wrData_im => wrData_im,  -- sfix32
              wrAddr => wrAddr,  -- ufix5
              wrEnb => wrEnb,
              dout_6_1_re => dout_6_1_re,  -- sfix32
              dout_6_1_im => dout_6_1_im,  -- sfix32
              dout_6_1_vld => dout_6_1_vld
              );

  btfin_vld <= dout_5_1_vld AND proc_6_enb;

  saveEnb <=  NOT btfin_vld;

  dinVld <= dout_5_1_vld AND saveEnb;

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_6_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld_dly <= '0';
      ELSIF enb = '1' THEN
        x_vld_dly <= x_vld;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_im_dly <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        x_im_dly <= x_im;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_re_dly <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        x_re_dly <= x_re;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Radix22ButterflyG2
  Radix22ButterflyG2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= '0';
        Radix22ButterflyG2_procEnb_dly1 <= '0';
        Radix22ButterflyG2_procEnb_dly2 <= '0';
        Radix22ButterflyG2_btf1_re_reg <= to_signed(0, 33);
        Radix22ButterflyG2_btf1_im_reg <= to_signed(0, 33);
        Radix22ButterflyG2_btf2_re_reg <= to_signed(0, 33);
        Radix22ButterflyG2_btf2_im_reg <= to_signed(0, 33);
        Radix22ButterflyG2_din_re_dly <= to_signed(0, 32);
        Radix22ButterflyG2_din_im_dly <= to_signed(0, 32);
        Radix22ButterflyG2_din_vld_dly <= '0';
        Radix22ButterflyG2_x_re_dly <= to_signed(0, 32);
        Radix22ButterflyG2_x_im_dly <= to_signed(0, 32);
        Radix22ButterflyG2_x_vld_dly <= '0';
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= to_signed(0, 32);
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= to_signed(0, 32);
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= to_signed(0, 32);
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= to_signed(0, 32);
        Radix22ButterflyG2_multiply_J_dly1 <= '0';
      ELSIF enb = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= Radix22ButterflyG2_procEnb_dly_next;
        Radix22ButterflyG2_procEnb_dly1 <= Radix22ButterflyG2_procEnb_dly1_next;
        Radix22ButterflyG2_procEnb_dly2 <= Radix22ButterflyG2_procEnb_dly2_next;
        Radix22ButterflyG2_btf1_re_reg <= Radix22ButterflyG2_btf1_re_reg_next;
        Radix22ButterflyG2_btf1_im_reg <= Radix22ButterflyG2_btf1_im_reg_next;
        Radix22ButterflyG2_btf2_re_reg <= Radix22ButterflyG2_btf2_re_reg_next;
        Radix22ButterflyG2_btf2_im_reg <= Radix22ButterflyG2_btf2_im_reg_next;
        Radix22ButterflyG2_din_re_dly <= Radix22ButterflyG2_din_re_dly_next;
        Radix22ButterflyG2_din_im_dly <= Radix22ButterflyG2_din_im_dly_next;
        Radix22ButterflyG2_din_vld_dly <= Radix22ButterflyG2_din_vld_dly_next;
        Radix22ButterflyG2_x_re_dly <= Radix22ButterflyG2_x_re_dly_next;
        Radix22ButterflyG2_x_im_dly <= Radix22ButterflyG2_x_im_dly_next;
        Radix22ButterflyG2_x_vld_dly <= Radix22ButterflyG2_x_vld_dly_next;
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= Radix22ButterflyG2_dinXTwdl_re_dly1_next;
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= Radix22ButterflyG2_dinXTwdl_im_dly1_next;
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= Radix22ButterflyG2_dinXTwdl_re_dly2_next;
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= Radix22ButterflyG2_dinXTwdl_im_dly2_next;
        Radix22ButterflyG2_multiply_J_dly1 <= Radix22ButterflyG2_multiply_J_dly1_next;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG2_process;

  Radix22ButterflyG2_output : PROCESS (Radix22ButterflyG2_btf1_im_reg, Radix22ButterflyG2_btf1_re_reg,
       Radix22ButterflyG2_btf2_im_reg, Radix22ButterflyG2_btf2_re_reg,
       Radix22ButterflyG2_dinXTwdl_im_dly1, Radix22ButterflyG2_dinXTwdl_im_dly2,
       Radix22ButterflyG2_dinXTwdl_re_dly1, Radix22ButterflyG2_dinXTwdl_re_dly2,
       Radix22ButterflyG2_din_im_dly, Radix22ButterflyG2_din_re_dly,
       Radix22ButterflyG2_din_vld_dly, Radix22ButterflyG2_multiply_J_dly1,
       Radix22ButterflyG2_procEnb_dly, Radix22ButterflyG2_procEnb_dly1,
       Radix22ButterflyG2_procEnb_dly2, Radix22ButterflyG2_x_im_dly,
       Radix22ButterflyG2_x_re_dly, Radix22ButterflyG2_x_vld_dly, btfin_vld,
       dinVld, dout_5_1_im, dout_5_1_re, multiply_6_J, x_im_dly, x_re_dly,
       x_vld_dly)
    VARIABLE sra_temp : signed(32 DOWNTO 0);
    VARIABLE sra_temp_0 : signed(32 DOWNTO 0);
    VARIABLE sra_temp_1 : signed(32 DOWNTO 0);
    VARIABLE sra_temp_2 : signed(32 DOWNTO 0);
  BEGIN
    Radix22ButterflyG2_x_re_dly_next <= x_re_dly;
    Radix22ButterflyG2_x_im_dly_next <= x_im_dly;
    Radix22ButterflyG2_x_vld_dly_next <= x_vld_dly;
    Radix22ButterflyG2_din_re_dly_next <= dout_5_1_re;
    Radix22ButterflyG2_din_im_dly_next <= dout_5_1_im;
    Radix22ButterflyG2_din_vld_dly_next <= dinVld;
    Radix22ButterflyG2_procEnb_dly2_next <= Radix22ButterflyG2_procEnb_dly1;
    Radix22ButterflyG2_procEnb_dly1_next <= Radix22ButterflyG2_procEnb_dly;
    Radix22ButterflyG2_procEnb_dly_next <= btfin_vld;
    IF Radix22ButterflyG2_multiply_J_dly1 = '1' THEN 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 33) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 33);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 33) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 33);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 33) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 33);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 33) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 33);
    ELSE 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 33) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 33);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 33) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 33);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 33) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 33);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 33) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 33);
    END IF;
    Radix22ButterflyG2_dinXTwdl_re_dly2_next <= Radix22ButterflyG2_dinXTwdl_re_dly1;
    Radix22ButterflyG2_dinXTwdl_im_dly2_next <= Radix22ButterflyG2_dinXTwdl_im_dly1;
    Radix22ButterflyG2_dinXTwdl_re_dly1_next <= dout_5_1_re;
    Radix22ButterflyG2_dinXTwdl_im_dly1_next <= dout_5_1_im;
    Radix22ButterflyG2_multiply_J_dly1_next <= multiply_6_J;
    xf_re <= Radix22ButterflyG2_x_re_dly;
    xf_im <= Radix22ButterflyG2_x_im_dly;
    xf_vld <= Radix22ButterflyG2_x_vld_dly;
    dinf_re <= Radix22ButterflyG2_din_re_dly;
    dinf_im <= Radix22ButterflyG2_din_im_dly;
    dinf_vld <= Radix22ButterflyG2_din_vld_dly;
    sra_temp := SHIFT_RIGHT(Radix22ButterflyG2_btf1_re_reg, 1);
    btf1_re <= sra_temp(31 DOWNTO 0);
    sra_temp_0 := SHIFT_RIGHT(Radix22ButterflyG2_btf1_im_reg, 1);
    btf1_im <= sra_temp_0(31 DOWNTO 0);
    sra_temp_1 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_re_reg, 1);
    btf2_re <= sra_temp_1(31 DOWNTO 0);
    sra_temp_2 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_im_reg, 1);
    btf2_im <= sra_temp_2(31 DOWNTO 0);
    btfout_vld <= Radix22ButterflyG2_procEnb_dly2;
  END PROCESS Radix22ButterflyG2_output;


  dinXTwdl_6_1_vld <= btfin_vld;

END rtl;


-- End of RADIX22FFT_SDF2_6_block1.vhd --

-- Start of RADIX22FFT_SDF2_8.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF2_8.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF2_8
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF2_8
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF2_8 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_7_1_re                       :   IN    signed(15 DOWNTO 0);  -- sfix16
        dout_7_1_im                       :   IN    signed(15 DOWNTO 0);  -- sfix16
        dout_7_1_vld                      :   IN    std_logic;
        rd_8_Addr                         :   IN    unsigned(3 DOWNTO 0);  -- ufix4
        rd_8_Enb                          :   IN    std_logic;
        proc_8_enb                        :   IN    std_logic;
        multiply_8_J                      :   IN    std_logic;
        dout_8_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_8_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_8_1_vld                      :   OUT   std_logic;
        dinXTwdl_8_1_vld                  :   OUT   std_logic
        );
END RADIX22FFT_SDF2_8;


ARCHITECTURE rtl OF RADIX22FFT_SDF2_8 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SDFCommutator8
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_7_1_vld                    :   IN    std_logic;
          xf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_vld                          :   IN    std_logic;
          dinf_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinf_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinf_vld                        :   IN    std_logic;
          btf1_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf1_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btfout_vld                      :   IN    std_logic;
          wrData_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrData_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrAddr                          :   OUT   unsigned(3 DOWNTO 0);  -- ufix4
          wrEnb                           :   OUT   std_logic;
          dout_8_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_8_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_8_1_vld                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  FOR ALL : SDFCommutator8
    USE ENTITY work.SDFCommutator8(rtl);

  -- Signals
  SIGNAL btfin_vld                        : std_logic;
  SIGNAL saveEnb                          : std_logic;
  SIGNAL dinVld                           : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL x_vld_dly                        : std_logic;
  SIGNAL wrData_im                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrAddr                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL wrEnb                            : std_logic;
  SIGNAL x_im                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_im_dly                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrData_re                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re_dly                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_procEnb_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1  : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2  : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf1_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_din_re_dly    : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_im_dly    : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_vld_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_im_dly      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_vld_dly     : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_multiply_J_dly1 : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2_next : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf1_im_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_re_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_im_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_din_re_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_im_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_im_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_multiply_J_dly1_next : std_logic;
  SIGNAL xf_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinf_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinf_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinf_vld                         : std_logic;
  SIGNAL btf1_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf1_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btfout_vld                       : std_logic;

BEGIN
  u_dataMEM_im_0_8_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_im,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_8_Addr,
              dout => x_im
              );

  u_dataMEM_re_0_8_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_re,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_8_Addr,
              dout => x_re
              );

  u_SDFCOMMUTATOR_8 : SDFCommutator8
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_7_1_vld => dout_7_1_vld,
              xf_re => xf_re,  -- sfix16
              xf_im => xf_im,  -- sfix16
              xf_vld => xf_vld,
              dinf_re => dinf_re,  -- sfix16
              dinf_im => dinf_im,  -- sfix16
              dinf_vld => dinf_vld,
              btf1_re => btf1_re,  -- sfix16
              btf1_im => btf1_im,  -- sfix16
              btf2_re => btf2_re,  -- sfix16
              btf2_im => btf2_im,  -- sfix16
              btfout_vld => btfout_vld,
              wrData_re => wrData_re,  -- sfix16
              wrData_im => wrData_im,  -- sfix16
              wrAddr => wrAddr,  -- ufix4
              wrEnb => wrEnb,
              dout_8_1_re => dout_8_1_re,  -- sfix16
              dout_8_1_im => dout_8_1_im,  -- sfix16
              dout_8_1_vld => dout_8_1_vld
              );

  btfin_vld <= dout_7_1_vld AND proc_8_enb;

  saveEnb <=  NOT btfin_vld;

  dinVld <= dout_7_1_vld AND saveEnb;

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_8_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld_dly <= '0';
      ELSIF enb = '1' THEN
        x_vld_dly <= x_vld;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_im_dly <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        x_im_dly <= x_im;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_re_dly <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        x_re_dly <= x_re;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Radix22ButterflyG2
  Radix22ButterflyG2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= '0';
        Radix22ButterflyG2_procEnb_dly1 <= '0';
        Radix22ButterflyG2_procEnb_dly2 <= '0';
        Radix22ButterflyG2_btf1_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf1_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf2_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf2_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_din_re_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_din_im_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_din_vld_dly <= '0';
        Radix22ButterflyG2_x_re_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_x_im_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_x_vld_dly <= '0';
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_multiply_J_dly1 <= '0';
      ELSIF enb = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= Radix22ButterflyG2_procEnb_dly_next;
        Radix22ButterflyG2_procEnb_dly1 <= Radix22ButterflyG2_procEnb_dly1_next;
        Radix22ButterflyG2_procEnb_dly2 <= Radix22ButterflyG2_procEnb_dly2_next;
        Radix22ButterflyG2_btf1_re_reg <= Radix22ButterflyG2_btf1_re_reg_next;
        Radix22ButterflyG2_btf1_im_reg <= Radix22ButterflyG2_btf1_im_reg_next;
        Radix22ButterflyG2_btf2_re_reg <= Radix22ButterflyG2_btf2_re_reg_next;
        Radix22ButterflyG2_btf2_im_reg <= Radix22ButterflyG2_btf2_im_reg_next;
        Radix22ButterflyG2_din_re_dly <= Radix22ButterflyG2_din_re_dly_next;
        Radix22ButterflyG2_din_im_dly <= Radix22ButterflyG2_din_im_dly_next;
        Radix22ButterflyG2_din_vld_dly <= Radix22ButterflyG2_din_vld_dly_next;
        Radix22ButterflyG2_x_re_dly <= Radix22ButterflyG2_x_re_dly_next;
        Radix22ButterflyG2_x_im_dly <= Radix22ButterflyG2_x_im_dly_next;
        Radix22ButterflyG2_x_vld_dly <= Radix22ButterflyG2_x_vld_dly_next;
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= Radix22ButterflyG2_dinXTwdl_re_dly1_next;
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= Radix22ButterflyG2_dinXTwdl_im_dly1_next;
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= Radix22ButterflyG2_dinXTwdl_re_dly2_next;
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= Radix22ButterflyG2_dinXTwdl_im_dly2_next;
        Radix22ButterflyG2_multiply_J_dly1 <= Radix22ButterflyG2_multiply_J_dly1_next;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG2_process;

  Radix22ButterflyG2_output : PROCESS (Radix22ButterflyG2_btf1_im_reg, Radix22ButterflyG2_btf1_re_reg,
       Radix22ButterflyG2_btf2_im_reg, Radix22ButterflyG2_btf2_re_reg,
       Radix22ButterflyG2_dinXTwdl_im_dly1, Radix22ButterflyG2_dinXTwdl_im_dly2,
       Radix22ButterflyG2_dinXTwdl_re_dly1, Radix22ButterflyG2_dinXTwdl_re_dly2,
       Radix22ButterflyG2_din_im_dly, Radix22ButterflyG2_din_re_dly,
       Radix22ButterflyG2_din_vld_dly, Radix22ButterflyG2_multiply_J_dly1,
       Radix22ButterflyG2_procEnb_dly, Radix22ButterflyG2_procEnb_dly1,
       Radix22ButterflyG2_procEnb_dly2, Radix22ButterflyG2_x_im_dly,
       Radix22ButterflyG2_x_re_dly, Radix22ButterflyG2_x_vld_dly, btfin_vld,
       dinVld, dout_7_1_im, dout_7_1_re, multiply_8_J, x_im_dly, x_re_dly,
       x_vld_dly)
    VARIABLE sra_temp : signed(16 DOWNTO 0);
    VARIABLE sra_temp_0 : signed(16 DOWNTO 0);
    VARIABLE sra_temp_1 : signed(16 DOWNTO 0);
    VARIABLE sra_temp_2 : signed(16 DOWNTO 0);
  BEGIN
    Radix22ButterflyG2_x_re_dly_next <= x_re_dly;
    Radix22ButterflyG2_x_im_dly_next <= x_im_dly;
    Radix22ButterflyG2_x_vld_dly_next <= x_vld_dly;
    Radix22ButterflyG2_din_re_dly_next <= dout_7_1_re;
    Radix22ButterflyG2_din_im_dly_next <= dout_7_1_im;
    Radix22ButterflyG2_din_vld_dly_next <= dinVld;
    Radix22ButterflyG2_procEnb_dly2_next <= Radix22ButterflyG2_procEnb_dly1;
    Radix22ButterflyG2_procEnb_dly1_next <= Radix22ButterflyG2_procEnb_dly;
    Radix22ButterflyG2_procEnb_dly_next <= btfin_vld;
    IF Radix22ButterflyG2_multiply_J_dly1 = '1' THEN 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
    ELSE 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
    END IF;
    Radix22ButterflyG2_dinXTwdl_re_dly2_next <= Radix22ButterflyG2_dinXTwdl_re_dly1;
    Radix22ButterflyG2_dinXTwdl_im_dly2_next <= Radix22ButterflyG2_dinXTwdl_im_dly1;
    Radix22ButterflyG2_dinXTwdl_re_dly1_next <= dout_7_1_re;
    Radix22ButterflyG2_dinXTwdl_im_dly1_next <= dout_7_1_im;
    Radix22ButterflyG2_multiply_J_dly1_next <= multiply_8_J;
    xf_re <= Radix22ButterflyG2_x_re_dly;
    xf_im <= Radix22ButterflyG2_x_im_dly;
    xf_vld <= Radix22ButterflyG2_x_vld_dly;
    dinf_re <= Radix22ButterflyG2_din_re_dly;
    dinf_im <= Radix22ButterflyG2_din_im_dly;
    dinf_vld <= Radix22ButterflyG2_din_vld_dly;
    sra_temp := SHIFT_RIGHT(Radix22ButterflyG2_btf1_re_reg, 1);
    btf1_re <= sra_temp(15 DOWNTO 0);
    sra_temp_0 := SHIFT_RIGHT(Radix22ButterflyG2_btf1_im_reg, 1);
    btf1_im <= sra_temp_0(15 DOWNTO 0);
    sra_temp_1 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_re_reg, 1);
    btf2_re <= sra_temp_1(15 DOWNTO 0);
    sra_temp_2 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_im_reg, 1);
    btf2_im <= sra_temp_2(15 DOWNTO 0);
    btfout_vld <= Radix22ButterflyG2_procEnb_dly2;
  END PROCESS Radix22ButterflyG2_output;


  dinXTwdl_8_1_vld <= btfin_vld;

END rtl;


-- End of RADIX22FFT_SDF2_8.vhd --

-- Start of RADIX22FFT_SDF2_8_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF2_8_block.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF2_8_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_SDF2_8
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF2_8_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_7_1_re                       :   IN    signed(15 DOWNTO 0);  -- sfix16
        dout_7_1_im                       :   IN    signed(15 DOWNTO 0);  -- sfix16
        dout_7_1_vld                      :   IN    std_logic;
        rd_8_Addr                         :   IN    unsigned(3 DOWNTO 0);  -- ufix4
        rd_8_Enb                          :   IN    std_logic;
        proc_8_enb                        :   IN    std_logic;
        multiply_8_J                      :   IN    std_logic;
        dout_8_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_8_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_8_1_vld                      :   OUT   std_logic;
        dinXTwdl_8_1_vld                  :   OUT   std_logic
        );
END RADIX22FFT_SDF2_8_block;


ARCHITECTURE rtl OF RADIX22FFT_SDF2_8_block IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SDFCommutator8_block
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_7_1_vld                    :   IN    std_logic;
          xf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
          xf_vld                          :   IN    std_logic;
          dinf_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinf_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          dinf_vld                        :   IN    std_logic;
          btf1_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf1_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_re                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btf2_im                         :   IN    signed(15 DOWNTO 0);  -- sfix16
          btfout_vld                      :   IN    std_logic;
          wrData_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrData_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
          wrAddr                          :   OUT   unsigned(3 DOWNTO 0);  -- ufix4
          wrEnb                           :   OUT   std_logic;
          dout_8_1_re                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_8_1_im                     :   OUT   signed(15 DOWNTO 0);  -- sfix16
          dout_8_1_vld                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  FOR ALL : SDFCommutator8_block
    USE ENTITY work.SDFCommutator8_block(rtl);

  -- Signals
  SIGNAL btfin_vld                        : std_logic;
  SIGNAL saveEnb                          : std_logic;
  SIGNAL dinVld                           : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL x_vld_dly                        : std_logic;
  SIGNAL wrData_im                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrAddr                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL wrEnb                            : std_logic;
  SIGNAL x_im                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_im_dly                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrData_re                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re                             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL x_re_dly                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_procEnb_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1  : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2  : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf1_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_re_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_im_reg   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_din_re_dly    : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_im_dly    : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_vld_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_im_dly      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_vld_dly     : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_multiply_J_dly1 : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2_next : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf1_im_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_re_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_btf2_im_reg_next : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Radix22ButterflyG2_din_re_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_im_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_din_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_im_dly_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_x_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Radix22ButterflyG2_multiply_J_dly1_next : std_logic;
  SIGNAL xf_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinf_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinf_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dinf_vld                         : std_logic;
  SIGNAL btf1_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf1_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_re                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btf2_im                          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL btfout_vld                       : std_logic;

BEGIN
  u_dataMEM_im_0_8_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_im,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_8_Addr,
              dout => x_im
              );

  u_dataMEM_re_0_8_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_re,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_8_Addr,
              dout => x_re
              );

  u_SDFCOMMUTATOR_8 : SDFCommutator8_block
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_7_1_vld => dout_7_1_vld,
              xf_re => xf_re,  -- sfix16
              xf_im => xf_im,  -- sfix16
              xf_vld => xf_vld,
              dinf_re => dinf_re,  -- sfix16
              dinf_im => dinf_im,  -- sfix16
              dinf_vld => dinf_vld,
              btf1_re => btf1_re,  -- sfix16
              btf1_im => btf1_im,  -- sfix16
              btf2_re => btf2_re,  -- sfix16
              btf2_im => btf2_im,  -- sfix16
              btfout_vld => btfout_vld,
              wrData_re => wrData_re,  -- sfix16
              wrData_im => wrData_im,  -- sfix16
              wrAddr => wrAddr,  -- ufix4
              wrEnb => wrEnb,
              dout_8_1_re => dout_8_1_re,  -- sfix16
              dout_8_1_im => dout_8_1_im,  -- sfix16
              dout_8_1_vld => dout_8_1_vld
              );

  btfin_vld <= dout_7_1_vld AND proc_8_enb;

  saveEnb <=  NOT btfin_vld;

  dinVld <= dout_7_1_vld AND saveEnb;

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_8_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld_dly <= '0';
      ELSIF enb = '1' THEN
        x_vld_dly <= x_vld;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_im_dly <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        x_im_dly <= x_im;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_re_dly <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        x_re_dly <= x_re;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Radix22ButterflyG2
  Radix22ButterflyG2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= '0';
        Radix22ButterflyG2_procEnb_dly1 <= '0';
        Radix22ButterflyG2_procEnb_dly2 <= '0';
        Radix22ButterflyG2_btf1_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf1_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf2_re_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_btf2_im_reg <= to_signed(16#00000#, 17);
        Radix22ButterflyG2_din_re_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_din_im_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_din_vld_dly <= '0';
        Radix22ButterflyG2_x_re_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_x_im_dly <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_x_vld_dly <= '0';
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= to_signed(16#0000#, 16);
        Radix22ButterflyG2_multiply_J_dly1 <= '0';
      ELSIF enb = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= Radix22ButterflyG2_procEnb_dly_next;
        Radix22ButterflyG2_procEnb_dly1 <= Radix22ButterflyG2_procEnb_dly1_next;
        Radix22ButterflyG2_procEnb_dly2 <= Radix22ButterflyG2_procEnb_dly2_next;
        Radix22ButterflyG2_btf1_re_reg <= Radix22ButterflyG2_btf1_re_reg_next;
        Radix22ButterflyG2_btf1_im_reg <= Radix22ButterflyG2_btf1_im_reg_next;
        Radix22ButterflyG2_btf2_re_reg <= Radix22ButterflyG2_btf2_re_reg_next;
        Radix22ButterflyG2_btf2_im_reg <= Radix22ButterflyG2_btf2_im_reg_next;
        Radix22ButterflyG2_din_re_dly <= Radix22ButterflyG2_din_re_dly_next;
        Radix22ButterflyG2_din_im_dly <= Radix22ButterflyG2_din_im_dly_next;
        Radix22ButterflyG2_din_vld_dly <= Radix22ButterflyG2_din_vld_dly_next;
        Radix22ButterflyG2_x_re_dly <= Radix22ButterflyG2_x_re_dly_next;
        Radix22ButterflyG2_x_im_dly <= Radix22ButterflyG2_x_im_dly_next;
        Radix22ButterflyG2_x_vld_dly <= Radix22ButterflyG2_x_vld_dly_next;
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= Radix22ButterflyG2_dinXTwdl_re_dly1_next;
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= Radix22ButterflyG2_dinXTwdl_im_dly1_next;
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= Radix22ButterflyG2_dinXTwdl_re_dly2_next;
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= Radix22ButterflyG2_dinXTwdl_im_dly2_next;
        Radix22ButterflyG2_multiply_J_dly1 <= Radix22ButterflyG2_multiply_J_dly1_next;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG2_process;

  Radix22ButterflyG2_output : PROCESS (Radix22ButterflyG2_btf1_im_reg, Radix22ButterflyG2_btf1_re_reg,
       Radix22ButterflyG2_btf2_im_reg, Radix22ButterflyG2_btf2_re_reg,
       Radix22ButterflyG2_dinXTwdl_im_dly1, Radix22ButterflyG2_dinXTwdl_im_dly2,
       Radix22ButterflyG2_dinXTwdl_re_dly1, Radix22ButterflyG2_dinXTwdl_re_dly2,
       Radix22ButterflyG2_din_im_dly, Radix22ButterflyG2_din_re_dly,
       Radix22ButterflyG2_din_vld_dly, Radix22ButterflyG2_multiply_J_dly1,
       Radix22ButterflyG2_procEnb_dly, Radix22ButterflyG2_procEnb_dly1,
       Radix22ButterflyG2_procEnb_dly2, Radix22ButterflyG2_x_im_dly,
       Radix22ButterflyG2_x_re_dly, Radix22ButterflyG2_x_vld_dly, btfin_vld,
       dinVld, dout_7_1_im, dout_7_1_re, multiply_8_J, x_im_dly, x_re_dly,
       x_vld_dly)
    VARIABLE sra_temp : signed(16 DOWNTO 0);
    VARIABLE sra_temp_0 : signed(16 DOWNTO 0);
    VARIABLE sra_temp_1 : signed(16 DOWNTO 0);
    VARIABLE sra_temp_2 : signed(16 DOWNTO 0);
  BEGIN
    Radix22ButterflyG2_x_re_dly_next <= x_re_dly;
    Radix22ButterflyG2_x_im_dly_next <= x_im_dly;
    Radix22ButterflyG2_x_vld_dly_next <= x_vld_dly;
    Radix22ButterflyG2_din_re_dly_next <= dout_7_1_re;
    Radix22ButterflyG2_din_im_dly_next <= dout_7_1_im;
    Radix22ButterflyG2_din_vld_dly_next <= dinVld;
    Radix22ButterflyG2_procEnb_dly2_next <= Radix22ButterflyG2_procEnb_dly1;
    Radix22ButterflyG2_procEnb_dly1_next <= Radix22ButterflyG2_procEnb_dly;
    Radix22ButterflyG2_procEnb_dly_next <= btfin_vld;
    IF Radix22ButterflyG2_multiply_J_dly1 = '1' THEN 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
    ELSE 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 17);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 17) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 17) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 17);
    END IF;
    Radix22ButterflyG2_dinXTwdl_re_dly2_next <= Radix22ButterflyG2_dinXTwdl_re_dly1;
    Radix22ButterflyG2_dinXTwdl_im_dly2_next <= Radix22ButterflyG2_dinXTwdl_im_dly1;
    Radix22ButterflyG2_dinXTwdl_re_dly1_next <= dout_7_1_re;
    Radix22ButterflyG2_dinXTwdl_im_dly1_next <= dout_7_1_im;
    Radix22ButterflyG2_multiply_J_dly1_next <= multiply_8_J;
    xf_re <= Radix22ButterflyG2_x_re_dly;
    xf_im <= Radix22ButterflyG2_x_im_dly;
    xf_vld <= Radix22ButterflyG2_x_vld_dly;
    dinf_re <= Radix22ButterflyG2_din_re_dly;
    dinf_im <= Radix22ButterflyG2_din_im_dly;
    dinf_vld <= Radix22ButterflyG2_din_vld_dly;
    sra_temp := SHIFT_RIGHT(Radix22ButterflyG2_btf1_re_reg, 1);
    btf1_re <= sra_temp(15 DOWNTO 0);
    sra_temp_0 := SHIFT_RIGHT(Radix22ButterflyG2_btf1_im_reg, 1);
    btf1_im <= sra_temp_0(15 DOWNTO 0);
    sra_temp_1 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_re_reg, 1);
    btf2_re <= sra_temp_1(15 DOWNTO 0);
    sra_temp_2 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_im_reg, 1);
    btf2_im <= sra_temp_2(15 DOWNTO 0);
    btfout_vld <= Radix22ButterflyG2_procEnb_dly2;
  END PROCESS Radix22ButterflyG2_output;


  dinXTwdl_8_1_vld <= btfin_vld;

END rtl;


-- End of RADIX22FFT_SDF2_8_block.vhd --

-- Start of RADIX22FFT_SDF2_8_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\RADIX22FFT_SDF2_8_block1.vhd
-- Created: 2025-03-18 15:26:31
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_SDF2_8_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_SDF2_8
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY RADIX22FFT_SDF2_8_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_7_1_re                       :   IN    signed(31 DOWNTO 0);  -- sfix32
        dout_7_1_im                       :   IN    signed(31 DOWNTO 0);  -- sfix32
        dout_7_1_vld                      :   IN    std_logic;
        rd_8_Addr                         :   IN    unsigned(6 DOWNTO 0);  -- ufix7
        rd_8_Enb                          :   IN    std_logic;
        proc_8_enb                        :   IN    std_logic;
        multiply_8_J                      :   IN    std_logic;
        dout_8_1_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_8_1_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_8_1_vld                      :   OUT   std_logic;
        dinXTwdl_8_1_vld                  :   OUT   std_logic
        );
END RADIX22FFT_SDF2_8_block1;


ARCHITECTURE rtl OF RADIX22FFT_SDF2_8_block1 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT SDFCommutator8_block1
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          dout_7_1_vld                    :   IN    std_logic;
          xf_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
          xf_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
          xf_vld                          :   IN    std_logic;
          dinf_re                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          dinf_im                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          dinf_vld                        :   IN    std_logic;
          btf1_re                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf1_im                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf2_re                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btf2_im                         :   IN    signed(31 DOWNTO 0);  -- sfix32
          btfout_vld                      :   IN    std_logic;
          wrData_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
          wrData_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
          wrAddr                          :   OUT   unsigned(6 DOWNTO 0);  -- ufix7
          wrEnb                           :   OUT   std_logic;
          dout_8_1_re                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_8_1_im                     :   OUT   signed(31 DOWNTO 0);  -- sfix32
          dout_8_1_vld                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  FOR ALL : SDFCommutator8_block1
    USE ENTITY work.SDFCommutator8_block1(rtl);

  -- Signals
  SIGNAL btfin_vld                        : std_logic;
  SIGNAL saveEnb                          : std_logic;
  SIGNAL dinVld                           : std_logic;
  SIGNAL x_vld                            : std_logic;
  SIGNAL x_vld_dly                        : std_logic;
  SIGNAL wrData_im                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrAddr                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL wrEnb                            : std_logic;
  SIGNAL x_im                             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL x_im_dly                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrData_re                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL x_re                             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL x_re_dly                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_procEnb_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1  : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2  : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf1_im_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf2_re_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf2_im_reg   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_din_re_dly    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_din_im_dly    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_din_vld_dly   : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_x_im_dly      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_x_vld_dly     : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_multiply_J_dly1 : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly1_next : std_logic;
  SIGNAL Radix22ButterflyG2_procEnb_dly2_next : std_logic;
  SIGNAL Radix22ButterflyG2_btf1_re_reg_next : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf1_im_reg_next : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf2_re_reg_next : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_btf2_im_reg_next : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Radix22ButterflyG2_din_re_dly_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_din_im_dly_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_din_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_x_re_dly_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_x_im_dly_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_x_vld_dly_next : std_logic;
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly1_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly1_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_re_dly2_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_dinXTwdl_im_dly2_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Radix22ButterflyG2_multiply_J_dly1_next : std_logic;
  SIGNAL xf_re                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xf_im                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xf_vld                           : std_logic;
  SIGNAL dinf_re                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinf_im                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dinf_vld                         : std_logic;
  SIGNAL btf1_re                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf1_im                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf2_re                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btf2_im                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL btfout_vld                       : std_logic;

BEGIN
  u_dataMEM_im_0_8_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 7,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_im,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_8_Addr,
              dout => x_im
              );

  u_dataMEM_re_0_8_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 7,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => wrData_re,
              wr_addr => wrAddr,
              wr_en => wrEnb,
              rd_addr => rd_8_Addr,
              dout => x_re
              );

  u_SDFCOMMUTATOR_8 : SDFCommutator8_block1
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              dout_7_1_vld => dout_7_1_vld,
              xf_re => xf_re,  -- sfix32
              xf_im => xf_im,  -- sfix32
              xf_vld => xf_vld,
              dinf_re => dinf_re,  -- sfix32
              dinf_im => dinf_im,  -- sfix32
              dinf_vld => dinf_vld,
              btf1_re => btf1_re,  -- sfix32
              btf1_im => btf1_im,  -- sfix32
              btf2_re => btf2_re,  -- sfix32
              btf2_im => btf2_im,  -- sfix32
              btfout_vld => btfout_vld,
              wrData_re => wrData_re,  -- sfix32
              wrData_im => wrData_im,  -- sfix32
              wrAddr => wrAddr,  -- ufix7
              wrEnb => wrEnb,
              dout_8_1_re => dout_8_1_re,  -- sfix32
              dout_8_1_im => dout_8_1_im,  -- sfix32
              dout_8_1_vld => dout_8_1_vld
              );

  btfin_vld <= dout_7_1_vld AND proc_8_enb;

  saveEnb <=  NOT btfin_vld;

  dinVld <= dout_7_1_vld AND saveEnb;

  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld <= '0';
      ELSIF enb = '1' THEN
        x_vld <= rd_8_Enb;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_vld_dly <= '0';
      ELSIF enb = '1' THEN
        x_vld_dly <= x_vld;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_im_dly <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        x_im_dly <= x_im;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        x_re_dly <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        x_re_dly <= x_re;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Radix22ButterflyG2
  Radix22ButterflyG2_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= '0';
        Radix22ButterflyG2_procEnb_dly1 <= '0';
        Radix22ButterflyG2_procEnb_dly2 <= '0';
        Radix22ButterflyG2_btf1_re_reg <= to_signed(0, 33);
        Radix22ButterflyG2_btf1_im_reg <= to_signed(0, 33);
        Radix22ButterflyG2_btf2_re_reg <= to_signed(0, 33);
        Radix22ButterflyG2_btf2_im_reg <= to_signed(0, 33);
        Radix22ButterflyG2_din_re_dly <= to_signed(0, 32);
        Radix22ButterflyG2_din_im_dly <= to_signed(0, 32);
        Radix22ButterflyG2_din_vld_dly <= '0';
        Radix22ButterflyG2_x_re_dly <= to_signed(0, 32);
        Radix22ButterflyG2_x_im_dly <= to_signed(0, 32);
        Radix22ButterflyG2_x_vld_dly <= '0';
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= to_signed(0, 32);
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= to_signed(0, 32);
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= to_signed(0, 32);
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= to_signed(0, 32);
        Radix22ButterflyG2_multiply_J_dly1 <= '0';
      ELSIF enb = '1' THEN
        Radix22ButterflyG2_procEnb_dly <= Radix22ButterflyG2_procEnb_dly_next;
        Radix22ButterflyG2_procEnb_dly1 <= Radix22ButterflyG2_procEnb_dly1_next;
        Radix22ButterflyG2_procEnb_dly2 <= Radix22ButterflyG2_procEnb_dly2_next;
        Radix22ButterflyG2_btf1_re_reg <= Radix22ButterflyG2_btf1_re_reg_next;
        Radix22ButterflyG2_btf1_im_reg <= Radix22ButterflyG2_btf1_im_reg_next;
        Radix22ButterflyG2_btf2_re_reg <= Radix22ButterflyG2_btf2_re_reg_next;
        Radix22ButterflyG2_btf2_im_reg <= Radix22ButterflyG2_btf2_im_reg_next;
        Radix22ButterflyG2_din_re_dly <= Radix22ButterflyG2_din_re_dly_next;
        Radix22ButterflyG2_din_im_dly <= Radix22ButterflyG2_din_im_dly_next;
        Radix22ButterflyG2_din_vld_dly <= Radix22ButterflyG2_din_vld_dly_next;
        Radix22ButterflyG2_x_re_dly <= Radix22ButterflyG2_x_re_dly_next;
        Radix22ButterflyG2_x_im_dly <= Radix22ButterflyG2_x_im_dly_next;
        Radix22ButterflyG2_x_vld_dly <= Radix22ButterflyG2_x_vld_dly_next;
        Radix22ButterflyG2_dinXTwdl_re_dly1 <= Radix22ButterflyG2_dinXTwdl_re_dly1_next;
        Radix22ButterflyG2_dinXTwdl_im_dly1 <= Radix22ButterflyG2_dinXTwdl_im_dly1_next;
        Radix22ButterflyG2_dinXTwdl_re_dly2 <= Radix22ButterflyG2_dinXTwdl_re_dly2_next;
        Radix22ButterflyG2_dinXTwdl_im_dly2 <= Radix22ButterflyG2_dinXTwdl_im_dly2_next;
        Radix22ButterflyG2_multiply_J_dly1 <= Radix22ButterflyG2_multiply_J_dly1_next;
      END IF;
    END IF;
  END PROCESS Radix22ButterflyG2_process;

  Radix22ButterflyG2_output : PROCESS (Radix22ButterflyG2_btf1_im_reg, Radix22ButterflyG2_btf1_re_reg,
       Radix22ButterflyG2_btf2_im_reg, Radix22ButterflyG2_btf2_re_reg,
       Radix22ButterflyG2_dinXTwdl_im_dly1, Radix22ButterflyG2_dinXTwdl_im_dly2,
       Radix22ButterflyG2_dinXTwdl_re_dly1, Radix22ButterflyG2_dinXTwdl_re_dly2,
       Radix22ButterflyG2_din_im_dly, Radix22ButterflyG2_din_re_dly,
       Radix22ButterflyG2_din_vld_dly, Radix22ButterflyG2_multiply_J_dly1,
       Radix22ButterflyG2_procEnb_dly, Radix22ButterflyG2_procEnb_dly1,
       Radix22ButterflyG2_procEnb_dly2, Radix22ButterflyG2_x_im_dly,
       Radix22ButterflyG2_x_re_dly, Radix22ButterflyG2_x_vld_dly, btfin_vld,
       dinVld, dout_7_1_im, dout_7_1_re, multiply_8_J, x_im_dly, x_re_dly,
       x_vld_dly)
    VARIABLE sra_temp : signed(32 DOWNTO 0);
    VARIABLE sra_temp_0 : signed(32 DOWNTO 0);
    VARIABLE sra_temp_1 : signed(32 DOWNTO 0);
    VARIABLE sra_temp_2 : signed(32 DOWNTO 0);
  BEGIN
    Radix22ButterflyG2_x_re_dly_next <= x_re_dly;
    Radix22ButterflyG2_x_im_dly_next <= x_im_dly;
    Radix22ButterflyG2_x_vld_dly_next <= x_vld_dly;
    Radix22ButterflyG2_din_re_dly_next <= dout_7_1_re;
    Radix22ButterflyG2_din_im_dly_next <= dout_7_1_im;
    Radix22ButterflyG2_din_vld_dly_next <= dinVld;
    Radix22ButterflyG2_procEnb_dly2_next <= Radix22ButterflyG2_procEnb_dly1;
    Radix22ButterflyG2_procEnb_dly1_next <= Radix22ButterflyG2_procEnb_dly;
    Radix22ButterflyG2_procEnb_dly_next <= btfin_vld;
    IF Radix22ButterflyG2_multiply_J_dly1 = '1' THEN 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 33) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 33);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 33) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 33);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 33) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 33);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 33) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 33);
    ELSE 
      Radix22ButterflyG2_btf1_re_reg_next <= resize(x_re_dly, 33) + resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 33);
      Radix22ButterflyG2_btf2_re_reg_next <= resize(x_re_dly, 33) - resize(Radix22ButterflyG2_dinXTwdl_re_dly2, 33);
      Radix22ButterflyG2_btf1_im_reg_next <= resize(x_im_dly, 33) + resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 33);
      Radix22ButterflyG2_btf2_im_reg_next <= resize(x_im_dly, 33) - resize(Radix22ButterflyG2_dinXTwdl_im_dly2, 33);
    END IF;
    Radix22ButterflyG2_dinXTwdl_re_dly2_next <= Radix22ButterflyG2_dinXTwdl_re_dly1;
    Radix22ButterflyG2_dinXTwdl_im_dly2_next <= Radix22ButterflyG2_dinXTwdl_im_dly1;
    Radix22ButterflyG2_dinXTwdl_re_dly1_next <= dout_7_1_re;
    Radix22ButterflyG2_dinXTwdl_im_dly1_next <= dout_7_1_im;
    Radix22ButterflyG2_multiply_J_dly1_next <= multiply_8_J;
    xf_re <= Radix22ButterflyG2_x_re_dly;
    xf_im <= Radix22ButterflyG2_x_im_dly;
    xf_vld <= Radix22ButterflyG2_x_vld_dly;
    dinf_re <= Radix22ButterflyG2_din_re_dly;
    dinf_im <= Radix22ButterflyG2_din_im_dly;
    dinf_vld <= Radix22ButterflyG2_din_vld_dly;
    sra_temp := SHIFT_RIGHT(Radix22ButterflyG2_btf1_re_reg, 1);
    btf1_re <= sra_temp(31 DOWNTO 0);
    sra_temp_0 := SHIFT_RIGHT(Radix22ButterflyG2_btf1_im_reg, 1);
    btf1_im <= sra_temp_0(31 DOWNTO 0);
    sra_temp_1 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_re_reg, 1);
    btf2_re <= sra_temp_1(31 DOWNTO 0);
    sra_temp_2 := SHIFT_RIGHT(Radix22ButterflyG2_btf2_im_reg, 1);
    btf2_im <= sra_temp_2(31 DOWNTO 0);
    btfout_vld <= Radix22ButterflyG2_procEnb_dly2;
  END PROCESS Radix22ButterflyG2_output;


  dinXTwdl_8_1_vld <= btfin_vld;

END rtl;


-- End of RADIX22FFT_SDF2_8_block1.vhd --

-- Start of SDFCommutator1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator1.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator1
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF1_1/SDFCommutator1
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_1_vld_dly                     :   IN    std_logic;
        xf_re                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_im                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_vld                            :   IN    std_logic;
        dinXTwdlf_re                      :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinXTwdlf_im                      :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinxTwdlf_vld                     :   IN    std_logic;
        btf1_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf1_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf_vld                           :   IN    std_logic;
        wrData_re                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrAddr                            :   OUT   unsigned(10 DOWNTO 0);  -- ufix11
        wrEnb                             :   OUT   std_logic;
        dout_1_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_1_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_1_1_vld                      :   OUT   std_logic
        );
END SDFCommutator1;


ARCHITECTURE rtl OF SDFCommutator1 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt              : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL SDFCummutator_wrData_re_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt_next         : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL wrData_im                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xData_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xData_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xX_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_1_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_1_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(16#0000#, 16);
        SDFCummutator_out_im <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_mem_btf_switch <= to_unsigned(16#0#, 2);
        SDFCummutator_wrAddr_reg <= to_unsigned(16#000#, 11);
        SDFCummutator_rdCnt <= to_unsigned(16#000#, 11);
        SDFCummutator_wrXData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_rdEnb_xmem <= '0';
        SDFCummutator_wrEnb_xmem <= '0';
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_mem_btf_switch <= SDFCummutator_mem_btf_switch_next;
        SDFCummutator_rdCnt <= SDFCummutator_rdCnt_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_rdEnb_xmem <= SDFCummutator_rdEnb_xmem_next;
        SDFCummutator_wrEnb_xmem <= SDFCummutator_wrEnb_xmem_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_mem_btf_switch, SDFCummutator_out_im,
       SDFCummutator_out_re, SDFCummutator_out_vld, SDFCummutator_rdCnt,
       SDFCummutator_rdEnb_xmem, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrEnb_xmem, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btf_vld,
       dinXTwdlf_im, dinXTwdlf_re, dinxTwdlf_vld, xf_im, xf_re, xf_vld)
  BEGIN
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt;
    SDFCummutator_wrData_re_reg_next <= SDFCummutator_wrData_re_reg;
    SDFCummutator_wrData_im_reg_next <= SDFCummutator_wrData_im_reg;
    SDFCummutator_wrEnb_reg_next <= SDFCummutator_wrEnb_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_rdEnb_xmem_next <= SDFCummutator_rdEnb_xmem;
    SDFCummutator_wrEnb_xmem_next <= SDFCummutator_wrEnb_xmem;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
        IF (SDFCummutator_wrEnb_xmem = '1' AND (SDFCummutator_wrAddr_reg = to_unsigned(16#7F7#, 11))) AND SDFCummutator_wrEnb_reg = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          IF btf_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
          END IF;
        END IF;
      WHEN "001" =>
        SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btf_vld = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          IF SDFCummutator_rdEnb_xmem = '1' THEN 
            SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
            SDFCummutator_xX_vld_reg_next <= '1';
            SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#3#, 3);
          END IF;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btf_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "011" =>
        IF SDFCummutator_rdEnb_xmem = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          IF SDFCummutator_wrEnb_xmem = '1' THEN 
            SDFCummutator_wrXData_re_reg_next <= btf2_re;
            SDFCummutator_wrXData_im_reg_next <= btf2_im;
            IF btf_vld = '1' THEN 
              SDFCummutator_wrxEnb_reg_next <= '1';
              SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
            ELSE 
              SDFCummutator_wrxEnb_reg_next <= '0';
              SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
            END IF;
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
            SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    CASE SDFCummutator_mem_btf_switch IS
      WHEN "00" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 11);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= '0';
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 11);
        END IF;
      WHEN "01" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF (SDFCummutator_rdCnt = to_unsigned(16#7FF#, 11)) AND btf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        END IF;
        IF btf_vld = '1' THEN 
          SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#001#, 11);
        END IF;
        SDFCummutator_out_re_next <= btf1_re;
        SDFCummutator_out_im_next <= btf1_im;
        SDFCummutator_out_vld_next <= btf_vld;
      WHEN "10" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        IF (SDFCummutator_rdCnt = to_unsigned(16#7F7#, 11)) AND xf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdEnb_xmem_next <= '1';
        END IF;
        IF xf_vld = '1' THEN 
          IF SDFCummutator_rdCnt = to_unsigned(16#7F7#, 11) THEN 
            SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 11);
          ELSE 
            SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#001#, 11);
          END IF;
        END IF;
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
      WHEN OTHERS => 
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 11);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
    END CASE;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrEnb_xmem_next <= '0';
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 11);
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 11);
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#7FF#, 11) THEN 
          IF btf_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
          END IF;
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 11);
          SDFCummutator_wrEnb_reg_next <= btf_vld;
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        ELSIF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#001#, 11);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
          SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        END IF;
      WHEN "010" =>
        SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#7F6#, 11) THEN 
          SDFCummutator_wrEnb_xmem_next <= '1';
        END IF;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#7F7#, 11) THEN 
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#001#, 11);
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          SDFCummutator_wrEnb_reg_next <= '0';
          SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
          SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        ELSIF btf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#001#, 11);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 11);
        SDFCummutator_wrEnb_reg_next <= dinxTwdlf_vld;
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        END IF;
      WHEN "100" =>
        SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF btf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 11);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 11);
        SDFCummutator_wrEnb_reg_next <= dinxTwdlf_vld;
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(16#0000#, 16);
        SDFOutmux_btf2Pipe_im <= to_signed(16#0000#, 16);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_1_1_re <= SDFOutmux_btf2Pipe_re;
    dout_1_1_im <= SDFOutmux_btf2Pipe_im;
    dout_1_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator1.vhd --

-- Start of SDFCommutator10.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator10.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator10
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF2_10/SDFCommutator10
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator10 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_9_1_vld                      :   IN    std_logic;
        xf_re                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_im                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_vld                            :   IN    std_logic;
        dinf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinf_vld                          :   IN    std_logic;
        btf1_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf1_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btfout_vld                        :   IN    std_logic;
        wrData_re                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrData_im                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrAddr                            :   OUT   unsigned(1 DOWNTO 0);  -- ufix2
        wrEnb                             :   OUT   std_logic;
        dout_10_1_re                      :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_10_1_im                      :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_10_1_vld                     :   OUT   std_logic
        );
END SDFCommutator10;


ARCHITECTURE rtl OF SDFCommutator10 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrData_re_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xData_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xX_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_10_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_10_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(16#0000#, 16);
        SDFCummutator_out_im <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg <= to_unsigned(16#0#, 2);
        SDFCummutator_wrXData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_out_im, SDFCummutator_out_re,
       SDFCummutator_out_vld, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btfout_vld,
       dinf_im, dinf_re, dinf_vld, dout_9_1_vld)
  BEGIN
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btfout_vld = '1' THEN 
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#3#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btfout_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#3#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          IF btfout_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    SDFCummutator_out_re_next <= btf1_re;
    SDFCummutator_out_im_next <= btf1_im;
    SDFCummutator_out_vld_next <= btfout_vld;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 2);
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        SDFCummutator_wrEnb_reg_next <= '0';
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 2);
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#3#, 2) THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
        END IF;
        IF dinf_vld = '1' THEN 
          IF SDFCummutator_wrAddr_reg = to_unsigned(16#3#, 2) THEN 
            SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 2);
            SDFCummutator_wrEnb_reg_next <= '0';
          ELSE 
            SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#1#, 2);
            SDFCummutator_wrEnb_reg_next <= '1';
          END IF;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#3#, 2) THEN 
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 2);
          IF dinf_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
            SDFCummutator_wrEnb_reg_next <= '1';
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrEnb_reg_next <= '0';
          END IF;
        ELSIF dout_9_1_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#1#, 2);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 2);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(16#0000#, 16);
        SDFOutmux_btf2Pipe_im <= to_signed(16#0000#, 16);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_10_1_re <= SDFOutmux_btf2Pipe_re;
    dout_10_1_im <= SDFOutmux_btf2Pipe_im;
    dout_10_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator10.vhd --

-- Start of SDFCommutator10_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator10_block.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator10_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_SDF2_10/SDFCommutator10
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator10_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_9_1_vld                      :   IN    std_logic;
        xf_re                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_im                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_vld                            :   IN    std_logic;
        dinf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinf_vld                          :   IN    std_logic;
        btf1_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf1_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btfout_vld                        :   IN    std_logic;
        wrData_re                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrData_im                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrAddr                            :   OUT   unsigned(1 DOWNTO 0);  -- ufix2
        wrEnb                             :   OUT   std_logic;
        dout_10_1_re                      :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_10_1_im                      :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_10_1_vld                     :   OUT   std_logic
        );
END SDFCommutator10_block;


ARCHITECTURE rtl OF SDFCommutator10_block IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrData_re_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xData_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xX_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_10_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_10_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(16#0000#, 16);
        SDFCummutator_out_im <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg <= to_unsigned(16#0#, 2);
        SDFCummutator_wrXData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_out_im, SDFCummutator_out_re,
       SDFCummutator_out_vld, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btfout_vld,
       dinf_im, dinf_re, dinf_vld, dout_9_1_vld)
  BEGIN
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btfout_vld = '1' THEN 
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#3#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btfout_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#3#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          IF btfout_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    SDFCummutator_out_re_next <= btf1_re;
    SDFCummutator_out_im_next <= btf1_im;
    SDFCummutator_out_vld_next <= btfout_vld;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 2);
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        SDFCummutator_wrEnb_reg_next <= '0';
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 2);
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#3#, 2) THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
        END IF;
        IF dinf_vld = '1' THEN 
          IF SDFCummutator_wrAddr_reg = to_unsigned(16#3#, 2) THEN 
            SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 2);
            SDFCummutator_wrEnb_reg_next <= '0';
          ELSE 
            SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#1#, 2);
            SDFCummutator_wrEnb_reg_next <= '1';
          END IF;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#3#, 2) THEN 
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 2);
          IF dinf_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
            SDFCummutator_wrEnb_reg_next <= '1';
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrEnb_reg_next <= '0';
          END IF;
        ELSIF dout_9_1_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#1#, 2);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 2);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(16#0000#, 16);
        SDFOutmux_btf2Pipe_im <= to_signed(16#0000#, 16);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_10_1_re <= SDFOutmux_btf2Pipe_re;
    dout_10_1_im <= SDFOutmux_btf2Pipe_im;
    dout_10_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator10_block.vhd --

-- Start of SDFCommutator10_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator10_block1.vhd
-- Created: 2025-03-18 15:26:31
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator10_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_SDF2_10/SDFCommutator10
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator10_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_9_1_vld                      :   IN    std_logic;
        xf_re                             :   IN    signed(31 DOWNTO 0);  -- sfix32
        xf_im                             :   IN    signed(31 DOWNTO 0);  -- sfix32
        xf_vld                            :   IN    std_logic;
        dinf_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        dinf_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        dinf_vld                          :   IN    std_logic;
        btf1_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf1_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf2_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf2_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btfout_vld                        :   IN    std_logic;
        wrData_re                         :   OUT   signed(31 DOWNTO 0);  -- sfix32
        wrData_im                         :   OUT   signed(31 DOWNTO 0);  -- sfix32
        wrAddr                            :   OUT   unsigned(8 DOWNTO 0);  -- ufix9
        wrEnb                             :   OUT   std_logic;
        dout_10_1_re                      :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_10_1_im                      :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_10_1_vld                     :   OUT   std_logic
        );
END SDFCommutator10_block1;


ARCHITECTURE rtl OF SDFCommutator10_block1 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_im             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt              : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL SDFCummutator_wrData_re_reg      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrData_im_reg      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_im_next        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt_next         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xData_im                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout0_im                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xX_im                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_10_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_10_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(0, 32);
        SDFCummutator_out_im <= to_signed(0, 32);
        SDFCummutator_wrData_re_reg <= to_signed(0, 32);
        SDFCummutator_wrData_im_reg <= to_signed(0, 32);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_mem_btf_switch <= to_unsigned(16#0#, 2);
        SDFCummutator_wrAddr_reg <= to_unsigned(16#000#, 9);
        SDFCummutator_rdCnt <= to_unsigned(16#000#, 9);
        SDFCummutator_wrXData_re_reg <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg <= to_signed(0, 32);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_rdEnb_xmem <= '0';
        SDFCummutator_wrEnb_xmem <= '0';
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_mem_btf_switch <= SDFCummutator_mem_btf_switch_next;
        SDFCummutator_rdCnt <= SDFCummutator_rdCnt_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_rdEnb_xmem <= SDFCummutator_rdEnb_xmem_next;
        SDFCummutator_wrEnb_xmem <= SDFCummutator_wrEnb_xmem_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_mem_btf_switch, SDFCummutator_out_im,
       SDFCummutator_out_re, SDFCummutator_out_vld, SDFCummutator_rdCnt,
       SDFCummutator_rdEnb_xmem, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrEnb_xmem, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btfout_vld,
       dinf_im, dinf_re, dinf_vld, xf_im, xf_re, xf_vld)
  BEGIN
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt;
    SDFCummutator_wrData_re_reg_next <= SDFCummutator_wrData_re_reg;
    SDFCummutator_wrData_im_reg_next <= SDFCummutator_wrData_im_reg;
    SDFCummutator_wrEnb_reg_next <= SDFCummutator_wrEnb_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_rdEnb_xmem_next <= SDFCummutator_rdEnb_xmem;
    SDFCummutator_wrEnb_xmem_next <= SDFCummutator_wrEnb_xmem;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
        IF (SDFCummutator_wrEnb_xmem = '1' AND (SDFCummutator_wrAddr_reg = to_unsigned(16#1F7#, 9))) AND SDFCummutator_wrEnb_reg = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          IF btfout_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
          END IF;
        END IF;
      WHEN "001" =>
        SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btfout_vld = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          IF SDFCummutator_rdEnb_xmem = '1' THEN 
            SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
            SDFCummutator_xX_vld_reg_next <= '1';
            SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#3#, 3);
          END IF;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btfout_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "011" =>
        IF SDFCummutator_rdEnb_xmem = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          IF SDFCummutator_wrEnb_xmem = '1' THEN 
            SDFCummutator_wrXData_re_reg_next <= btf2_re;
            SDFCummutator_wrXData_im_reg_next <= btf2_im;
            IF btfout_vld = '1' THEN 
              SDFCummutator_wrxEnb_reg_next <= '1';
              SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
            ELSE 
              SDFCummutator_wrxEnb_reg_next <= '0';
              SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
            END IF;
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
            SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    CASE SDFCummutator_mem_btf_switch IS
      WHEN "00" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 9);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= '0';
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF dinf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 9);
        END IF;
      WHEN "01" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF (SDFCummutator_rdCnt = to_unsigned(16#1FF#, 9)) AND btfout_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        END IF;
        IF btfout_vld = '1' THEN 
          SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#001#, 9);
        END IF;
        SDFCummutator_out_re_next <= btf1_re;
        SDFCummutator_out_im_next <= btf1_im;
        SDFCummutator_out_vld_next <= btfout_vld;
      WHEN "10" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        IF (SDFCummutator_rdCnt = to_unsigned(16#1F7#, 9)) AND xf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdEnb_xmem_next <= '1';
        END IF;
        IF xf_vld = '1' THEN 
          IF SDFCummutator_rdCnt = to_unsigned(16#1F7#, 9) THEN 
            SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 9);
          ELSE 
            SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#001#, 9);
          END IF;
        END IF;
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
      WHEN OTHERS => 
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 9);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
    END CASE;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrEnb_xmem_next <= '0';
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 9);
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 9);
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#1FF#, 9) THEN 
          IF btfout_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
          END IF;
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 9);
          SDFCummutator_wrEnb_reg_next <= btfout_vld;
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        ELSIF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#001#, 9);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= dinf_re;
          SDFCummutator_wrData_im_reg_next <= dinf_im;
        END IF;
      WHEN "010" =>
        SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#1F6#, 9) THEN 
          SDFCummutator_wrEnb_xmem_next <= '1';
        END IF;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#1F7#, 9) THEN 
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#001#, 9);
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          SDFCummutator_wrEnb_reg_next <= '0';
          SDFCummutator_wrData_re_reg_next <= dinf_re;
          SDFCummutator_wrData_im_reg_next <= dinf_im;
        ELSIF btfout_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#001#, 9);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 9);
        SDFCummutator_wrEnb_reg_next <= dinf_vld;
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        END IF;
      WHEN "100" =>
        SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF btfout_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 9);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 9);
        SDFCummutator_wrEnb_reg_next <= dinf_vld;
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(0, 32);
        SDFOutmux_btf2Pipe_im <= to_signed(0, 32);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_10_1_re <= SDFOutmux_btf2Pipe_re;
    dout_10_1_im <= SDFOutmux_btf2Pipe_im;
    dout_10_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator10_block1.vhd --

-- Start of SDFCommutator11.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator11.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator11
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF1_11/SDFCommutator11
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator11 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_11_vld_dly                    :   IN    std_logic;
        xf_re                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_im                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_vld                            :   IN    std_logic;
        dinXTwdlf_re                      :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinXTwdlf_im                      :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinxTwdlf_vld                     :   IN    std_logic;
        btf1_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf1_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf_vld                           :   IN    std_logic;
        wrData_re                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrData_im                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrAddr                            :   OUT   std_logic;  -- ufix1
        wrEnb                             :   OUT   std_logic;
        dout_11_1_re                      :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_11_1_im                      :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_11_1_vld                     :   OUT   std_logic
        );
END SDFCommutator11;


ARCHITECTURE rtl OF SDFCommutator11 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : std_logic;  -- ufix1
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrData_re_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : std_logic;  -- ufix1
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xData_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xX_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_11_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_11_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(16#0000#, 16);
        SDFCummutator_out_im <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg <= '0';
        SDFCummutator_wrXData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_out_im, SDFCummutator_out_re,
       SDFCummutator_out_vld, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btf_vld,
       dinXTwdlf_im, dinXTwdlf_re, din_11_vld_dly, dinxTwdlf_vld)
    VARIABLE add_cast : unsigned(1 DOWNTO 0);
    VARIABLE add_temp : unsigned(1 DOWNTO 0);
    VARIABLE add_cast_0 : unsigned(1 DOWNTO 0);
    VARIABLE add_temp_0 : unsigned(1 DOWNTO 0);
  BEGIN
    add_temp := to_unsigned(16#0#, 2);
    add_temp_0 := to_unsigned(16#0#, 2);
    add_cast := to_unsigned(16#0#, 2);
    add_cast_0 := to_unsigned(16#0#, 2);
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btf_vld = '1' THEN 
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#1#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btf_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#1#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          IF btf_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    SDFCummutator_out_re_next <= btf1_re;
    SDFCummutator_out_im_next <= btf1_im;
    SDFCummutator_out_vld_next <= btf_vld;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        SDFCummutator_wrEnb_reg_next <= '0';
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= '0';
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        IF SDFCummutator_wrAddr_reg = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
        END IF;
        IF dinxTwdlf_vld = '1' THEN 
          IF SDFCummutator_wrAddr_reg = '1' THEN 
            SDFCummutator_wrAddr_reg_next <= '0';
            SDFCummutator_wrEnb_reg_next <= '0';
          ELSE 
            add_cast_0 := '0' & SDFCummutator_wrAddr_reg;
            add_temp_0 := add_cast_0 + to_unsigned(16#1#, 2);
            SDFCummutator_wrAddr_reg_next <= add_temp_0(0);
            SDFCummutator_wrEnb_reg_next <= '1';
          END IF;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        IF SDFCummutator_wrAddr_reg = '1' THEN 
          SDFCummutator_wrAddr_reg_next <= '0';
          IF dinxTwdlf_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
            SDFCummutator_wrEnb_reg_next <= '1';
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrEnb_reg_next <= '0';
          END IF;
        ELSIF din_11_vld_dly = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          add_cast := '0' & SDFCummutator_wrAddr_reg;
          add_temp := add_cast + to_unsigned(16#1#, 2);
          SDFCummutator_wrAddr_reg_next <= add_temp(0);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= '0';
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(16#0000#, 16);
        SDFOutmux_btf2Pipe_im <= to_signed(16#0000#, 16);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_11_1_re <= SDFOutmux_btf2Pipe_re;
    dout_11_1_im <= SDFOutmux_btf2Pipe_im;
    dout_11_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator11.vhd --

-- Start of SDFCommutator11_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator11_block.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator11_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_SDF1_11/SDFCommutator11
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator11_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_11_vld_dly                    :   IN    std_logic;
        xf_re                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_im                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_vld                            :   IN    std_logic;
        dinXTwdlf_re                      :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinXTwdlf_im                      :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinxTwdlf_vld                     :   IN    std_logic;
        btf1_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf1_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf_vld                           :   IN    std_logic;
        wrData_re                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrData_im                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrAddr                            :   OUT   std_logic;  -- ufix1
        wrEnb                             :   OUT   std_logic;
        dout_11_1_re                      :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_11_1_im                      :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_11_1_vld                     :   OUT   std_logic
        );
END SDFCommutator11_block;


ARCHITECTURE rtl OF SDFCommutator11_block IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : std_logic;  -- ufix1
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrData_re_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : std_logic;  -- ufix1
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xData_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xX_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_11_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_11_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(16#0000#, 16);
        SDFCummutator_out_im <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg <= '0';
        SDFCummutator_wrXData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_out_im, SDFCummutator_out_re,
       SDFCummutator_out_vld, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btf_vld,
       dinXTwdlf_im, dinXTwdlf_re, din_11_vld_dly, dinxTwdlf_vld)
    VARIABLE add_cast : unsigned(1 DOWNTO 0);
    VARIABLE add_temp : unsigned(1 DOWNTO 0);
    VARIABLE add_cast_0 : unsigned(1 DOWNTO 0);
    VARIABLE add_temp_0 : unsigned(1 DOWNTO 0);
  BEGIN
    add_temp := to_unsigned(16#0#, 2);
    add_temp_0 := to_unsigned(16#0#, 2);
    add_cast := to_unsigned(16#0#, 2);
    add_cast_0 := to_unsigned(16#0#, 2);
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btf_vld = '1' THEN 
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#1#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btf_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#1#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          IF btf_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    SDFCummutator_out_re_next <= btf1_re;
    SDFCummutator_out_im_next <= btf1_im;
    SDFCummutator_out_vld_next <= btf_vld;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        SDFCummutator_wrEnb_reg_next <= '0';
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= '0';
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        IF SDFCummutator_wrAddr_reg = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
        END IF;
        IF dinxTwdlf_vld = '1' THEN 
          IF SDFCummutator_wrAddr_reg = '1' THEN 
            SDFCummutator_wrAddr_reg_next <= '0';
            SDFCummutator_wrEnb_reg_next <= '0';
          ELSE 
            add_cast_0 := '0' & SDFCummutator_wrAddr_reg;
            add_temp_0 := add_cast_0 + to_unsigned(16#1#, 2);
            SDFCummutator_wrAddr_reg_next <= add_temp_0(0);
            SDFCummutator_wrEnb_reg_next <= '1';
          END IF;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        IF SDFCummutator_wrAddr_reg = '1' THEN 
          SDFCummutator_wrAddr_reg_next <= '0';
          IF dinxTwdlf_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
            SDFCummutator_wrEnb_reg_next <= '1';
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrEnb_reg_next <= '0';
          END IF;
        ELSIF din_11_vld_dly = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          add_cast := '0' & SDFCummutator_wrAddr_reg;
          add_temp := add_cast + to_unsigned(16#1#, 2);
          SDFCummutator_wrAddr_reg_next <= add_temp(0);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= '0';
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(16#0000#, 16);
        SDFOutmux_btf2Pipe_im <= to_signed(16#0000#, 16);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_11_1_re <= SDFOutmux_btf2Pipe_re;
    dout_11_1_im <= SDFOutmux_btf2Pipe_im;
    dout_11_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator11_block.vhd --

-- Start of SDFCommutator11_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator11_block1.vhd
-- Created: 2025-03-18 15:26:31
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator11_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_SDF1_11/SDFCommutator11
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator11_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_11_vld_dly                    :   IN    std_logic;
        xf_re                             :   IN    signed(31 DOWNTO 0);  -- sfix32
        xf_im                             :   IN    signed(31 DOWNTO 0);  -- sfix32
        xf_vld                            :   IN    std_logic;
        dinXTwdlf_re                      :   IN    signed(31 DOWNTO 0);  -- sfix32
        dinXTwdlf_im                      :   IN    signed(31 DOWNTO 0);  -- sfix32
        dinxTwdlf_vld                     :   IN    std_logic;
        btf1_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf1_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf2_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf2_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf_vld                           :   IN    std_logic;
        wrData_re                         :   OUT   signed(31 DOWNTO 0);  -- sfix32
        wrData_im                         :   OUT   signed(31 DOWNTO 0);  -- sfix32
        wrAddr                            :   OUT   unsigned(9 DOWNTO 0);  -- ufix10
        wrEnb                             :   OUT   std_logic;
        dout_11_1_re                      :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_11_1_im                      :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_11_1_vld                     :   OUT   std_logic
        );
END SDFCommutator11_block1;


ARCHITECTURE rtl OF SDFCommutator11_block1 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_im             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt              : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL SDFCummutator_wrData_re_reg      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrData_im_reg      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_im_next        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt_next         : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xData_im                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout0_im                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xX_im                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_11_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_11_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(0, 32);
        SDFCummutator_out_im <= to_signed(0, 32);
        SDFCummutator_wrData_re_reg <= to_signed(0, 32);
        SDFCummutator_wrData_im_reg <= to_signed(0, 32);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_mem_btf_switch <= to_unsigned(16#0#, 2);
        SDFCummutator_wrAddr_reg <= to_unsigned(16#000#, 10);
        SDFCummutator_rdCnt <= to_unsigned(16#000#, 10);
        SDFCummutator_wrXData_re_reg <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg <= to_signed(0, 32);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_rdEnb_xmem <= '0';
        SDFCummutator_wrEnb_xmem <= '0';
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_mem_btf_switch <= SDFCummutator_mem_btf_switch_next;
        SDFCummutator_rdCnt <= SDFCummutator_rdCnt_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_rdEnb_xmem <= SDFCummutator_rdEnb_xmem_next;
        SDFCummutator_wrEnb_xmem <= SDFCummutator_wrEnb_xmem_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_mem_btf_switch, SDFCummutator_out_im,
       SDFCummutator_out_re, SDFCummutator_out_vld, SDFCummutator_rdCnt,
       SDFCummutator_rdEnb_xmem, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrEnb_xmem, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btf_vld,
       dinXTwdlf_im, dinXTwdlf_re, dinxTwdlf_vld, xf_im, xf_re, xf_vld)
  BEGIN
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt;
    SDFCummutator_wrData_re_reg_next <= SDFCummutator_wrData_re_reg;
    SDFCummutator_wrData_im_reg_next <= SDFCummutator_wrData_im_reg;
    SDFCummutator_wrEnb_reg_next <= SDFCummutator_wrEnb_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_rdEnb_xmem_next <= SDFCummutator_rdEnb_xmem;
    SDFCummutator_wrEnb_xmem_next <= SDFCummutator_wrEnb_xmem;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
        IF (SDFCummutator_wrEnb_xmem = '1' AND (SDFCummutator_wrAddr_reg = to_unsigned(16#3F7#, 10))) AND SDFCummutator_wrEnb_reg = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          IF btf_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
          END IF;
        END IF;
      WHEN "001" =>
        SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btf_vld = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          IF SDFCummutator_rdEnb_xmem = '1' THEN 
            SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
            SDFCummutator_xX_vld_reg_next <= '1';
            SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#3#, 3);
          END IF;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btf_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "011" =>
        IF SDFCummutator_rdEnb_xmem = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          IF SDFCummutator_wrEnb_xmem = '1' THEN 
            SDFCummutator_wrXData_re_reg_next <= btf2_re;
            SDFCummutator_wrXData_im_reg_next <= btf2_im;
            IF btf_vld = '1' THEN 
              SDFCummutator_wrxEnb_reg_next <= '1';
              SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
            ELSE 
              SDFCummutator_wrxEnb_reg_next <= '0';
              SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
            END IF;
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
            SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    CASE SDFCummutator_mem_btf_switch IS
      WHEN "00" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 10);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= '0';
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 10);
        END IF;
      WHEN "01" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF (SDFCummutator_rdCnt = to_unsigned(16#3FF#, 10)) AND btf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        END IF;
        IF btf_vld = '1' THEN 
          SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#001#, 10);
        END IF;
        SDFCummutator_out_re_next <= btf1_re;
        SDFCummutator_out_im_next <= btf1_im;
        SDFCummutator_out_vld_next <= btf_vld;
      WHEN "10" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        IF (SDFCummutator_rdCnt = to_unsigned(16#3F7#, 10)) AND xf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdEnb_xmem_next <= '1';
        END IF;
        IF xf_vld = '1' THEN 
          IF SDFCummutator_rdCnt = to_unsigned(16#3F7#, 10) THEN 
            SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 10);
          ELSE 
            SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#001#, 10);
          END IF;
        END IF;
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
      WHEN OTHERS => 
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 10);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
    END CASE;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrEnb_xmem_next <= '0';
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 10);
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 10);
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#3FF#, 10) THEN 
          IF btf_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
          END IF;
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 10);
          SDFCummutator_wrEnb_reg_next <= btf_vld;
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        ELSIF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#001#, 10);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
          SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        END IF;
      WHEN "010" =>
        SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#3F6#, 10) THEN 
          SDFCummutator_wrEnb_xmem_next <= '1';
        END IF;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#3F7#, 10) THEN 
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#001#, 10);
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          SDFCummutator_wrEnb_reg_next <= '0';
          SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
          SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        ELSIF btf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#001#, 10);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 10);
        SDFCummutator_wrEnb_reg_next <= dinxTwdlf_vld;
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        END IF;
      WHEN "100" =>
        SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF btf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 10);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 10);
        SDFCummutator_wrEnb_reg_next <= dinxTwdlf_vld;
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(0, 32);
        SDFOutmux_btf2Pipe_im <= to_signed(0, 32);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_11_1_re <= SDFOutmux_btf2Pipe_re;
    dout_11_1_im <= SDFOutmux_btf2Pipe_im;
    dout_11_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator11_block1.vhd --

-- Start of SDFCommutator12.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator12.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator12
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF2_12/SDFCommutator12
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator12 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_11_1_vld                     :   IN    std_logic;
        xf_re                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_im                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_vld                            :   IN    std_logic;
        dinf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinf_vld                          :   IN    std_logic;
        btf1_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf1_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btfout_vld                        :   IN    std_logic;
        wrData_re                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrData_im                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrAddr                            :   OUT   std_logic;  -- ufix1
        wrEnb                             :   OUT   std_logic;
        dout_12_1_re                      :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_12_1_im                      :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_12_1_vld                     :   OUT   std_logic
        );
END SDFCommutator12;


ARCHITECTURE rtl OF SDFCommutator12 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : std_logic;  -- ufix1
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrData_re_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_btf1_re_dly        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_btf1_im_dly        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_btf1_vld_dly       : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : std_logic;  -- ufix1
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL SDFCummutator_btf1_re_dly_next   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_btf1_im_dly_next   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_btf1_vld_dly_next  : std_logic;
  SIGNAL xData_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xData_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xX_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_12_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_12_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(16#0000#, 16);
        SDFCummutator_out_im <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg <= '0';
        SDFCummutator_wrXData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_xX_vld_reg <= '0';
        SDFCummutator_btf1_re_dly <= to_signed(16#0000#, 16);
        SDFCummutator_btf1_im_dly <= to_signed(16#0000#, 16);
        SDFCummutator_btf1_vld_dly <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
        SDFCummutator_btf1_re_dly <= SDFCummutator_btf1_re_dly_next;
        SDFCummutator_btf1_im_dly <= SDFCummutator_btf1_im_dly_next;
        SDFCummutator_btf1_vld_dly <= SDFCummutator_btf1_vld_dly_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_btf1_im_dly, SDFCummutator_btf1_re_dly,
       SDFCummutator_btf1_vld_dly, SDFCummutator_out_im, SDFCummutator_out_re,
       SDFCummutator_out_vld, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btfout_vld,
       dinf_im, dinf_re, dinf_vld)
  BEGIN
    SDFCummutator_wrEnb_reg_next <= SDFCummutator_wrEnb_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xX_vld_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        IF btfout_vld = '1' THEN 
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_xX_vld_reg_next <= '0';
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
      WHEN "100" =>
        SDFCummutator_xX_vld_reg_next <= '1';
        IF btfout_vld = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        ELSE 
          SDFCummutator_wrxEnb_reg_next <= '0';
          SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    SDFCummutator_out_re_next <= SDFCummutator_btf1_re_dly;
    SDFCummutator_out_im_next <= SDFCummutator_btf1_im_dly;
    SDFCummutator_out_vld_next <= SDFCummutator_btf1_vld_dly;
    SDFCummutator_btf1_re_dly_next <= btf1_re;
    SDFCummutator_btf1_im_dly_next <= btf1_im;
    SDFCummutator_btf1_vld_dly_next <= btfout_vld;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= '0';
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
        SDFCummutator_wrAddr_reg_next <= '0';
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
      WHEN "011" =>
        SDFCummutator_wrAddr_reg_next <= '0';
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        END IF;
        SDFCummutator_wrEnb_reg_next <= dinf_vld;
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= '0';
        SDFCummutator_wrEnb_reg_next <= dinf_vld;
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(16#0000#, 16);
        SDFOutmux_btf2Pipe_im <= to_signed(16#0000#, 16);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_12_1_re <= SDFOutmux_btf2Pipe_re;
    dout_12_1_im <= SDFOutmux_btf2Pipe_im;
    dout_12_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator12.vhd --

-- Start of SDFCommutator12_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator12_block.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator12_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_SDF2_12/SDFCommutator12
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator12_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_11_1_vld                     :   IN    std_logic;
        xf_re                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_im                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_vld                            :   IN    std_logic;
        dinf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinf_vld                          :   IN    std_logic;
        btf1_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf1_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btfout_vld                        :   IN    std_logic;
        wrData_re                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrData_im                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrAddr                            :   OUT   std_logic;  -- ufix1
        wrEnb                             :   OUT   std_logic;
        dout_12_1_re                      :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_12_1_im                      :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_12_1_vld                     :   OUT   std_logic
        );
END SDFCommutator12_block;


ARCHITECTURE rtl OF SDFCommutator12_block IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : std_logic;  -- ufix1
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrData_re_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_btf1_re_dly        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_btf1_im_dly        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_btf1_vld_dly       : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : std_logic;  -- ufix1
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL SDFCummutator_btf1_re_dly_next   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_btf1_im_dly_next   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_btf1_vld_dly_next  : std_logic;
  SIGNAL xData_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xData_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xX_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_12_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_12_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(16#0000#, 16);
        SDFCummutator_out_im <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg <= '0';
        SDFCummutator_wrXData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_xX_vld_reg <= '0';
        SDFCummutator_btf1_re_dly <= to_signed(16#0000#, 16);
        SDFCummutator_btf1_im_dly <= to_signed(16#0000#, 16);
        SDFCummutator_btf1_vld_dly <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
        SDFCummutator_btf1_re_dly <= SDFCummutator_btf1_re_dly_next;
        SDFCummutator_btf1_im_dly <= SDFCummutator_btf1_im_dly_next;
        SDFCummutator_btf1_vld_dly <= SDFCummutator_btf1_vld_dly_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_btf1_im_dly, SDFCummutator_btf1_re_dly,
       SDFCummutator_btf1_vld_dly, SDFCummutator_out_im, SDFCummutator_out_re,
       SDFCummutator_out_vld, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btfout_vld,
       dinf_im, dinf_re, dinf_vld)
  BEGIN
    SDFCummutator_wrEnb_reg_next <= SDFCummutator_wrEnb_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xX_vld_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        IF btfout_vld = '1' THEN 
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_xX_vld_reg_next <= '0';
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
      WHEN "100" =>
        SDFCummutator_xX_vld_reg_next <= '1';
        IF btfout_vld = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        ELSE 
          SDFCummutator_wrxEnb_reg_next <= '0';
          SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    SDFCummutator_out_re_next <= SDFCummutator_btf1_re_dly;
    SDFCummutator_out_im_next <= SDFCummutator_btf1_im_dly;
    SDFCummutator_out_vld_next <= SDFCummutator_btf1_vld_dly;
    SDFCummutator_btf1_re_dly_next <= btf1_re;
    SDFCummutator_btf1_im_dly_next <= btf1_im;
    SDFCummutator_btf1_vld_dly_next <= btfout_vld;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= '0';
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
        SDFCummutator_wrAddr_reg_next <= '0';
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
      WHEN "011" =>
        SDFCummutator_wrAddr_reg_next <= '0';
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        END IF;
        SDFCummutator_wrEnb_reg_next <= dinf_vld;
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= '0';
        SDFCummutator_wrEnb_reg_next <= dinf_vld;
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(16#0000#, 16);
        SDFOutmux_btf2Pipe_im <= to_signed(16#0000#, 16);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_12_1_re <= SDFOutmux_btf2Pipe_re;
    dout_12_1_im <= SDFOutmux_btf2Pipe_im;
    dout_12_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator12_block.vhd --

-- Start of SDFCommutator12_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator12_block1.vhd
-- Created: 2025-03-18 15:26:31
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator12_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_SDF2_12/SDFCommutator12
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator12_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_11_1_vld                     :   IN    std_logic;
        xf_re                             :   IN    signed(31 DOWNTO 0);  -- sfix32
        xf_im                             :   IN    signed(31 DOWNTO 0);  -- sfix32
        xf_vld                            :   IN    std_logic;
        dinf_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        dinf_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        dinf_vld                          :   IN    std_logic;
        btf1_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf1_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf2_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf2_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btfout_vld                        :   IN    std_logic;
        wrData_re                         :   OUT   signed(31 DOWNTO 0);  -- sfix32
        wrData_im                         :   OUT   signed(31 DOWNTO 0);  -- sfix32
        wrAddr                            :   OUT   unsigned(10 DOWNTO 0);  -- ufix11
        wrEnb                             :   OUT   std_logic;
        dout_12_1_im                      :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_12_1_vld                     :   OUT   std_logic
        );
END SDFCommutator12_block1;


ARCHITECTURE rtl OF SDFCommutator12_block1 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL dout_12_1_re                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_re             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_im             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt              : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL SDFCummutator_wrData_re_reg      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrData_im_reg      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_im_next        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt_next         : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xData_im                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout0_im                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xX_im                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_12_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_12_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(0, 32);
        SDFCummutator_out_im <= to_signed(0, 32);
        SDFCummutator_wrData_re_reg <= to_signed(0, 32);
        SDFCummutator_wrData_im_reg <= to_signed(0, 32);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_mem_btf_switch <= to_unsigned(16#0#, 2);
        SDFCummutator_wrAddr_reg <= to_unsigned(16#000#, 11);
        SDFCummutator_rdCnt <= to_unsigned(16#000#, 11);
        SDFCummutator_wrXData_re_reg <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg <= to_signed(0, 32);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_rdEnb_xmem <= '0';
        SDFCummutator_wrEnb_xmem <= '0';
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_mem_btf_switch <= SDFCummutator_mem_btf_switch_next;
        SDFCummutator_rdCnt <= SDFCummutator_rdCnt_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_rdEnb_xmem <= SDFCummutator_rdEnb_xmem_next;
        SDFCummutator_wrEnb_xmem <= SDFCummutator_wrEnb_xmem_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_mem_btf_switch, SDFCummutator_out_im,
       SDFCummutator_out_re, SDFCummutator_out_vld, SDFCummutator_rdCnt,
       SDFCummutator_rdEnb_xmem, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrEnb_xmem, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btfout_vld,
       dinf_im, dinf_re, dinf_vld, xf_im, xf_re, xf_vld)
  BEGIN
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt;
    SDFCummutator_wrData_re_reg_next <= SDFCummutator_wrData_re_reg;
    SDFCummutator_wrData_im_reg_next <= SDFCummutator_wrData_im_reg;
    SDFCummutator_wrEnb_reg_next <= SDFCummutator_wrEnb_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_rdEnb_xmem_next <= SDFCummutator_rdEnb_xmem;
    SDFCummutator_wrEnb_xmem_next <= SDFCummutator_wrEnb_xmem;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
        IF (SDFCummutator_wrEnb_xmem = '1' AND (SDFCummutator_wrAddr_reg = to_unsigned(16#7F7#, 11))) AND SDFCummutator_wrEnb_reg = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          IF btfout_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
          END IF;
        END IF;
      WHEN "001" =>
        SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btfout_vld = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          IF SDFCummutator_rdEnb_xmem = '1' THEN 
            SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
            SDFCummutator_xX_vld_reg_next <= '1';
            SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#3#, 3);
          END IF;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btfout_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "011" =>
        IF SDFCummutator_rdEnb_xmem = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          IF SDFCummutator_wrEnb_xmem = '1' THEN 
            SDFCummutator_wrXData_re_reg_next <= btf2_re;
            SDFCummutator_wrXData_im_reg_next <= btf2_im;
            IF btfout_vld = '1' THEN 
              SDFCummutator_wrxEnb_reg_next <= '1';
              SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
            ELSE 
              SDFCummutator_wrxEnb_reg_next <= '0';
              SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
            END IF;
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
            SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    CASE SDFCummutator_mem_btf_switch IS
      WHEN "00" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 11);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= '0';
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF dinf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 11);
        END IF;
      WHEN "01" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF (SDFCummutator_rdCnt = to_unsigned(16#7FF#, 11)) AND btfout_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        END IF;
        IF btfout_vld = '1' THEN 
          SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#001#, 11);
        END IF;
        SDFCummutator_out_re_next <= btf1_re;
        SDFCummutator_out_im_next <= btf1_im;
        SDFCummutator_out_vld_next <= btfout_vld;
      WHEN "10" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        IF (SDFCummutator_rdCnt = to_unsigned(16#7F7#, 11)) AND xf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdEnb_xmem_next <= '1';
        END IF;
        IF xf_vld = '1' THEN 
          IF SDFCummutator_rdCnt = to_unsigned(16#7F7#, 11) THEN 
            SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 11);
          ELSE 
            SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#001#, 11);
          END IF;
        END IF;
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
      WHEN OTHERS => 
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 11);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
    END CASE;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrEnb_xmem_next <= '0';
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 11);
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 11);
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#7FF#, 11) THEN 
          IF btfout_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
          END IF;
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 11);
          SDFCummutator_wrEnb_reg_next <= btfout_vld;
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        ELSIF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#001#, 11);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= dinf_re;
          SDFCummutator_wrData_im_reg_next <= dinf_im;
        END IF;
      WHEN "010" =>
        SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#7F6#, 11) THEN 
          SDFCummutator_wrEnb_xmem_next <= '1';
        END IF;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#7F7#, 11) THEN 
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#001#, 11);
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          SDFCummutator_wrEnb_reg_next <= '0';
          SDFCummutator_wrData_re_reg_next <= dinf_re;
          SDFCummutator_wrData_im_reg_next <= dinf_im;
        ELSIF btfout_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#001#, 11);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 11);
        SDFCummutator_wrEnb_reg_next <= dinf_vld;
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        END IF;
      WHEN "100" =>
        SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF btfout_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 11);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 11);
        SDFCummutator_wrEnb_reg_next <= dinf_vld;
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(0, 32);
        SDFOutmux_btf2Pipe_im <= to_signed(0, 32);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_12_1_re <= SDFOutmux_btf2Pipe_re;
    dout_12_1_im <= SDFOutmux_btf2Pipe_im;
    dout_12_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;



END rtl;


-- End of SDFCommutator12_block1.vhd --

-- Start of SDFCommutator1_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator1_block.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator1_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_SDF1_1/SDFCommutator1
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator1_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_1_vld_dly                     :   IN    std_logic;
        xf_re                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_im                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_vld                            :   IN    std_logic;
        dinXTwdlf_re                      :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinXTwdlf_im                      :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinxTwdlf_vld                     :   IN    std_logic;
        btf1_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf1_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf_vld                           :   IN    std_logic;
        wrData_re                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrAddr                            :   OUT   unsigned(10 DOWNTO 0);  -- ufix11
        wrEnb                             :   OUT   std_logic;
        dout_1_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_1_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_1_1_vld                      :   OUT   std_logic
        );
END SDFCommutator1_block;


ARCHITECTURE rtl OF SDFCommutator1_block IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt              : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL SDFCummutator_wrData_re_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt_next         : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL wrData_im                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xData_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xData_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xX_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_1_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_1_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(16#0000#, 16);
        SDFCummutator_out_im <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_mem_btf_switch <= to_unsigned(16#0#, 2);
        SDFCummutator_wrAddr_reg <= to_unsigned(16#000#, 11);
        SDFCummutator_rdCnt <= to_unsigned(16#000#, 11);
        SDFCummutator_wrXData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_rdEnb_xmem <= '0';
        SDFCummutator_wrEnb_xmem <= '0';
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_mem_btf_switch <= SDFCummutator_mem_btf_switch_next;
        SDFCummutator_rdCnt <= SDFCummutator_rdCnt_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_rdEnb_xmem <= SDFCummutator_rdEnb_xmem_next;
        SDFCummutator_wrEnb_xmem <= SDFCummutator_wrEnb_xmem_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_mem_btf_switch, SDFCummutator_out_im,
       SDFCummutator_out_re, SDFCummutator_out_vld, SDFCummutator_rdCnt,
       SDFCummutator_rdEnb_xmem, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrEnb_xmem, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btf_vld,
       dinXTwdlf_im, dinXTwdlf_re, dinxTwdlf_vld, xf_im, xf_re, xf_vld)
  BEGIN
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt;
    SDFCummutator_wrData_re_reg_next <= SDFCummutator_wrData_re_reg;
    SDFCummutator_wrData_im_reg_next <= SDFCummutator_wrData_im_reg;
    SDFCummutator_wrEnb_reg_next <= SDFCummutator_wrEnb_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_rdEnb_xmem_next <= SDFCummutator_rdEnb_xmem;
    SDFCummutator_wrEnb_xmem_next <= SDFCummutator_wrEnb_xmem;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
        IF (SDFCummutator_wrEnb_xmem = '1' AND (SDFCummutator_wrAddr_reg = to_unsigned(16#7F7#, 11))) AND SDFCummutator_wrEnb_reg = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          IF btf_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
          END IF;
        END IF;
      WHEN "001" =>
        SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btf_vld = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          IF SDFCummutator_rdEnb_xmem = '1' THEN 
            SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
            SDFCummutator_xX_vld_reg_next <= '1';
            SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#3#, 3);
          END IF;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btf_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "011" =>
        IF SDFCummutator_rdEnb_xmem = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          IF SDFCummutator_wrEnb_xmem = '1' THEN 
            SDFCummutator_wrXData_re_reg_next <= btf2_re;
            SDFCummutator_wrXData_im_reg_next <= btf2_im;
            IF btf_vld = '1' THEN 
              SDFCummutator_wrxEnb_reg_next <= '1';
              SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
            ELSE 
              SDFCummutator_wrxEnb_reg_next <= '0';
              SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
            END IF;
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
            SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    CASE SDFCummutator_mem_btf_switch IS
      WHEN "00" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 11);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= '0';
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 11);
        END IF;
      WHEN "01" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF (SDFCummutator_rdCnt = to_unsigned(16#7FF#, 11)) AND btf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        END IF;
        IF btf_vld = '1' THEN 
          SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#001#, 11);
        END IF;
        SDFCummutator_out_re_next <= btf1_re;
        SDFCummutator_out_im_next <= btf1_im;
        SDFCummutator_out_vld_next <= btf_vld;
      WHEN "10" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        IF (SDFCummutator_rdCnt = to_unsigned(16#7F7#, 11)) AND xf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdEnb_xmem_next <= '1';
        END IF;
        IF xf_vld = '1' THEN 
          IF SDFCummutator_rdCnt = to_unsigned(16#7F7#, 11) THEN 
            SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 11);
          ELSE 
            SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#001#, 11);
          END IF;
        END IF;
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
      WHEN OTHERS => 
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 11);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
    END CASE;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrEnb_xmem_next <= '0';
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 11);
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 11);
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#7FF#, 11) THEN 
          IF btf_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
          END IF;
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 11);
          SDFCummutator_wrEnb_reg_next <= btf_vld;
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        ELSIF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#001#, 11);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
          SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        END IF;
      WHEN "010" =>
        SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#7F6#, 11) THEN 
          SDFCummutator_wrEnb_xmem_next <= '1';
        END IF;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#7F7#, 11) THEN 
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#001#, 11);
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          SDFCummutator_wrEnb_reg_next <= '0';
          SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
          SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        ELSIF btf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#001#, 11);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 11);
        SDFCummutator_wrEnb_reg_next <= dinxTwdlf_vld;
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        END IF;
      WHEN "100" =>
        SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF btf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 11);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 11);
        SDFCummutator_wrEnb_reg_next <= dinxTwdlf_vld;
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(16#0000#, 16);
        SDFOutmux_btf2Pipe_im <= to_signed(16#0000#, 16);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_1_1_re <= SDFOutmux_btf2Pipe_re;
    dout_1_1_im <= SDFOutmux_btf2Pipe_im;
    dout_1_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator1_block.vhd --

-- Start of SDFCommutator1_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator1_block1.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator1_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_SDF1_1/SDFCommutator1
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator1_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_1_vld_dly                     :   IN    std_logic;
        xf_re                             :   IN    signed(31 DOWNTO 0);  -- sfix32
        xf_im                             :   IN    signed(31 DOWNTO 0);  -- sfix32
        xf_vld                            :   IN    std_logic;
        dinXTwdlf_re                      :   IN    signed(31 DOWNTO 0);  -- sfix32
        dinXTwdlf_im                      :   IN    signed(31 DOWNTO 0);  -- sfix32
        dinxTwdlf_vld                     :   IN    std_logic;
        btf1_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf1_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf2_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf2_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf_vld                           :   IN    std_logic;
        wrData_re                         :   OUT   signed(31 DOWNTO 0);  -- sfix32
        wrData_im                         :   OUT   signed(31 DOWNTO 0);  -- sfix32
        wrAddr                            :   OUT   std_logic;  -- ufix1
        wrEnb                             :   OUT   std_logic;
        dout_1_1_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_1_1_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_1_1_vld                      :   OUT   std_logic
        );
END SDFCommutator1_block1;


ARCHITECTURE rtl OF SDFCommutator1_block1 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_im             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : std_logic;  -- ufix1
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrData_re_reg      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrData_im_reg      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_btf1_re_dly        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_btf1_im_dly        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_btf1_vld_dly       : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_im_next        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : std_logic;  -- ufix1
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL SDFCummutator_btf1_re_dly_next   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_btf1_im_dly_next   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_btf1_vld_dly_next  : std_logic;
  SIGNAL xData_re                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xData_im                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout0_im                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xX_im                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_1_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_1_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(0, 32);
        SDFCummutator_out_im <= to_signed(0, 32);
        SDFCummutator_wrData_re_reg <= to_signed(0, 32);
        SDFCummutator_wrData_im_reg <= to_signed(0, 32);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg <= '0';
        SDFCummutator_wrXData_re_reg <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg <= to_signed(0, 32);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_xX_vld_reg <= '0';
        SDFCummutator_btf1_re_dly <= to_signed(0, 32);
        SDFCummutator_btf1_im_dly <= to_signed(0, 32);
        SDFCummutator_btf1_vld_dly <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
        SDFCummutator_btf1_re_dly <= SDFCummutator_btf1_re_dly_next;
        SDFCummutator_btf1_im_dly <= SDFCummutator_btf1_im_dly_next;
        SDFCummutator_btf1_vld_dly <= SDFCummutator_btf1_vld_dly_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_btf1_im_dly, SDFCummutator_btf1_re_dly,
       SDFCummutator_btf1_vld_dly, SDFCummutator_out_im, SDFCummutator_out_re,
       SDFCummutator_out_vld, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btf_vld,
       dinXTwdlf_im, dinXTwdlf_re, dinxTwdlf_vld)
  BEGIN
    SDFCummutator_wrEnb_reg_next <= SDFCummutator_wrEnb_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xX_vld_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        IF btf_vld = '1' THEN 
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_xX_vld_reg_next <= '0';
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
      WHEN "100" =>
        SDFCummutator_xX_vld_reg_next <= '1';
        IF btf_vld = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        ELSE 
          SDFCummutator_wrxEnb_reg_next <= '0';
          SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    SDFCummutator_out_re_next <= SDFCummutator_btf1_re_dly;
    SDFCummutator_out_im_next <= SDFCummutator_btf1_im_dly;
    SDFCummutator_out_vld_next <= SDFCummutator_btf1_vld_dly;
    SDFCummutator_btf1_re_dly_next <= btf1_re;
    SDFCummutator_btf1_im_dly_next <= btf1_im;
    SDFCummutator_btf1_vld_dly_next <= btf_vld;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= '0';
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
        SDFCummutator_wrAddr_reg_next <= '0';
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
      WHEN "011" =>
        SDFCummutator_wrAddr_reg_next <= '0';
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        END IF;
        SDFCummutator_wrEnb_reg_next <= dinxTwdlf_vld;
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= '0';
        SDFCummutator_wrEnb_reg_next <= dinxTwdlf_vld;
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(0, 32);
        SDFOutmux_btf2Pipe_im <= to_signed(0, 32);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_1_1_re <= SDFOutmux_btf2Pipe_re;
    dout_1_1_im <= SDFOutmux_btf2Pipe_im;
    dout_1_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator1_block1.vhd --

-- Start of SDFCommutator2.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator2.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator2
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF2_2/SDFCommutator2
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator2 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_1_1_vld                      :   IN    std_logic;
        xf_re                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_im                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_vld                            :   IN    std_logic;
        dinf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinf_vld                          :   IN    std_logic;
        btf1_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf1_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btfout_vld                        :   IN    std_logic;
        wrData_re                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrData_im                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrAddr                            :   OUT   unsigned(9 DOWNTO 0);  -- ufix10
        wrEnb                             :   OUT   std_logic;
        dout_2_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_2_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_2_1_vld                      :   OUT   std_logic
        );
END SDFCommutator2;


ARCHITECTURE rtl OF SDFCommutator2 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt              : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL SDFCummutator_wrData_re_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt_next         : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xData_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xX_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_2_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_2_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(16#0000#, 16);
        SDFCummutator_out_im <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_mem_btf_switch <= to_unsigned(16#0#, 2);
        SDFCummutator_wrAddr_reg <= to_unsigned(16#000#, 10);
        SDFCummutator_rdCnt <= to_unsigned(16#000#, 10);
        SDFCummutator_wrXData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_rdEnb_xmem <= '0';
        SDFCummutator_wrEnb_xmem <= '0';
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_mem_btf_switch <= SDFCummutator_mem_btf_switch_next;
        SDFCummutator_rdCnt <= SDFCummutator_rdCnt_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_rdEnb_xmem <= SDFCummutator_rdEnb_xmem_next;
        SDFCummutator_wrEnb_xmem <= SDFCummutator_wrEnb_xmem_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_mem_btf_switch, SDFCummutator_out_im,
       SDFCummutator_out_re, SDFCummutator_out_vld, SDFCummutator_rdCnt,
       SDFCummutator_rdEnb_xmem, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrEnb_xmem, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btfout_vld,
       dinf_im, dinf_re, dinf_vld, xf_im, xf_re, xf_vld)
  BEGIN
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt;
    SDFCummutator_wrData_re_reg_next <= SDFCummutator_wrData_re_reg;
    SDFCummutator_wrData_im_reg_next <= SDFCummutator_wrData_im_reg;
    SDFCummutator_wrEnb_reg_next <= SDFCummutator_wrEnb_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_rdEnb_xmem_next <= SDFCummutator_rdEnb_xmem;
    SDFCummutator_wrEnb_xmem_next <= SDFCummutator_wrEnb_xmem;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
        IF (SDFCummutator_wrEnb_xmem = '1' AND (SDFCummutator_wrAddr_reg = to_unsigned(16#3F7#, 10))) AND SDFCummutator_wrEnb_reg = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          IF btfout_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
          END IF;
        END IF;
      WHEN "001" =>
        SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btfout_vld = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          IF SDFCummutator_rdEnb_xmem = '1' THEN 
            SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
            SDFCummutator_xX_vld_reg_next <= '1';
            SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#3#, 3);
          END IF;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btfout_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "011" =>
        IF SDFCummutator_rdEnb_xmem = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          IF SDFCummutator_wrEnb_xmem = '1' THEN 
            SDFCummutator_wrXData_re_reg_next <= btf2_re;
            SDFCummutator_wrXData_im_reg_next <= btf2_im;
            IF btfout_vld = '1' THEN 
              SDFCummutator_wrxEnb_reg_next <= '1';
              SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
            ELSE 
              SDFCummutator_wrxEnb_reg_next <= '0';
              SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
            END IF;
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
            SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    CASE SDFCummutator_mem_btf_switch IS
      WHEN "00" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 10);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= '0';
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF dinf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 10);
        END IF;
      WHEN "01" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF (SDFCummutator_rdCnt = to_unsigned(16#3FF#, 10)) AND btfout_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        END IF;
        IF btfout_vld = '1' THEN 
          SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#001#, 10);
        END IF;
        SDFCummutator_out_re_next <= btf1_re;
        SDFCummutator_out_im_next <= btf1_im;
        SDFCummutator_out_vld_next <= btfout_vld;
      WHEN "10" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        IF (SDFCummutator_rdCnt = to_unsigned(16#3F7#, 10)) AND xf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdEnb_xmem_next <= '1';
        END IF;
        IF xf_vld = '1' THEN 
          IF SDFCummutator_rdCnt = to_unsigned(16#3F7#, 10) THEN 
            SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 10);
          ELSE 
            SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#001#, 10);
          END IF;
        END IF;
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
      WHEN OTHERS => 
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 10);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
    END CASE;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrEnb_xmem_next <= '0';
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 10);
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 10);
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#3FF#, 10) THEN 
          IF btfout_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
          END IF;
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 10);
          SDFCummutator_wrEnb_reg_next <= btfout_vld;
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        ELSIF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#001#, 10);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= dinf_re;
          SDFCummutator_wrData_im_reg_next <= dinf_im;
        END IF;
      WHEN "010" =>
        SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#3F6#, 10) THEN 
          SDFCummutator_wrEnb_xmem_next <= '1';
        END IF;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#3F7#, 10) THEN 
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#001#, 10);
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          SDFCummutator_wrEnb_reg_next <= '0';
          SDFCummutator_wrData_re_reg_next <= dinf_re;
          SDFCummutator_wrData_im_reg_next <= dinf_im;
        ELSIF btfout_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#001#, 10);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 10);
        SDFCummutator_wrEnb_reg_next <= dinf_vld;
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        END IF;
      WHEN "100" =>
        SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF btfout_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 10);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 10);
        SDFCummutator_wrEnb_reg_next <= dinf_vld;
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(16#0000#, 16);
        SDFOutmux_btf2Pipe_im <= to_signed(16#0000#, 16);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_2_1_re <= SDFOutmux_btf2Pipe_re;
    dout_2_1_im <= SDFOutmux_btf2Pipe_im;
    dout_2_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator2.vhd --

-- Start of SDFCommutator2_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator2_block.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator2_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_SDF2_2/SDFCommutator2
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator2_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_1_1_vld                      :   IN    std_logic;
        xf_re                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_im                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_vld                            :   IN    std_logic;
        dinf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinf_vld                          :   IN    std_logic;
        btf1_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf1_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btfout_vld                        :   IN    std_logic;
        wrData_re                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrData_im                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrAddr                            :   OUT   unsigned(9 DOWNTO 0);  -- ufix10
        wrEnb                             :   OUT   std_logic;
        dout_2_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_2_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_2_1_vld                      :   OUT   std_logic
        );
END SDFCommutator2_block;


ARCHITECTURE rtl OF SDFCommutator2_block IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt              : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL SDFCummutator_wrData_re_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt_next         : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xData_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xX_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_2_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_2_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(16#0000#, 16);
        SDFCummutator_out_im <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_mem_btf_switch <= to_unsigned(16#0#, 2);
        SDFCummutator_wrAddr_reg <= to_unsigned(16#000#, 10);
        SDFCummutator_rdCnt <= to_unsigned(16#000#, 10);
        SDFCummutator_wrXData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_rdEnb_xmem <= '0';
        SDFCummutator_wrEnb_xmem <= '0';
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_mem_btf_switch <= SDFCummutator_mem_btf_switch_next;
        SDFCummutator_rdCnt <= SDFCummutator_rdCnt_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_rdEnb_xmem <= SDFCummutator_rdEnb_xmem_next;
        SDFCummutator_wrEnb_xmem <= SDFCummutator_wrEnb_xmem_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_mem_btf_switch, SDFCummutator_out_im,
       SDFCummutator_out_re, SDFCummutator_out_vld, SDFCummutator_rdCnt,
       SDFCummutator_rdEnb_xmem, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrEnb_xmem, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btfout_vld,
       dinf_im, dinf_re, dinf_vld, xf_im, xf_re, xf_vld)
  BEGIN
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt;
    SDFCummutator_wrData_re_reg_next <= SDFCummutator_wrData_re_reg;
    SDFCummutator_wrData_im_reg_next <= SDFCummutator_wrData_im_reg;
    SDFCummutator_wrEnb_reg_next <= SDFCummutator_wrEnb_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_rdEnb_xmem_next <= SDFCummutator_rdEnb_xmem;
    SDFCummutator_wrEnb_xmem_next <= SDFCummutator_wrEnb_xmem;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
        IF (SDFCummutator_wrEnb_xmem = '1' AND (SDFCummutator_wrAddr_reg = to_unsigned(16#3F7#, 10))) AND SDFCummutator_wrEnb_reg = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          IF btfout_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
          END IF;
        END IF;
      WHEN "001" =>
        SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btfout_vld = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          IF SDFCummutator_rdEnb_xmem = '1' THEN 
            SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
            SDFCummutator_xX_vld_reg_next <= '1';
            SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#3#, 3);
          END IF;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btfout_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "011" =>
        IF SDFCummutator_rdEnb_xmem = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          IF SDFCummutator_wrEnb_xmem = '1' THEN 
            SDFCummutator_wrXData_re_reg_next <= btf2_re;
            SDFCummutator_wrXData_im_reg_next <= btf2_im;
            IF btfout_vld = '1' THEN 
              SDFCummutator_wrxEnb_reg_next <= '1';
              SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
            ELSE 
              SDFCummutator_wrxEnb_reg_next <= '0';
              SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
            END IF;
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
            SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    CASE SDFCummutator_mem_btf_switch IS
      WHEN "00" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 10);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= '0';
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF dinf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 10);
        END IF;
      WHEN "01" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF (SDFCummutator_rdCnt = to_unsigned(16#3FF#, 10)) AND btfout_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        END IF;
        IF btfout_vld = '1' THEN 
          SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#001#, 10);
        END IF;
        SDFCummutator_out_re_next <= btf1_re;
        SDFCummutator_out_im_next <= btf1_im;
        SDFCummutator_out_vld_next <= btfout_vld;
      WHEN "10" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        IF (SDFCummutator_rdCnt = to_unsigned(16#3F7#, 10)) AND xf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdEnb_xmem_next <= '1';
        END IF;
        IF xf_vld = '1' THEN 
          IF SDFCummutator_rdCnt = to_unsigned(16#3F7#, 10) THEN 
            SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 10);
          ELSE 
            SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#001#, 10);
          END IF;
        END IF;
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
      WHEN OTHERS => 
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 10);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
    END CASE;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrEnb_xmem_next <= '0';
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 10);
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 10);
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#3FF#, 10) THEN 
          IF btfout_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
          END IF;
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 10);
          SDFCummutator_wrEnb_reg_next <= btfout_vld;
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        ELSIF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#001#, 10);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= dinf_re;
          SDFCummutator_wrData_im_reg_next <= dinf_im;
        END IF;
      WHEN "010" =>
        SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#3F6#, 10) THEN 
          SDFCummutator_wrEnb_xmem_next <= '1';
        END IF;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#3F7#, 10) THEN 
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#001#, 10);
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          SDFCummutator_wrEnb_reg_next <= '0';
          SDFCummutator_wrData_re_reg_next <= dinf_re;
          SDFCummutator_wrData_im_reg_next <= dinf_im;
        ELSIF btfout_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#001#, 10);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 10);
        SDFCummutator_wrEnb_reg_next <= dinf_vld;
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        END IF;
      WHEN "100" =>
        SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF btfout_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 10);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 10);
        SDFCummutator_wrEnb_reg_next <= dinf_vld;
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(16#0000#, 16);
        SDFOutmux_btf2Pipe_im <= to_signed(16#0000#, 16);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_2_1_re <= SDFOutmux_btf2Pipe_re;
    dout_2_1_im <= SDFOutmux_btf2Pipe_im;
    dout_2_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator2_block.vhd --

-- Start of SDFCommutator2_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator2_block1.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator2_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_SDF2_2/SDFCommutator2
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator2_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_1_1_vld                      :   IN    std_logic;
        xf_re                             :   IN    signed(31 DOWNTO 0);  -- sfix32
        xf_im                             :   IN    signed(31 DOWNTO 0);  -- sfix32
        xf_vld                            :   IN    std_logic;
        dinf_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        dinf_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        dinf_vld                          :   IN    std_logic;
        btf1_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf1_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf2_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf2_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btfout_vld                        :   IN    std_logic;
        wrData_re                         :   OUT   signed(31 DOWNTO 0);  -- sfix32
        wrData_im                         :   OUT   signed(31 DOWNTO 0);  -- sfix32
        wrAddr                            :   OUT   std_logic;  -- ufix1
        wrEnb                             :   OUT   std_logic;
        dout_2_1_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_2_1_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_2_1_vld                      :   OUT   std_logic
        );
END SDFCommutator2_block1;


ARCHITECTURE rtl OF SDFCommutator2_block1 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_im             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : std_logic;  -- ufix1
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrData_re_reg      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrData_im_reg      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_im_next        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : std_logic;  -- ufix1
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xData_im                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout0_im                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xX_im                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_2_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_2_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(0, 32);
        SDFCummutator_out_im <= to_signed(0, 32);
        SDFCummutator_wrData_re_reg <= to_signed(0, 32);
        SDFCummutator_wrData_im_reg <= to_signed(0, 32);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg <= '0';
        SDFCummutator_wrXData_re_reg <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg <= to_signed(0, 32);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_out_im, SDFCummutator_out_re,
       SDFCummutator_out_vld, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btfout_vld,
       dinf_im, dinf_re, dinf_vld, dout_1_1_vld)
    VARIABLE add_cast : unsigned(1 DOWNTO 0);
    VARIABLE add_temp : unsigned(1 DOWNTO 0);
    VARIABLE add_cast_0 : unsigned(1 DOWNTO 0);
    VARIABLE add_temp_0 : unsigned(1 DOWNTO 0);
  BEGIN
    add_temp := to_unsigned(16#0#, 2);
    add_temp_0 := to_unsigned(16#0#, 2);
    add_cast := to_unsigned(16#0#, 2);
    add_cast_0 := to_unsigned(16#0#, 2);
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btfout_vld = '1' THEN 
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#1#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btfout_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#1#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          IF btfout_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    SDFCummutator_out_re_next <= btf1_re;
    SDFCummutator_out_im_next <= btf1_im;
    SDFCummutator_out_vld_next <= btfout_vld;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        SDFCummutator_wrEnb_reg_next <= '0';
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= '0';
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        IF SDFCummutator_wrAddr_reg = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
        END IF;
        IF dinf_vld = '1' THEN 
          IF SDFCummutator_wrAddr_reg = '1' THEN 
            SDFCummutator_wrAddr_reg_next <= '0';
            SDFCummutator_wrEnb_reg_next <= '0';
          ELSE 
            add_cast_0 := '0' & SDFCummutator_wrAddr_reg;
            add_temp_0 := add_cast_0 + to_unsigned(16#1#, 2);
            SDFCummutator_wrAddr_reg_next <= add_temp_0(0);
            SDFCummutator_wrEnb_reg_next <= '1';
          END IF;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        IF SDFCummutator_wrAddr_reg = '1' THEN 
          SDFCummutator_wrAddr_reg_next <= '0';
          IF dinf_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
            SDFCummutator_wrEnb_reg_next <= '1';
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrEnb_reg_next <= '0';
          END IF;
        ELSIF dout_1_1_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          add_cast := '0' & SDFCummutator_wrAddr_reg;
          add_temp := add_cast + to_unsigned(16#1#, 2);
          SDFCummutator_wrAddr_reg_next <= add_temp(0);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= '0';
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(0, 32);
        SDFOutmux_btf2Pipe_im <= to_signed(0, 32);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_2_1_re <= SDFOutmux_btf2Pipe_re;
    dout_2_1_im <= SDFOutmux_btf2Pipe_im;
    dout_2_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator2_block1.vhd --

-- Start of SDFCommutator3.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator3.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator3
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF1_3/SDFCommutator3
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator3 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_3_vld_dly                     :   IN    std_logic;
        xf_re                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_im                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_vld                            :   IN    std_logic;
        dinXTwdlf_re                      :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinXTwdlf_im                      :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinxTwdlf_vld                     :   IN    std_logic;
        btf1_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf1_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf_vld                           :   IN    std_logic;
        wrData_re                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrData_im                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrAddr                            :   OUT   unsigned(8 DOWNTO 0);  -- ufix9
        wrEnb                             :   OUT   std_logic;
        dout_3_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_3_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_3_1_vld                      :   OUT   std_logic
        );
END SDFCommutator3;


ARCHITECTURE rtl OF SDFCommutator3 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt              : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL SDFCummutator_wrData_re_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt_next         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xData_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xX_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_3_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_3_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(16#0000#, 16);
        SDFCummutator_out_im <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_mem_btf_switch <= to_unsigned(16#0#, 2);
        SDFCummutator_wrAddr_reg <= to_unsigned(16#000#, 9);
        SDFCummutator_rdCnt <= to_unsigned(16#000#, 9);
        SDFCummutator_wrXData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_rdEnb_xmem <= '0';
        SDFCummutator_wrEnb_xmem <= '0';
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_mem_btf_switch <= SDFCummutator_mem_btf_switch_next;
        SDFCummutator_rdCnt <= SDFCummutator_rdCnt_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_rdEnb_xmem <= SDFCummutator_rdEnb_xmem_next;
        SDFCummutator_wrEnb_xmem <= SDFCummutator_wrEnb_xmem_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_mem_btf_switch, SDFCummutator_out_im,
       SDFCummutator_out_re, SDFCummutator_out_vld, SDFCummutator_rdCnt,
       SDFCummutator_rdEnb_xmem, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrEnb_xmem, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btf_vld,
       dinXTwdlf_im, dinXTwdlf_re, dinxTwdlf_vld, xf_im, xf_re, xf_vld)
  BEGIN
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt;
    SDFCummutator_wrData_re_reg_next <= SDFCummutator_wrData_re_reg;
    SDFCummutator_wrData_im_reg_next <= SDFCummutator_wrData_im_reg;
    SDFCummutator_wrEnb_reg_next <= SDFCummutator_wrEnb_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_rdEnb_xmem_next <= SDFCummutator_rdEnb_xmem;
    SDFCummutator_wrEnb_xmem_next <= SDFCummutator_wrEnb_xmem;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
        IF (SDFCummutator_wrEnb_xmem = '1' AND (SDFCummutator_wrAddr_reg = to_unsigned(16#1F7#, 9))) AND SDFCummutator_wrEnb_reg = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          IF btf_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
          END IF;
        END IF;
      WHEN "001" =>
        SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btf_vld = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          IF SDFCummutator_rdEnb_xmem = '1' THEN 
            SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
            SDFCummutator_xX_vld_reg_next <= '1';
            SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#3#, 3);
          END IF;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btf_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "011" =>
        IF SDFCummutator_rdEnb_xmem = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          IF SDFCummutator_wrEnb_xmem = '1' THEN 
            SDFCummutator_wrXData_re_reg_next <= btf2_re;
            SDFCummutator_wrXData_im_reg_next <= btf2_im;
            IF btf_vld = '1' THEN 
              SDFCummutator_wrxEnb_reg_next <= '1';
              SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
            ELSE 
              SDFCummutator_wrxEnb_reg_next <= '0';
              SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
            END IF;
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
            SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    CASE SDFCummutator_mem_btf_switch IS
      WHEN "00" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 9);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= '0';
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 9);
        END IF;
      WHEN "01" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF (SDFCummutator_rdCnt = to_unsigned(16#1FF#, 9)) AND btf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        END IF;
        IF btf_vld = '1' THEN 
          SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#001#, 9);
        END IF;
        SDFCummutator_out_re_next <= btf1_re;
        SDFCummutator_out_im_next <= btf1_im;
        SDFCummutator_out_vld_next <= btf_vld;
      WHEN "10" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        IF (SDFCummutator_rdCnt = to_unsigned(16#1F7#, 9)) AND xf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdEnb_xmem_next <= '1';
        END IF;
        IF xf_vld = '1' THEN 
          IF SDFCummutator_rdCnt = to_unsigned(16#1F7#, 9) THEN 
            SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 9);
          ELSE 
            SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#001#, 9);
          END IF;
        END IF;
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
      WHEN OTHERS => 
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 9);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
    END CASE;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrEnb_xmem_next <= '0';
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 9);
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 9);
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#1FF#, 9) THEN 
          IF btf_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
          END IF;
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 9);
          SDFCummutator_wrEnb_reg_next <= btf_vld;
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        ELSIF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#001#, 9);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
          SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        END IF;
      WHEN "010" =>
        SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#1F6#, 9) THEN 
          SDFCummutator_wrEnb_xmem_next <= '1';
        END IF;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#1F7#, 9) THEN 
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#001#, 9);
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          SDFCummutator_wrEnb_reg_next <= '0';
          SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
          SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        ELSIF btf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#001#, 9);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 9);
        SDFCummutator_wrEnb_reg_next <= dinxTwdlf_vld;
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        END IF;
      WHEN "100" =>
        SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF btf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 9);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 9);
        SDFCummutator_wrEnb_reg_next <= dinxTwdlf_vld;
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(16#0000#, 16);
        SDFOutmux_btf2Pipe_im <= to_signed(16#0000#, 16);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_3_1_re <= SDFOutmux_btf2Pipe_re;
    dout_3_1_im <= SDFOutmux_btf2Pipe_im;
    dout_3_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator3.vhd --

-- Start of SDFCommutator3_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator3_block.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator3_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_SDF1_3/SDFCommutator3
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator3_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_3_vld_dly                     :   IN    std_logic;
        xf_re                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_im                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_vld                            :   IN    std_logic;
        dinXTwdlf_re                      :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinXTwdlf_im                      :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinxTwdlf_vld                     :   IN    std_logic;
        btf1_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf1_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf_vld                           :   IN    std_logic;
        wrData_re                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrData_im                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrAddr                            :   OUT   unsigned(8 DOWNTO 0);  -- ufix9
        wrEnb                             :   OUT   std_logic;
        dout_3_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_3_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_3_1_vld                      :   OUT   std_logic
        );
END SDFCommutator3_block;


ARCHITECTURE rtl OF SDFCommutator3_block IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt              : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL SDFCummutator_wrData_re_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt_next         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xData_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xX_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_3_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_3_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(16#0000#, 16);
        SDFCummutator_out_im <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_mem_btf_switch <= to_unsigned(16#0#, 2);
        SDFCummutator_wrAddr_reg <= to_unsigned(16#000#, 9);
        SDFCummutator_rdCnt <= to_unsigned(16#000#, 9);
        SDFCummutator_wrXData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_rdEnb_xmem <= '0';
        SDFCummutator_wrEnb_xmem <= '0';
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_mem_btf_switch <= SDFCummutator_mem_btf_switch_next;
        SDFCummutator_rdCnt <= SDFCummutator_rdCnt_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_rdEnb_xmem <= SDFCummutator_rdEnb_xmem_next;
        SDFCummutator_wrEnb_xmem <= SDFCummutator_wrEnb_xmem_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_mem_btf_switch, SDFCummutator_out_im,
       SDFCummutator_out_re, SDFCummutator_out_vld, SDFCummutator_rdCnt,
       SDFCummutator_rdEnb_xmem, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrEnb_xmem, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btf_vld,
       dinXTwdlf_im, dinXTwdlf_re, dinxTwdlf_vld, xf_im, xf_re, xf_vld)
  BEGIN
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt;
    SDFCummutator_wrData_re_reg_next <= SDFCummutator_wrData_re_reg;
    SDFCummutator_wrData_im_reg_next <= SDFCummutator_wrData_im_reg;
    SDFCummutator_wrEnb_reg_next <= SDFCummutator_wrEnb_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_rdEnb_xmem_next <= SDFCummutator_rdEnb_xmem;
    SDFCummutator_wrEnb_xmem_next <= SDFCummutator_wrEnb_xmem;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
        IF (SDFCummutator_wrEnb_xmem = '1' AND (SDFCummutator_wrAddr_reg = to_unsigned(16#1F7#, 9))) AND SDFCummutator_wrEnb_reg = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          IF btf_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
          END IF;
        END IF;
      WHEN "001" =>
        SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btf_vld = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          IF SDFCummutator_rdEnb_xmem = '1' THEN 
            SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
            SDFCummutator_xX_vld_reg_next <= '1';
            SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#3#, 3);
          END IF;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btf_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "011" =>
        IF SDFCummutator_rdEnb_xmem = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          IF SDFCummutator_wrEnb_xmem = '1' THEN 
            SDFCummutator_wrXData_re_reg_next <= btf2_re;
            SDFCummutator_wrXData_im_reg_next <= btf2_im;
            IF btf_vld = '1' THEN 
              SDFCummutator_wrxEnb_reg_next <= '1';
              SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
            ELSE 
              SDFCummutator_wrxEnb_reg_next <= '0';
              SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
            END IF;
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
            SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    CASE SDFCummutator_mem_btf_switch IS
      WHEN "00" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 9);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= '0';
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 9);
        END IF;
      WHEN "01" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF (SDFCummutator_rdCnt = to_unsigned(16#1FF#, 9)) AND btf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        END IF;
        IF btf_vld = '1' THEN 
          SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#001#, 9);
        END IF;
        SDFCummutator_out_re_next <= btf1_re;
        SDFCummutator_out_im_next <= btf1_im;
        SDFCummutator_out_vld_next <= btf_vld;
      WHEN "10" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        IF (SDFCummutator_rdCnt = to_unsigned(16#1F7#, 9)) AND xf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdEnb_xmem_next <= '1';
        END IF;
        IF xf_vld = '1' THEN 
          IF SDFCummutator_rdCnt = to_unsigned(16#1F7#, 9) THEN 
            SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 9);
          ELSE 
            SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#001#, 9);
          END IF;
        END IF;
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
      WHEN OTHERS => 
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#000#, 9);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
    END CASE;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrEnb_xmem_next <= '0';
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 9);
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 9);
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#1FF#, 9) THEN 
          IF btf_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
          END IF;
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 9);
          SDFCummutator_wrEnb_reg_next <= btf_vld;
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        ELSIF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#001#, 9);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
          SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        END IF;
      WHEN "010" =>
        SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#1F6#, 9) THEN 
          SDFCummutator_wrEnb_xmem_next <= '1';
        END IF;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#1F7#, 9) THEN 
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#001#, 9);
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          SDFCummutator_wrEnb_reg_next <= '0';
          SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
          SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        ELSIF btf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#001#, 9);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 9);
        SDFCummutator_wrEnb_reg_next <= dinxTwdlf_vld;
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        END IF;
      WHEN "100" =>
        SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF btf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 9);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#000#, 9);
        SDFCummutator_wrEnb_reg_next <= dinxTwdlf_vld;
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(16#0000#, 16);
        SDFOutmux_btf2Pipe_im <= to_signed(16#0000#, 16);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_3_1_re <= SDFOutmux_btf2Pipe_re;
    dout_3_1_im <= SDFOutmux_btf2Pipe_im;
    dout_3_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator3_block.vhd --

-- Start of SDFCommutator3_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator3_block1.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator3_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_SDF1_3/SDFCommutator3
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator3_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_3_vld_dly                     :   IN    std_logic;
        xf_re                             :   IN    signed(31 DOWNTO 0);  -- sfix32
        xf_im                             :   IN    signed(31 DOWNTO 0);  -- sfix32
        xf_vld                            :   IN    std_logic;
        dinXTwdlf_re                      :   IN    signed(31 DOWNTO 0);  -- sfix32
        dinXTwdlf_im                      :   IN    signed(31 DOWNTO 0);  -- sfix32
        dinxTwdlf_vld                     :   IN    std_logic;
        btf1_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf1_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf2_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf2_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf_vld                           :   IN    std_logic;
        wrData_re                         :   OUT   signed(31 DOWNTO 0);  -- sfix32
        wrData_im                         :   OUT   signed(31 DOWNTO 0);  -- sfix32
        wrAddr                            :   OUT   unsigned(1 DOWNTO 0);  -- ufix2
        wrEnb                             :   OUT   std_logic;
        dout_3_1_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_3_1_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_3_1_vld                      :   OUT   std_logic
        );
END SDFCommutator3_block1;


ARCHITECTURE rtl OF SDFCommutator3_block1 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_im             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrData_re_reg      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrData_im_reg      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_im_next        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xData_im                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout0_im                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xX_im                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_3_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_3_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(0, 32);
        SDFCummutator_out_im <= to_signed(0, 32);
        SDFCummutator_wrData_re_reg <= to_signed(0, 32);
        SDFCummutator_wrData_im_reg <= to_signed(0, 32);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg <= to_unsigned(16#0#, 2);
        SDFCummutator_wrXData_re_reg <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg <= to_signed(0, 32);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_out_im, SDFCummutator_out_re,
       SDFCummutator_out_vld, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btf_vld,
       dinXTwdlf_im, dinXTwdlf_re, din_3_vld_dly, dinxTwdlf_vld)
  BEGIN
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btf_vld = '1' THEN 
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#3#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btf_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#3#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          IF btf_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    SDFCummutator_out_re_next <= btf1_re;
    SDFCummutator_out_im_next <= btf1_im;
    SDFCummutator_out_vld_next <= btf_vld;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 2);
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        SDFCummutator_wrEnb_reg_next <= '0';
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 2);
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#3#, 2) THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
        END IF;
        IF dinxTwdlf_vld = '1' THEN 
          IF SDFCummutator_wrAddr_reg = to_unsigned(16#3#, 2) THEN 
            SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 2);
            SDFCummutator_wrEnb_reg_next <= '0';
          ELSE 
            SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#1#, 2);
            SDFCummutator_wrEnb_reg_next <= '1';
          END IF;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#3#, 2) THEN 
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 2);
          IF dinxTwdlf_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
            SDFCummutator_wrEnb_reg_next <= '1';
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrEnb_reg_next <= '0';
          END IF;
        ELSIF din_3_vld_dly = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#1#, 2);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 2);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(0, 32);
        SDFOutmux_btf2Pipe_im <= to_signed(0, 32);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_3_1_re <= SDFOutmux_btf2Pipe_re;
    dout_3_1_im <= SDFOutmux_btf2Pipe_im;
    dout_3_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator3_block1.vhd --

-- Start of SDFCommutator4.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator4.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator4
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF2_4/SDFCommutator4
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator4 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_3_1_vld                      :   IN    std_logic;
        xf_re                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_im                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_vld                            :   IN    std_logic;
        dinf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinf_vld                          :   IN    std_logic;
        btf1_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf1_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btfout_vld                        :   IN    std_logic;
        wrData_re                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrData_im                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrAddr                            :   OUT   unsigned(7 DOWNTO 0);  -- ufix8
        wrEnb                             :   OUT   std_logic;
        dout_4_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_4_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_4_1_vld                      :   OUT   std_logic
        );
END SDFCommutator4;


ARCHITECTURE rtl OF SDFCommutator4 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt              : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL SDFCummutator_wrData_re_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt_next         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xData_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xX_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_4_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_4_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(16#0000#, 16);
        SDFCummutator_out_im <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_mem_btf_switch <= to_unsigned(16#0#, 2);
        SDFCummutator_wrAddr_reg <= to_unsigned(16#00#, 8);
        SDFCummutator_rdCnt <= to_unsigned(16#00#, 8);
        SDFCummutator_wrXData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_rdEnb_xmem <= '0';
        SDFCummutator_wrEnb_xmem <= '0';
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_mem_btf_switch <= SDFCummutator_mem_btf_switch_next;
        SDFCummutator_rdCnt <= SDFCummutator_rdCnt_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_rdEnb_xmem <= SDFCummutator_rdEnb_xmem_next;
        SDFCummutator_wrEnb_xmem <= SDFCummutator_wrEnb_xmem_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_mem_btf_switch, SDFCummutator_out_im,
       SDFCummutator_out_re, SDFCummutator_out_vld, SDFCummutator_rdCnt,
       SDFCummutator_rdEnb_xmem, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrEnb_xmem, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btfout_vld,
       dinf_im, dinf_re, dinf_vld, xf_im, xf_re, xf_vld)
  BEGIN
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt;
    SDFCummutator_wrData_re_reg_next <= SDFCummutator_wrData_re_reg;
    SDFCummutator_wrData_im_reg_next <= SDFCummutator_wrData_im_reg;
    SDFCummutator_wrEnb_reg_next <= SDFCummutator_wrEnb_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_rdEnb_xmem_next <= SDFCummutator_rdEnb_xmem;
    SDFCummutator_wrEnb_xmem_next <= SDFCummutator_wrEnb_xmem;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
        IF (SDFCummutator_wrEnb_xmem = '1' AND (SDFCummutator_wrAddr_reg = to_unsigned(16#F7#, 8))) AND SDFCummutator_wrEnb_reg = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          IF btfout_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
          END IF;
        END IF;
      WHEN "001" =>
        SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btfout_vld = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          IF SDFCummutator_rdEnb_xmem = '1' THEN 
            SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
            SDFCummutator_xX_vld_reg_next <= '1';
            SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#3#, 3);
          END IF;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btfout_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "011" =>
        IF SDFCummutator_rdEnb_xmem = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          IF SDFCummutator_wrEnb_xmem = '1' THEN 
            SDFCummutator_wrXData_re_reg_next <= btf2_re;
            SDFCummutator_wrXData_im_reg_next <= btf2_im;
            IF btfout_vld = '1' THEN 
              SDFCummutator_wrxEnb_reg_next <= '1';
              SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
            ELSE 
              SDFCummutator_wrxEnb_reg_next <= '0';
              SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
            END IF;
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
            SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    CASE SDFCummutator_mem_btf_switch IS
      WHEN "00" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 8);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= '0';
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF dinf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 8);
        END IF;
      WHEN "01" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF (SDFCummutator_rdCnt = to_unsigned(16#FF#, 8)) AND btfout_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        END IF;
        IF btfout_vld = '1' THEN 
          SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#01#, 8);
        END IF;
        SDFCummutator_out_re_next <= btf1_re;
        SDFCummutator_out_im_next <= btf1_im;
        SDFCummutator_out_vld_next <= btfout_vld;
      WHEN "10" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        IF (SDFCummutator_rdCnt = to_unsigned(16#F7#, 8)) AND xf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdEnb_xmem_next <= '1';
        END IF;
        IF xf_vld = '1' THEN 
          IF SDFCummutator_rdCnt = to_unsigned(16#F7#, 8) THEN 
            SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 8);
          ELSE 
            SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#01#, 8);
          END IF;
        END IF;
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
      WHEN OTHERS => 
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 8);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
    END CASE;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrEnb_xmem_next <= '0';
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 8);
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 8);
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#FF#, 8) THEN 
          IF btfout_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
          END IF;
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 8);
          SDFCummutator_wrEnb_reg_next <= btfout_vld;
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        ELSIF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 8);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= dinf_re;
          SDFCummutator_wrData_im_reg_next <= dinf_im;
        END IF;
      WHEN "010" =>
        SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#F6#, 8) THEN 
          SDFCummutator_wrEnb_xmem_next <= '1';
        END IF;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#F7#, 8) THEN 
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 8);
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          SDFCummutator_wrEnb_reg_next <= '0';
          SDFCummutator_wrData_re_reg_next <= dinf_re;
          SDFCummutator_wrData_im_reg_next <= dinf_im;
        ELSIF btfout_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 8);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 8);
        SDFCummutator_wrEnb_reg_next <= dinf_vld;
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        END IF;
      WHEN "100" =>
        SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF btfout_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 8);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 8);
        SDFCummutator_wrEnb_reg_next <= dinf_vld;
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(16#0000#, 16);
        SDFOutmux_btf2Pipe_im <= to_signed(16#0000#, 16);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_4_1_re <= SDFOutmux_btf2Pipe_re;
    dout_4_1_im <= SDFOutmux_btf2Pipe_im;
    dout_4_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator4.vhd --

-- Start of SDFCommutator4_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator4_block.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator4_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_SDF2_4/SDFCommutator4
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator4_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_3_1_vld                      :   IN    std_logic;
        xf_re                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_im                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_vld                            :   IN    std_logic;
        dinf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinf_vld                          :   IN    std_logic;
        btf1_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf1_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btfout_vld                        :   IN    std_logic;
        wrData_re                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrData_im                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrAddr                            :   OUT   unsigned(7 DOWNTO 0);  -- ufix8
        wrEnb                             :   OUT   std_logic;
        dout_4_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_4_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_4_1_vld                      :   OUT   std_logic
        );
END SDFCommutator4_block;


ARCHITECTURE rtl OF SDFCommutator4_block IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt              : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL SDFCummutator_wrData_re_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt_next         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xData_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xX_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_4_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_4_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(16#0000#, 16);
        SDFCummutator_out_im <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_mem_btf_switch <= to_unsigned(16#0#, 2);
        SDFCummutator_wrAddr_reg <= to_unsigned(16#00#, 8);
        SDFCummutator_rdCnt <= to_unsigned(16#00#, 8);
        SDFCummutator_wrXData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_rdEnb_xmem <= '0';
        SDFCummutator_wrEnb_xmem <= '0';
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_mem_btf_switch <= SDFCummutator_mem_btf_switch_next;
        SDFCummutator_rdCnt <= SDFCummutator_rdCnt_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_rdEnb_xmem <= SDFCummutator_rdEnb_xmem_next;
        SDFCummutator_wrEnb_xmem <= SDFCummutator_wrEnb_xmem_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_mem_btf_switch, SDFCummutator_out_im,
       SDFCummutator_out_re, SDFCummutator_out_vld, SDFCummutator_rdCnt,
       SDFCummutator_rdEnb_xmem, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrEnb_xmem, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btfout_vld,
       dinf_im, dinf_re, dinf_vld, xf_im, xf_re, xf_vld)
  BEGIN
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt;
    SDFCummutator_wrData_re_reg_next <= SDFCummutator_wrData_re_reg;
    SDFCummutator_wrData_im_reg_next <= SDFCummutator_wrData_im_reg;
    SDFCummutator_wrEnb_reg_next <= SDFCummutator_wrEnb_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_rdEnb_xmem_next <= SDFCummutator_rdEnb_xmem;
    SDFCummutator_wrEnb_xmem_next <= SDFCummutator_wrEnb_xmem;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
        IF (SDFCummutator_wrEnb_xmem = '1' AND (SDFCummutator_wrAddr_reg = to_unsigned(16#F7#, 8))) AND SDFCummutator_wrEnb_reg = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          IF btfout_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
          END IF;
        END IF;
      WHEN "001" =>
        SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btfout_vld = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          IF SDFCummutator_rdEnb_xmem = '1' THEN 
            SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
            SDFCummutator_xX_vld_reg_next <= '1';
            SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#3#, 3);
          END IF;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btfout_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "011" =>
        IF SDFCummutator_rdEnb_xmem = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          IF SDFCummutator_wrEnb_xmem = '1' THEN 
            SDFCummutator_wrXData_re_reg_next <= btf2_re;
            SDFCummutator_wrXData_im_reg_next <= btf2_im;
            IF btfout_vld = '1' THEN 
              SDFCummutator_wrxEnb_reg_next <= '1';
              SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
            ELSE 
              SDFCummutator_wrxEnb_reg_next <= '0';
              SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
            END IF;
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
            SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    CASE SDFCummutator_mem_btf_switch IS
      WHEN "00" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 8);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= '0';
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF dinf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 8);
        END IF;
      WHEN "01" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF (SDFCummutator_rdCnt = to_unsigned(16#FF#, 8)) AND btfout_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        END IF;
        IF btfout_vld = '1' THEN 
          SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#01#, 8);
        END IF;
        SDFCummutator_out_re_next <= btf1_re;
        SDFCummutator_out_im_next <= btf1_im;
        SDFCummutator_out_vld_next <= btfout_vld;
      WHEN "10" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        IF (SDFCummutator_rdCnt = to_unsigned(16#F7#, 8)) AND xf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdEnb_xmem_next <= '1';
        END IF;
        IF xf_vld = '1' THEN 
          IF SDFCummutator_rdCnt = to_unsigned(16#F7#, 8) THEN 
            SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 8);
          ELSE 
            SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#01#, 8);
          END IF;
        END IF;
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
      WHEN OTHERS => 
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 8);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
    END CASE;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrEnb_xmem_next <= '0';
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 8);
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 8);
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#FF#, 8) THEN 
          IF btfout_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
          END IF;
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 8);
          SDFCummutator_wrEnb_reg_next <= btfout_vld;
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        ELSIF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 8);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= dinf_re;
          SDFCummutator_wrData_im_reg_next <= dinf_im;
        END IF;
      WHEN "010" =>
        SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#F6#, 8) THEN 
          SDFCummutator_wrEnb_xmem_next <= '1';
        END IF;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#F7#, 8) THEN 
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 8);
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          SDFCummutator_wrEnb_reg_next <= '0';
          SDFCummutator_wrData_re_reg_next <= dinf_re;
          SDFCummutator_wrData_im_reg_next <= dinf_im;
        ELSIF btfout_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 8);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 8);
        SDFCummutator_wrEnb_reg_next <= dinf_vld;
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        END IF;
      WHEN "100" =>
        SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF btfout_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 8);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 8);
        SDFCummutator_wrEnb_reg_next <= dinf_vld;
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(16#0000#, 16);
        SDFOutmux_btf2Pipe_im <= to_signed(16#0000#, 16);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_4_1_re <= SDFOutmux_btf2Pipe_re;
    dout_4_1_im <= SDFOutmux_btf2Pipe_im;
    dout_4_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator4_block.vhd --

-- Start of SDFCommutator4_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator4_block1.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator4_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_SDF2_4/SDFCommutator4
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator4_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_3_1_vld                      :   IN    std_logic;
        xf_re                             :   IN    signed(31 DOWNTO 0);  -- sfix32
        xf_im                             :   IN    signed(31 DOWNTO 0);  -- sfix32
        xf_vld                            :   IN    std_logic;
        dinf_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        dinf_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        dinf_vld                          :   IN    std_logic;
        btf1_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf1_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf2_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf2_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btfout_vld                        :   IN    std_logic;
        wrData_re                         :   OUT   signed(31 DOWNTO 0);  -- sfix32
        wrData_im                         :   OUT   signed(31 DOWNTO 0);  -- sfix32
        wrAddr                            :   OUT   unsigned(2 DOWNTO 0);  -- ufix3
        wrEnb                             :   OUT   std_logic;
        dout_4_1_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_4_1_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_4_1_vld                      :   OUT   std_logic
        );
END SDFCommutator4_block1;


ARCHITECTURE rtl OF SDFCommutator4_block1 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_im             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrData_re_reg      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrData_im_reg      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_im_next        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xData_im                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout0_im                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xX_im                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_4_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_4_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(0, 32);
        SDFCummutator_out_im <= to_signed(0, 32);
        SDFCummutator_wrData_re_reg <= to_signed(0, 32);
        SDFCummutator_wrData_im_reg <= to_signed(0, 32);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg <= to_unsigned(16#0#, 3);
        SDFCummutator_wrXData_re_reg <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg <= to_signed(0, 32);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_out_im, SDFCummutator_out_re,
       SDFCummutator_out_vld, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btfout_vld,
       dinf_im, dinf_re, dinf_vld, dout_3_1_vld)
  BEGIN
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btfout_vld = '1' THEN 
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btfout_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          IF btfout_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    SDFCummutator_out_re_next <= btf1_re;
    SDFCummutator_out_im_next <= btf1_im;
    SDFCummutator_out_vld_next <= btfout_vld;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        SDFCummutator_wrEnb_reg_next <= '0';
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
        END IF;
        IF dinf_vld = '1' THEN 
          IF SDFCummutator_wrAddr_reg = to_unsigned(16#7#, 3) THEN 
            SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrEnb_reg_next <= '0';
          ELSE 
            SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#1#, 3);
            SDFCummutator_wrEnb_reg_next <= '1';
          END IF;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 3);
          IF dinf_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
            SDFCummutator_wrEnb_reg_next <= '1';
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrEnb_reg_next <= '0';
          END IF;
        ELSIF dout_3_1_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(0, 32);
        SDFOutmux_btf2Pipe_im <= to_signed(0, 32);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_4_1_re <= SDFOutmux_btf2Pipe_re;
    dout_4_1_im <= SDFOutmux_btf2Pipe_im;
    dout_4_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator4_block1.vhd --

-- Start of SDFCommutator5.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator5.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator5
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF1_5/SDFCommutator5
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator5 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_5_vld_dly                     :   IN    std_logic;
        xf_re                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_im                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_vld                            :   IN    std_logic;
        dinXTwdlf_re                      :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinXTwdlf_im                      :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinxTwdlf_vld                     :   IN    std_logic;
        btf1_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf1_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf_vld                           :   IN    std_logic;
        wrData_re                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrData_im                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrAddr                            :   OUT   unsigned(6 DOWNTO 0);  -- ufix7
        wrEnb                             :   OUT   std_logic;
        dout_5_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_5_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_5_1_vld                      :   OUT   std_logic
        );
END SDFCommutator5;


ARCHITECTURE rtl OF SDFCommutator5 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt              : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL SDFCummutator_wrData_re_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt_next         : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xData_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xX_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_5_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_5_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(16#0000#, 16);
        SDFCummutator_out_im <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_mem_btf_switch <= to_unsigned(16#0#, 2);
        SDFCummutator_wrAddr_reg <= to_unsigned(16#00#, 7);
        SDFCummutator_rdCnt <= to_unsigned(16#00#, 7);
        SDFCummutator_wrXData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_rdEnb_xmem <= '0';
        SDFCummutator_wrEnb_xmem <= '0';
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_mem_btf_switch <= SDFCummutator_mem_btf_switch_next;
        SDFCummutator_rdCnt <= SDFCummutator_rdCnt_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_rdEnb_xmem <= SDFCummutator_rdEnb_xmem_next;
        SDFCummutator_wrEnb_xmem <= SDFCummutator_wrEnb_xmem_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_mem_btf_switch, SDFCummutator_out_im,
       SDFCummutator_out_re, SDFCummutator_out_vld, SDFCummutator_rdCnt,
       SDFCummutator_rdEnb_xmem, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrEnb_xmem, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btf_vld,
       dinXTwdlf_im, dinXTwdlf_re, dinxTwdlf_vld, xf_im, xf_re, xf_vld)
  BEGIN
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt;
    SDFCummutator_wrData_re_reg_next <= SDFCummutator_wrData_re_reg;
    SDFCummutator_wrData_im_reg_next <= SDFCummutator_wrData_im_reg;
    SDFCummutator_wrEnb_reg_next <= SDFCummutator_wrEnb_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_rdEnb_xmem_next <= SDFCummutator_rdEnb_xmem;
    SDFCummutator_wrEnb_xmem_next <= SDFCummutator_wrEnb_xmem;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
        IF (SDFCummutator_wrEnb_xmem = '1' AND (SDFCummutator_wrAddr_reg = to_unsigned(16#77#, 7))) AND SDFCummutator_wrEnb_reg = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          IF btf_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
          END IF;
        END IF;
      WHEN "001" =>
        SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btf_vld = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          IF SDFCummutator_rdEnb_xmem = '1' THEN 
            SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
            SDFCummutator_xX_vld_reg_next <= '1';
            SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#3#, 3);
          END IF;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btf_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "011" =>
        IF SDFCummutator_rdEnb_xmem = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          IF SDFCummutator_wrEnb_xmem = '1' THEN 
            SDFCummutator_wrXData_re_reg_next <= btf2_re;
            SDFCummutator_wrXData_im_reg_next <= btf2_im;
            IF btf_vld = '1' THEN 
              SDFCummutator_wrxEnb_reg_next <= '1';
              SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
            ELSE 
              SDFCummutator_wrxEnb_reg_next <= '0';
              SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
            END IF;
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
            SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    CASE SDFCummutator_mem_btf_switch IS
      WHEN "00" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 7);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= '0';
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 7);
        END IF;
      WHEN "01" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF (SDFCummutator_rdCnt = to_unsigned(16#7F#, 7)) AND btf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        END IF;
        IF btf_vld = '1' THEN 
          SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#01#, 7);
        END IF;
        SDFCummutator_out_re_next <= btf1_re;
        SDFCummutator_out_im_next <= btf1_im;
        SDFCummutator_out_vld_next <= btf_vld;
      WHEN "10" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        IF (SDFCummutator_rdCnt = to_unsigned(16#77#, 7)) AND xf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdEnb_xmem_next <= '1';
        END IF;
        IF xf_vld = '1' THEN 
          IF SDFCummutator_rdCnt = to_unsigned(16#77#, 7) THEN 
            SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 7);
          ELSE 
            SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#01#, 7);
          END IF;
        END IF;
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
      WHEN OTHERS => 
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 7);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
    END CASE;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrEnb_xmem_next <= '0';
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 7);
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 7);
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#7F#, 7) THEN 
          IF btf_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
          END IF;
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 7);
          SDFCummutator_wrEnb_reg_next <= btf_vld;
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        ELSIF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 7);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
          SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        END IF;
      WHEN "010" =>
        SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#76#, 7) THEN 
          SDFCummutator_wrEnb_xmem_next <= '1';
        END IF;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#77#, 7) THEN 
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 7);
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          SDFCummutator_wrEnb_reg_next <= '0';
          SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
          SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        ELSIF btf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 7);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 7);
        SDFCummutator_wrEnb_reg_next <= dinxTwdlf_vld;
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        END IF;
      WHEN "100" =>
        SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF btf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 7);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 7);
        SDFCummutator_wrEnb_reg_next <= dinxTwdlf_vld;
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(16#0000#, 16);
        SDFOutmux_btf2Pipe_im <= to_signed(16#0000#, 16);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_5_1_re <= SDFOutmux_btf2Pipe_re;
    dout_5_1_im <= SDFOutmux_btf2Pipe_im;
    dout_5_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator5.vhd --

-- Start of SDFCommutator5_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator5_block.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator5_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_SDF1_5/SDFCommutator5
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator5_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_5_vld_dly                     :   IN    std_logic;
        xf_re                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_im                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_vld                            :   IN    std_logic;
        dinXTwdlf_re                      :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinXTwdlf_im                      :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinxTwdlf_vld                     :   IN    std_logic;
        btf1_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf1_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf_vld                           :   IN    std_logic;
        wrData_re                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrData_im                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrAddr                            :   OUT   unsigned(6 DOWNTO 0);  -- ufix7
        wrEnb                             :   OUT   std_logic;
        dout_5_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_5_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_5_1_vld                      :   OUT   std_logic
        );
END SDFCommutator5_block;


ARCHITECTURE rtl OF SDFCommutator5_block IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt              : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL SDFCummutator_wrData_re_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt_next         : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xData_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xX_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_5_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_5_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(16#0000#, 16);
        SDFCummutator_out_im <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_mem_btf_switch <= to_unsigned(16#0#, 2);
        SDFCummutator_wrAddr_reg <= to_unsigned(16#00#, 7);
        SDFCummutator_rdCnt <= to_unsigned(16#00#, 7);
        SDFCummutator_wrXData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_rdEnb_xmem <= '0';
        SDFCummutator_wrEnb_xmem <= '0';
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_mem_btf_switch <= SDFCummutator_mem_btf_switch_next;
        SDFCummutator_rdCnt <= SDFCummutator_rdCnt_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_rdEnb_xmem <= SDFCummutator_rdEnb_xmem_next;
        SDFCummutator_wrEnb_xmem <= SDFCummutator_wrEnb_xmem_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_mem_btf_switch, SDFCummutator_out_im,
       SDFCummutator_out_re, SDFCummutator_out_vld, SDFCummutator_rdCnt,
       SDFCummutator_rdEnb_xmem, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrEnb_xmem, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btf_vld,
       dinXTwdlf_im, dinXTwdlf_re, dinxTwdlf_vld, xf_im, xf_re, xf_vld)
  BEGIN
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt;
    SDFCummutator_wrData_re_reg_next <= SDFCummutator_wrData_re_reg;
    SDFCummutator_wrData_im_reg_next <= SDFCummutator_wrData_im_reg;
    SDFCummutator_wrEnb_reg_next <= SDFCummutator_wrEnb_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_rdEnb_xmem_next <= SDFCummutator_rdEnb_xmem;
    SDFCummutator_wrEnb_xmem_next <= SDFCummutator_wrEnb_xmem;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
        IF (SDFCummutator_wrEnb_xmem = '1' AND (SDFCummutator_wrAddr_reg = to_unsigned(16#77#, 7))) AND SDFCummutator_wrEnb_reg = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          IF btf_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
          END IF;
        END IF;
      WHEN "001" =>
        SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btf_vld = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          IF SDFCummutator_rdEnb_xmem = '1' THEN 
            SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
            SDFCummutator_xX_vld_reg_next <= '1';
            SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#3#, 3);
          END IF;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btf_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "011" =>
        IF SDFCummutator_rdEnb_xmem = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          IF SDFCummutator_wrEnb_xmem = '1' THEN 
            SDFCummutator_wrXData_re_reg_next <= btf2_re;
            SDFCummutator_wrXData_im_reg_next <= btf2_im;
            IF btf_vld = '1' THEN 
              SDFCummutator_wrxEnb_reg_next <= '1';
              SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
            ELSE 
              SDFCummutator_wrxEnb_reg_next <= '0';
              SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
            END IF;
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
            SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    CASE SDFCummutator_mem_btf_switch IS
      WHEN "00" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 7);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= '0';
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 7);
        END IF;
      WHEN "01" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF (SDFCummutator_rdCnt = to_unsigned(16#7F#, 7)) AND btf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        END IF;
        IF btf_vld = '1' THEN 
          SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#01#, 7);
        END IF;
        SDFCummutator_out_re_next <= btf1_re;
        SDFCummutator_out_im_next <= btf1_im;
        SDFCummutator_out_vld_next <= btf_vld;
      WHEN "10" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        IF (SDFCummutator_rdCnt = to_unsigned(16#77#, 7)) AND xf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdEnb_xmem_next <= '1';
        END IF;
        IF xf_vld = '1' THEN 
          IF SDFCummutator_rdCnt = to_unsigned(16#77#, 7) THEN 
            SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 7);
          ELSE 
            SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#01#, 7);
          END IF;
        END IF;
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
      WHEN OTHERS => 
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 7);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
    END CASE;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrEnb_xmem_next <= '0';
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 7);
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 7);
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#7F#, 7) THEN 
          IF btf_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
          END IF;
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 7);
          SDFCummutator_wrEnb_reg_next <= btf_vld;
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        ELSIF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 7);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
          SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        END IF;
      WHEN "010" =>
        SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#76#, 7) THEN 
          SDFCummutator_wrEnb_xmem_next <= '1';
        END IF;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#77#, 7) THEN 
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 7);
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          SDFCummutator_wrEnb_reg_next <= '0';
          SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
          SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        ELSIF btf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 7);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 7);
        SDFCummutator_wrEnb_reg_next <= dinxTwdlf_vld;
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        END IF;
      WHEN "100" =>
        SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF btf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 7);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 7);
        SDFCummutator_wrEnb_reg_next <= dinxTwdlf_vld;
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(16#0000#, 16);
        SDFOutmux_btf2Pipe_im <= to_signed(16#0000#, 16);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_5_1_re <= SDFOutmux_btf2Pipe_re;
    dout_5_1_im <= SDFOutmux_btf2Pipe_im;
    dout_5_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator5_block.vhd --

-- Start of SDFCommutator5_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator5_block1.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator5_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_SDF1_5/SDFCommutator5
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator5_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_5_vld_dly                     :   IN    std_logic;
        xf_re                             :   IN    signed(31 DOWNTO 0);  -- sfix32
        xf_im                             :   IN    signed(31 DOWNTO 0);  -- sfix32
        xf_vld                            :   IN    std_logic;
        dinXTwdlf_re                      :   IN    signed(31 DOWNTO 0);  -- sfix32
        dinXTwdlf_im                      :   IN    signed(31 DOWNTO 0);  -- sfix32
        dinxTwdlf_vld                     :   IN    std_logic;
        btf1_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf1_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf2_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf2_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf_vld                           :   IN    std_logic;
        wrData_re                         :   OUT   signed(31 DOWNTO 0);  -- sfix32
        wrData_im                         :   OUT   signed(31 DOWNTO 0);  -- sfix32
        wrAddr                            :   OUT   unsigned(3 DOWNTO 0);  -- ufix4
        wrEnb                             :   OUT   std_logic;
        dout_5_1_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_5_1_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_5_1_vld                      :   OUT   std_logic
        );
END SDFCommutator5_block1;


ARCHITECTURE rtl OF SDFCommutator5_block1 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_im             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt              : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL SDFCummutator_wrData_re_reg      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrData_im_reg      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_im_next        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt_next         : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xData_im                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout0_im                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xX_im                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_5_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_5_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(0, 32);
        SDFCummutator_out_im <= to_signed(0, 32);
        SDFCummutator_wrData_re_reg <= to_signed(0, 32);
        SDFCummutator_wrData_im_reg <= to_signed(0, 32);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_mem_btf_switch <= to_unsigned(16#0#, 2);
        SDFCummutator_wrAddr_reg <= to_unsigned(16#0#, 4);
        SDFCummutator_rdCnt <= to_unsigned(16#0#, 4);
        SDFCummutator_wrXData_re_reg <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg <= to_signed(0, 32);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_rdEnb_xmem <= '0';
        SDFCummutator_wrEnb_xmem <= '0';
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_mem_btf_switch <= SDFCummutator_mem_btf_switch_next;
        SDFCummutator_rdCnt <= SDFCummutator_rdCnt_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_rdEnb_xmem <= SDFCummutator_rdEnb_xmem_next;
        SDFCummutator_wrEnb_xmem <= SDFCummutator_wrEnb_xmem_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_mem_btf_switch, SDFCummutator_out_im,
       SDFCummutator_out_re, SDFCummutator_out_vld, SDFCummutator_rdCnt,
       SDFCummutator_rdEnb_xmem, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrEnb_xmem, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btf_vld,
       dinXTwdlf_im, dinXTwdlf_re, dinxTwdlf_vld, xf_im, xf_re, xf_vld)
  BEGIN
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt;
    SDFCummutator_wrData_re_reg_next <= SDFCummutator_wrData_re_reg;
    SDFCummutator_wrData_im_reg_next <= SDFCummutator_wrData_im_reg;
    SDFCummutator_wrEnb_reg_next <= SDFCummutator_wrEnb_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_rdEnb_xmem_next <= SDFCummutator_rdEnb_xmem;
    SDFCummutator_wrEnb_xmem_next <= SDFCummutator_wrEnb_xmem;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
        IF (SDFCummutator_wrEnb_xmem = '1' AND (SDFCummutator_wrAddr_reg = to_unsigned(16#7#, 4))) AND SDFCummutator_wrEnb_reg = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          IF btf_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
          END IF;
        END IF;
      WHEN "001" =>
        SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btf_vld = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          IF SDFCummutator_rdEnb_xmem = '1' THEN 
            SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
            SDFCummutator_xX_vld_reg_next <= '1';
            SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#3#, 3);
          END IF;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btf_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "011" =>
        IF SDFCummutator_rdEnb_xmem = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          IF SDFCummutator_wrEnb_xmem = '1' THEN 
            SDFCummutator_wrXData_re_reg_next <= btf2_re;
            SDFCummutator_wrXData_im_reg_next <= btf2_im;
            IF btf_vld = '1' THEN 
              SDFCummutator_wrxEnb_reg_next <= '1';
              SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
            ELSE 
              SDFCummutator_wrxEnb_reg_next <= '0';
              SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
            END IF;
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
            SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    CASE SDFCummutator_mem_btf_switch IS
      WHEN "00" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#0#, 4);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= '0';
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdCnt_next <= to_unsigned(16#0#, 4);
        END IF;
      WHEN "01" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF (SDFCummutator_rdCnt = to_unsigned(16#F#, 4)) AND btf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        END IF;
        IF btf_vld = '1' THEN 
          SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#1#, 4);
        END IF;
        SDFCummutator_out_re_next <= btf1_re;
        SDFCummutator_out_im_next <= btf1_im;
        SDFCummutator_out_vld_next <= btf_vld;
      WHEN "10" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        IF (SDFCummutator_rdCnt = to_unsigned(16#7#, 4)) AND xf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdEnb_xmem_next <= '1';
        END IF;
        IF xf_vld = '1' THEN 
          IF SDFCummutator_rdCnt = to_unsigned(16#7#, 4) THEN 
            SDFCummutator_rdCnt_next <= to_unsigned(16#0#, 4);
          ELSE 
            SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#1#, 4);
          END IF;
        END IF;
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
      WHEN OTHERS => 
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#0#, 4);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
    END CASE;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrEnb_xmem_next <= '0';
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 4);
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 4);
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#F#, 4) THEN 
          IF btf_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
          END IF;
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 4);
          SDFCummutator_wrEnb_reg_next <= btf_vld;
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        ELSIF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#1#, 4);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
          SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        END IF;
      WHEN "010" =>
        SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#6#, 4) THEN 
          SDFCummutator_wrEnb_xmem_next <= '1';
        END IF;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#7#, 4) THEN 
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#1#, 4);
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          SDFCummutator_wrEnb_reg_next <= '0';
          SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
          SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        ELSIF btf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#1#, 4);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 4);
        SDFCummutator_wrEnb_reg_next <= dinxTwdlf_vld;
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        END IF;
      WHEN "100" =>
        SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF btf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 4);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 4);
        SDFCummutator_wrEnb_reg_next <= dinxTwdlf_vld;
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(0, 32);
        SDFOutmux_btf2Pipe_im <= to_signed(0, 32);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_5_1_re <= SDFOutmux_btf2Pipe_re;
    dout_5_1_im <= SDFOutmux_btf2Pipe_im;
    dout_5_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator5_block1.vhd --

-- Start of SDFCommutator6.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator6.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator6
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF2_6/SDFCommutator6
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator6 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_5_1_vld                      :   IN    std_logic;
        xf_re                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_im                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_vld                            :   IN    std_logic;
        dinf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinf_vld                          :   IN    std_logic;
        btf1_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf1_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btfout_vld                        :   IN    std_logic;
        wrData_re                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrData_im                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrAddr                            :   OUT   unsigned(5 DOWNTO 0);  -- ufix6
        wrEnb                             :   OUT   std_logic;
        dout_6_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_6_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_6_1_vld                      :   OUT   std_logic
        );
END SDFCommutator6;


ARCHITECTURE rtl OF SDFCommutator6 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt              : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL SDFCummutator_wrData_re_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt_next         : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xData_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xX_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_6_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_6_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(16#0000#, 16);
        SDFCummutator_out_im <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_mem_btf_switch <= to_unsigned(16#0#, 2);
        SDFCummutator_wrAddr_reg <= to_unsigned(16#00#, 6);
        SDFCummutator_rdCnt <= to_unsigned(16#00#, 6);
        SDFCummutator_wrXData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_rdEnb_xmem <= '0';
        SDFCummutator_wrEnb_xmem <= '0';
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_mem_btf_switch <= SDFCummutator_mem_btf_switch_next;
        SDFCummutator_rdCnt <= SDFCummutator_rdCnt_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_rdEnb_xmem <= SDFCummutator_rdEnb_xmem_next;
        SDFCummutator_wrEnb_xmem <= SDFCummutator_wrEnb_xmem_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_mem_btf_switch, SDFCummutator_out_im,
       SDFCummutator_out_re, SDFCummutator_out_vld, SDFCummutator_rdCnt,
       SDFCummutator_rdEnb_xmem, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrEnb_xmem, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btfout_vld,
       dinf_im, dinf_re, dinf_vld, xf_im, xf_re, xf_vld)
  BEGIN
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt;
    SDFCummutator_wrData_re_reg_next <= SDFCummutator_wrData_re_reg;
    SDFCummutator_wrData_im_reg_next <= SDFCummutator_wrData_im_reg;
    SDFCummutator_wrEnb_reg_next <= SDFCummutator_wrEnb_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_rdEnb_xmem_next <= SDFCummutator_rdEnb_xmem;
    SDFCummutator_wrEnb_xmem_next <= SDFCummutator_wrEnb_xmem;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
        IF (SDFCummutator_wrEnb_xmem = '1' AND (SDFCummutator_wrAddr_reg = to_unsigned(16#37#, 6))) AND SDFCummutator_wrEnb_reg = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          IF btfout_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
          END IF;
        END IF;
      WHEN "001" =>
        SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btfout_vld = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          IF SDFCummutator_rdEnb_xmem = '1' THEN 
            SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
            SDFCummutator_xX_vld_reg_next <= '1';
            SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#3#, 3);
          END IF;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btfout_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "011" =>
        IF SDFCummutator_rdEnb_xmem = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          IF SDFCummutator_wrEnb_xmem = '1' THEN 
            SDFCummutator_wrXData_re_reg_next <= btf2_re;
            SDFCummutator_wrXData_im_reg_next <= btf2_im;
            IF btfout_vld = '1' THEN 
              SDFCummutator_wrxEnb_reg_next <= '1';
              SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
            ELSE 
              SDFCummutator_wrxEnb_reg_next <= '0';
              SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
            END IF;
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
            SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    CASE SDFCummutator_mem_btf_switch IS
      WHEN "00" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 6);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= '0';
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF dinf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 6);
        END IF;
      WHEN "01" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF (SDFCummutator_rdCnt = to_unsigned(16#3F#, 6)) AND btfout_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        END IF;
        IF btfout_vld = '1' THEN 
          SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#01#, 6);
        END IF;
        SDFCummutator_out_re_next <= btf1_re;
        SDFCummutator_out_im_next <= btf1_im;
        SDFCummutator_out_vld_next <= btfout_vld;
      WHEN "10" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        IF (SDFCummutator_rdCnt = to_unsigned(16#37#, 6)) AND xf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdEnb_xmem_next <= '1';
        END IF;
        IF xf_vld = '1' THEN 
          IF SDFCummutator_rdCnt = to_unsigned(16#37#, 6) THEN 
            SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 6);
          ELSE 
            SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#01#, 6);
          END IF;
        END IF;
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
      WHEN OTHERS => 
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 6);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
    END CASE;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrEnb_xmem_next <= '0';
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 6);
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 6);
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#3F#, 6) THEN 
          IF btfout_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
          END IF;
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 6);
          SDFCummutator_wrEnb_reg_next <= btfout_vld;
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        ELSIF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 6);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= dinf_re;
          SDFCummutator_wrData_im_reg_next <= dinf_im;
        END IF;
      WHEN "010" =>
        SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#36#, 6) THEN 
          SDFCummutator_wrEnb_xmem_next <= '1';
        END IF;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#37#, 6) THEN 
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 6);
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          SDFCummutator_wrEnb_reg_next <= '0';
          SDFCummutator_wrData_re_reg_next <= dinf_re;
          SDFCummutator_wrData_im_reg_next <= dinf_im;
        ELSIF btfout_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 6);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 6);
        SDFCummutator_wrEnb_reg_next <= dinf_vld;
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        END IF;
      WHEN "100" =>
        SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF btfout_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 6);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 6);
        SDFCummutator_wrEnb_reg_next <= dinf_vld;
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(16#0000#, 16);
        SDFOutmux_btf2Pipe_im <= to_signed(16#0000#, 16);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_6_1_re <= SDFOutmux_btf2Pipe_re;
    dout_6_1_im <= SDFOutmux_btf2Pipe_im;
    dout_6_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator6.vhd --

-- Start of SDFCommutator6_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator6_block.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator6_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_SDF2_6/SDFCommutator6
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator6_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_5_1_vld                      :   IN    std_logic;
        xf_re                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_im                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_vld                            :   IN    std_logic;
        dinf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinf_vld                          :   IN    std_logic;
        btf1_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf1_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btfout_vld                        :   IN    std_logic;
        wrData_re                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrData_im                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrAddr                            :   OUT   unsigned(5 DOWNTO 0);  -- ufix6
        wrEnb                             :   OUT   std_logic;
        dout_6_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_6_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_6_1_vld                      :   OUT   std_logic
        );
END SDFCommutator6_block;


ARCHITECTURE rtl OF SDFCommutator6_block IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt              : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL SDFCummutator_wrData_re_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt_next         : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xData_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xX_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_6_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_6_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(16#0000#, 16);
        SDFCummutator_out_im <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_mem_btf_switch <= to_unsigned(16#0#, 2);
        SDFCummutator_wrAddr_reg <= to_unsigned(16#00#, 6);
        SDFCummutator_rdCnt <= to_unsigned(16#00#, 6);
        SDFCummutator_wrXData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_rdEnb_xmem <= '0';
        SDFCummutator_wrEnb_xmem <= '0';
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_mem_btf_switch <= SDFCummutator_mem_btf_switch_next;
        SDFCummutator_rdCnt <= SDFCummutator_rdCnt_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_rdEnb_xmem <= SDFCummutator_rdEnb_xmem_next;
        SDFCummutator_wrEnb_xmem <= SDFCummutator_wrEnb_xmem_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_mem_btf_switch, SDFCummutator_out_im,
       SDFCummutator_out_re, SDFCummutator_out_vld, SDFCummutator_rdCnt,
       SDFCummutator_rdEnb_xmem, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrEnb_xmem, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btfout_vld,
       dinf_im, dinf_re, dinf_vld, xf_im, xf_re, xf_vld)
  BEGIN
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt;
    SDFCummutator_wrData_re_reg_next <= SDFCummutator_wrData_re_reg;
    SDFCummutator_wrData_im_reg_next <= SDFCummutator_wrData_im_reg;
    SDFCummutator_wrEnb_reg_next <= SDFCummutator_wrEnb_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_rdEnb_xmem_next <= SDFCummutator_rdEnb_xmem;
    SDFCummutator_wrEnb_xmem_next <= SDFCummutator_wrEnb_xmem;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
        IF (SDFCummutator_wrEnb_xmem = '1' AND (SDFCummutator_wrAddr_reg = to_unsigned(16#37#, 6))) AND SDFCummutator_wrEnb_reg = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          IF btfout_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
          END IF;
        END IF;
      WHEN "001" =>
        SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btfout_vld = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          IF SDFCummutator_rdEnb_xmem = '1' THEN 
            SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
            SDFCummutator_xX_vld_reg_next <= '1';
            SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#3#, 3);
          END IF;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btfout_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "011" =>
        IF SDFCummutator_rdEnb_xmem = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          IF SDFCummutator_wrEnb_xmem = '1' THEN 
            SDFCummutator_wrXData_re_reg_next <= btf2_re;
            SDFCummutator_wrXData_im_reg_next <= btf2_im;
            IF btfout_vld = '1' THEN 
              SDFCummutator_wrxEnb_reg_next <= '1';
              SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
            ELSE 
              SDFCummutator_wrxEnb_reg_next <= '0';
              SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
            END IF;
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
            SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    CASE SDFCummutator_mem_btf_switch IS
      WHEN "00" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 6);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= '0';
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF dinf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 6);
        END IF;
      WHEN "01" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF (SDFCummutator_rdCnt = to_unsigned(16#3F#, 6)) AND btfout_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        END IF;
        IF btfout_vld = '1' THEN 
          SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#01#, 6);
        END IF;
        SDFCummutator_out_re_next <= btf1_re;
        SDFCummutator_out_im_next <= btf1_im;
        SDFCummutator_out_vld_next <= btfout_vld;
      WHEN "10" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        IF (SDFCummutator_rdCnt = to_unsigned(16#37#, 6)) AND xf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdEnb_xmem_next <= '1';
        END IF;
        IF xf_vld = '1' THEN 
          IF SDFCummutator_rdCnt = to_unsigned(16#37#, 6) THEN 
            SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 6);
          ELSE 
            SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#01#, 6);
          END IF;
        END IF;
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
      WHEN OTHERS => 
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 6);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
    END CASE;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrEnb_xmem_next <= '0';
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 6);
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 6);
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#3F#, 6) THEN 
          IF btfout_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
          END IF;
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 6);
          SDFCummutator_wrEnb_reg_next <= btfout_vld;
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        ELSIF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 6);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= dinf_re;
          SDFCummutator_wrData_im_reg_next <= dinf_im;
        END IF;
      WHEN "010" =>
        SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#36#, 6) THEN 
          SDFCummutator_wrEnb_xmem_next <= '1';
        END IF;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#37#, 6) THEN 
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 6);
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          SDFCummutator_wrEnb_reg_next <= '0';
          SDFCummutator_wrData_re_reg_next <= dinf_re;
          SDFCummutator_wrData_im_reg_next <= dinf_im;
        ELSIF btfout_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 6);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 6);
        SDFCummutator_wrEnb_reg_next <= dinf_vld;
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        END IF;
      WHEN "100" =>
        SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF btfout_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 6);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 6);
        SDFCummutator_wrEnb_reg_next <= dinf_vld;
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(16#0000#, 16);
        SDFOutmux_btf2Pipe_im <= to_signed(16#0000#, 16);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_6_1_re <= SDFOutmux_btf2Pipe_re;
    dout_6_1_im <= SDFOutmux_btf2Pipe_im;
    dout_6_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator6_block.vhd --

-- Start of SDFCommutator6_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator6_block1.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator6_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_SDF2_6/SDFCommutator6
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator6_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_5_1_vld                      :   IN    std_logic;
        xf_re                             :   IN    signed(31 DOWNTO 0);  -- sfix32
        xf_im                             :   IN    signed(31 DOWNTO 0);  -- sfix32
        xf_vld                            :   IN    std_logic;
        dinf_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        dinf_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        dinf_vld                          :   IN    std_logic;
        btf1_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf1_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf2_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf2_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btfout_vld                        :   IN    std_logic;
        wrData_re                         :   OUT   signed(31 DOWNTO 0);  -- sfix32
        wrData_im                         :   OUT   signed(31 DOWNTO 0);  -- sfix32
        wrAddr                            :   OUT   unsigned(4 DOWNTO 0);  -- ufix5
        wrEnb                             :   OUT   std_logic;
        dout_6_1_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_6_1_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_6_1_vld                      :   OUT   std_logic
        );
END SDFCommutator6_block1;


ARCHITECTURE rtl OF SDFCommutator6_block1 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_im             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt              : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL SDFCummutator_wrData_re_reg      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrData_im_reg      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_im_next        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt_next         : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xData_im                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout0_im                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xX_im                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_6_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_6_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(0, 32);
        SDFCummutator_out_im <= to_signed(0, 32);
        SDFCummutator_wrData_re_reg <= to_signed(0, 32);
        SDFCummutator_wrData_im_reg <= to_signed(0, 32);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_mem_btf_switch <= to_unsigned(16#0#, 2);
        SDFCummutator_wrAddr_reg <= to_unsigned(16#00#, 5);
        SDFCummutator_rdCnt <= to_unsigned(16#00#, 5);
        SDFCummutator_wrXData_re_reg <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg <= to_signed(0, 32);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_rdEnb_xmem <= '0';
        SDFCummutator_wrEnb_xmem <= '0';
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_mem_btf_switch <= SDFCummutator_mem_btf_switch_next;
        SDFCummutator_rdCnt <= SDFCummutator_rdCnt_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_rdEnb_xmem <= SDFCummutator_rdEnb_xmem_next;
        SDFCummutator_wrEnb_xmem <= SDFCummutator_wrEnb_xmem_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_mem_btf_switch, SDFCummutator_out_im,
       SDFCummutator_out_re, SDFCummutator_out_vld, SDFCummutator_rdCnt,
       SDFCummutator_rdEnb_xmem, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrEnb_xmem, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btfout_vld,
       dinf_im, dinf_re, dinf_vld, xf_im, xf_re, xf_vld)
  BEGIN
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt;
    SDFCummutator_wrData_re_reg_next <= SDFCummutator_wrData_re_reg;
    SDFCummutator_wrData_im_reg_next <= SDFCummutator_wrData_im_reg;
    SDFCummutator_wrEnb_reg_next <= SDFCummutator_wrEnb_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_rdEnb_xmem_next <= SDFCummutator_rdEnb_xmem;
    SDFCummutator_wrEnb_xmem_next <= SDFCummutator_wrEnb_xmem;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
        IF (SDFCummutator_wrEnb_xmem = '1' AND (SDFCummutator_wrAddr_reg = to_unsigned(16#17#, 5))) AND SDFCummutator_wrEnb_reg = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          IF btfout_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
          END IF;
        END IF;
      WHEN "001" =>
        SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btfout_vld = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          IF SDFCummutator_rdEnb_xmem = '1' THEN 
            SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
            SDFCummutator_xX_vld_reg_next <= '1';
            SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#3#, 3);
          END IF;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btfout_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "011" =>
        IF SDFCummutator_rdEnb_xmem = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          IF SDFCummutator_wrEnb_xmem = '1' THEN 
            SDFCummutator_wrXData_re_reg_next <= btf2_re;
            SDFCummutator_wrXData_im_reg_next <= btf2_im;
            IF btfout_vld = '1' THEN 
              SDFCummutator_wrxEnb_reg_next <= '1';
              SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
            ELSE 
              SDFCummutator_wrxEnb_reg_next <= '0';
              SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
            END IF;
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
            SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    CASE SDFCummutator_mem_btf_switch IS
      WHEN "00" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 5);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= '0';
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF dinf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 5);
        END IF;
      WHEN "01" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF (SDFCummutator_rdCnt = to_unsigned(16#1F#, 5)) AND btfout_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        END IF;
        IF btfout_vld = '1' THEN 
          SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#01#, 5);
        END IF;
        SDFCummutator_out_re_next <= btf1_re;
        SDFCummutator_out_im_next <= btf1_im;
        SDFCummutator_out_vld_next <= btfout_vld;
      WHEN "10" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        IF (SDFCummutator_rdCnt = to_unsigned(16#17#, 5)) AND xf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdEnb_xmem_next <= '1';
        END IF;
        IF xf_vld = '1' THEN 
          IF SDFCummutator_rdCnt = to_unsigned(16#17#, 5) THEN 
            SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 5);
          ELSE 
            SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#01#, 5);
          END IF;
        END IF;
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
      WHEN OTHERS => 
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 5);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
    END CASE;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrEnb_xmem_next <= '0';
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 5);
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 5);
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#1F#, 5) THEN 
          IF btfout_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
          END IF;
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 5);
          SDFCummutator_wrEnb_reg_next <= btfout_vld;
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        ELSIF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 5);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= dinf_re;
          SDFCummutator_wrData_im_reg_next <= dinf_im;
        END IF;
      WHEN "010" =>
        SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#16#, 5) THEN 
          SDFCummutator_wrEnb_xmem_next <= '1';
        END IF;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#17#, 5) THEN 
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 5);
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          SDFCummutator_wrEnb_reg_next <= '0';
          SDFCummutator_wrData_re_reg_next <= dinf_re;
          SDFCummutator_wrData_im_reg_next <= dinf_im;
        ELSIF btfout_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 5);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 5);
        SDFCummutator_wrEnb_reg_next <= dinf_vld;
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        END IF;
      WHEN "100" =>
        SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF btfout_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 5);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 5);
        SDFCummutator_wrEnb_reg_next <= dinf_vld;
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(0, 32);
        SDFOutmux_btf2Pipe_im <= to_signed(0, 32);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_6_1_re <= SDFOutmux_btf2Pipe_re;
    dout_6_1_im <= SDFOutmux_btf2Pipe_im;
    dout_6_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator6_block1.vhd --

-- Start of SDFCommutator7.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator7.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator7
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF1_7/SDFCommutator7
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator7 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_7_vld_dly                     :   IN    std_logic;
        xf_re                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_im                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_vld                            :   IN    std_logic;
        dinXTwdlf_re                      :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinXTwdlf_im                      :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinxTwdlf_vld                     :   IN    std_logic;
        btf1_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf1_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf_vld                           :   IN    std_logic;
        wrData_re                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrData_im                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrAddr                            :   OUT   unsigned(4 DOWNTO 0);  -- ufix5
        wrEnb                             :   OUT   std_logic;
        dout_7_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_7_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_7_1_vld                      :   OUT   std_logic
        );
END SDFCommutator7;


ARCHITECTURE rtl OF SDFCommutator7 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt              : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL SDFCummutator_wrData_re_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt_next         : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xData_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xX_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_7_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_7_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(16#0000#, 16);
        SDFCummutator_out_im <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_mem_btf_switch <= to_unsigned(16#0#, 2);
        SDFCummutator_wrAddr_reg <= to_unsigned(16#00#, 5);
        SDFCummutator_rdCnt <= to_unsigned(16#00#, 5);
        SDFCummutator_wrXData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_rdEnb_xmem <= '0';
        SDFCummutator_wrEnb_xmem <= '0';
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_mem_btf_switch <= SDFCummutator_mem_btf_switch_next;
        SDFCummutator_rdCnt <= SDFCummutator_rdCnt_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_rdEnb_xmem <= SDFCummutator_rdEnb_xmem_next;
        SDFCummutator_wrEnb_xmem <= SDFCummutator_wrEnb_xmem_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_mem_btf_switch, SDFCummutator_out_im,
       SDFCummutator_out_re, SDFCummutator_out_vld, SDFCummutator_rdCnt,
       SDFCummutator_rdEnb_xmem, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrEnb_xmem, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btf_vld,
       dinXTwdlf_im, dinXTwdlf_re, dinxTwdlf_vld, xf_im, xf_re, xf_vld)
  BEGIN
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt;
    SDFCummutator_wrData_re_reg_next <= SDFCummutator_wrData_re_reg;
    SDFCummutator_wrData_im_reg_next <= SDFCummutator_wrData_im_reg;
    SDFCummutator_wrEnb_reg_next <= SDFCummutator_wrEnb_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_rdEnb_xmem_next <= SDFCummutator_rdEnb_xmem;
    SDFCummutator_wrEnb_xmem_next <= SDFCummutator_wrEnb_xmem;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
        IF (SDFCummutator_wrEnb_xmem = '1' AND (SDFCummutator_wrAddr_reg = to_unsigned(16#17#, 5))) AND SDFCummutator_wrEnb_reg = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          IF btf_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
          END IF;
        END IF;
      WHEN "001" =>
        SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btf_vld = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          IF SDFCummutator_rdEnb_xmem = '1' THEN 
            SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
            SDFCummutator_xX_vld_reg_next <= '1';
            SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#3#, 3);
          END IF;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btf_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "011" =>
        IF SDFCummutator_rdEnb_xmem = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          IF SDFCummutator_wrEnb_xmem = '1' THEN 
            SDFCummutator_wrXData_re_reg_next <= btf2_re;
            SDFCummutator_wrXData_im_reg_next <= btf2_im;
            IF btf_vld = '1' THEN 
              SDFCummutator_wrxEnb_reg_next <= '1';
              SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
            ELSE 
              SDFCummutator_wrxEnb_reg_next <= '0';
              SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
            END IF;
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
            SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    CASE SDFCummutator_mem_btf_switch IS
      WHEN "00" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 5);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= '0';
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 5);
        END IF;
      WHEN "01" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF (SDFCummutator_rdCnt = to_unsigned(16#1F#, 5)) AND btf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        END IF;
        IF btf_vld = '1' THEN 
          SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#01#, 5);
        END IF;
        SDFCummutator_out_re_next <= btf1_re;
        SDFCummutator_out_im_next <= btf1_im;
        SDFCummutator_out_vld_next <= btf_vld;
      WHEN "10" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        IF (SDFCummutator_rdCnt = to_unsigned(16#17#, 5)) AND xf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdEnb_xmem_next <= '1';
        END IF;
        IF xf_vld = '1' THEN 
          IF SDFCummutator_rdCnt = to_unsigned(16#17#, 5) THEN 
            SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 5);
          ELSE 
            SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#01#, 5);
          END IF;
        END IF;
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
      WHEN OTHERS => 
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 5);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
    END CASE;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrEnb_xmem_next <= '0';
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 5);
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 5);
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#1F#, 5) THEN 
          IF btf_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
          END IF;
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 5);
          SDFCummutator_wrEnb_reg_next <= btf_vld;
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        ELSIF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 5);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
          SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        END IF;
      WHEN "010" =>
        SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#16#, 5) THEN 
          SDFCummutator_wrEnb_xmem_next <= '1';
        END IF;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#17#, 5) THEN 
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 5);
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          SDFCummutator_wrEnb_reg_next <= '0';
          SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
          SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        ELSIF btf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 5);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 5);
        SDFCummutator_wrEnb_reg_next <= dinxTwdlf_vld;
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        END IF;
      WHEN "100" =>
        SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF btf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 5);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 5);
        SDFCummutator_wrEnb_reg_next <= dinxTwdlf_vld;
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(16#0000#, 16);
        SDFOutmux_btf2Pipe_im <= to_signed(16#0000#, 16);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_7_1_re <= SDFOutmux_btf2Pipe_re;
    dout_7_1_im <= SDFOutmux_btf2Pipe_im;
    dout_7_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator7.vhd --

-- Start of SDFCommutator7_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator7_block.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator7_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_SDF1_7/SDFCommutator7
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator7_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_7_vld_dly                     :   IN    std_logic;
        xf_re                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_im                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_vld                            :   IN    std_logic;
        dinXTwdlf_re                      :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinXTwdlf_im                      :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinxTwdlf_vld                     :   IN    std_logic;
        btf1_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf1_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf_vld                           :   IN    std_logic;
        wrData_re                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrData_im                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrAddr                            :   OUT   unsigned(4 DOWNTO 0);  -- ufix5
        wrEnb                             :   OUT   std_logic;
        dout_7_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_7_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_7_1_vld                      :   OUT   std_logic
        );
END SDFCommutator7_block;


ARCHITECTURE rtl OF SDFCommutator7_block IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt              : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL SDFCummutator_wrData_re_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt_next         : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xData_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xX_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_7_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_7_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(16#0000#, 16);
        SDFCummutator_out_im <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_mem_btf_switch <= to_unsigned(16#0#, 2);
        SDFCummutator_wrAddr_reg <= to_unsigned(16#00#, 5);
        SDFCummutator_rdCnt <= to_unsigned(16#00#, 5);
        SDFCummutator_wrXData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_rdEnb_xmem <= '0';
        SDFCummutator_wrEnb_xmem <= '0';
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_mem_btf_switch <= SDFCummutator_mem_btf_switch_next;
        SDFCummutator_rdCnt <= SDFCummutator_rdCnt_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_rdEnb_xmem <= SDFCummutator_rdEnb_xmem_next;
        SDFCummutator_wrEnb_xmem <= SDFCummutator_wrEnb_xmem_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_mem_btf_switch, SDFCummutator_out_im,
       SDFCummutator_out_re, SDFCummutator_out_vld, SDFCummutator_rdCnt,
       SDFCummutator_rdEnb_xmem, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrEnb_xmem, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btf_vld,
       dinXTwdlf_im, dinXTwdlf_re, dinxTwdlf_vld, xf_im, xf_re, xf_vld)
  BEGIN
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt;
    SDFCummutator_wrData_re_reg_next <= SDFCummutator_wrData_re_reg;
    SDFCummutator_wrData_im_reg_next <= SDFCummutator_wrData_im_reg;
    SDFCummutator_wrEnb_reg_next <= SDFCummutator_wrEnb_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_rdEnb_xmem_next <= SDFCummutator_rdEnb_xmem;
    SDFCummutator_wrEnb_xmem_next <= SDFCummutator_wrEnb_xmem;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
        IF (SDFCummutator_wrEnb_xmem = '1' AND (SDFCummutator_wrAddr_reg = to_unsigned(16#17#, 5))) AND SDFCummutator_wrEnb_reg = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          IF btf_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
          END IF;
        END IF;
      WHEN "001" =>
        SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btf_vld = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          IF SDFCummutator_rdEnb_xmem = '1' THEN 
            SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
            SDFCummutator_xX_vld_reg_next <= '1';
            SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#3#, 3);
          END IF;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btf_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "011" =>
        IF SDFCummutator_rdEnb_xmem = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          IF SDFCummutator_wrEnb_xmem = '1' THEN 
            SDFCummutator_wrXData_re_reg_next <= btf2_re;
            SDFCummutator_wrXData_im_reg_next <= btf2_im;
            IF btf_vld = '1' THEN 
              SDFCummutator_wrxEnb_reg_next <= '1';
              SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
            ELSE 
              SDFCummutator_wrxEnb_reg_next <= '0';
              SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
            END IF;
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
            SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    CASE SDFCummutator_mem_btf_switch IS
      WHEN "00" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 5);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= '0';
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 5);
        END IF;
      WHEN "01" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF (SDFCummutator_rdCnt = to_unsigned(16#1F#, 5)) AND btf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        END IF;
        IF btf_vld = '1' THEN 
          SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#01#, 5);
        END IF;
        SDFCummutator_out_re_next <= btf1_re;
        SDFCummutator_out_im_next <= btf1_im;
        SDFCummutator_out_vld_next <= btf_vld;
      WHEN "10" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        IF (SDFCummutator_rdCnt = to_unsigned(16#17#, 5)) AND xf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdEnb_xmem_next <= '1';
        END IF;
        IF xf_vld = '1' THEN 
          IF SDFCummutator_rdCnt = to_unsigned(16#17#, 5) THEN 
            SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 5);
          ELSE 
            SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#01#, 5);
          END IF;
        END IF;
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
      WHEN OTHERS => 
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 5);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
    END CASE;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrEnb_xmem_next <= '0';
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 5);
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 5);
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#1F#, 5) THEN 
          IF btf_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
          END IF;
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 5);
          SDFCummutator_wrEnb_reg_next <= btf_vld;
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        ELSIF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 5);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
          SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        END IF;
      WHEN "010" =>
        SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#16#, 5) THEN 
          SDFCummutator_wrEnb_xmem_next <= '1';
        END IF;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#17#, 5) THEN 
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 5);
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          SDFCummutator_wrEnb_reg_next <= '0';
          SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
          SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        ELSIF btf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 5);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 5);
        SDFCummutator_wrEnb_reg_next <= dinxTwdlf_vld;
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        END IF;
      WHEN "100" =>
        SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF btf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 5);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 5);
        SDFCummutator_wrEnb_reg_next <= dinxTwdlf_vld;
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(16#0000#, 16);
        SDFOutmux_btf2Pipe_im <= to_signed(16#0000#, 16);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_7_1_re <= SDFOutmux_btf2Pipe_re;
    dout_7_1_im <= SDFOutmux_btf2Pipe_im;
    dout_7_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator7_block.vhd --

-- Start of SDFCommutator7_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator7_block1.vhd
-- Created: 2025-03-18 15:26:31
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator7_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_SDF1_7/SDFCommutator7
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator7_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_7_vld_dly                     :   IN    std_logic;
        xf_re                             :   IN    signed(31 DOWNTO 0);  -- sfix32
        xf_im                             :   IN    signed(31 DOWNTO 0);  -- sfix32
        xf_vld                            :   IN    std_logic;
        dinXTwdlf_re                      :   IN    signed(31 DOWNTO 0);  -- sfix32
        dinXTwdlf_im                      :   IN    signed(31 DOWNTO 0);  -- sfix32
        dinxTwdlf_vld                     :   IN    std_logic;
        btf1_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf1_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf2_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf2_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf_vld                           :   IN    std_logic;
        wrData_re                         :   OUT   signed(31 DOWNTO 0);  -- sfix32
        wrData_im                         :   OUT   signed(31 DOWNTO 0);  -- sfix32
        wrAddr                            :   OUT   unsigned(5 DOWNTO 0);  -- ufix6
        wrEnb                             :   OUT   std_logic;
        dout_7_1_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_7_1_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_7_1_vld                      :   OUT   std_logic
        );
END SDFCommutator7_block1;


ARCHITECTURE rtl OF SDFCommutator7_block1 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_im             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt              : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL SDFCummutator_wrData_re_reg      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrData_im_reg      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_im_next        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt_next         : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xData_im                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout0_im                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xX_im                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_7_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_7_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(0, 32);
        SDFCummutator_out_im <= to_signed(0, 32);
        SDFCummutator_wrData_re_reg <= to_signed(0, 32);
        SDFCummutator_wrData_im_reg <= to_signed(0, 32);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_mem_btf_switch <= to_unsigned(16#0#, 2);
        SDFCummutator_wrAddr_reg <= to_unsigned(16#00#, 6);
        SDFCummutator_rdCnt <= to_unsigned(16#00#, 6);
        SDFCummutator_wrXData_re_reg <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg <= to_signed(0, 32);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_rdEnb_xmem <= '0';
        SDFCummutator_wrEnb_xmem <= '0';
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_mem_btf_switch <= SDFCummutator_mem_btf_switch_next;
        SDFCummutator_rdCnt <= SDFCummutator_rdCnt_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_rdEnb_xmem <= SDFCummutator_rdEnb_xmem_next;
        SDFCummutator_wrEnb_xmem <= SDFCummutator_wrEnb_xmem_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_mem_btf_switch, SDFCummutator_out_im,
       SDFCummutator_out_re, SDFCummutator_out_vld, SDFCummutator_rdCnt,
       SDFCummutator_rdEnb_xmem, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrEnb_xmem, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btf_vld,
       dinXTwdlf_im, dinXTwdlf_re, dinxTwdlf_vld, xf_im, xf_re, xf_vld)
  BEGIN
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt;
    SDFCummutator_wrData_re_reg_next <= SDFCummutator_wrData_re_reg;
    SDFCummutator_wrData_im_reg_next <= SDFCummutator_wrData_im_reg;
    SDFCummutator_wrEnb_reg_next <= SDFCummutator_wrEnb_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_rdEnb_xmem_next <= SDFCummutator_rdEnb_xmem;
    SDFCummutator_wrEnb_xmem_next <= SDFCummutator_wrEnb_xmem;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
        IF (SDFCummutator_wrEnb_xmem = '1' AND (SDFCummutator_wrAddr_reg = to_unsigned(16#37#, 6))) AND SDFCummutator_wrEnb_reg = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          IF btf_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
          END IF;
        END IF;
      WHEN "001" =>
        SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btf_vld = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          IF SDFCummutator_rdEnb_xmem = '1' THEN 
            SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
            SDFCummutator_xX_vld_reg_next <= '1';
            SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#3#, 3);
          END IF;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btf_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "011" =>
        IF SDFCummutator_rdEnb_xmem = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          IF SDFCummutator_wrEnb_xmem = '1' THEN 
            SDFCummutator_wrXData_re_reg_next <= btf2_re;
            SDFCummutator_wrXData_im_reg_next <= btf2_im;
            IF btf_vld = '1' THEN 
              SDFCummutator_wrxEnb_reg_next <= '1';
              SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
            ELSE 
              SDFCummutator_wrxEnb_reg_next <= '0';
              SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
            END IF;
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
            SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    CASE SDFCummutator_mem_btf_switch IS
      WHEN "00" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 6);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= '0';
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 6);
        END IF;
      WHEN "01" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF (SDFCummutator_rdCnt = to_unsigned(16#3F#, 6)) AND btf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        END IF;
        IF btf_vld = '1' THEN 
          SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#01#, 6);
        END IF;
        SDFCummutator_out_re_next <= btf1_re;
        SDFCummutator_out_im_next <= btf1_im;
        SDFCummutator_out_vld_next <= btf_vld;
      WHEN "10" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        IF (SDFCummutator_rdCnt = to_unsigned(16#37#, 6)) AND xf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdEnb_xmem_next <= '1';
        END IF;
        IF xf_vld = '1' THEN 
          IF SDFCummutator_rdCnt = to_unsigned(16#37#, 6) THEN 
            SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 6);
          ELSE 
            SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#01#, 6);
          END IF;
        END IF;
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
      WHEN OTHERS => 
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 6);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
    END CASE;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrEnb_xmem_next <= '0';
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 6);
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 6);
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#3F#, 6) THEN 
          IF btf_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
          END IF;
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 6);
          SDFCummutator_wrEnb_reg_next <= btf_vld;
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        ELSIF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 6);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
          SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        END IF;
      WHEN "010" =>
        SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#36#, 6) THEN 
          SDFCummutator_wrEnb_xmem_next <= '1';
        END IF;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#37#, 6) THEN 
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 6);
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          SDFCummutator_wrEnb_reg_next <= '0';
          SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
          SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        ELSIF btf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 6);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 6);
        SDFCummutator_wrEnb_reg_next <= dinxTwdlf_vld;
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        END IF;
      WHEN "100" =>
        SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF btf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 6);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 6);
        SDFCummutator_wrEnb_reg_next <= dinxTwdlf_vld;
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(0, 32);
        SDFOutmux_btf2Pipe_im <= to_signed(0, 32);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_7_1_re <= SDFOutmux_btf2Pipe_re;
    dout_7_1_im <= SDFOutmux_btf2Pipe_im;
    dout_7_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator7_block1.vhd --

-- Start of SDFCommutator8.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator8.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator8
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF2_8/SDFCommutator8
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator8 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_7_1_vld                      :   IN    std_logic;
        xf_re                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_im                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_vld                            :   IN    std_logic;
        dinf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinf_vld                          :   IN    std_logic;
        btf1_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf1_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btfout_vld                        :   IN    std_logic;
        wrData_re                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrData_im                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrAddr                            :   OUT   unsigned(3 DOWNTO 0);  -- ufix4
        wrEnb                             :   OUT   std_logic;
        dout_8_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_8_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_8_1_vld                      :   OUT   std_logic
        );
END SDFCommutator8;


ARCHITECTURE rtl OF SDFCommutator8 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt              : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL SDFCummutator_wrData_re_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt_next         : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xData_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xX_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_8_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_8_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(16#0000#, 16);
        SDFCummutator_out_im <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_mem_btf_switch <= to_unsigned(16#0#, 2);
        SDFCummutator_wrAddr_reg <= to_unsigned(16#0#, 4);
        SDFCummutator_rdCnt <= to_unsigned(16#0#, 4);
        SDFCummutator_wrXData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_rdEnb_xmem <= '0';
        SDFCummutator_wrEnb_xmem <= '0';
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_mem_btf_switch <= SDFCummutator_mem_btf_switch_next;
        SDFCummutator_rdCnt <= SDFCummutator_rdCnt_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_rdEnb_xmem <= SDFCummutator_rdEnb_xmem_next;
        SDFCummutator_wrEnb_xmem <= SDFCummutator_wrEnb_xmem_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_mem_btf_switch, SDFCummutator_out_im,
       SDFCummutator_out_re, SDFCummutator_out_vld, SDFCummutator_rdCnt,
       SDFCummutator_rdEnb_xmem, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrEnb_xmem, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btfout_vld,
       dinf_im, dinf_re, dinf_vld, xf_im, xf_re, xf_vld)
  BEGIN
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt;
    SDFCummutator_wrData_re_reg_next <= SDFCummutator_wrData_re_reg;
    SDFCummutator_wrData_im_reg_next <= SDFCummutator_wrData_im_reg;
    SDFCummutator_wrEnb_reg_next <= SDFCummutator_wrEnb_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_rdEnb_xmem_next <= SDFCummutator_rdEnb_xmem;
    SDFCummutator_wrEnb_xmem_next <= SDFCummutator_wrEnb_xmem;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
        IF (SDFCummutator_wrEnb_xmem = '1' AND (SDFCummutator_wrAddr_reg = to_unsigned(16#7#, 4))) AND SDFCummutator_wrEnb_reg = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          IF btfout_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
          END IF;
        END IF;
      WHEN "001" =>
        SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btfout_vld = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          IF SDFCummutator_rdEnb_xmem = '1' THEN 
            SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
            SDFCummutator_xX_vld_reg_next <= '1';
            SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#3#, 3);
          END IF;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btfout_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "011" =>
        IF SDFCummutator_rdEnb_xmem = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          IF SDFCummutator_wrEnb_xmem = '1' THEN 
            SDFCummutator_wrXData_re_reg_next <= btf2_re;
            SDFCummutator_wrXData_im_reg_next <= btf2_im;
            IF btfout_vld = '1' THEN 
              SDFCummutator_wrxEnb_reg_next <= '1';
              SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
            ELSE 
              SDFCummutator_wrxEnb_reg_next <= '0';
              SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
            END IF;
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
            SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    CASE SDFCummutator_mem_btf_switch IS
      WHEN "00" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#0#, 4);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= '0';
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF dinf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdCnt_next <= to_unsigned(16#0#, 4);
        END IF;
      WHEN "01" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF (SDFCummutator_rdCnt = to_unsigned(16#F#, 4)) AND btfout_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        END IF;
        IF btfout_vld = '1' THEN 
          SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#1#, 4);
        END IF;
        SDFCummutator_out_re_next <= btf1_re;
        SDFCummutator_out_im_next <= btf1_im;
        SDFCummutator_out_vld_next <= btfout_vld;
      WHEN "10" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        IF (SDFCummutator_rdCnt = to_unsigned(16#7#, 4)) AND xf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdEnb_xmem_next <= '1';
        END IF;
        IF xf_vld = '1' THEN 
          IF SDFCummutator_rdCnt = to_unsigned(16#7#, 4) THEN 
            SDFCummutator_rdCnt_next <= to_unsigned(16#0#, 4);
          ELSE 
            SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#1#, 4);
          END IF;
        END IF;
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
      WHEN OTHERS => 
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#0#, 4);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
    END CASE;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrEnb_xmem_next <= '0';
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 4);
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 4);
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#F#, 4) THEN 
          IF btfout_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
          END IF;
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 4);
          SDFCummutator_wrEnb_reg_next <= btfout_vld;
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        ELSIF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#1#, 4);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= dinf_re;
          SDFCummutator_wrData_im_reg_next <= dinf_im;
        END IF;
      WHEN "010" =>
        SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#6#, 4) THEN 
          SDFCummutator_wrEnb_xmem_next <= '1';
        END IF;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#7#, 4) THEN 
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#1#, 4);
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          SDFCummutator_wrEnb_reg_next <= '0';
          SDFCummutator_wrData_re_reg_next <= dinf_re;
          SDFCummutator_wrData_im_reg_next <= dinf_im;
        ELSIF btfout_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#1#, 4);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 4);
        SDFCummutator_wrEnb_reg_next <= dinf_vld;
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        END IF;
      WHEN "100" =>
        SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF btfout_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 4);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 4);
        SDFCummutator_wrEnb_reg_next <= dinf_vld;
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(16#0000#, 16);
        SDFOutmux_btf2Pipe_im <= to_signed(16#0000#, 16);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_8_1_re <= SDFOutmux_btf2Pipe_re;
    dout_8_1_im <= SDFOutmux_btf2Pipe_im;
    dout_8_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator8.vhd --

-- Start of SDFCommutator8_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator8_block.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator8_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_SDF2_8/SDFCommutator8
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator8_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_7_1_vld                      :   IN    std_logic;
        xf_re                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_im                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_vld                            :   IN    std_logic;
        dinf_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinf_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinf_vld                          :   IN    std_logic;
        btf1_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf1_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btfout_vld                        :   IN    std_logic;
        wrData_re                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrData_im                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrAddr                            :   OUT   unsigned(3 DOWNTO 0);  -- ufix4
        wrEnb                             :   OUT   std_logic;
        dout_8_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_8_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_8_1_vld                      :   OUT   std_logic
        );
END SDFCommutator8_block;


ARCHITECTURE rtl OF SDFCommutator8_block IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt              : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL SDFCummutator_wrData_re_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt_next         : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xData_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xX_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_8_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_8_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(16#0000#, 16);
        SDFCummutator_out_im <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_mem_btf_switch <= to_unsigned(16#0#, 2);
        SDFCummutator_wrAddr_reg <= to_unsigned(16#0#, 4);
        SDFCummutator_rdCnt <= to_unsigned(16#0#, 4);
        SDFCummutator_wrXData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_rdEnb_xmem <= '0';
        SDFCummutator_wrEnb_xmem <= '0';
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_mem_btf_switch <= SDFCummutator_mem_btf_switch_next;
        SDFCummutator_rdCnt <= SDFCummutator_rdCnt_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_rdEnb_xmem <= SDFCummutator_rdEnb_xmem_next;
        SDFCummutator_wrEnb_xmem <= SDFCummutator_wrEnb_xmem_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_mem_btf_switch, SDFCummutator_out_im,
       SDFCummutator_out_re, SDFCummutator_out_vld, SDFCummutator_rdCnt,
       SDFCummutator_rdEnb_xmem, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrEnb_xmem, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btfout_vld,
       dinf_im, dinf_re, dinf_vld, xf_im, xf_re, xf_vld)
  BEGIN
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt;
    SDFCummutator_wrData_re_reg_next <= SDFCummutator_wrData_re_reg;
    SDFCummutator_wrData_im_reg_next <= SDFCummutator_wrData_im_reg;
    SDFCummutator_wrEnb_reg_next <= SDFCummutator_wrEnb_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_rdEnb_xmem_next <= SDFCummutator_rdEnb_xmem;
    SDFCummutator_wrEnb_xmem_next <= SDFCummutator_wrEnb_xmem;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
        IF (SDFCummutator_wrEnb_xmem = '1' AND (SDFCummutator_wrAddr_reg = to_unsigned(16#7#, 4))) AND SDFCummutator_wrEnb_reg = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          IF btfout_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
          END IF;
        END IF;
      WHEN "001" =>
        SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btfout_vld = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          IF SDFCummutator_rdEnb_xmem = '1' THEN 
            SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
            SDFCummutator_xX_vld_reg_next <= '1';
            SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#3#, 3);
          END IF;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btfout_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "011" =>
        IF SDFCummutator_rdEnb_xmem = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          IF SDFCummutator_wrEnb_xmem = '1' THEN 
            SDFCummutator_wrXData_re_reg_next <= btf2_re;
            SDFCummutator_wrXData_im_reg_next <= btf2_im;
            IF btfout_vld = '1' THEN 
              SDFCummutator_wrxEnb_reg_next <= '1';
              SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
            ELSE 
              SDFCummutator_wrxEnb_reg_next <= '0';
              SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
            END IF;
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
            SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    CASE SDFCummutator_mem_btf_switch IS
      WHEN "00" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#0#, 4);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= '0';
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF dinf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdCnt_next <= to_unsigned(16#0#, 4);
        END IF;
      WHEN "01" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF (SDFCummutator_rdCnt = to_unsigned(16#F#, 4)) AND btfout_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        END IF;
        IF btfout_vld = '1' THEN 
          SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#1#, 4);
        END IF;
        SDFCummutator_out_re_next <= btf1_re;
        SDFCummutator_out_im_next <= btf1_im;
        SDFCummutator_out_vld_next <= btfout_vld;
      WHEN "10" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        IF (SDFCummutator_rdCnt = to_unsigned(16#7#, 4)) AND xf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdEnb_xmem_next <= '1';
        END IF;
        IF xf_vld = '1' THEN 
          IF SDFCummutator_rdCnt = to_unsigned(16#7#, 4) THEN 
            SDFCummutator_rdCnt_next <= to_unsigned(16#0#, 4);
          ELSE 
            SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#1#, 4);
          END IF;
        END IF;
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
      WHEN OTHERS => 
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#0#, 4);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
    END CASE;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrEnb_xmem_next <= '0';
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 4);
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 4);
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#F#, 4) THEN 
          IF btfout_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
          END IF;
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 4);
          SDFCummutator_wrEnb_reg_next <= btfout_vld;
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        ELSIF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#1#, 4);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= dinf_re;
          SDFCummutator_wrData_im_reg_next <= dinf_im;
        END IF;
      WHEN "010" =>
        SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#6#, 4) THEN 
          SDFCummutator_wrEnb_xmem_next <= '1';
        END IF;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#7#, 4) THEN 
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#1#, 4);
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          SDFCummutator_wrEnb_reg_next <= '0';
          SDFCummutator_wrData_re_reg_next <= dinf_re;
          SDFCummutator_wrData_im_reg_next <= dinf_im;
        ELSIF btfout_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#1#, 4);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 4);
        SDFCummutator_wrEnb_reg_next <= dinf_vld;
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        END IF;
      WHEN "100" =>
        SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF btfout_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 4);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 4);
        SDFCummutator_wrEnb_reg_next <= dinf_vld;
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(16#0000#, 16);
        SDFOutmux_btf2Pipe_im <= to_signed(16#0000#, 16);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_8_1_re <= SDFOutmux_btf2Pipe_re;
    dout_8_1_im <= SDFOutmux_btf2Pipe_im;
    dout_8_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator8_block.vhd --

-- Start of SDFCommutator8_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator8_block1.vhd
-- Created: 2025-03-18 15:26:31
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator8_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_SDF2_8/SDFCommutator8
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator8_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        dout_7_1_vld                      :   IN    std_logic;
        xf_re                             :   IN    signed(31 DOWNTO 0);  -- sfix32
        xf_im                             :   IN    signed(31 DOWNTO 0);  -- sfix32
        xf_vld                            :   IN    std_logic;
        dinf_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        dinf_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        dinf_vld                          :   IN    std_logic;
        btf1_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf1_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf2_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf2_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btfout_vld                        :   IN    std_logic;
        wrData_re                         :   OUT   signed(31 DOWNTO 0);  -- sfix32
        wrData_im                         :   OUT   signed(31 DOWNTO 0);  -- sfix32
        wrAddr                            :   OUT   unsigned(6 DOWNTO 0);  -- ufix7
        wrEnb                             :   OUT   std_logic;
        dout_8_1_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_8_1_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_8_1_vld                      :   OUT   std_logic
        );
END SDFCommutator8_block1;


ARCHITECTURE rtl OF SDFCommutator8_block1 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_im             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt              : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL SDFCummutator_wrData_re_reg      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrData_im_reg      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_im_next        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt_next         : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xData_im                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout0_im                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xX_im                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_8_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_8_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(0, 32);
        SDFCummutator_out_im <= to_signed(0, 32);
        SDFCummutator_wrData_re_reg <= to_signed(0, 32);
        SDFCummutator_wrData_im_reg <= to_signed(0, 32);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_mem_btf_switch <= to_unsigned(16#0#, 2);
        SDFCummutator_wrAddr_reg <= to_unsigned(16#00#, 7);
        SDFCummutator_rdCnt <= to_unsigned(16#00#, 7);
        SDFCummutator_wrXData_re_reg <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg <= to_signed(0, 32);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_rdEnb_xmem <= '0';
        SDFCummutator_wrEnb_xmem <= '0';
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_mem_btf_switch <= SDFCummutator_mem_btf_switch_next;
        SDFCummutator_rdCnt <= SDFCummutator_rdCnt_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_rdEnb_xmem <= SDFCummutator_rdEnb_xmem_next;
        SDFCummutator_wrEnb_xmem <= SDFCummutator_wrEnb_xmem_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_mem_btf_switch, SDFCummutator_out_im,
       SDFCummutator_out_re, SDFCummutator_out_vld, SDFCummutator_rdCnt,
       SDFCummutator_rdEnb_xmem, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrEnb_xmem, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btfout_vld,
       dinf_im, dinf_re, dinf_vld, xf_im, xf_re, xf_vld)
  BEGIN
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt;
    SDFCummutator_wrData_re_reg_next <= SDFCummutator_wrData_re_reg;
    SDFCummutator_wrData_im_reg_next <= SDFCummutator_wrData_im_reg;
    SDFCummutator_wrEnb_reg_next <= SDFCummutator_wrEnb_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_rdEnb_xmem_next <= SDFCummutator_rdEnb_xmem;
    SDFCummutator_wrEnb_xmem_next <= SDFCummutator_wrEnb_xmem;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
        IF (SDFCummutator_wrEnb_xmem = '1' AND (SDFCummutator_wrAddr_reg = to_unsigned(16#77#, 7))) AND SDFCummutator_wrEnb_reg = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          IF btfout_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
          END IF;
        END IF;
      WHEN "001" =>
        SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btfout_vld = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          IF SDFCummutator_rdEnb_xmem = '1' THEN 
            SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
            SDFCummutator_xX_vld_reg_next <= '1';
            SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#3#, 3);
          END IF;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btfout_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "011" =>
        IF SDFCummutator_rdEnb_xmem = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          IF SDFCummutator_wrEnb_xmem = '1' THEN 
            SDFCummutator_wrXData_re_reg_next <= btf2_re;
            SDFCummutator_wrXData_im_reg_next <= btf2_im;
            IF btfout_vld = '1' THEN 
              SDFCummutator_wrxEnb_reg_next <= '1';
              SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
            ELSE 
              SDFCummutator_wrxEnb_reg_next <= '0';
              SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
            END IF;
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
            SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    CASE SDFCummutator_mem_btf_switch IS
      WHEN "00" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 7);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= '0';
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF dinf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 7);
        END IF;
      WHEN "01" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF (SDFCummutator_rdCnt = to_unsigned(16#7F#, 7)) AND btfout_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        END IF;
        IF btfout_vld = '1' THEN 
          SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#01#, 7);
        END IF;
        SDFCummutator_out_re_next <= btf1_re;
        SDFCummutator_out_im_next <= btf1_im;
        SDFCummutator_out_vld_next <= btfout_vld;
      WHEN "10" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        IF (SDFCummutator_rdCnt = to_unsigned(16#77#, 7)) AND xf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdEnb_xmem_next <= '1';
        END IF;
        IF xf_vld = '1' THEN 
          IF SDFCummutator_rdCnt = to_unsigned(16#77#, 7) THEN 
            SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 7);
          ELSE 
            SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#01#, 7);
          END IF;
        END IF;
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
      WHEN OTHERS => 
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 7);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
    END CASE;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrEnb_xmem_next <= '0';
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 7);
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 7);
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#7F#, 7) THEN 
          IF btfout_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
          END IF;
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 7);
          SDFCummutator_wrEnb_reg_next <= btfout_vld;
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        ELSIF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 7);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= dinf_re;
          SDFCummutator_wrData_im_reg_next <= dinf_im;
        END IF;
      WHEN "010" =>
        SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#76#, 7) THEN 
          SDFCummutator_wrEnb_xmem_next <= '1';
        END IF;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#77#, 7) THEN 
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 7);
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          SDFCummutator_wrEnb_reg_next <= '0';
          SDFCummutator_wrData_re_reg_next <= dinf_re;
          SDFCummutator_wrData_im_reg_next <= dinf_im;
        ELSIF btfout_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 7);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 7);
        SDFCummutator_wrEnb_reg_next <= dinf_vld;
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF dinf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        END IF;
      WHEN "100" =>
        SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF btfout_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 7);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 7);
        SDFCummutator_wrEnb_reg_next <= dinf_vld;
        SDFCummutator_wrData_re_reg_next <= dinf_re;
        SDFCummutator_wrData_im_reg_next <= dinf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(0, 32);
        SDFOutmux_btf2Pipe_im <= to_signed(0, 32);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_8_1_re <= SDFOutmux_btf2Pipe_re;
    dout_8_1_im <= SDFOutmux_btf2Pipe_im;
    dout_8_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator8_block1.vhd --

-- Start of SDFCommutator9.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator9.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator9
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF1_9/SDFCommutator9
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator9 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_9_vld_dly                     :   IN    std_logic;
        xf_re                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_im                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_vld                            :   IN    std_logic;
        dinXTwdlf_re                      :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinXTwdlf_im                      :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinxTwdlf_vld                     :   IN    std_logic;
        btf1_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf1_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf_vld                           :   IN    std_logic;
        wrData_re                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrData_im                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrAddr                            :   OUT   unsigned(2 DOWNTO 0);  -- ufix3
        wrEnb                             :   OUT   std_logic;
        dout_9_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_9_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_9_1_vld                      :   OUT   std_logic
        );
END SDFCommutator9;


ARCHITECTURE rtl OF SDFCommutator9 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrData_re_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xData_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xX_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_9_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_9_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(16#0000#, 16);
        SDFCummutator_out_im <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg <= to_unsigned(16#0#, 3);
        SDFCummutator_wrXData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_out_im, SDFCummutator_out_re,
       SDFCummutator_out_vld, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btf_vld,
       dinXTwdlf_im, dinXTwdlf_re, din_9_vld_dly, dinxTwdlf_vld)
  BEGIN
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btf_vld = '1' THEN 
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btf_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          IF btf_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    SDFCummutator_out_re_next <= btf1_re;
    SDFCummutator_out_im_next <= btf1_im;
    SDFCummutator_out_vld_next <= btf_vld;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        SDFCummutator_wrEnb_reg_next <= '0';
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
        END IF;
        IF dinxTwdlf_vld = '1' THEN 
          IF SDFCummutator_wrAddr_reg = to_unsigned(16#7#, 3) THEN 
            SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrEnb_reg_next <= '0';
          ELSE 
            SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#1#, 3);
            SDFCummutator_wrEnb_reg_next <= '1';
          END IF;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 3);
          IF dinxTwdlf_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
            SDFCummutator_wrEnb_reg_next <= '1';
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrEnb_reg_next <= '0';
          END IF;
        ELSIF din_9_vld_dly = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(16#0000#, 16);
        SDFOutmux_btf2Pipe_im <= to_signed(16#0000#, 16);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_9_1_re <= SDFOutmux_btf2Pipe_re;
    dout_9_1_im <= SDFOutmux_btf2Pipe_im;
    dout_9_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator9.vhd --

-- Start of SDFCommutator9_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator9_block.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator9_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/RADIX22FFT_SDF1_9/SDFCommutator9
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator9_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_9_vld_dly                     :   IN    std_logic;
        xf_re                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_im                             :   IN    signed(15 DOWNTO 0);  -- sfix16
        xf_vld                            :   IN    std_logic;
        dinXTwdlf_re                      :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinXTwdlf_im                      :   IN    signed(15 DOWNTO 0);  -- sfix16
        dinxTwdlf_vld                     :   IN    std_logic;
        btf1_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf1_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_re                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf2_im                           :   IN    signed(15 DOWNTO 0);  -- sfix16
        btf_vld                           :   IN    std_logic;
        wrData_re                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrData_im                         :   OUT   signed(15 DOWNTO 0);  -- sfix16
        wrAddr                            :   OUT   unsigned(2 DOWNTO 0);  -- ufix3
        wrEnb                             :   OUT   std_logic;
        dout_9_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_9_1_im                       :   OUT   signed(15 DOWNTO 0);  -- sfix16
        dout_9_1_vld                      :   OUT   std_logic
        );
END SDFCommutator9_block;


ARCHITECTURE rtl OF SDFCommutator9_block IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im             : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrData_re_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_im_next        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xData_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_im                         : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL xX_im                            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_9_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_9_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 16
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(16#0000#, 16);
        SDFCummutator_out_im <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg <= to_unsigned(16#0#, 3);
        SDFCummutator_wrXData_re_reg <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_out_im, SDFCummutator_out_re,
       SDFCummutator_out_vld, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btf_vld,
       dinXTwdlf_im, dinXTwdlf_re, din_9_vld_dly, dinxTwdlf_vld)
  BEGIN
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btf_vld = '1' THEN 
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btf_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          IF btf_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_wrXData_im_reg_next <= to_signed(16#0000#, 16);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    SDFCummutator_out_re_next <= btf1_re;
    SDFCummutator_out_im_next <= btf1_im;
    SDFCummutator_out_vld_next <= btf_vld;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        SDFCummutator_wrEnb_reg_next <= '0';
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
        END IF;
        IF dinxTwdlf_vld = '1' THEN 
          IF SDFCummutator_wrAddr_reg = to_unsigned(16#7#, 3) THEN 
            SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrEnb_reg_next <= '0';
          ELSE 
            SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#1#, 3);
            SDFCummutator_wrEnb_reg_next <= '1';
          END IF;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 3);
          IF dinxTwdlf_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
            SDFCummutator_wrEnb_reg_next <= '1';
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrEnb_reg_next <= '0';
          END IF;
        ELSIF din_9_vld_dly = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(16#0000#, 16);
        SDFOutmux_btf2Pipe_im <= to_signed(16#0000#, 16);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_9_1_re <= SDFOutmux_btf2Pipe_re;
    dout_9_1_im <= SDFOutmux_btf2Pipe_im;
    dout_9_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator9_block.vhd --

-- Start of SDFCommutator9_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SDFCommutator9_block1.vhd
-- Created: 2025-03-18 15:26:31
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDFCommutator9_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/RADIX22FFT_SDF1_9/SDFCommutator9
-- Hierarchy Level: 3
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDFCommutator9_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        din_9_vld_dly                     :   IN    std_logic;
        xf_re                             :   IN    signed(31 DOWNTO 0);  -- sfix32
        xf_im                             :   IN    signed(31 DOWNTO 0);  -- sfix32
        xf_vld                            :   IN    std_logic;
        dinXTwdlf_re                      :   IN    signed(31 DOWNTO 0);  -- sfix32
        dinXTwdlf_im                      :   IN    signed(31 DOWNTO 0);  -- sfix32
        dinxTwdlf_vld                     :   IN    std_logic;
        btf1_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf1_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf2_re                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf2_im                           :   IN    signed(31 DOWNTO 0);  -- sfix32
        btf_vld                           :   IN    std_logic;
        wrData_re                         :   OUT   signed(31 DOWNTO 0);  -- sfix32
        wrData_im                         :   OUT   signed(31 DOWNTO 0);  -- sfix32
        wrAddr                            :   OUT   unsigned(7 DOWNTO 0);  -- ufix8
        wrEnb                             :   OUT   std_logic;
        dout_9_1_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_9_1_im                       :   OUT   signed(31 DOWNTO 0);  -- sfix32
        dout_9_1_vld                      :   OUT   std_logic
        );
END SDFCommutator9_block1;


ARCHITECTURE rtl OF SDFCommutator9_block1 IS

  -- Component Declarations
  COMPONENT dataMEM_re_0_1_Wrapper_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          Reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataMEM_re_0_1_Wrapper_generic
    USE ENTITY work.dataMEM_re_0_1_Wrapper_generic(rtl);

  -- Signals
  SIGNAL SDFCummutator_out_re             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_im             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_vld            : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL SDFCummutator_wrState            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt              : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL SDFCummutator_wrData_re_reg      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrData_im_reg      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrEnb_reg          : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrXData_im_reg     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_xWrAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg         : std_logic;
  SIGNAL SDFCummutator_xRdAddr            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem         : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg         : std_logic;
  SIGNAL SDFCummutator_out_re_next        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_im_next        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_out_vld_next       : std_logic;
  SIGNAL SDFCummutator_wrAddr_reg_next    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL SDFCummutator_wrState_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_mem_btf_switch_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFCummutator_rdCnt_next         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL SDFCummutator_wrData_re_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrData_im_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrEnb_reg_next     : std_logic;
  SIGNAL SDFCummutator_wrXData_re_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_wrXData_im_reg_next : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFCummutator_xWrAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_wrxEnb_reg_next    : std_logic;
  SIGNAL SDFCummutator_xRdAddr_next       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_XState_next        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SDFCummutator_rdEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_wrEnb_xmem_next    : std_logic;
  SIGNAL SDFCummutator_xX_vld_reg_next    : std_logic;
  SIGNAL xData_re                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xData_im                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL wrXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrXEnb                           : std_logic;
  SIGNAL rdXAddr                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL xX_vld                           : std_logic;
  SIGNAL dout0_re                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout0_im                         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL dout0_vld                        : std_logic;
  SIGNAL xX_re                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL xX_im                            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_re            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_im            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btfPipe_vld            : std_logic;
  SIGNAL SDFOutmux_btf2Pipe_re_next       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btf2Pipe_im_next       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL SDFOutmux_btfPipe_vld_next       : std_logic;

BEGIN
  u_dataXMEM_re_0_9_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_re,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_re
              );

  u_dataXMEM_im_0_9_Wrapper : dataMEM_re_0_1_Wrapper_generic
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 32
                 )
    PORT MAP( Clk => Clk,
              Reset => Reset,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              wr_din => xData_im,
              wr_addr => wrXAddr,
              wr_en => wrXEnb,
              rd_addr => rdXAddr,
              dout => xX_im
              );

  -- SDFCummutator
  SDFCummutator_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFCummutator_out_re <= to_signed(0, 32);
        SDFCummutator_out_im <= to_signed(0, 32);
        SDFCummutator_wrData_re_reg <= to_signed(0, 32);
        SDFCummutator_wrData_im_reg <= to_signed(0, 32);
        SDFCummutator_wrEnb_reg <= '0';
        SDFCummutator_out_vld <= '0';
        SDFCummutator_wrState <= to_unsigned(16#0#, 3);
        SDFCummutator_mem_btf_switch <= to_unsigned(16#0#, 2);
        SDFCummutator_wrAddr_reg <= to_unsigned(16#00#, 8);
        SDFCummutator_rdCnt <= to_unsigned(16#00#, 8);
        SDFCummutator_wrXData_re_reg <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg <= to_signed(0, 32);
        SDFCummutator_xWrAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg <= '0';
        SDFCummutator_xRdAddr <= to_unsigned(16#0#, 3);
        SDFCummutator_XState <= to_unsigned(16#0#, 3);
        SDFCummutator_rdEnb_xmem <= '0';
        SDFCummutator_wrEnb_xmem <= '0';
        SDFCummutator_xX_vld_reg <= '0';
      ELSIF enb = '1' THEN
        SDFCummutator_out_re <= SDFCummutator_out_re_next;
        SDFCummutator_out_im <= SDFCummutator_out_im_next;
        SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
        SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
        SDFCummutator_wrState <= SDFCummutator_wrState_next;
        SDFCummutator_mem_btf_switch <= SDFCummutator_mem_btf_switch_next;
        SDFCummutator_rdCnt <= SDFCummutator_rdCnt_next;
        SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
        SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
        SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
        SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
        SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
        SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
        SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
        SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
        SDFCummutator_XState <= SDFCummutator_XState_next;
        SDFCummutator_rdEnb_xmem <= SDFCummutator_rdEnb_xmem_next;
        SDFCummutator_wrEnb_xmem <= SDFCummutator_wrEnb_xmem_next;
        SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
      END IF;
    END IF;
  END PROCESS SDFCummutator_process;

  SDFCummutator_output : PROCESS (SDFCummutator_XState, SDFCummutator_mem_btf_switch, SDFCummutator_out_im,
       SDFCummutator_out_re, SDFCummutator_out_vld, SDFCummutator_rdCnt,
       SDFCummutator_rdEnb_xmem, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrEnb_xmem, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btf_vld,
       dinXTwdlf_im, dinXTwdlf_re, dinxTwdlf_vld, xf_im, xf_re, xf_vld)
  BEGIN
    SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg;
    SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt;
    SDFCummutator_wrData_re_reg_next <= SDFCummutator_wrData_re_reg;
    SDFCummutator_wrData_im_reg_next <= SDFCummutator_wrData_im_reg;
    SDFCummutator_wrEnb_reg_next <= SDFCummutator_wrEnb_reg;
    SDFCummutator_wrXData_re_reg_next <= SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next <= SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next <= SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr;
    SDFCummutator_XState_next <= SDFCummutator_XState;
    SDFCummutator_rdEnb_xmem_next <= SDFCummutator_rdEnb_xmem;
    SDFCummutator_wrEnb_xmem_next <= SDFCummutator_wrEnb_xmem;
    SDFCummutator_xX_vld_reg_next <= SDFCummutator_xX_vld_reg;
    CASE SDFCummutator_XState IS
      WHEN "000" =>
        SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_xX_vld_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
        IF (SDFCummutator_wrEnb_xmem = '1' AND (SDFCummutator_wrAddr_reg = to_unsigned(16#F7#, 8))) AND SDFCummutator_wrEnb_reg = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          IF btf_vld = '1' THEN 
            SDFCummutator_wrxEnb_reg_next <= '1';
            SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
          END IF;
        END IF;
      WHEN "001" =>
        SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_xX_vld_reg_next <= '0';
        IF btf_vld = '1' THEN 
          SDFCummutator_wrXData_re_reg_next <= btf2_re;
          SDFCummutator_wrXData_im_reg_next <= btf2_im;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
        END IF;
      WHEN "010" =>
        SDFCummutator_wrXData_re_reg_next <= btf2_re;
        SDFCummutator_wrXData_im_reg_next <= btf2_im;
        SDFCummutator_xX_vld_reg_next <= '0';
        IF SDFCummutator_xWrAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_wrxEnb_reg_next <= '0';
          IF SDFCummutator_rdEnb_xmem = '1' THEN 
            SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
            SDFCummutator_xX_vld_reg_next <= '1';
            SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#3#, 3);
          END IF;
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        ELSIF btf_vld = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= SDFCummutator_xWrAddr + to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrxEnb_reg_next <= '0';
        END IF;
      WHEN "011" =>
        IF SDFCummutator_rdEnb_xmem = '1' THEN 
          SDFCummutator_XState_next <= to_unsigned(16#4#, 3);
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xRdAddr_next <= to_unsigned(16#1#, 3);
        END IF;
      WHEN "100" =>
        IF SDFCummutator_xRdAddr = to_unsigned(16#7#, 3) THEN 
          SDFCummutator_xX_vld_reg_next <= '1';
          SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
          SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
          IF SDFCummutator_wrEnb_xmem = '1' THEN 
            SDFCummutator_wrXData_re_reg_next <= btf2_re;
            SDFCummutator_wrXData_im_reg_next <= btf2_im;
            IF btf_vld = '1' THEN 
              SDFCummutator_wrxEnb_reg_next <= '1';
              SDFCummutator_XState_next <= to_unsigned(16#2#, 3);
            ELSE 
              SDFCummutator_wrxEnb_reg_next <= '0';
              SDFCummutator_XState_next <= to_unsigned(16#1#, 3);
            END IF;
          ELSE 
            SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
            SDFCummutator_wrxEnb_reg_next <= '0';
            SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
            SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
          END IF;
        ELSE 
          SDFCummutator_xRdAddr_next <= SDFCummutator_xRdAddr + to_unsigned(16#1#, 3);
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrXData_re_reg_next <= to_signed(0, 32);
        SDFCummutator_wrXData_im_reg_next <= to_signed(0, 32);
        SDFCummutator_xWrAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_xRdAddr_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrxEnb_reg_next <= '0';
        SDFCummutator_XState_next <= to_unsigned(16#0#, 3);
    END CASE;
    CASE SDFCummutator_mem_btf_switch IS
      WHEN "00" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 8);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= '0';
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 8);
        END IF;
      WHEN "01" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
        SDFCummutator_rdEnb_xmem_next <= '0';
        IF (SDFCummutator_rdCnt = to_unsigned(16#FF#, 8)) AND btf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        END IF;
        IF btf_vld = '1' THEN 
          SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#01#, 8);
        END IF;
        SDFCummutator_out_re_next <= btf1_re;
        SDFCummutator_out_im_next <= btf1_im;
        SDFCummutator_out_vld_next <= btf_vld;
      WHEN "10" =>
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#2#, 2);
        IF (SDFCummutator_rdCnt = to_unsigned(16#F7#, 8)) AND xf_vld = '1' THEN 
          SDFCummutator_mem_btf_switch_next <= to_unsigned(16#1#, 2);
          SDFCummutator_rdEnb_xmem_next <= '1';
        END IF;
        IF xf_vld = '1' THEN 
          IF SDFCummutator_rdCnt = to_unsigned(16#F7#, 8) THEN 
            SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 8);
          ELSE 
            SDFCummutator_rdCnt_next <= SDFCummutator_rdCnt + to_unsigned(16#01#, 8);
          END IF;
        END IF;
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
      WHEN OTHERS => 
        SDFCummutator_mem_btf_switch_next <= to_unsigned(16#0#, 2);
        SDFCummutator_rdCnt_next <= to_unsigned(16#00#, 8);
        SDFCummutator_out_re_next <= xf_re;
        SDFCummutator_out_im_next <= xf_im;
        SDFCummutator_out_vld_next <= xf_vld;
    END CASE;
    CASE SDFCummutator_wrState IS
      WHEN "000" =>
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrEnb_xmem_next <= '0';
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 8);
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 8);
          SDFCummutator_wrEnb_reg_next <= '1';
        END IF;
      WHEN "001" =>
        SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#FF#, 8) THEN 
          IF btf_vld = '1' THEN 
            SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          ELSE 
            SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
          END IF;
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 8);
          SDFCummutator_wrEnb_reg_next <= btf_vld;
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        ELSIF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 8);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
          SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        END IF;
      WHEN "010" =>
        SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#F6#, 8) THEN 
          SDFCummutator_wrEnb_xmem_next <= '1';
        END IF;
        IF SDFCummutator_wrAddr_reg = to_unsigned(16#F7#, 8) THEN 
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 8);
          SDFCummutator_wrState_next <= to_unsigned(16#3#, 3);
          SDFCummutator_wrEnb_reg_next <= '0';
          SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
          SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        ELSIF btf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= SDFCummutator_wrAddr_reg + to_unsigned(16#01#, 8);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN "011" =>
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 8);
        SDFCummutator_wrEnb_reg_next <= dinxTwdlf_vld;
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF dinxTwdlf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#1#, 3);
        ELSE 
          SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        END IF;
      WHEN "100" =>
        SDFCummutator_wrState_next <= to_unsigned(16#4#, 3);
        SDFCummutator_wrEnb_reg_next <= '0';
        SDFCummutator_wrEnb_xmem_next <= '0';
        IF btf_vld = '1' THEN 
          SDFCummutator_wrState_next <= to_unsigned(16#2#, 3);
          SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 8);
          SDFCummutator_wrEnb_reg_next <= '1';
          SDFCummutator_wrData_re_reg_next <= btf2_re;
          SDFCummutator_wrData_im_reg_next <= btf2_im;
        END IF;
      WHEN OTHERS => 
        SDFCummutator_wrState_next <= to_unsigned(16#0#, 3);
        SDFCummutator_wrAddr_reg_next <= to_unsigned(16#00#, 8);
        SDFCummutator_wrEnb_reg_next <= dinxTwdlf_vld;
        SDFCummutator_wrData_re_reg_next <= dinXTwdlf_re;
        SDFCummutator_wrData_im_reg_next <= dinXTwdlf_im;
    END CASE;
    wrData_re <= SDFCummutator_wrData_re_reg;
    wrData_im <= SDFCummutator_wrData_im_reg;
    wrAddr <= SDFCummutator_wrAddr_reg;
    wrEnb <= SDFCummutator_wrEnb_reg;
    xData_re <= SDFCummutator_wrXData_re_reg;
    xData_im <= SDFCummutator_wrXData_im_reg;
    wrXAddr <= SDFCummutator_xWrAddr;
    wrXEnb <= SDFCummutator_wrxEnb_reg;
    rdXAddr <= SDFCummutator_xRdAddr;
    xX_vld <= SDFCummutator_xX_vld_reg;
    dout0_re <= SDFCummutator_out_re;
    dout0_im <= SDFCummutator_out_im;
    dout0_vld <= SDFCummutator_out_vld;
  END PROCESS SDFCummutator_output;


  -- SDFOutmux
  SDFOutmux_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        SDFOutmux_btf2Pipe_re <= to_signed(0, 32);
        SDFOutmux_btf2Pipe_im <= to_signed(0, 32);
        SDFOutmux_btfPipe_vld <= '0';
      ELSIF enb = '1' THEN
        SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
        SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
        SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
      END IF;
    END IF;
  END PROCESS SDFOutmux_process;

  SDFOutmux_output : PROCESS (SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld)
  BEGIN
    SDFOutmux_btf2Pipe_re_next <= SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next <= SDFOutmux_btf2Pipe_im;
    IF dout0_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= dout0_re;
      SDFOutmux_btf2Pipe_im_next <= dout0_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSIF xX_vld = '1' THEN 
      SDFOutmux_btf2Pipe_re_next <= xX_re;
      SDFOutmux_btf2Pipe_im_next <= xX_im;
      SDFOutmux_btfPipe_vld_next <= '1';
    ELSE 
      SDFOutmux_btfPipe_vld_next <= '0';
    END IF;
    dout_9_1_re <= SDFOutmux_btf2Pipe_re;
    dout_9_1_im <= SDFOutmux_btf2Pipe_im;
    dout_9_1_vld <= SDFOutmux_btfPipe_vld;
  END PROCESS SDFOutmux_output;


END rtl;


-- End of SDFCommutator9_block1.vhd --

-- Start of SimpleDualPortRAM_generic.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\SimpleDualPortRAM_generic.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SimpleDualPortRAM_generic
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF1_1/dataMEM_re_0_1_Wrapper_generic/SimpleDualPortRAM_generic
-- Hierarchy Level: 5
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SimpleDualPortRAM_generic IS
  GENERIC( AddrWidth                      : integer := 1;
           DataWidth                      : integer := 1
           );
  PORT( Clk                               :   IN    std_logic;
        wr_din                            :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
        wr_addr                           :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
        wr_en                             :   IN    std_logic;  -- ufix1
        rd_addr                           :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
        dout                              :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
        );
END SimpleDualPortRAM_generic;


ARCHITECTURE rtl OF SimpleDualPortRAM_generic IS

  -- Local Type Definitions
  TYPE ram_type IS ARRAY (2**AddrWidth - 1 DOWNTO 0) of std_logic_vector(DataWidth - 1 DOWNTO 0);

  -- Signals
  SIGNAL ram                              : ram_type := (OTHERS => (OTHERS => '0'));
  SIGNAL data_int                         : std_logic_vector(DataWidth - 1 DOWNTO 0) := (OTHERS => '0');

BEGIN
  SimpleDualPortRAM_generic_process: PROCESS (Clk)
  BEGIN
    IF Clk'event AND Clk = '1' THEN
      IF wr_en = '1' THEN
        ram(to_integer(wr_addr)) <= std_logic_vector(wr_din);
      END IF;
      data_int <= ram(to_integer(rd_addr));
    END IF;
  END PROCESS SimpleDualPortRAM_generic_process;

  dout <= signed(data_int);

END rtl;


-- End of SimpleDualPortRAM_generic.vhd --

-- Start of TWDLROM_11_1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\TWDLROM_11_1.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: TWDLROM_11_1
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/TWDLROM_11_1
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY TWDLROM_11_1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_10_1_vld                     :   IN    std_logic;
        twdl_11_1_re                      :   OUT   signed(15 DOWNTO 0);  -- sfix16_En14
        twdl_11_1_im                      :   OUT   signed(15 DOWNTO 0)  -- sfix16_En14
        );
END TWDLROM_11_1;


ARCHITECTURE rtl OF TWDLROM_11_1 IS

  -- Constants
  CONSTANT Twiddle_re_table_data          : vector_of_signed16(0 TO 511) := 
    (to_signed(16#4000#, 16), to_signed(16#4000#, 16), to_signed(16#4000#, 16), to_signed(16#4000#, 16),
     to_signed(16#4000#, 16), to_signed(16#4000#, 16), to_signed(16#3FFF#, 16), to_signed(16#3FFF#, 16),
     to_signed(16#3FFF#, 16), to_signed(16#3FFE#, 16), to_signed(16#3FFE#, 16), to_signed(16#3FFE#, 16),
     to_signed(16#3FFD#, 16), to_signed(16#3FFD#, 16), to_signed(16#3FFC#, 16), to_signed(16#3FFC#, 16),
     to_signed(16#3FFB#, 16), to_signed(16#3FFA#, 16), to_signed(16#3FFA#, 16), to_signed(16#3FF9#, 16),
     to_signed(16#3FF8#, 16), to_signed(16#3FF7#, 16), to_signed(16#3FF7#, 16), to_signed(16#3FF6#, 16),
     to_signed(16#3FF5#, 16), to_signed(16#3FF4#, 16), to_signed(16#3FF3#, 16), to_signed(16#3FF2#, 16),
     to_signed(16#3FF1#, 16), to_signed(16#3FF0#, 16), to_signed(16#3FEF#, 16), to_signed(16#3FED#, 16),
     to_signed(16#3FEC#, 16), to_signed(16#3FEB#, 16), to_signed(16#3FEA#, 16), to_signed(16#3FE8#, 16),
     to_signed(16#3FE7#, 16), to_signed(16#3FE6#, 16), to_signed(16#3FE4#, 16), to_signed(16#3FE3#, 16),
     to_signed(16#3FE1#, 16), to_signed(16#3FE0#, 16), to_signed(16#3FDE#, 16), to_signed(16#3FDC#, 16),
     to_signed(16#3FDB#, 16), to_signed(16#3FD9#, 16), to_signed(16#3FD7#, 16), to_signed(16#3FD5#, 16),
     to_signed(16#3FD4#, 16), to_signed(16#3FD2#, 16), to_signed(16#3FD0#, 16), to_signed(16#3FCE#, 16),
     to_signed(16#3FCC#, 16), to_signed(16#3FCA#, 16), to_signed(16#3FC8#, 16), to_signed(16#3FC6#, 16),
     to_signed(16#3FC4#, 16), to_signed(16#3FC1#, 16), to_signed(16#3FBF#, 16), to_signed(16#3FBD#, 16),
     to_signed(16#3FBB#, 16), to_signed(16#3FB8#, 16), to_signed(16#3FB6#, 16), to_signed(16#3FB4#, 16),
     to_signed(16#3FB1#, 16), to_signed(16#3FAF#, 16), to_signed(16#3FAC#, 16), to_signed(16#3FAA#, 16),
     to_signed(16#3FA7#, 16), to_signed(16#3FA4#, 16), to_signed(16#3FA2#, 16), to_signed(16#3F9F#, 16),
     to_signed(16#3F9C#, 16), to_signed(16#3F99#, 16), to_signed(16#3F97#, 16), to_signed(16#3F94#, 16),
     to_signed(16#3F91#, 16), to_signed(16#3F8E#, 16), to_signed(16#3F8B#, 16), to_signed(16#3F88#, 16),
     to_signed(16#3F85#, 16), to_signed(16#3F82#, 16), to_signed(16#3F7F#, 16), to_signed(16#3F7B#, 16),
     to_signed(16#3F78#, 16), to_signed(16#3F75#, 16), to_signed(16#3F72#, 16), to_signed(16#3F6E#, 16),
     to_signed(16#3F6B#, 16), to_signed(16#3F68#, 16), to_signed(16#3F64#, 16), to_signed(16#3F61#, 16),
     to_signed(16#3F5D#, 16), to_signed(16#3F5A#, 16), to_signed(16#3F56#, 16), to_signed(16#3F52#, 16),
     to_signed(16#3F4F#, 16), to_signed(16#3F4B#, 16), to_signed(16#3F47#, 16), to_signed(16#3F43#, 16),
     to_signed(16#3F40#, 16), to_signed(16#3F3C#, 16), to_signed(16#3F38#, 16), to_signed(16#3F34#, 16),
     to_signed(16#3F30#, 16), to_signed(16#3F2C#, 16), to_signed(16#3F28#, 16), to_signed(16#3F24#, 16),
     to_signed(16#3F20#, 16), to_signed(16#3F1C#, 16), to_signed(16#3F17#, 16), to_signed(16#3F13#, 16),
     to_signed(16#3F0F#, 16), to_signed(16#3F0A#, 16), to_signed(16#3F06#, 16), to_signed(16#3F02#, 16),
     to_signed(16#3EFD#, 16), to_signed(16#3EF9#, 16), to_signed(16#3EF4#, 16), to_signed(16#3EF0#, 16),
     to_signed(16#3EEB#, 16), to_signed(16#3EE7#, 16), to_signed(16#3EE2#, 16), to_signed(16#3EDD#, 16),
     to_signed(16#3ED8#, 16), to_signed(16#3ED4#, 16), to_signed(16#3ECF#, 16), to_signed(16#3ECA#, 16),
     to_signed(16#3EC5#, 16), to_signed(16#3EC0#, 16), to_signed(16#3EBB#, 16), to_signed(16#3EB6#, 16),
     to_signed(16#3EB1#, 16), to_signed(16#3EAC#, 16), to_signed(16#3EA7#, 16), to_signed(16#3EA2#, 16),
     to_signed(16#3E9D#, 16), to_signed(16#3E98#, 16), to_signed(16#3E92#, 16), to_signed(16#3E8D#, 16),
     to_signed(16#3E88#, 16), to_signed(16#3E82#, 16), to_signed(16#3E7D#, 16), to_signed(16#3E77#, 16),
     to_signed(16#3E72#, 16), to_signed(16#3E6C#, 16), to_signed(16#3E67#, 16), to_signed(16#3E61#, 16),
     to_signed(16#3E5C#, 16), to_signed(16#3E56#, 16), to_signed(16#3E50#, 16), to_signed(16#3E4A#, 16),
     to_signed(16#3E45#, 16), to_signed(16#3E3F#, 16), to_signed(16#3E39#, 16), to_signed(16#3E33#, 16),
     to_signed(16#3E2D#, 16), to_signed(16#3E27#, 16), to_signed(16#3E21#, 16), to_signed(16#3E1B#, 16),
     to_signed(16#3E15#, 16), to_signed(16#3E0F#, 16), to_signed(16#3E09#, 16), to_signed(16#3E03#, 16),
     to_signed(16#3DFC#, 16), to_signed(16#3DF6#, 16), to_signed(16#3DF0#, 16), to_signed(16#3DE9#, 16),
     to_signed(16#3DE3#, 16), to_signed(16#3DDD#, 16), to_signed(16#3DD6#, 16), to_signed(16#3DD0#, 16),
     to_signed(16#3DC9#, 16), to_signed(16#3DC2#, 16), to_signed(16#3DBC#, 16), to_signed(16#3DB5#, 16),
     to_signed(16#3DAF#, 16), to_signed(16#3DA8#, 16), to_signed(16#3DA1#, 16), to_signed(16#3D9A#, 16),
     to_signed(16#3D93#, 16), to_signed(16#3D8D#, 16), to_signed(16#3D86#, 16), to_signed(16#3D7F#, 16),
     to_signed(16#3D78#, 16), to_signed(16#3D71#, 16), to_signed(16#3D6A#, 16), to_signed(16#3D63#, 16),
     to_signed(16#3D5B#, 16), to_signed(16#3D54#, 16), to_signed(16#3D4D#, 16), to_signed(16#3D46#, 16),
     to_signed(16#3D3F#, 16), to_signed(16#3D37#, 16), to_signed(16#3D30#, 16), to_signed(16#3D28#, 16),
     to_signed(16#3D21#, 16), to_signed(16#3D1A#, 16), to_signed(16#3D12#, 16), to_signed(16#3D0B#, 16),
     to_signed(16#3D03#, 16), to_signed(16#3CFB#, 16), to_signed(16#3CF4#, 16), to_signed(16#3CEC#, 16),
     to_signed(16#3CE4#, 16), to_signed(16#3CDD#, 16), to_signed(16#3CD5#, 16), to_signed(16#3CCD#, 16),
     to_signed(16#3CC5#, 16), to_signed(16#3CBD#, 16), to_signed(16#3CB5#, 16), to_signed(16#3CAD#, 16),
     to_signed(16#3CA5#, 16), to_signed(16#3C9D#, 16), to_signed(16#3C95#, 16), to_signed(16#3C8D#, 16),
     to_signed(16#3C85#, 16), to_signed(16#3C7D#, 16), to_signed(16#3C74#, 16), to_signed(16#3C6C#, 16),
     to_signed(16#3C64#, 16), to_signed(16#3C5B#, 16), to_signed(16#3C53#, 16), to_signed(16#3C4B#, 16),
     to_signed(16#3C42#, 16), to_signed(16#3C3A#, 16), to_signed(16#3C31#, 16), to_signed(16#3C29#, 16),
     to_signed(16#3C20#, 16), to_signed(16#3C17#, 16), to_signed(16#3C0F#, 16), to_signed(16#3C06#, 16),
     to_signed(16#3BFD#, 16), to_signed(16#3BF5#, 16), to_signed(16#3BEC#, 16), to_signed(16#3BE3#, 16),
     to_signed(16#3BDA#, 16), to_signed(16#3BD1#, 16), to_signed(16#3BC8#, 16), to_signed(16#3BBF#, 16),
     to_signed(16#3BB6#, 16), to_signed(16#3BAD#, 16), to_signed(16#3BA4#, 16), to_signed(16#3B9B#, 16),
     to_signed(16#3B92#, 16), to_signed(16#3B88#, 16), to_signed(16#3B7F#, 16), to_signed(16#3B76#, 16),
     to_signed(16#3B6D#, 16), to_signed(16#3B63#, 16), to_signed(16#3B5A#, 16), to_signed(16#3B50#, 16),
     to_signed(16#3B47#, 16), to_signed(16#3B3E#, 16), to_signed(16#3B34#, 16), to_signed(16#3B2A#, 16),
     to_signed(16#3B21#, 16), to_signed(16#3B17#, 16), to_signed(16#3B0E#, 16), to_signed(16#3B04#, 16),
     to_signed(16#3AFA#, 16), to_signed(16#3AF0#, 16), to_signed(16#3AE6#, 16), to_signed(16#3ADD#, 16),
     to_signed(16#3AD3#, 16), to_signed(16#3AC9#, 16), to_signed(16#3ABF#, 16), to_signed(16#3AB5#, 16),
     to_signed(16#3AAB#, 16), to_signed(16#3AA1#, 16), to_signed(16#3A97#, 16), to_signed(16#3A8D#, 16),
     to_signed(16#3A82#, 16), to_signed(16#3A78#, 16), to_signed(16#3A6E#, 16), to_signed(16#3A64#, 16),
     to_signed(16#3A59#, 16), to_signed(16#3A4F#, 16), to_signed(16#3A45#, 16), to_signed(16#3A3A#, 16),
     to_signed(16#3A30#, 16), to_signed(16#3A25#, 16), to_signed(16#3A1B#, 16), to_signed(16#3A10#, 16),
     to_signed(16#3A06#, 16), to_signed(16#39FB#, 16), to_signed(16#39F0#, 16), to_signed(16#39E6#, 16),
     to_signed(16#39DB#, 16), to_signed(16#39D0#, 16), to_signed(16#39C5#, 16), to_signed(16#39BB#, 16),
     to_signed(16#39B0#, 16), to_signed(16#39A5#, 16), to_signed(16#399A#, 16), to_signed(16#398F#, 16),
     to_signed(16#3984#, 16), to_signed(16#3979#, 16), to_signed(16#396E#, 16), to_signed(16#3963#, 16),
     to_signed(16#3958#, 16), to_signed(16#394C#, 16), to_signed(16#3941#, 16), to_signed(16#3936#, 16),
     to_signed(16#392B#, 16), to_signed(16#391F#, 16), to_signed(16#3914#, 16), to_signed(16#3909#, 16),
     to_signed(16#38FD#, 16), to_signed(16#38F2#, 16), to_signed(16#38E6#, 16), to_signed(16#38DB#, 16),
     to_signed(16#38CF#, 16), to_signed(16#38C3#, 16), to_signed(16#38B8#, 16), to_signed(16#38AC#, 16),
     to_signed(16#38A1#, 16), to_signed(16#3895#, 16), to_signed(16#3889#, 16), to_signed(16#387D#, 16),
     to_signed(16#3871#, 16), to_signed(16#3866#, 16), to_signed(16#385A#, 16), to_signed(16#384E#, 16),
     to_signed(16#3842#, 16), to_signed(16#3836#, 16), to_signed(16#382A#, 16), to_signed(16#381E#, 16),
     to_signed(16#3812#, 16), to_signed(16#3805#, 16), to_signed(16#37F9#, 16), to_signed(16#37ED#, 16),
     to_signed(16#37E1#, 16), to_signed(16#37D5#, 16), to_signed(16#37C8#, 16), to_signed(16#37BC#, 16),
     to_signed(16#37B0#, 16), to_signed(16#37A3#, 16), to_signed(16#3797#, 16), to_signed(16#378A#, 16),
     to_signed(16#377E#, 16), to_signed(16#3771#, 16), to_signed(16#3765#, 16), to_signed(16#3758#, 16),
     to_signed(16#374B#, 16), to_signed(16#373F#, 16), to_signed(16#3732#, 16), to_signed(16#3725#, 16),
     to_signed(16#3718#, 16), to_signed(16#370C#, 16), to_signed(16#36FF#, 16), to_signed(16#36F2#, 16),
     to_signed(16#36E5#, 16), to_signed(16#36D8#, 16), to_signed(16#36CB#, 16), to_signed(16#36BE#, 16),
     to_signed(16#36B1#, 16), to_signed(16#36A4#, 16), to_signed(16#3697#, 16), to_signed(16#368A#, 16),
     to_signed(16#367D#, 16), to_signed(16#366F#, 16), to_signed(16#3662#, 16), to_signed(16#3655#, 16),
     to_signed(16#3648#, 16), to_signed(16#363A#, 16), to_signed(16#362D#, 16), to_signed(16#3620#, 16),
     to_signed(16#3612#, 16), to_signed(16#3605#, 16), to_signed(16#35F7#, 16), to_signed(16#35EA#, 16),
     to_signed(16#35DC#, 16), to_signed(16#35CE#, 16), to_signed(16#35C1#, 16), to_signed(16#35B3#, 16),
     to_signed(16#35A5#, 16), to_signed(16#3598#, 16), to_signed(16#358A#, 16), to_signed(16#357C#, 16),
     to_signed(16#356E#, 16), to_signed(16#3561#, 16), to_signed(16#3553#, 16), to_signed(16#3545#, 16),
     to_signed(16#3537#, 16), to_signed(16#3529#, 16), to_signed(16#351B#, 16), to_signed(16#350D#, 16),
     to_signed(16#34FF#, 16), to_signed(16#34F1#, 16), to_signed(16#34E2#, 16), to_signed(16#34D4#, 16),
     to_signed(16#34C6#, 16), to_signed(16#34B8#, 16), to_signed(16#34AA#, 16), to_signed(16#349B#, 16),
     to_signed(16#348D#, 16), to_signed(16#347F#, 16), to_signed(16#3470#, 16), to_signed(16#3462#, 16),
     to_signed(16#3453#, 16), to_signed(16#3445#, 16), to_signed(16#3436#, 16), to_signed(16#3428#, 16),
     to_signed(16#3419#, 16), to_signed(16#340B#, 16), to_signed(16#33FC#, 16), to_signed(16#33ED#, 16),
     to_signed(16#33DF#, 16), to_signed(16#33D0#, 16), to_signed(16#33C1#, 16), to_signed(16#33B2#, 16),
     to_signed(16#33A3#, 16), to_signed(16#3395#, 16), to_signed(16#3386#, 16), to_signed(16#3377#, 16),
     to_signed(16#3368#, 16), to_signed(16#3359#, 16), to_signed(16#334A#, 16), to_signed(16#333B#, 16),
     to_signed(16#332C#, 16), to_signed(16#331D#, 16), to_signed(16#330D#, 16), to_signed(16#32FE#, 16),
     to_signed(16#32EF#, 16), to_signed(16#32E0#, 16), to_signed(16#32D0#, 16), to_signed(16#32C1#, 16),
     to_signed(16#32B2#, 16), to_signed(16#32A3#, 16), to_signed(16#3293#, 16), to_signed(16#3284#, 16),
     to_signed(16#3274#, 16), to_signed(16#3265#, 16), to_signed(16#3255#, 16), to_signed(16#3246#, 16),
     to_signed(16#3236#, 16), to_signed(16#3227#, 16), to_signed(16#3217#, 16), to_signed(16#3207#, 16),
     to_signed(16#31F8#, 16), to_signed(16#31E8#, 16), to_signed(16#31D8#, 16), to_signed(16#31C8#, 16),
     to_signed(16#31B9#, 16), to_signed(16#31A9#, 16), to_signed(16#3199#, 16), to_signed(16#3189#, 16),
     to_signed(16#3179#, 16), to_signed(16#3169#, 16), to_signed(16#3159#, 16), to_signed(16#3149#, 16),
     to_signed(16#3139#, 16), to_signed(16#3129#, 16), to_signed(16#3119#, 16), to_signed(16#3109#, 16),
     to_signed(16#30F9#, 16), to_signed(16#30E8#, 16), to_signed(16#30D8#, 16), to_signed(16#30C8#, 16),
     to_signed(16#30B8#, 16), to_signed(16#30A7#, 16), to_signed(16#3097#, 16), to_signed(16#3087#, 16),
     to_signed(16#3076#, 16), to_signed(16#3066#, 16), to_signed(16#3055#, 16), to_signed(16#3045#, 16),
     to_signed(16#3034#, 16), to_signed(16#3024#, 16), to_signed(16#3013#, 16), to_signed(16#3002#, 16),
     to_signed(16#2FF2#, 16), to_signed(16#2FE1#, 16), to_signed(16#2FD0#, 16), to_signed(16#2FC0#, 16),
     to_signed(16#2FAF#, 16), to_signed(16#2F9E#, 16), to_signed(16#2F8D#, 16), to_signed(16#2F7D#, 16),
     to_signed(16#2F6C#, 16), to_signed(16#2F5B#, 16), to_signed(16#2F4A#, 16), to_signed(16#2F39#, 16),
     to_signed(16#2F28#, 16), to_signed(16#2F17#, 16), to_signed(16#2F06#, 16), to_signed(16#2EF5#, 16),
     to_signed(16#2EE4#, 16), to_signed(16#2ED3#, 16), to_signed(16#2EC2#, 16), to_signed(16#2EB0#, 16),
     to_signed(16#2E9F#, 16), to_signed(16#2E8E#, 16), to_signed(16#2E7D#, 16), to_signed(16#2E6B#, 16),
     to_signed(16#2E5A#, 16), to_signed(16#2E49#, 16), to_signed(16#2E37#, 16), to_signed(16#2E26#, 16),
     to_signed(16#2E15#, 16), to_signed(16#2E03#, 16), to_signed(16#2DF2#, 16), to_signed(16#2DE0#, 16),
     to_signed(16#2DCF#, 16), to_signed(16#2DBD#, 16), to_signed(16#2DAB#, 16), to_signed(16#2D9A#, 16),
     to_signed(16#2D88#, 16), to_signed(16#2D76#, 16), to_signed(16#2D65#, 16), to_signed(16#2D53#, 16));  -- sfix16 [512]
  CONSTANT Twiddle_im_table_data          : vector_of_signed16(0 TO 511) := 
    (to_signed(16#0000#, 16), to_signed(-16#0019#, 16), to_signed(-16#0032#, 16), to_signed(-16#004B#, 16),
     to_signed(-16#0065#, 16), to_signed(-16#007E#, 16), to_signed(-16#0097#, 16), to_signed(-16#00B0#, 16),
     to_signed(-16#00C9#, 16), to_signed(-16#00E2#, 16), to_signed(-16#00FB#, 16), to_signed(-16#0114#, 16),
     to_signed(-16#012E#, 16), to_signed(-16#0147#, 16), to_signed(-16#0160#, 16), to_signed(-16#0179#, 16),
     to_signed(-16#0192#, 16), to_signed(-16#01AB#, 16), to_signed(-16#01C4#, 16), to_signed(-16#01DD#, 16),
     to_signed(-16#01F7#, 16), to_signed(-16#0210#, 16), to_signed(-16#0229#, 16), to_signed(-16#0242#, 16),
     to_signed(-16#025B#, 16), to_signed(-16#0274#, 16), to_signed(-16#028D#, 16), to_signed(-16#02A6#, 16),
     to_signed(-16#02C0#, 16), to_signed(-16#02D9#, 16), to_signed(-16#02F2#, 16), to_signed(-16#030B#, 16),
     to_signed(-16#0324#, 16), to_signed(-16#033D#, 16), to_signed(-16#0356#, 16), to_signed(-16#036F#, 16),
     to_signed(-16#0388#, 16), to_signed(-16#03A1#, 16), to_signed(-16#03BB#, 16), to_signed(-16#03D4#, 16),
     to_signed(-16#03ED#, 16), to_signed(-16#0406#, 16), to_signed(-16#041F#, 16), to_signed(-16#0438#, 16),
     to_signed(-16#0451#, 16), to_signed(-16#046A#, 16), to_signed(-16#0483#, 16), to_signed(-16#049C#, 16),
     to_signed(-16#04B5#, 16), to_signed(-16#04CE#, 16), to_signed(-16#04E7#, 16), to_signed(-16#0500#, 16),
     to_signed(-16#051A#, 16), to_signed(-16#0533#, 16), to_signed(-16#054C#, 16), to_signed(-16#0565#, 16),
     to_signed(-16#057E#, 16), to_signed(-16#0597#, 16), to_signed(-16#05B0#, 16), to_signed(-16#05C9#, 16),
     to_signed(-16#05E2#, 16), to_signed(-16#05FB#, 16), to_signed(-16#0614#, 16), to_signed(-16#062D#, 16),
     to_signed(-16#0646#, 16), to_signed(-16#065F#, 16), to_signed(-16#0678#, 16), to_signed(-16#0691#, 16),
     to_signed(-16#06AA#, 16), to_signed(-16#06C3#, 16), to_signed(-16#06DC#, 16), to_signed(-16#06F5#, 16),
     to_signed(-16#070E#, 16), to_signed(-16#0727#, 16), to_signed(-16#0740#, 16), to_signed(-16#0759#, 16),
     to_signed(-16#0772#, 16), to_signed(-16#078B#, 16), to_signed(-16#07A4#, 16), to_signed(-16#07BD#, 16),
     to_signed(-16#07D6#, 16), to_signed(-16#07EF#, 16), to_signed(-16#0807#, 16), to_signed(-16#0820#, 16),
     to_signed(-16#0839#, 16), to_signed(-16#0852#, 16), to_signed(-16#086B#, 16), to_signed(-16#0884#, 16),
     to_signed(-16#089D#, 16), to_signed(-16#08B6#, 16), to_signed(-16#08CF#, 16), to_signed(-16#08E8#, 16),
     to_signed(-16#0901#, 16), to_signed(-16#0919#, 16), to_signed(-16#0932#, 16), to_signed(-16#094B#, 16),
     to_signed(-16#0964#, 16), to_signed(-16#097D#, 16), to_signed(-16#0996#, 16), to_signed(-16#09AF#, 16),
     to_signed(-16#09C7#, 16), to_signed(-16#09E0#, 16), to_signed(-16#09F9#, 16), to_signed(-16#0A12#, 16),
     to_signed(-16#0A2B#, 16), to_signed(-16#0A44#, 16), to_signed(-16#0A5C#, 16), to_signed(-16#0A75#, 16),
     to_signed(-16#0A8E#, 16), to_signed(-16#0AA7#, 16), to_signed(-16#0AC0#, 16), to_signed(-16#0AD8#, 16),
     to_signed(-16#0AF1#, 16), to_signed(-16#0B0A#, 16), to_signed(-16#0B23#, 16), to_signed(-16#0B3B#, 16),
     to_signed(-16#0B54#, 16), to_signed(-16#0B6D#, 16), to_signed(-16#0B85#, 16), to_signed(-16#0B9E#, 16),
     to_signed(-16#0BB7#, 16), to_signed(-16#0BD0#, 16), to_signed(-16#0BE8#, 16), to_signed(-16#0C01#, 16),
     to_signed(-16#0C1A#, 16), to_signed(-16#0C32#, 16), to_signed(-16#0C4B#, 16), to_signed(-16#0C64#, 16),
     to_signed(-16#0C7C#, 16), to_signed(-16#0C95#, 16), to_signed(-16#0CAE#, 16), to_signed(-16#0CC6#, 16),
     to_signed(-16#0CDF#, 16), to_signed(-16#0CF8#, 16), to_signed(-16#0D10#, 16), to_signed(-16#0D29#, 16),
     to_signed(-16#0D41#, 16), to_signed(-16#0D5A#, 16), to_signed(-16#0D72#, 16), to_signed(-16#0D8B#, 16),
     to_signed(-16#0DA4#, 16), to_signed(-16#0DBC#, 16), to_signed(-16#0DD5#, 16), to_signed(-16#0DED#, 16),
     to_signed(-16#0E06#, 16), to_signed(-16#0E1E#, 16), to_signed(-16#0E37#, 16), to_signed(-16#0E4F#, 16),
     to_signed(-16#0E68#, 16), to_signed(-16#0E80#, 16), to_signed(-16#0E99#, 16), to_signed(-16#0EB1#, 16),
     to_signed(-16#0ECA#, 16), to_signed(-16#0EE2#, 16), to_signed(-16#0EFB#, 16), to_signed(-16#0F13#, 16),
     to_signed(-16#0F2B#, 16), to_signed(-16#0F44#, 16), to_signed(-16#0F5C#, 16), to_signed(-16#0F75#, 16),
     to_signed(-16#0F8D#, 16), to_signed(-16#0FA5#, 16), to_signed(-16#0FBE#, 16), to_signed(-16#0FD6#, 16),
     to_signed(-16#0FEE#, 16), to_signed(-16#1007#, 16), to_signed(-16#101F#, 16), to_signed(-16#1037#, 16),
     to_signed(-16#1050#, 16), to_signed(-16#1068#, 16), to_signed(-16#1080#, 16), to_signed(-16#1099#, 16),
     to_signed(-16#10B1#, 16), to_signed(-16#10C9#, 16), to_signed(-16#10E1#, 16), to_signed(-16#10FA#, 16),
     to_signed(-16#1112#, 16), to_signed(-16#112A#, 16), to_signed(-16#1142#, 16), to_signed(-16#115A#, 16),
     to_signed(-16#1173#, 16), to_signed(-16#118B#, 16), to_signed(-16#11A3#, 16), to_signed(-16#11BB#, 16),
     to_signed(-16#11D3#, 16), to_signed(-16#11EB#, 16), to_signed(-16#1204#, 16), to_signed(-16#121C#, 16),
     to_signed(-16#1234#, 16), to_signed(-16#124C#, 16), to_signed(-16#1264#, 16), to_signed(-16#127C#, 16),
     to_signed(-16#1294#, 16), to_signed(-16#12AC#, 16), to_signed(-16#12C4#, 16), to_signed(-16#12DC#, 16),
     to_signed(-16#12F4#, 16), to_signed(-16#130C#, 16), to_signed(-16#1324#, 16), to_signed(-16#133C#, 16),
     to_signed(-16#1354#, 16), to_signed(-16#136C#, 16), to_signed(-16#1384#, 16), to_signed(-16#139C#, 16),
     to_signed(-16#13B4#, 16), to_signed(-16#13CC#, 16), to_signed(-16#13E4#, 16), to_signed(-16#13FB#, 16),
     to_signed(-16#1413#, 16), to_signed(-16#142B#, 16), to_signed(-16#1443#, 16), to_signed(-16#145B#, 16),
     to_signed(-16#1473#, 16), to_signed(-16#148B#, 16), to_signed(-16#14A2#, 16), to_signed(-16#14BA#, 16),
     to_signed(-16#14D2#, 16), to_signed(-16#14EA#, 16), to_signed(-16#1501#, 16), to_signed(-16#1519#, 16),
     to_signed(-16#1531#, 16), to_signed(-16#1549#, 16), to_signed(-16#1560#, 16), to_signed(-16#1578#, 16),
     to_signed(-16#1590#, 16), to_signed(-16#15A7#, 16), to_signed(-16#15BF#, 16), to_signed(-16#15D7#, 16),
     to_signed(-16#15EE#, 16), to_signed(-16#1606#, 16), to_signed(-16#161D#, 16), to_signed(-16#1635#, 16),
     to_signed(-16#164C#, 16), to_signed(-16#1664#, 16), to_signed(-16#167C#, 16), to_signed(-16#1693#, 16),
     to_signed(-16#16AB#, 16), to_signed(-16#16C2#, 16), to_signed(-16#16DA#, 16), to_signed(-16#16F1#, 16),
     to_signed(-16#1709#, 16), to_signed(-16#1720#, 16), to_signed(-16#1737#, 16), to_signed(-16#174F#, 16),
     to_signed(-16#1766#, 16), to_signed(-16#177E#, 16), to_signed(-16#1795#, 16), to_signed(-16#17AC#, 16),
     to_signed(-16#17C4#, 16), to_signed(-16#17DB#, 16), to_signed(-16#17F2#, 16), to_signed(-16#180A#, 16),
     to_signed(-16#1821#, 16), to_signed(-16#1838#, 16), to_signed(-16#184F#, 16), to_signed(-16#1867#, 16),
     to_signed(-16#187E#, 16), to_signed(-16#1895#, 16), to_signed(-16#18AC#, 16), to_signed(-16#18C3#, 16),
     to_signed(-16#18DB#, 16), to_signed(-16#18F2#, 16), to_signed(-16#1909#, 16), to_signed(-16#1920#, 16),
     to_signed(-16#1937#, 16), to_signed(-16#194E#, 16), to_signed(-16#1965#, 16), to_signed(-16#197C#, 16),
     to_signed(-16#1993#, 16), to_signed(-16#19AA#, 16), to_signed(-16#19C1#, 16), to_signed(-16#19D8#, 16),
     to_signed(-16#19EF#, 16), to_signed(-16#1A06#, 16), to_signed(-16#1A1D#, 16), to_signed(-16#1A34#, 16),
     to_signed(-16#1A4B#, 16), to_signed(-16#1A62#, 16), to_signed(-16#1A79#, 16), to_signed(-16#1A90#, 16),
     to_signed(-16#1AA7#, 16), to_signed(-16#1ABE#, 16), to_signed(-16#1AD4#, 16), to_signed(-16#1AEB#, 16),
     to_signed(-16#1B02#, 16), to_signed(-16#1B19#, 16), to_signed(-16#1B30#, 16), to_signed(-16#1B46#, 16),
     to_signed(-16#1B5D#, 16), to_signed(-16#1B74#, 16), to_signed(-16#1B8A#, 16), to_signed(-16#1BA1#, 16),
     to_signed(-16#1BB8#, 16), to_signed(-16#1BCE#, 16), to_signed(-16#1BE5#, 16), to_signed(-16#1BFC#, 16),
     to_signed(-16#1C12#, 16), to_signed(-16#1C29#, 16), to_signed(-16#1C3F#, 16), to_signed(-16#1C56#, 16),
     to_signed(-16#1C6C#, 16), to_signed(-16#1C83#, 16), to_signed(-16#1C99#, 16), to_signed(-16#1CB0#, 16),
     to_signed(-16#1CC6#, 16), to_signed(-16#1CDD#, 16), to_signed(-16#1CF3#, 16), to_signed(-16#1D0A#, 16),
     to_signed(-16#1D20#, 16), to_signed(-16#1D36#, 16), to_signed(-16#1D4D#, 16), to_signed(-16#1D63#, 16),
     to_signed(-16#1D79#, 16), to_signed(-16#1D90#, 16), to_signed(-16#1DA6#, 16), to_signed(-16#1DBC#, 16),
     to_signed(-16#1DD3#, 16), to_signed(-16#1DE9#, 16), to_signed(-16#1DFF#, 16), to_signed(-16#1E15#, 16),
     to_signed(-16#1E2B#, 16), to_signed(-16#1E42#, 16), to_signed(-16#1E58#, 16), to_signed(-16#1E6E#, 16),
     to_signed(-16#1E84#, 16), to_signed(-16#1E9A#, 16), to_signed(-16#1EB0#, 16), to_signed(-16#1EC6#, 16),
     to_signed(-16#1EDC#, 16), to_signed(-16#1EF2#, 16), to_signed(-16#1F08#, 16), to_signed(-16#1F1E#, 16),
     to_signed(-16#1F34#, 16), to_signed(-16#1F4A#, 16), to_signed(-16#1F60#, 16), to_signed(-16#1F76#, 16),
     to_signed(-16#1F8C#, 16), to_signed(-16#1FA2#, 16), to_signed(-16#1FB7#, 16), to_signed(-16#1FCD#, 16),
     to_signed(-16#1FE3#, 16), to_signed(-16#1FF9#, 16), to_signed(-16#200F#, 16), to_signed(-16#2024#, 16),
     to_signed(-16#203A#, 16), to_signed(-16#2050#, 16), to_signed(-16#2065#, 16), to_signed(-16#207B#, 16),
     to_signed(-16#2091#, 16), to_signed(-16#20A6#, 16), to_signed(-16#20BC#, 16), to_signed(-16#20D1#, 16),
     to_signed(-16#20E7#, 16), to_signed(-16#20FD#, 16), to_signed(-16#2112#, 16), to_signed(-16#2128#, 16),
     to_signed(-16#213D#, 16), to_signed(-16#2153#, 16), to_signed(-16#2168#, 16), to_signed(-16#217D#, 16),
     to_signed(-16#2193#, 16), to_signed(-16#21A8#, 16), to_signed(-16#21BE#, 16), to_signed(-16#21D3#, 16),
     to_signed(-16#21E8#, 16), to_signed(-16#21FE#, 16), to_signed(-16#2213#, 16), to_signed(-16#2228#, 16),
     to_signed(-16#223D#, 16), to_signed(-16#2253#, 16), to_signed(-16#2268#, 16), to_signed(-16#227D#, 16),
     to_signed(-16#2292#, 16), to_signed(-16#22A7#, 16), to_signed(-16#22BC#, 16), to_signed(-16#22D2#, 16),
     to_signed(-16#22E7#, 16), to_signed(-16#22FC#, 16), to_signed(-16#2311#, 16), to_signed(-16#2326#, 16),
     to_signed(-16#233B#, 16), to_signed(-16#2350#, 16), to_signed(-16#2365#, 16), to_signed(-16#237A#, 16),
     to_signed(-16#238E#, 16), to_signed(-16#23A3#, 16), to_signed(-16#23B8#, 16), to_signed(-16#23CD#, 16),
     to_signed(-16#23E2#, 16), to_signed(-16#23F7#, 16), to_signed(-16#240B#, 16), to_signed(-16#2420#, 16),
     to_signed(-16#2435#, 16), to_signed(-16#244A#, 16), to_signed(-16#245E#, 16), to_signed(-16#2473#, 16),
     to_signed(-16#2488#, 16), to_signed(-16#249C#, 16), to_signed(-16#24B1#, 16), to_signed(-16#24C5#, 16),
     to_signed(-16#24DA#, 16), to_signed(-16#24EF#, 16), to_signed(-16#2503#, 16), to_signed(-16#2518#, 16),
     to_signed(-16#252C#, 16), to_signed(-16#2541#, 16), to_signed(-16#2555#, 16), to_signed(-16#2569#, 16),
     to_signed(-16#257E#, 16), to_signed(-16#2592#, 16), to_signed(-16#25A6#, 16), to_signed(-16#25BB#, 16),
     to_signed(-16#25CF#, 16), to_signed(-16#25E3#, 16), to_signed(-16#25F8#, 16), to_signed(-16#260C#, 16),
     to_signed(-16#2620#, 16), to_signed(-16#2634#, 16), to_signed(-16#2648#, 16), to_signed(-16#265C#, 16),
     to_signed(-16#2671#, 16), to_signed(-16#2685#, 16), to_signed(-16#2699#, 16), to_signed(-16#26AD#, 16),
     to_signed(-16#26C1#, 16), to_signed(-16#26D5#, 16), to_signed(-16#26E9#, 16), to_signed(-16#26FD#, 16),
     to_signed(-16#2711#, 16), to_signed(-16#2724#, 16), to_signed(-16#2738#, 16), to_signed(-16#274C#, 16),
     to_signed(-16#2760#, 16), to_signed(-16#2774#, 16), to_signed(-16#2788#, 16), to_signed(-16#279B#, 16),
     to_signed(-16#27AF#, 16), to_signed(-16#27C3#, 16), to_signed(-16#27D6#, 16), to_signed(-16#27EA#, 16),
     to_signed(-16#27FE#, 16), to_signed(-16#2811#, 16), to_signed(-16#2825#, 16), to_signed(-16#2838#, 16),
     to_signed(-16#284C#, 16), to_signed(-16#2860#, 16), to_signed(-16#2873#, 16), to_signed(-16#2886#, 16),
     to_signed(-16#289A#, 16), to_signed(-16#28AD#, 16), to_signed(-16#28C1#, 16), to_signed(-16#28D4#, 16),
     to_signed(-16#28E7#, 16), to_signed(-16#28FB#, 16), to_signed(-16#290E#, 16), to_signed(-16#2921#, 16),
     to_signed(-16#2935#, 16), to_signed(-16#2948#, 16), to_signed(-16#295B#, 16), to_signed(-16#296E#, 16),
     to_signed(-16#2981#, 16), to_signed(-16#2994#, 16), to_signed(-16#29A7#, 16), to_signed(-16#29BB#, 16),
     to_signed(-16#29CE#, 16), to_signed(-16#29E1#, 16), to_signed(-16#29F4#, 16), to_signed(-16#2A07#, 16),
     to_signed(-16#2A1A#, 16), to_signed(-16#2A2C#, 16), to_signed(-16#2A3F#, 16), to_signed(-16#2A52#, 16),
     to_signed(-16#2A65#, 16), to_signed(-16#2A78#, 16), to_signed(-16#2A8B#, 16), to_signed(-16#2A9D#, 16),
     to_signed(-16#2AB0#, 16), to_signed(-16#2AC3#, 16), to_signed(-16#2AD6#, 16), to_signed(-16#2AE8#, 16),
     to_signed(-16#2AFB#, 16), to_signed(-16#2B0D#, 16), to_signed(-16#2B20#, 16), to_signed(-16#2B33#, 16),
     to_signed(-16#2B45#, 16), to_signed(-16#2B58#, 16), to_signed(-16#2B6A#, 16), to_signed(-16#2B7D#, 16),
     to_signed(-16#2B8F#, 16), to_signed(-16#2BA1#, 16), to_signed(-16#2BB4#, 16), to_signed(-16#2BC6#, 16),
     to_signed(-16#2BD8#, 16), to_signed(-16#2BEB#, 16), to_signed(-16#2BFD#, 16), to_signed(-16#2C0F#, 16),
     to_signed(-16#2C21#, 16), to_signed(-16#2C34#, 16), to_signed(-16#2C46#, 16), to_signed(-16#2C58#, 16),
     to_signed(-16#2C6A#, 16), to_signed(-16#2C7C#, 16), to_signed(-16#2C8E#, 16), to_signed(-16#2CA0#, 16),
     to_signed(-16#2CB2#, 16), to_signed(-16#2CC4#, 16), to_signed(-16#2CD6#, 16), to_signed(-16#2CE8#, 16),
     to_signed(-16#2CFA#, 16), to_signed(-16#2D0C#, 16), to_signed(-16#2D1E#, 16), to_signed(-16#2D2F#, 16));  -- sfix16 [512]

  -- Signals
  SIGNAL Radix22TwdlMapping_cnt           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Radix22TwdlMapping_phase         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw  : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Radix22TwdlMapping_twdlAddrMap   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdl45Reg     : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1      : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2      : std_logic;
  SIGNAL Radix22TwdlMapping_cnt_next      : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Radix22TwdlMapping_phase_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1_next : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw_next : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Radix22TwdlMapping_twdlAddrMap_next : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdl45Reg_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2_next : std_logic;
  SIGNAL twdlAddr                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL twdlAddrVld                      : std_logic;
  SIGNAL twdlOctant                       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45                           : std_logic;
  SIGNAL twiddleS_re                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twiddleReg_re                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twiddleS_im                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twiddleReg_im                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdlOctantReg                    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45Reg                        : std_logic;

BEGIN
  -- Radix22TwdlMapping
  Radix22TwdlMapping_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22TwdlMapping_octantReg1 <= to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdlAddr_raw <= to_unsigned(16#000#, 12);
        Radix22TwdlMapping_twdlAddrMap <= to_unsigned(16#000#, 9);
        Radix22TwdlMapping_twdl45Reg <= '0';
        Radix22TwdlMapping_dvldReg1 <= '0';
        Radix22TwdlMapping_dvldReg2 <= '0';
        Radix22TwdlMapping_cnt <= to_unsigned(16#000#, 10);
        Radix22TwdlMapping_phase <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        Radix22TwdlMapping_cnt <= Radix22TwdlMapping_cnt_next;
        Radix22TwdlMapping_phase <= Radix22TwdlMapping_phase_next;
        Radix22TwdlMapping_octantReg1 <= Radix22TwdlMapping_octantReg1_next;
        Radix22TwdlMapping_twdlAddr_raw <= Radix22TwdlMapping_twdlAddr_raw_next;
        Radix22TwdlMapping_twdlAddrMap <= Radix22TwdlMapping_twdlAddrMap_next;
        Radix22TwdlMapping_twdl45Reg <= Radix22TwdlMapping_twdl45Reg_next;
        Radix22TwdlMapping_dvldReg1 <= Radix22TwdlMapping_dvldReg1_next;
        Radix22TwdlMapping_dvldReg2 <= Radix22TwdlMapping_dvldReg2_next;
      END IF;
    END IF;
  END PROCESS Radix22TwdlMapping_process;

  Radix22TwdlMapping_output : PROCESS (Radix22TwdlMapping_cnt, Radix22TwdlMapping_dvldReg1,
       Radix22TwdlMapping_dvldReg2, Radix22TwdlMapping_octantReg1,
       Radix22TwdlMapping_phase, Radix22TwdlMapping_twdl45Reg,
       Radix22TwdlMapping_twdlAddrMap, Radix22TwdlMapping_twdlAddr_raw,
       dout_10_1_vld)
    VARIABLE octant : unsigned(2 DOWNTO 0);
    VARIABLE cnt_cast : unsigned(11 DOWNTO 0);
    VARIABLE sub_temp : signed(25 DOWNTO 0);
    VARIABLE sub_temp_0 : signed(13 DOWNTO 0);
    VARIABLE sub_temp_1 : signed(13 DOWNTO 0);
    VARIABLE sub_temp_2 : signed(25 DOWNTO 0);
    VARIABLE sub_temp_3 : signed(25 DOWNTO 0);
  BEGIN
    sub_temp := to_signed(16#0000000#, 26);
    sub_temp_0 := to_signed(16#0000#, 14);
    sub_temp_1 := to_signed(16#0000#, 14);
    sub_temp_2 := to_signed(16#0000000#, 26);
    sub_temp_3 := to_signed(16#0000000#, 26);
    cnt_cast := to_unsigned(16#000#, 12);
    Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt;
    Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase;
    Radix22TwdlMapping_dvldReg2_next <= Radix22TwdlMapping_dvldReg1;
    Radix22TwdlMapping_dvldReg1_next <= dout_10_1_vld;
    CASE Radix22TwdlMapping_twdlAddr_raw IS
      WHEN "001000000000" =>
        octant := to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "010000000000" =>
        octant := to_unsigned(16#1#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "011000000000" =>
        octant := to_unsigned(16#2#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "100000000000" =>
        octant := to_unsigned(16#3#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "101000000000" =>
        octant := to_unsigned(16#4#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN OTHERS => 
        octant := Radix22TwdlMapping_twdlAddr_raw(11 DOWNTO 9);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
    END CASE;
    Radix22TwdlMapping_octantReg1_next <= octant;
    CASE octant IS
      WHEN "000" =>
        Radix22TwdlMapping_twdlAddrMap_next <= Radix22TwdlMapping_twdlAddr_raw(8 DOWNTO 0);
      WHEN "001" =>
        sub_temp_0 := to_signed(16#0400#, 14) - signed(resize(Radix22TwdlMapping_twdlAddr_raw, 14));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_0(8 DOWNTO 0));
      WHEN "010" =>
        sub_temp_1 := signed(resize(Radix22TwdlMapping_twdlAddr_raw, 14)) - to_signed(16#0400#, 14);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_1(8 DOWNTO 0));
      WHEN "011" =>
        sub_temp_2 := to_signed(16#0100000#, 26) - signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_2(17 DOWNTO 9));
      WHEN "100" =>
        sub_temp_3 := signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26)) - to_signed(16#0100000#, 26);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_3(17 DOWNTO 9));
      WHEN OTHERS => 
        sub_temp := to_signed(16#0180000#, 26) - signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp(17 DOWNTO 9));
    END CASE;
    IF Radix22TwdlMapping_phase = to_unsigned(16#0#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= to_unsigned(16#000#, 12);
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#1#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(Radix22TwdlMapping_cnt, 12) sll 1;
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#2#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(Radix22TwdlMapping_cnt, 12);
    ELSE 
      cnt_cast := resize(Radix22TwdlMapping_cnt, 12);
      Radix22TwdlMapping_twdlAddr_raw_next <= (cnt_cast sll 1) + cnt_cast;
    END IF;
    IF dout_10_1_vld = '1' AND (Radix22TwdlMapping_cnt > to_unsigned(16#2FF#, 10)) THEN 
      Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase + to_unsigned(16#1#, 2);
    END IF;
    IF dout_10_1_vld = '1' THEN 
      Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt + to_unsigned(16#100#, 10);
    END IF;
    twdlAddr <= Radix22TwdlMapping_twdlAddrMap;
    twdlAddrVld <= Radix22TwdlMapping_dvldReg2;
    twdlOctant <= Radix22TwdlMapping_octantReg1;
    twdl45 <= Radix22TwdlMapping_twdl45Reg;
  END PROCESS Radix22TwdlMapping_output;


  -- Twiddle ROM1
  twiddleS_re <= Twiddle_re_table_data(to_integer(twdlAddr));

  TWIDDLEROM_RE_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twiddleReg_re <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twiddleReg_re <= twiddleS_re;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_RE_process;


  -- Twiddle ROM2
  twiddleS_im <= Twiddle_im_table_data(to_integer(twdlAddr));

  TWIDDLEROM_IM_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twiddleReg_im <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twiddleReg_im <= twiddleS_im;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_IM_process;


  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdlOctantReg <= to_unsigned(16#0#, 3);
      ELSIF enb = '1' THEN
        twdlOctantReg <= twdlOctant;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl45Reg <= '0';
      ELSIF enb = '1' THEN
        twdl45Reg <= twdl45;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  -- Radix22TwdlOctCorr
  Radix22TwdlOctCorr_output : PROCESS (twdl45Reg, twdlOctantReg, twiddleReg_im, twiddleReg_re)
    VARIABLE twdlIn_re : signed(15 DOWNTO 0);
    VARIABLE twdlIn_im : signed(15 DOWNTO 0);
    VARIABLE cast : signed(16 DOWNTO 0);
    VARIABLE cast_0 : signed(16 DOWNTO 0);
    VARIABLE cast_1 : signed(16 DOWNTO 0);
    VARIABLE cast_2 : signed(16 DOWNTO 0);
    VARIABLE cast_3 : signed(16 DOWNTO 0);
    VARIABLE cast_4 : signed(16 DOWNTO 0);
  BEGIN
    cast := to_signed(16#00000#, 17);
    cast_0 := to_signed(16#00000#, 17);
    cast_1 := to_signed(16#00000#, 17);
    cast_2 := to_signed(16#00000#, 17);
    cast_3 := to_signed(16#00000#, 17);
    cast_4 := to_signed(16#00000#, 17);
    twdlIn_re := twiddleReg_re;
    twdlIn_im := twiddleReg_im;
    IF twdl45Reg = '1' THEN 
      CASE twdlOctantReg IS
        WHEN "000" =>
          twdlIn_re := to_signed(16#2D41#, 16);
          twdlIn_im := to_signed(-16#2D41#, 16);
        WHEN "010" =>
          twdlIn_re := to_signed(-16#2D41#, 16);
          twdlIn_im := to_signed(-16#2D41#, 16);
        WHEN "100" =>
          twdlIn_re := to_signed(-16#2D41#, 16);
          twdlIn_im := to_signed(16#2D41#, 16);
        WHEN OTHERS => 
          twdlIn_re := to_signed(16#2D41#, 16);
          twdlIn_im := to_signed(-16#2D41#, 16);
      END CASE;
    ELSE 
      CASE twdlOctantReg IS
        WHEN "000" =>
          NULL;
        WHEN "001" =>
          cast :=  - (resize(twiddleReg_im, 17));
          twdlIn_re := cast(15 DOWNTO 0);
          cast_2 :=  - (resize(twiddleReg_re, 17));
          twdlIn_im := cast_2(15 DOWNTO 0);
        WHEN "010" =>
          twdlIn_re := twiddleReg_im;
          cast_3 :=  - (resize(twiddleReg_re, 17));
          twdlIn_im := cast_3(15 DOWNTO 0);
        WHEN "011" =>
          cast_0 :=  - (resize(twiddleReg_re, 17));
          twdlIn_re := cast_0(15 DOWNTO 0);
          twdlIn_im := twiddleReg_im;
        WHEN "100" =>
          cast_1 :=  - (resize(twiddleReg_re, 17));
          twdlIn_re := cast_1(15 DOWNTO 0);
          cast_4 :=  - (resize(twiddleReg_im, 17));
          twdlIn_im := cast_4(15 DOWNTO 0);
        WHEN OTHERS => 
          twdlIn_re := twiddleReg_im;
          twdlIn_im := twiddleReg_re;
      END CASE;
    END IF;
    twdl_11_1_re <= twdlIn_re;
    twdl_11_1_im <= twdlIn_im;
  END PROCESS Radix22TwdlOctCorr_output;


END rtl;


-- End of TWDLROM_11_1.vhd --

-- Start of TWDLROM_11_1_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\TWDLROM_11_1_block.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: TWDLROM_11_1_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/TWDLROM_11_1
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY TWDLROM_11_1_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_10_1_vld                     :   IN    std_logic;
        twdl_11_1_re                      :   OUT   signed(15 DOWNTO 0);  -- sfix16_En14
        twdl_11_1_im                      :   OUT   signed(15 DOWNTO 0)  -- sfix16_En14
        );
END TWDLROM_11_1_block;


ARCHITECTURE rtl OF TWDLROM_11_1_block IS

  -- Constants
  CONSTANT Twiddle_re_table_data          : vector_of_signed16(0 TO 511) := 
    (to_signed(16#4000#, 16), to_signed(16#4000#, 16), to_signed(16#4000#, 16), to_signed(16#4000#, 16),
     to_signed(16#4000#, 16), to_signed(16#4000#, 16), to_signed(16#3FFF#, 16), to_signed(16#3FFF#, 16),
     to_signed(16#3FFF#, 16), to_signed(16#3FFE#, 16), to_signed(16#3FFE#, 16), to_signed(16#3FFE#, 16),
     to_signed(16#3FFD#, 16), to_signed(16#3FFD#, 16), to_signed(16#3FFC#, 16), to_signed(16#3FFC#, 16),
     to_signed(16#3FFB#, 16), to_signed(16#3FFA#, 16), to_signed(16#3FFA#, 16), to_signed(16#3FF9#, 16),
     to_signed(16#3FF8#, 16), to_signed(16#3FF7#, 16), to_signed(16#3FF7#, 16), to_signed(16#3FF6#, 16),
     to_signed(16#3FF5#, 16), to_signed(16#3FF4#, 16), to_signed(16#3FF3#, 16), to_signed(16#3FF2#, 16),
     to_signed(16#3FF1#, 16), to_signed(16#3FF0#, 16), to_signed(16#3FEF#, 16), to_signed(16#3FED#, 16),
     to_signed(16#3FEC#, 16), to_signed(16#3FEB#, 16), to_signed(16#3FEA#, 16), to_signed(16#3FE8#, 16),
     to_signed(16#3FE7#, 16), to_signed(16#3FE6#, 16), to_signed(16#3FE4#, 16), to_signed(16#3FE3#, 16),
     to_signed(16#3FE1#, 16), to_signed(16#3FE0#, 16), to_signed(16#3FDE#, 16), to_signed(16#3FDC#, 16),
     to_signed(16#3FDB#, 16), to_signed(16#3FD9#, 16), to_signed(16#3FD7#, 16), to_signed(16#3FD5#, 16),
     to_signed(16#3FD4#, 16), to_signed(16#3FD2#, 16), to_signed(16#3FD0#, 16), to_signed(16#3FCE#, 16),
     to_signed(16#3FCC#, 16), to_signed(16#3FCA#, 16), to_signed(16#3FC8#, 16), to_signed(16#3FC6#, 16),
     to_signed(16#3FC4#, 16), to_signed(16#3FC1#, 16), to_signed(16#3FBF#, 16), to_signed(16#3FBD#, 16),
     to_signed(16#3FBB#, 16), to_signed(16#3FB8#, 16), to_signed(16#3FB6#, 16), to_signed(16#3FB4#, 16),
     to_signed(16#3FB1#, 16), to_signed(16#3FAF#, 16), to_signed(16#3FAC#, 16), to_signed(16#3FAA#, 16),
     to_signed(16#3FA7#, 16), to_signed(16#3FA4#, 16), to_signed(16#3FA2#, 16), to_signed(16#3F9F#, 16),
     to_signed(16#3F9C#, 16), to_signed(16#3F99#, 16), to_signed(16#3F97#, 16), to_signed(16#3F94#, 16),
     to_signed(16#3F91#, 16), to_signed(16#3F8E#, 16), to_signed(16#3F8B#, 16), to_signed(16#3F88#, 16),
     to_signed(16#3F85#, 16), to_signed(16#3F82#, 16), to_signed(16#3F7F#, 16), to_signed(16#3F7B#, 16),
     to_signed(16#3F78#, 16), to_signed(16#3F75#, 16), to_signed(16#3F72#, 16), to_signed(16#3F6E#, 16),
     to_signed(16#3F6B#, 16), to_signed(16#3F68#, 16), to_signed(16#3F64#, 16), to_signed(16#3F61#, 16),
     to_signed(16#3F5D#, 16), to_signed(16#3F5A#, 16), to_signed(16#3F56#, 16), to_signed(16#3F52#, 16),
     to_signed(16#3F4F#, 16), to_signed(16#3F4B#, 16), to_signed(16#3F47#, 16), to_signed(16#3F43#, 16),
     to_signed(16#3F40#, 16), to_signed(16#3F3C#, 16), to_signed(16#3F38#, 16), to_signed(16#3F34#, 16),
     to_signed(16#3F30#, 16), to_signed(16#3F2C#, 16), to_signed(16#3F28#, 16), to_signed(16#3F24#, 16),
     to_signed(16#3F20#, 16), to_signed(16#3F1C#, 16), to_signed(16#3F17#, 16), to_signed(16#3F13#, 16),
     to_signed(16#3F0F#, 16), to_signed(16#3F0A#, 16), to_signed(16#3F06#, 16), to_signed(16#3F02#, 16),
     to_signed(16#3EFD#, 16), to_signed(16#3EF9#, 16), to_signed(16#3EF4#, 16), to_signed(16#3EF0#, 16),
     to_signed(16#3EEB#, 16), to_signed(16#3EE7#, 16), to_signed(16#3EE2#, 16), to_signed(16#3EDD#, 16),
     to_signed(16#3ED8#, 16), to_signed(16#3ED4#, 16), to_signed(16#3ECF#, 16), to_signed(16#3ECA#, 16),
     to_signed(16#3EC5#, 16), to_signed(16#3EC0#, 16), to_signed(16#3EBB#, 16), to_signed(16#3EB6#, 16),
     to_signed(16#3EB1#, 16), to_signed(16#3EAC#, 16), to_signed(16#3EA7#, 16), to_signed(16#3EA2#, 16),
     to_signed(16#3E9D#, 16), to_signed(16#3E98#, 16), to_signed(16#3E92#, 16), to_signed(16#3E8D#, 16),
     to_signed(16#3E88#, 16), to_signed(16#3E82#, 16), to_signed(16#3E7D#, 16), to_signed(16#3E77#, 16),
     to_signed(16#3E72#, 16), to_signed(16#3E6C#, 16), to_signed(16#3E67#, 16), to_signed(16#3E61#, 16),
     to_signed(16#3E5C#, 16), to_signed(16#3E56#, 16), to_signed(16#3E50#, 16), to_signed(16#3E4A#, 16),
     to_signed(16#3E45#, 16), to_signed(16#3E3F#, 16), to_signed(16#3E39#, 16), to_signed(16#3E33#, 16),
     to_signed(16#3E2D#, 16), to_signed(16#3E27#, 16), to_signed(16#3E21#, 16), to_signed(16#3E1B#, 16),
     to_signed(16#3E15#, 16), to_signed(16#3E0F#, 16), to_signed(16#3E09#, 16), to_signed(16#3E03#, 16),
     to_signed(16#3DFC#, 16), to_signed(16#3DF6#, 16), to_signed(16#3DF0#, 16), to_signed(16#3DE9#, 16),
     to_signed(16#3DE3#, 16), to_signed(16#3DDD#, 16), to_signed(16#3DD6#, 16), to_signed(16#3DD0#, 16),
     to_signed(16#3DC9#, 16), to_signed(16#3DC2#, 16), to_signed(16#3DBC#, 16), to_signed(16#3DB5#, 16),
     to_signed(16#3DAF#, 16), to_signed(16#3DA8#, 16), to_signed(16#3DA1#, 16), to_signed(16#3D9A#, 16),
     to_signed(16#3D93#, 16), to_signed(16#3D8D#, 16), to_signed(16#3D86#, 16), to_signed(16#3D7F#, 16),
     to_signed(16#3D78#, 16), to_signed(16#3D71#, 16), to_signed(16#3D6A#, 16), to_signed(16#3D63#, 16),
     to_signed(16#3D5B#, 16), to_signed(16#3D54#, 16), to_signed(16#3D4D#, 16), to_signed(16#3D46#, 16),
     to_signed(16#3D3F#, 16), to_signed(16#3D37#, 16), to_signed(16#3D30#, 16), to_signed(16#3D28#, 16),
     to_signed(16#3D21#, 16), to_signed(16#3D1A#, 16), to_signed(16#3D12#, 16), to_signed(16#3D0B#, 16),
     to_signed(16#3D03#, 16), to_signed(16#3CFB#, 16), to_signed(16#3CF4#, 16), to_signed(16#3CEC#, 16),
     to_signed(16#3CE4#, 16), to_signed(16#3CDD#, 16), to_signed(16#3CD5#, 16), to_signed(16#3CCD#, 16),
     to_signed(16#3CC5#, 16), to_signed(16#3CBD#, 16), to_signed(16#3CB5#, 16), to_signed(16#3CAD#, 16),
     to_signed(16#3CA5#, 16), to_signed(16#3C9D#, 16), to_signed(16#3C95#, 16), to_signed(16#3C8D#, 16),
     to_signed(16#3C85#, 16), to_signed(16#3C7D#, 16), to_signed(16#3C74#, 16), to_signed(16#3C6C#, 16),
     to_signed(16#3C64#, 16), to_signed(16#3C5B#, 16), to_signed(16#3C53#, 16), to_signed(16#3C4B#, 16),
     to_signed(16#3C42#, 16), to_signed(16#3C3A#, 16), to_signed(16#3C31#, 16), to_signed(16#3C29#, 16),
     to_signed(16#3C20#, 16), to_signed(16#3C17#, 16), to_signed(16#3C0F#, 16), to_signed(16#3C06#, 16),
     to_signed(16#3BFD#, 16), to_signed(16#3BF5#, 16), to_signed(16#3BEC#, 16), to_signed(16#3BE3#, 16),
     to_signed(16#3BDA#, 16), to_signed(16#3BD1#, 16), to_signed(16#3BC8#, 16), to_signed(16#3BBF#, 16),
     to_signed(16#3BB6#, 16), to_signed(16#3BAD#, 16), to_signed(16#3BA4#, 16), to_signed(16#3B9B#, 16),
     to_signed(16#3B92#, 16), to_signed(16#3B88#, 16), to_signed(16#3B7F#, 16), to_signed(16#3B76#, 16),
     to_signed(16#3B6D#, 16), to_signed(16#3B63#, 16), to_signed(16#3B5A#, 16), to_signed(16#3B50#, 16),
     to_signed(16#3B47#, 16), to_signed(16#3B3E#, 16), to_signed(16#3B34#, 16), to_signed(16#3B2A#, 16),
     to_signed(16#3B21#, 16), to_signed(16#3B17#, 16), to_signed(16#3B0E#, 16), to_signed(16#3B04#, 16),
     to_signed(16#3AFA#, 16), to_signed(16#3AF0#, 16), to_signed(16#3AE6#, 16), to_signed(16#3ADD#, 16),
     to_signed(16#3AD3#, 16), to_signed(16#3AC9#, 16), to_signed(16#3ABF#, 16), to_signed(16#3AB5#, 16),
     to_signed(16#3AAB#, 16), to_signed(16#3AA1#, 16), to_signed(16#3A97#, 16), to_signed(16#3A8D#, 16),
     to_signed(16#3A82#, 16), to_signed(16#3A78#, 16), to_signed(16#3A6E#, 16), to_signed(16#3A64#, 16),
     to_signed(16#3A59#, 16), to_signed(16#3A4F#, 16), to_signed(16#3A45#, 16), to_signed(16#3A3A#, 16),
     to_signed(16#3A30#, 16), to_signed(16#3A25#, 16), to_signed(16#3A1B#, 16), to_signed(16#3A10#, 16),
     to_signed(16#3A06#, 16), to_signed(16#39FB#, 16), to_signed(16#39F0#, 16), to_signed(16#39E6#, 16),
     to_signed(16#39DB#, 16), to_signed(16#39D0#, 16), to_signed(16#39C5#, 16), to_signed(16#39BB#, 16),
     to_signed(16#39B0#, 16), to_signed(16#39A5#, 16), to_signed(16#399A#, 16), to_signed(16#398F#, 16),
     to_signed(16#3984#, 16), to_signed(16#3979#, 16), to_signed(16#396E#, 16), to_signed(16#3963#, 16),
     to_signed(16#3958#, 16), to_signed(16#394C#, 16), to_signed(16#3941#, 16), to_signed(16#3936#, 16),
     to_signed(16#392B#, 16), to_signed(16#391F#, 16), to_signed(16#3914#, 16), to_signed(16#3909#, 16),
     to_signed(16#38FD#, 16), to_signed(16#38F2#, 16), to_signed(16#38E6#, 16), to_signed(16#38DB#, 16),
     to_signed(16#38CF#, 16), to_signed(16#38C3#, 16), to_signed(16#38B8#, 16), to_signed(16#38AC#, 16),
     to_signed(16#38A1#, 16), to_signed(16#3895#, 16), to_signed(16#3889#, 16), to_signed(16#387D#, 16),
     to_signed(16#3871#, 16), to_signed(16#3866#, 16), to_signed(16#385A#, 16), to_signed(16#384E#, 16),
     to_signed(16#3842#, 16), to_signed(16#3836#, 16), to_signed(16#382A#, 16), to_signed(16#381E#, 16),
     to_signed(16#3812#, 16), to_signed(16#3805#, 16), to_signed(16#37F9#, 16), to_signed(16#37ED#, 16),
     to_signed(16#37E1#, 16), to_signed(16#37D5#, 16), to_signed(16#37C8#, 16), to_signed(16#37BC#, 16),
     to_signed(16#37B0#, 16), to_signed(16#37A3#, 16), to_signed(16#3797#, 16), to_signed(16#378A#, 16),
     to_signed(16#377E#, 16), to_signed(16#3771#, 16), to_signed(16#3765#, 16), to_signed(16#3758#, 16),
     to_signed(16#374B#, 16), to_signed(16#373F#, 16), to_signed(16#3732#, 16), to_signed(16#3725#, 16),
     to_signed(16#3718#, 16), to_signed(16#370C#, 16), to_signed(16#36FF#, 16), to_signed(16#36F2#, 16),
     to_signed(16#36E5#, 16), to_signed(16#36D8#, 16), to_signed(16#36CB#, 16), to_signed(16#36BE#, 16),
     to_signed(16#36B1#, 16), to_signed(16#36A4#, 16), to_signed(16#3697#, 16), to_signed(16#368A#, 16),
     to_signed(16#367D#, 16), to_signed(16#366F#, 16), to_signed(16#3662#, 16), to_signed(16#3655#, 16),
     to_signed(16#3648#, 16), to_signed(16#363A#, 16), to_signed(16#362D#, 16), to_signed(16#3620#, 16),
     to_signed(16#3612#, 16), to_signed(16#3605#, 16), to_signed(16#35F7#, 16), to_signed(16#35EA#, 16),
     to_signed(16#35DC#, 16), to_signed(16#35CE#, 16), to_signed(16#35C1#, 16), to_signed(16#35B3#, 16),
     to_signed(16#35A5#, 16), to_signed(16#3598#, 16), to_signed(16#358A#, 16), to_signed(16#357C#, 16),
     to_signed(16#356E#, 16), to_signed(16#3561#, 16), to_signed(16#3553#, 16), to_signed(16#3545#, 16),
     to_signed(16#3537#, 16), to_signed(16#3529#, 16), to_signed(16#351B#, 16), to_signed(16#350D#, 16),
     to_signed(16#34FF#, 16), to_signed(16#34F1#, 16), to_signed(16#34E2#, 16), to_signed(16#34D4#, 16),
     to_signed(16#34C6#, 16), to_signed(16#34B8#, 16), to_signed(16#34AA#, 16), to_signed(16#349B#, 16),
     to_signed(16#348D#, 16), to_signed(16#347F#, 16), to_signed(16#3470#, 16), to_signed(16#3462#, 16),
     to_signed(16#3453#, 16), to_signed(16#3445#, 16), to_signed(16#3436#, 16), to_signed(16#3428#, 16),
     to_signed(16#3419#, 16), to_signed(16#340B#, 16), to_signed(16#33FC#, 16), to_signed(16#33ED#, 16),
     to_signed(16#33DF#, 16), to_signed(16#33D0#, 16), to_signed(16#33C1#, 16), to_signed(16#33B2#, 16),
     to_signed(16#33A3#, 16), to_signed(16#3395#, 16), to_signed(16#3386#, 16), to_signed(16#3377#, 16),
     to_signed(16#3368#, 16), to_signed(16#3359#, 16), to_signed(16#334A#, 16), to_signed(16#333B#, 16),
     to_signed(16#332C#, 16), to_signed(16#331D#, 16), to_signed(16#330D#, 16), to_signed(16#32FE#, 16),
     to_signed(16#32EF#, 16), to_signed(16#32E0#, 16), to_signed(16#32D0#, 16), to_signed(16#32C1#, 16),
     to_signed(16#32B2#, 16), to_signed(16#32A3#, 16), to_signed(16#3293#, 16), to_signed(16#3284#, 16),
     to_signed(16#3274#, 16), to_signed(16#3265#, 16), to_signed(16#3255#, 16), to_signed(16#3246#, 16),
     to_signed(16#3236#, 16), to_signed(16#3227#, 16), to_signed(16#3217#, 16), to_signed(16#3207#, 16),
     to_signed(16#31F8#, 16), to_signed(16#31E8#, 16), to_signed(16#31D8#, 16), to_signed(16#31C8#, 16),
     to_signed(16#31B9#, 16), to_signed(16#31A9#, 16), to_signed(16#3199#, 16), to_signed(16#3189#, 16),
     to_signed(16#3179#, 16), to_signed(16#3169#, 16), to_signed(16#3159#, 16), to_signed(16#3149#, 16),
     to_signed(16#3139#, 16), to_signed(16#3129#, 16), to_signed(16#3119#, 16), to_signed(16#3109#, 16),
     to_signed(16#30F9#, 16), to_signed(16#30E8#, 16), to_signed(16#30D8#, 16), to_signed(16#30C8#, 16),
     to_signed(16#30B8#, 16), to_signed(16#30A7#, 16), to_signed(16#3097#, 16), to_signed(16#3087#, 16),
     to_signed(16#3076#, 16), to_signed(16#3066#, 16), to_signed(16#3055#, 16), to_signed(16#3045#, 16),
     to_signed(16#3034#, 16), to_signed(16#3024#, 16), to_signed(16#3013#, 16), to_signed(16#3002#, 16),
     to_signed(16#2FF2#, 16), to_signed(16#2FE1#, 16), to_signed(16#2FD0#, 16), to_signed(16#2FC0#, 16),
     to_signed(16#2FAF#, 16), to_signed(16#2F9E#, 16), to_signed(16#2F8D#, 16), to_signed(16#2F7D#, 16),
     to_signed(16#2F6C#, 16), to_signed(16#2F5B#, 16), to_signed(16#2F4A#, 16), to_signed(16#2F39#, 16),
     to_signed(16#2F28#, 16), to_signed(16#2F17#, 16), to_signed(16#2F06#, 16), to_signed(16#2EF5#, 16),
     to_signed(16#2EE4#, 16), to_signed(16#2ED3#, 16), to_signed(16#2EC2#, 16), to_signed(16#2EB0#, 16),
     to_signed(16#2E9F#, 16), to_signed(16#2E8E#, 16), to_signed(16#2E7D#, 16), to_signed(16#2E6B#, 16),
     to_signed(16#2E5A#, 16), to_signed(16#2E49#, 16), to_signed(16#2E37#, 16), to_signed(16#2E26#, 16),
     to_signed(16#2E15#, 16), to_signed(16#2E03#, 16), to_signed(16#2DF2#, 16), to_signed(16#2DE0#, 16),
     to_signed(16#2DCF#, 16), to_signed(16#2DBD#, 16), to_signed(16#2DAB#, 16), to_signed(16#2D9A#, 16),
     to_signed(16#2D88#, 16), to_signed(16#2D76#, 16), to_signed(16#2D65#, 16), to_signed(16#2D53#, 16));  -- sfix16 [512]
  CONSTANT Twiddle_im_table_data          : vector_of_signed16(0 TO 511) := 
    (to_signed(16#0000#, 16), to_signed(-16#0019#, 16), to_signed(-16#0032#, 16), to_signed(-16#004B#, 16),
     to_signed(-16#0065#, 16), to_signed(-16#007E#, 16), to_signed(-16#0097#, 16), to_signed(-16#00B0#, 16),
     to_signed(-16#00C9#, 16), to_signed(-16#00E2#, 16), to_signed(-16#00FB#, 16), to_signed(-16#0114#, 16),
     to_signed(-16#012E#, 16), to_signed(-16#0147#, 16), to_signed(-16#0160#, 16), to_signed(-16#0179#, 16),
     to_signed(-16#0192#, 16), to_signed(-16#01AB#, 16), to_signed(-16#01C4#, 16), to_signed(-16#01DD#, 16),
     to_signed(-16#01F7#, 16), to_signed(-16#0210#, 16), to_signed(-16#0229#, 16), to_signed(-16#0242#, 16),
     to_signed(-16#025B#, 16), to_signed(-16#0274#, 16), to_signed(-16#028D#, 16), to_signed(-16#02A6#, 16),
     to_signed(-16#02C0#, 16), to_signed(-16#02D9#, 16), to_signed(-16#02F2#, 16), to_signed(-16#030B#, 16),
     to_signed(-16#0324#, 16), to_signed(-16#033D#, 16), to_signed(-16#0356#, 16), to_signed(-16#036F#, 16),
     to_signed(-16#0388#, 16), to_signed(-16#03A1#, 16), to_signed(-16#03BB#, 16), to_signed(-16#03D4#, 16),
     to_signed(-16#03ED#, 16), to_signed(-16#0406#, 16), to_signed(-16#041F#, 16), to_signed(-16#0438#, 16),
     to_signed(-16#0451#, 16), to_signed(-16#046A#, 16), to_signed(-16#0483#, 16), to_signed(-16#049C#, 16),
     to_signed(-16#04B5#, 16), to_signed(-16#04CE#, 16), to_signed(-16#04E7#, 16), to_signed(-16#0500#, 16),
     to_signed(-16#051A#, 16), to_signed(-16#0533#, 16), to_signed(-16#054C#, 16), to_signed(-16#0565#, 16),
     to_signed(-16#057E#, 16), to_signed(-16#0597#, 16), to_signed(-16#05B0#, 16), to_signed(-16#05C9#, 16),
     to_signed(-16#05E2#, 16), to_signed(-16#05FB#, 16), to_signed(-16#0614#, 16), to_signed(-16#062D#, 16),
     to_signed(-16#0646#, 16), to_signed(-16#065F#, 16), to_signed(-16#0678#, 16), to_signed(-16#0691#, 16),
     to_signed(-16#06AA#, 16), to_signed(-16#06C3#, 16), to_signed(-16#06DC#, 16), to_signed(-16#06F5#, 16),
     to_signed(-16#070E#, 16), to_signed(-16#0727#, 16), to_signed(-16#0740#, 16), to_signed(-16#0759#, 16),
     to_signed(-16#0772#, 16), to_signed(-16#078B#, 16), to_signed(-16#07A4#, 16), to_signed(-16#07BD#, 16),
     to_signed(-16#07D6#, 16), to_signed(-16#07EF#, 16), to_signed(-16#0807#, 16), to_signed(-16#0820#, 16),
     to_signed(-16#0839#, 16), to_signed(-16#0852#, 16), to_signed(-16#086B#, 16), to_signed(-16#0884#, 16),
     to_signed(-16#089D#, 16), to_signed(-16#08B6#, 16), to_signed(-16#08CF#, 16), to_signed(-16#08E8#, 16),
     to_signed(-16#0901#, 16), to_signed(-16#0919#, 16), to_signed(-16#0932#, 16), to_signed(-16#094B#, 16),
     to_signed(-16#0964#, 16), to_signed(-16#097D#, 16), to_signed(-16#0996#, 16), to_signed(-16#09AF#, 16),
     to_signed(-16#09C7#, 16), to_signed(-16#09E0#, 16), to_signed(-16#09F9#, 16), to_signed(-16#0A12#, 16),
     to_signed(-16#0A2B#, 16), to_signed(-16#0A44#, 16), to_signed(-16#0A5C#, 16), to_signed(-16#0A75#, 16),
     to_signed(-16#0A8E#, 16), to_signed(-16#0AA7#, 16), to_signed(-16#0AC0#, 16), to_signed(-16#0AD8#, 16),
     to_signed(-16#0AF1#, 16), to_signed(-16#0B0A#, 16), to_signed(-16#0B23#, 16), to_signed(-16#0B3B#, 16),
     to_signed(-16#0B54#, 16), to_signed(-16#0B6D#, 16), to_signed(-16#0B85#, 16), to_signed(-16#0B9E#, 16),
     to_signed(-16#0BB7#, 16), to_signed(-16#0BD0#, 16), to_signed(-16#0BE8#, 16), to_signed(-16#0C01#, 16),
     to_signed(-16#0C1A#, 16), to_signed(-16#0C32#, 16), to_signed(-16#0C4B#, 16), to_signed(-16#0C64#, 16),
     to_signed(-16#0C7C#, 16), to_signed(-16#0C95#, 16), to_signed(-16#0CAE#, 16), to_signed(-16#0CC6#, 16),
     to_signed(-16#0CDF#, 16), to_signed(-16#0CF8#, 16), to_signed(-16#0D10#, 16), to_signed(-16#0D29#, 16),
     to_signed(-16#0D41#, 16), to_signed(-16#0D5A#, 16), to_signed(-16#0D72#, 16), to_signed(-16#0D8B#, 16),
     to_signed(-16#0DA4#, 16), to_signed(-16#0DBC#, 16), to_signed(-16#0DD5#, 16), to_signed(-16#0DED#, 16),
     to_signed(-16#0E06#, 16), to_signed(-16#0E1E#, 16), to_signed(-16#0E37#, 16), to_signed(-16#0E4F#, 16),
     to_signed(-16#0E68#, 16), to_signed(-16#0E80#, 16), to_signed(-16#0E99#, 16), to_signed(-16#0EB1#, 16),
     to_signed(-16#0ECA#, 16), to_signed(-16#0EE2#, 16), to_signed(-16#0EFB#, 16), to_signed(-16#0F13#, 16),
     to_signed(-16#0F2B#, 16), to_signed(-16#0F44#, 16), to_signed(-16#0F5C#, 16), to_signed(-16#0F75#, 16),
     to_signed(-16#0F8D#, 16), to_signed(-16#0FA5#, 16), to_signed(-16#0FBE#, 16), to_signed(-16#0FD6#, 16),
     to_signed(-16#0FEE#, 16), to_signed(-16#1007#, 16), to_signed(-16#101F#, 16), to_signed(-16#1037#, 16),
     to_signed(-16#1050#, 16), to_signed(-16#1068#, 16), to_signed(-16#1080#, 16), to_signed(-16#1099#, 16),
     to_signed(-16#10B1#, 16), to_signed(-16#10C9#, 16), to_signed(-16#10E1#, 16), to_signed(-16#10FA#, 16),
     to_signed(-16#1112#, 16), to_signed(-16#112A#, 16), to_signed(-16#1142#, 16), to_signed(-16#115A#, 16),
     to_signed(-16#1173#, 16), to_signed(-16#118B#, 16), to_signed(-16#11A3#, 16), to_signed(-16#11BB#, 16),
     to_signed(-16#11D3#, 16), to_signed(-16#11EB#, 16), to_signed(-16#1204#, 16), to_signed(-16#121C#, 16),
     to_signed(-16#1234#, 16), to_signed(-16#124C#, 16), to_signed(-16#1264#, 16), to_signed(-16#127C#, 16),
     to_signed(-16#1294#, 16), to_signed(-16#12AC#, 16), to_signed(-16#12C4#, 16), to_signed(-16#12DC#, 16),
     to_signed(-16#12F4#, 16), to_signed(-16#130C#, 16), to_signed(-16#1324#, 16), to_signed(-16#133C#, 16),
     to_signed(-16#1354#, 16), to_signed(-16#136C#, 16), to_signed(-16#1384#, 16), to_signed(-16#139C#, 16),
     to_signed(-16#13B4#, 16), to_signed(-16#13CC#, 16), to_signed(-16#13E4#, 16), to_signed(-16#13FB#, 16),
     to_signed(-16#1413#, 16), to_signed(-16#142B#, 16), to_signed(-16#1443#, 16), to_signed(-16#145B#, 16),
     to_signed(-16#1473#, 16), to_signed(-16#148B#, 16), to_signed(-16#14A2#, 16), to_signed(-16#14BA#, 16),
     to_signed(-16#14D2#, 16), to_signed(-16#14EA#, 16), to_signed(-16#1501#, 16), to_signed(-16#1519#, 16),
     to_signed(-16#1531#, 16), to_signed(-16#1549#, 16), to_signed(-16#1560#, 16), to_signed(-16#1578#, 16),
     to_signed(-16#1590#, 16), to_signed(-16#15A7#, 16), to_signed(-16#15BF#, 16), to_signed(-16#15D7#, 16),
     to_signed(-16#15EE#, 16), to_signed(-16#1606#, 16), to_signed(-16#161D#, 16), to_signed(-16#1635#, 16),
     to_signed(-16#164C#, 16), to_signed(-16#1664#, 16), to_signed(-16#167C#, 16), to_signed(-16#1693#, 16),
     to_signed(-16#16AB#, 16), to_signed(-16#16C2#, 16), to_signed(-16#16DA#, 16), to_signed(-16#16F1#, 16),
     to_signed(-16#1709#, 16), to_signed(-16#1720#, 16), to_signed(-16#1737#, 16), to_signed(-16#174F#, 16),
     to_signed(-16#1766#, 16), to_signed(-16#177E#, 16), to_signed(-16#1795#, 16), to_signed(-16#17AC#, 16),
     to_signed(-16#17C4#, 16), to_signed(-16#17DB#, 16), to_signed(-16#17F2#, 16), to_signed(-16#180A#, 16),
     to_signed(-16#1821#, 16), to_signed(-16#1838#, 16), to_signed(-16#184F#, 16), to_signed(-16#1867#, 16),
     to_signed(-16#187E#, 16), to_signed(-16#1895#, 16), to_signed(-16#18AC#, 16), to_signed(-16#18C3#, 16),
     to_signed(-16#18DB#, 16), to_signed(-16#18F2#, 16), to_signed(-16#1909#, 16), to_signed(-16#1920#, 16),
     to_signed(-16#1937#, 16), to_signed(-16#194E#, 16), to_signed(-16#1965#, 16), to_signed(-16#197C#, 16),
     to_signed(-16#1993#, 16), to_signed(-16#19AA#, 16), to_signed(-16#19C1#, 16), to_signed(-16#19D8#, 16),
     to_signed(-16#19EF#, 16), to_signed(-16#1A06#, 16), to_signed(-16#1A1D#, 16), to_signed(-16#1A34#, 16),
     to_signed(-16#1A4B#, 16), to_signed(-16#1A62#, 16), to_signed(-16#1A79#, 16), to_signed(-16#1A90#, 16),
     to_signed(-16#1AA7#, 16), to_signed(-16#1ABE#, 16), to_signed(-16#1AD4#, 16), to_signed(-16#1AEB#, 16),
     to_signed(-16#1B02#, 16), to_signed(-16#1B19#, 16), to_signed(-16#1B30#, 16), to_signed(-16#1B46#, 16),
     to_signed(-16#1B5D#, 16), to_signed(-16#1B74#, 16), to_signed(-16#1B8A#, 16), to_signed(-16#1BA1#, 16),
     to_signed(-16#1BB8#, 16), to_signed(-16#1BCE#, 16), to_signed(-16#1BE5#, 16), to_signed(-16#1BFC#, 16),
     to_signed(-16#1C12#, 16), to_signed(-16#1C29#, 16), to_signed(-16#1C3F#, 16), to_signed(-16#1C56#, 16),
     to_signed(-16#1C6C#, 16), to_signed(-16#1C83#, 16), to_signed(-16#1C99#, 16), to_signed(-16#1CB0#, 16),
     to_signed(-16#1CC6#, 16), to_signed(-16#1CDD#, 16), to_signed(-16#1CF3#, 16), to_signed(-16#1D0A#, 16),
     to_signed(-16#1D20#, 16), to_signed(-16#1D36#, 16), to_signed(-16#1D4D#, 16), to_signed(-16#1D63#, 16),
     to_signed(-16#1D79#, 16), to_signed(-16#1D90#, 16), to_signed(-16#1DA6#, 16), to_signed(-16#1DBC#, 16),
     to_signed(-16#1DD3#, 16), to_signed(-16#1DE9#, 16), to_signed(-16#1DFF#, 16), to_signed(-16#1E15#, 16),
     to_signed(-16#1E2B#, 16), to_signed(-16#1E42#, 16), to_signed(-16#1E58#, 16), to_signed(-16#1E6E#, 16),
     to_signed(-16#1E84#, 16), to_signed(-16#1E9A#, 16), to_signed(-16#1EB0#, 16), to_signed(-16#1EC6#, 16),
     to_signed(-16#1EDC#, 16), to_signed(-16#1EF2#, 16), to_signed(-16#1F08#, 16), to_signed(-16#1F1E#, 16),
     to_signed(-16#1F34#, 16), to_signed(-16#1F4A#, 16), to_signed(-16#1F60#, 16), to_signed(-16#1F76#, 16),
     to_signed(-16#1F8C#, 16), to_signed(-16#1FA2#, 16), to_signed(-16#1FB7#, 16), to_signed(-16#1FCD#, 16),
     to_signed(-16#1FE3#, 16), to_signed(-16#1FF9#, 16), to_signed(-16#200F#, 16), to_signed(-16#2024#, 16),
     to_signed(-16#203A#, 16), to_signed(-16#2050#, 16), to_signed(-16#2065#, 16), to_signed(-16#207B#, 16),
     to_signed(-16#2091#, 16), to_signed(-16#20A6#, 16), to_signed(-16#20BC#, 16), to_signed(-16#20D1#, 16),
     to_signed(-16#20E7#, 16), to_signed(-16#20FD#, 16), to_signed(-16#2112#, 16), to_signed(-16#2128#, 16),
     to_signed(-16#213D#, 16), to_signed(-16#2153#, 16), to_signed(-16#2168#, 16), to_signed(-16#217D#, 16),
     to_signed(-16#2193#, 16), to_signed(-16#21A8#, 16), to_signed(-16#21BE#, 16), to_signed(-16#21D3#, 16),
     to_signed(-16#21E8#, 16), to_signed(-16#21FE#, 16), to_signed(-16#2213#, 16), to_signed(-16#2228#, 16),
     to_signed(-16#223D#, 16), to_signed(-16#2253#, 16), to_signed(-16#2268#, 16), to_signed(-16#227D#, 16),
     to_signed(-16#2292#, 16), to_signed(-16#22A7#, 16), to_signed(-16#22BC#, 16), to_signed(-16#22D2#, 16),
     to_signed(-16#22E7#, 16), to_signed(-16#22FC#, 16), to_signed(-16#2311#, 16), to_signed(-16#2326#, 16),
     to_signed(-16#233B#, 16), to_signed(-16#2350#, 16), to_signed(-16#2365#, 16), to_signed(-16#237A#, 16),
     to_signed(-16#238E#, 16), to_signed(-16#23A3#, 16), to_signed(-16#23B8#, 16), to_signed(-16#23CD#, 16),
     to_signed(-16#23E2#, 16), to_signed(-16#23F7#, 16), to_signed(-16#240B#, 16), to_signed(-16#2420#, 16),
     to_signed(-16#2435#, 16), to_signed(-16#244A#, 16), to_signed(-16#245E#, 16), to_signed(-16#2473#, 16),
     to_signed(-16#2488#, 16), to_signed(-16#249C#, 16), to_signed(-16#24B1#, 16), to_signed(-16#24C5#, 16),
     to_signed(-16#24DA#, 16), to_signed(-16#24EF#, 16), to_signed(-16#2503#, 16), to_signed(-16#2518#, 16),
     to_signed(-16#252C#, 16), to_signed(-16#2541#, 16), to_signed(-16#2555#, 16), to_signed(-16#2569#, 16),
     to_signed(-16#257E#, 16), to_signed(-16#2592#, 16), to_signed(-16#25A6#, 16), to_signed(-16#25BB#, 16),
     to_signed(-16#25CF#, 16), to_signed(-16#25E3#, 16), to_signed(-16#25F8#, 16), to_signed(-16#260C#, 16),
     to_signed(-16#2620#, 16), to_signed(-16#2634#, 16), to_signed(-16#2648#, 16), to_signed(-16#265C#, 16),
     to_signed(-16#2671#, 16), to_signed(-16#2685#, 16), to_signed(-16#2699#, 16), to_signed(-16#26AD#, 16),
     to_signed(-16#26C1#, 16), to_signed(-16#26D5#, 16), to_signed(-16#26E9#, 16), to_signed(-16#26FD#, 16),
     to_signed(-16#2711#, 16), to_signed(-16#2724#, 16), to_signed(-16#2738#, 16), to_signed(-16#274C#, 16),
     to_signed(-16#2760#, 16), to_signed(-16#2774#, 16), to_signed(-16#2788#, 16), to_signed(-16#279B#, 16),
     to_signed(-16#27AF#, 16), to_signed(-16#27C3#, 16), to_signed(-16#27D6#, 16), to_signed(-16#27EA#, 16),
     to_signed(-16#27FE#, 16), to_signed(-16#2811#, 16), to_signed(-16#2825#, 16), to_signed(-16#2838#, 16),
     to_signed(-16#284C#, 16), to_signed(-16#2860#, 16), to_signed(-16#2873#, 16), to_signed(-16#2886#, 16),
     to_signed(-16#289A#, 16), to_signed(-16#28AD#, 16), to_signed(-16#28C1#, 16), to_signed(-16#28D4#, 16),
     to_signed(-16#28E7#, 16), to_signed(-16#28FB#, 16), to_signed(-16#290E#, 16), to_signed(-16#2921#, 16),
     to_signed(-16#2935#, 16), to_signed(-16#2948#, 16), to_signed(-16#295B#, 16), to_signed(-16#296E#, 16),
     to_signed(-16#2981#, 16), to_signed(-16#2994#, 16), to_signed(-16#29A7#, 16), to_signed(-16#29BB#, 16),
     to_signed(-16#29CE#, 16), to_signed(-16#29E1#, 16), to_signed(-16#29F4#, 16), to_signed(-16#2A07#, 16),
     to_signed(-16#2A1A#, 16), to_signed(-16#2A2C#, 16), to_signed(-16#2A3F#, 16), to_signed(-16#2A52#, 16),
     to_signed(-16#2A65#, 16), to_signed(-16#2A78#, 16), to_signed(-16#2A8B#, 16), to_signed(-16#2A9D#, 16),
     to_signed(-16#2AB0#, 16), to_signed(-16#2AC3#, 16), to_signed(-16#2AD6#, 16), to_signed(-16#2AE8#, 16),
     to_signed(-16#2AFB#, 16), to_signed(-16#2B0D#, 16), to_signed(-16#2B20#, 16), to_signed(-16#2B33#, 16),
     to_signed(-16#2B45#, 16), to_signed(-16#2B58#, 16), to_signed(-16#2B6A#, 16), to_signed(-16#2B7D#, 16),
     to_signed(-16#2B8F#, 16), to_signed(-16#2BA1#, 16), to_signed(-16#2BB4#, 16), to_signed(-16#2BC6#, 16),
     to_signed(-16#2BD8#, 16), to_signed(-16#2BEB#, 16), to_signed(-16#2BFD#, 16), to_signed(-16#2C0F#, 16),
     to_signed(-16#2C21#, 16), to_signed(-16#2C34#, 16), to_signed(-16#2C46#, 16), to_signed(-16#2C58#, 16),
     to_signed(-16#2C6A#, 16), to_signed(-16#2C7C#, 16), to_signed(-16#2C8E#, 16), to_signed(-16#2CA0#, 16),
     to_signed(-16#2CB2#, 16), to_signed(-16#2CC4#, 16), to_signed(-16#2CD6#, 16), to_signed(-16#2CE8#, 16),
     to_signed(-16#2CFA#, 16), to_signed(-16#2D0C#, 16), to_signed(-16#2D1E#, 16), to_signed(-16#2D2F#, 16));  -- sfix16 [512]

  -- Signals
  SIGNAL Radix22TwdlMapping_cnt           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Radix22TwdlMapping_phase         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw  : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Radix22TwdlMapping_twdlAddrMap   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdl45Reg     : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1      : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2      : std_logic;
  SIGNAL Radix22TwdlMapping_cnt_next      : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Radix22TwdlMapping_phase_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1_next : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw_next : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Radix22TwdlMapping_twdlAddrMap_next : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdl45Reg_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2_next : std_logic;
  SIGNAL twdlAddr                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL twdlAddrVld                      : std_logic;
  SIGNAL twdlOctant                       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45                           : std_logic;
  SIGNAL twiddleS_re                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twiddleReg_re                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twiddleS_im                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twiddleReg_im                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdlOctantReg                    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45Reg                        : std_logic;

BEGIN
  -- Radix22TwdlMapping
  Radix22TwdlMapping_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22TwdlMapping_octantReg1 <= to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdlAddr_raw <= to_unsigned(16#000#, 12);
        Radix22TwdlMapping_twdlAddrMap <= to_unsigned(16#000#, 9);
        Radix22TwdlMapping_twdl45Reg <= '0';
        Radix22TwdlMapping_dvldReg1 <= '0';
        Radix22TwdlMapping_dvldReg2 <= '0';
        Radix22TwdlMapping_cnt <= to_unsigned(16#000#, 10);
        Radix22TwdlMapping_phase <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        Radix22TwdlMapping_cnt <= Radix22TwdlMapping_cnt_next;
        Radix22TwdlMapping_phase <= Radix22TwdlMapping_phase_next;
        Radix22TwdlMapping_octantReg1 <= Radix22TwdlMapping_octantReg1_next;
        Radix22TwdlMapping_twdlAddr_raw <= Radix22TwdlMapping_twdlAddr_raw_next;
        Radix22TwdlMapping_twdlAddrMap <= Radix22TwdlMapping_twdlAddrMap_next;
        Radix22TwdlMapping_twdl45Reg <= Radix22TwdlMapping_twdl45Reg_next;
        Radix22TwdlMapping_dvldReg1 <= Radix22TwdlMapping_dvldReg1_next;
        Radix22TwdlMapping_dvldReg2 <= Radix22TwdlMapping_dvldReg2_next;
      END IF;
    END IF;
  END PROCESS Radix22TwdlMapping_process;

  Radix22TwdlMapping_output : PROCESS (Radix22TwdlMapping_cnt, Radix22TwdlMapping_dvldReg1,
       Radix22TwdlMapping_dvldReg2, Radix22TwdlMapping_octantReg1,
       Radix22TwdlMapping_phase, Radix22TwdlMapping_twdl45Reg,
       Radix22TwdlMapping_twdlAddrMap, Radix22TwdlMapping_twdlAddr_raw,
       dout_10_1_vld)
    VARIABLE octant : unsigned(2 DOWNTO 0);
    VARIABLE cnt_cast : unsigned(11 DOWNTO 0);
    VARIABLE sub_temp : signed(25 DOWNTO 0);
    VARIABLE sub_temp_0 : signed(13 DOWNTO 0);
    VARIABLE sub_temp_1 : signed(13 DOWNTO 0);
    VARIABLE sub_temp_2 : signed(25 DOWNTO 0);
    VARIABLE sub_temp_3 : signed(25 DOWNTO 0);
  BEGIN
    sub_temp := to_signed(16#0000000#, 26);
    sub_temp_0 := to_signed(16#0000#, 14);
    sub_temp_1 := to_signed(16#0000#, 14);
    sub_temp_2 := to_signed(16#0000000#, 26);
    sub_temp_3 := to_signed(16#0000000#, 26);
    cnt_cast := to_unsigned(16#000#, 12);
    Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt;
    Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase;
    Radix22TwdlMapping_dvldReg2_next <= Radix22TwdlMapping_dvldReg1;
    Radix22TwdlMapping_dvldReg1_next <= dout_10_1_vld;
    CASE Radix22TwdlMapping_twdlAddr_raw IS
      WHEN "001000000000" =>
        octant := to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "010000000000" =>
        octant := to_unsigned(16#1#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "011000000000" =>
        octant := to_unsigned(16#2#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "100000000000" =>
        octant := to_unsigned(16#3#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "101000000000" =>
        octant := to_unsigned(16#4#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN OTHERS => 
        octant := Radix22TwdlMapping_twdlAddr_raw(11 DOWNTO 9);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
    END CASE;
    Radix22TwdlMapping_octantReg1_next <= octant;
    CASE octant IS
      WHEN "000" =>
        Radix22TwdlMapping_twdlAddrMap_next <= Radix22TwdlMapping_twdlAddr_raw(8 DOWNTO 0);
      WHEN "001" =>
        sub_temp_0 := to_signed(16#0400#, 14) - signed(resize(Radix22TwdlMapping_twdlAddr_raw, 14));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_0(8 DOWNTO 0));
      WHEN "010" =>
        sub_temp_1 := signed(resize(Radix22TwdlMapping_twdlAddr_raw, 14)) - to_signed(16#0400#, 14);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_1(8 DOWNTO 0));
      WHEN "011" =>
        sub_temp_2 := to_signed(16#0100000#, 26) - signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_2(17 DOWNTO 9));
      WHEN "100" =>
        sub_temp_3 := signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26)) - to_signed(16#0100000#, 26);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_3(17 DOWNTO 9));
      WHEN OTHERS => 
        sub_temp := to_signed(16#0180000#, 26) - signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp(17 DOWNTO 9));
    END CASE;
    IF Radix22TwdlMapping_phase = to_unsigned(16#0#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= to_unsigned(16#000#, 12);
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#1#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(Radix22TwdlMapping_cnt, 12) sll 1;
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#2#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(Radix22TwdlMapping_cnt, 12);
    ELSE 
      cnt_cast := resize(Radix22TwdlMapping_cnt, 12);
      Radix22TwdlMapping_twdlAddr_raw_next <= (cnt_cast sll 1) + cnt_cast;
    END IF;
    IF dout_10_1_vld = '1' AND (Radix22TwdlMapping_cnt > to_unsigned(16#2FF#, 10)) THEN 
      Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase + to_unsigned(16#1#, 2);
    END IF;
    IF dout_10_1_vld = '1' THEN 
      Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt + to_unsigned(16#100#, 10);
    END IF;
    twdlAddr <= Radix22TwdlMapping_twdlAddrMap;
    twdlAddrVld <= Radix22TwdlMapping_dvldReg2;
    twdlOctant <= Radix22TwdlMapping_octantReg1;
    twdl45 <= Radix22TwdlMapping_twdl45Reg;
  END PROCESS Radix22TwdlMapping_output;


  -- Twiddle ROM1
  twiddleS_re <= Twiddle_re_table_data(to_integer(twdlAddr));

  TWIDDLEROM_RE_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twiddleReg_re <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twiddleReg_re <= twiddleS_re;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_RE_process;


  -- Twiddle ROM2
  twiddleS_im <= Twiddle_im_table_data(to_integer(twdlAddr));

  TWIDDLEROM_IM_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twiddleReg_im <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twiddleReg_im <= twiddleS_im;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_IM_process;


  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdlOctantReg <= to_unsigned(16#0#, 3);
      ELSIF enb = '1' THEN
        twdlOctantReg <= twdlOctant;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl45Reg <= '0';
      ELSIF enb = '1' THEN
        twdl45Reg <= twdl45;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  -- Radix22TwdlOctCorr
  Radix22TwdlOctCorr_output : PROCESS (twdl45Reg, twdlOctantReg, twiddleReg_im, twiddleReg_re)
    VARIABLE twdlIn_re : signed(15 DOWNTO 0);
    VARIABLE twdlIn_im : signed(15 DOWNTO 0);
    VARIABLE cast : signed(16 DOWNTO 0);
    VARIABLE cast_0 : signed(16 DOWNTO 0);
    VARIABLE cast_1 : signed(16 DOWNTO 0);
    VARIABLE cast_2 : signed(16 DOWNTO 0);
    VARIABLE cast_3 : signed(16 DOWNTO 0);
    VARIABLE cast_4 : signed(16 DOWNTO 0);
  BEGIN
    cast := to_signed(16#00000#, 17);
    cast_0 := to_signed(16#00000#, 17);
    cast_1 := to_signed(16#00000#, 17);
    cast_2 := to_signed(16#00000#, 17);
    cast_3 := to_signed(16#00000#, 17);
    cast_4 := to_signed(16#00000#, 17);
    twdlIn_re := twiddleReg_re;
    twdlIn_im := twiddleReg_im;
    IF twdl45Reg = '1' THEN 
      CASE twdlOctantReg IS
        WHEN "000" =>
          twdlIn_re := to_signed(16#2D41#, 16);
          twdlIn_im := to_signed(-16#2D41#, 16);
        WHEN "010" =>
          twdlIn_re := to_signed(-16#2D41#, 16);
          twdlIn_im := to_signed(-16#2D41#, 16);
        WHEN "100" =>
          twdlIn_re := to_signed(-16#2D41#, 16);
          twdlIn_im := to_signed(16#2D41#, 16);
        WHEN OTHERS => 
          twdlIn_re := to_signed(16#2D41#, 16);
          twdlIn_im := to_signed(-16#2D41#, 16);
      END CASE;
    ELSE 
      CASE twdlOctantReg IS
        WHEN "000" =>
          NULL;
        WHEN "001" =>
          cast :=  - (resize(twiddleReg_im, 17));
          twdlIn_re := cast(15 DOWNTO 0);
          cast_2 :=  - (resize(twiddleReg_re, 17));
          twdlIn_im := cast_2(15 DOWNTO 0);
        WHEN "010" =>
          twdlIn_re := twiddleReg_im;
          cast_3 :=  - (resize(twiddleReg_re, 17));
          twdlIn_im := cast_3(15 DOWNTO 0);
        WHEN "011" =>
          cast_0 :=  - (resize(twiddleReg_re, 17));
          twdlIn_re := cast_0(15 DOWNTO 0);
          twdlIn_im := twiddleReg_im;
        WHEN "100" =>
          cast_1 :=  - (resize(twiddleReg_re, 17));
          twdlIn_re := cast_1(15 DOWNTO 0);
          cast_4 :=  - (resize(twiddleReg_im, 17));
          twdlIn_im := cast_4(15 DOWNTO 0);
        WHEN OTHERS => 
          twdlIn_re := twiddleReg_im;
          twdlIn_im := twiddleReg_re;
      END CASE;
    END IF;
    twdl_11_1_re <= twdlIn_re;
    twdl_11_1_im <= twdlIn_im;
  END PROCESS Radix22TwdlOctCorr_output;


END rtl;


-- End of TWDLROM_11_1_block.vhd --

-- Start of TWDLROM_11_1_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\TWDLROM_11_1_block1.vhd
-- Created: 2025-03-18 15:26:31
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: TWDLROM_11_1_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/TWDLROM_11_1
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY TWDLROM_11_1_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_10_1_vld                     :   IN    std_logic;
        twdl_11_1_re                      :   OUT   signed(31 DOWNTO 0);  -- sfix32_En30
        twdl_11_1_im                      :   OUT   signed(31 DOWNTO 0)  -- sfix32_En30
        );
END TWDLROM_11_1_block1;


ARCHITECTURE rtl OF TWDLROM_11_1_block1 IS

  -- Constants
  CONSTANT Twiddle_re_table_data          : vector_of_signed32(0 TO 511) := 
    (to_signed(1073741824, 32), to_signed(1073740561, 32), to_signed(1073736771, 32), to_signed(1073730454, 32),
     to_signed(1073721611, 32), to_signed(1073710241, 32), to_signed(1073696345, 32), to_signed(1073679922, 32),
     to_signed(1073660973, 32), to_signed(1073639498, 32), to_signed(1073615496, 32), to_signed(1073588967, 32),
     to_signed(1073559913, 32), to_signed(1073528332, 32), to_signed(1073494225, 32), to_signed(1073457592, 32),
     to_signed(1073418433, 32), to_signed(1073376748, 32), to_signed(1073332538, 32), to_signed(1073285802, 32),
     to_signed(1073236540, 32), to_signed(1073184753, 32), to_signed(1073130440, 32), to_signed(1073073603, 32),
     to_signed(1073014240, 32), to_signed(1072952352, 32), to_signed(1072887940, 32), to_signed(1072821003, 32),
     to_signed(1072751542, 32), to_signed(1072679556, 32), to_signed(1072605046, 32), to_signed(1072528012, 32),
     to_signed(1072448455, 32), to_signed(1072366374, 32), to_signed(1072281769, 32), to_signed(1072194642, 32),
     to_signed(1072104991, 32), to_signed(1072012818, 32), to_signed(1071918122, 32), to_signed(1071820903, 32),
     to_signed(1071721163, 32), to_signed(1071618901, 32), to_signed(1071514117, 32), to_signed(1071406812, 32),
     to_signed(1071296985, 32), to_signed(1071184638, 32), to_signed(1071069770, 32), to_signed(1070952382, 32),
     to_signed(1070832474, 32), to_signed(1070710046, 32), to_signed(1070585099, 32), to_signed(1070457632, 32),
     to_signed(1070327646, 32), to_signed(1070195142, 32), to_signed(1070060120, 32), to_signed(1069922579, 32),
     to_signed(1069782521, 32), to_signed(1069639946, 32), to_signed(1069494854, 32), to_signed(1069347245, 32),
     to_signed(1069197120, 32), to_signed(1069044479, 32), to_signed(1068889322, 32), to_signed(1068731650, 32),
     to_signed(1068571464, 32), to_signed(1068408763, 32), to_signed(1068243547, 32), to_signed(1068075818, 32),
     to_signed(1067905576, 32), to_signed(1067732821, 32), to_signed(1067557554, 32), to_signed(1067379774, 32),
     to_signed(1067199483, 32), to_signed(1067016680, 32), to_signed(1066831367, 32), to_signed(1066643544, 32),
     to_signed(1066453210, 32), to_signed(1066260367, 32), to_signed(1066065015, 32), to_signed(1065867154, 32),
     to_signed(1065666786, 32), to_signed(1065463909, 32), to_signed(1065258526, 32), to_signed(1065050636, 32),
     to_signed(1064840240, 32), to_signed(1064627338, 32), to_signed(1064411931, 32), to_signed(1064194019, 32),
     to_signed(1063973603, 32), to_signed(1063750684, 32), to_signed(1063525261, 32), to_signed(1063297336, 32),
     to_signed(1063066909, 32), to_signed(1062833980, 32), to_signed(1062598550, 32), to_signed(1062360620, 32),
     to_signed(1062120190, 32), to_signed(1061877261, 32), to_signed(1061631833, 32), to_signed(1061383907, 32),
     to_signed(1061133483, 32), to_signed(1060880563, 32), to_signed(1060625146, 32), to_signed(1060367233, 32),
     to_signed(1060106826, 32), to_signed(1059843923, 32), to_signed(1059578527, 32), to_signed(1059310638, 32),
     to_signed(1059040255, 32), to_signed(1058767381, 32), to_signed(1058492016, 32), to_signed(1058214159, 32),
     to_signed(1057933813, 32), to_signed(1057650977, 32), to_signed(1057365653, 32), to_signed(1057077840, 32),
     to_signed(1056787540, 32), to_signed(1056494753, 32), to_signed(1056199480, 32), to_signed(1055901722, 32),
     to_signed(1055601479, 32), to_signed(1055298753, 32), to_signed(1054993543, 32), to_signed(1054685850, 32),
     to_signed(1054375676, 32), to_signed(1054063021, 32), to_signed(1053747885, 32), to_signed(1053430270, 32),
     to_signed(1053110176, 32), to_signed(1052787604, 32), to_signed(1052462555, 32), to_signed(1052135029, 32),
     to_signed(1051805027, 32), to_signed(1051472550, 32), to_signed(1051137599, 32), to_signed(1050800175, 32),
     to_signed(1050460278, 32), to_signed(1050117909, 32), to_signed(1049773069, 32), to_signed(1049425759, 32),
     to_signed(1049075980, 32), to_signed(1048723732, 32), to_signed(1048369016, 32), to_signed(1048011834, 32),
     to_signed(1047652185, 32), to_signed(1047290071, 32), to_signed(1046925492, 32), to_signed(1046558451, 32),
     to_signed(1046188946, 32), to_signed(1045816980, 32), to_signed(1045442553, 32), to_signed(1045065665, 32),
     to_signed(1044686319, 32), to_signed(1044304514, 32), to_signed(1043920252, 32), to_signed(1043533534, 32),
     to_signed(1043144360, 32), to_signed(1042752731, 32), to_signed(1042358649, 32), to_signed(1041962114, 32),
     to_signed(1041563127, 32), to_signed(1041161689, 32), to_signed(1040757802, 32), to_signed(1040351465, 32),
     to_signed(1039942680, 32), to_signed(1039531448, 32), to_signed(1039117770, 32), to_signed(1038701647, 32),
     to_signed(1038283080, 32), to_signed(1037862069, 32), to_signed(1037438617, 32), to_signed(1037012723, 32),
     to_signed(1036584389, 32), to_signed(1036153615, 32), to_signed(1035720404, 32), to_signed(1035284755, 32),
     to_signed(1034846671, 32), to_signed(1034406151, 32), to_signed(1033963197, 32), to_signed(1033517810, 32),
     to_signed(1033069992, 32), to_signed(1032619742, 32), to_signed(1032167062, 32), to_signed(1031711954, 32),
     to_signed(1031254418, 32), to_signed(1030794455, 32), to_signed(1030332067, 32), to_signed(1029867254, 32),
     to_signed(1029400018, 32), to_signed(1028930359, 32), to_signed(1028458280, 32), to_signed(1027983780, 32),
     to_signed(1027506862, 32), to_signed(1027027525, 32), to_signed(1026545772, 32), to_signed(1026061603, 32),
     to_signed(1025575020, 32), to_signed(1025086024, 32), to_signed(1024594615, 32), to_signed(1024100796, 32),
     to_signed(1023604567, 32), to_signed(1023105929, 32), to_signed(1022604883, 32), to_signed(1022101432, 32),
     to_signed(1021595575, 32), to_signed(1021087314, 32), to_signed(1020576651, 32), to_signed(1020063586, 32),
     to_signed(1019548121, 32), to_signed(1019030256, 32), to_signed(1018509994, 32), to_signed(1017987335, 32),
     to_signed(1017462281, 32), to_signed(1016934832, 32), to_signed(1016404991, 32), to_signed(1015872758, 32),
     to_signed(1015338134, 32), to_signed(1014801122, 32), to_signed(1014261721, 32), to_signed(1013719934, 32),
     to_signed(1013175761, 32), to_signed(1012629204, 32), to_signed(1012080264, 32), to_signed(1011528943, 32),
     to_signed(1010975242, 32), to_signed(1010419162, 32), to_signed(1009860704, 32), to_signed(1009299870, 32),
     to_signed(1008736660, 32), to_signed(1008171077, 32), to_signed(1007603122, 32), to_signed(1007032796, 32),
     to_signed(1006460100, 32), to_signed(1005885036, 32), to_signed(1005307605, 32), to_signed(1004727809, 32),
     to_signed(1004145648, 32), to_signed(1003561124, 32), to_signed(1002974239, 32), to_signed(1002384994, 32),
     to_signed(1001793390, 32), to_signed(1001199428, 32), to_signed(1000603111, 32), to_signed(1000004439, 32),
     to_signed(999403415, 32), to_signed(998800038, 32), to_signed(998194311, 32), to_signed(997586236, 32),
     to_signed(996975812, 32), to_signed(996363043, 32), to_signed(995747930, 32), to_signed(995130473, 32),
     to_signed(994510675, 32), to_signed(993888536, 32), to_signed(993264059, 32), to_signed(992637245, 32),
     to_signed(992008094, 32), to_signed(991376610, 32), to_signed(990742793, 32), to_signed(990106644, 32),
     to_signed(989468165, 32), to_signed(988827359, 32), to_signed(988184225, 32), to_signed(987538766, 32),
     to_signed(986890984, 32), to_signed(986240879, 32), to_signed(985588453, 32), to_signed(984933708, 32),
     to_signed(984276646, 32), to_signed(983617267, 32), to_signed(982955574, 32), to_signed(982291568, 32),
     to_signed(981625251, 32), to_signed(980956623, 32), to_signed(980285688, 32), to_signed(979612445, 32),
     to_signed(978936898, 32), to_signed(978259047, 32), to_signed(977578894, 32), to_signed(976896441, 32),
     to_signed(976211688, 32), to_signed(975524639, 32), to_signed(974835295, 32), to_signed(974143656, 32),
     to_signed(973449725, 32), to_signed(972753504, 32), to_signed(972054994, 32), to_signed(971354196, 32),
     to_signed(970651112, 32), to_signed(969945745, 32), to_signed(969238095, 32), to_signed(968528165, 32),
     to_signed(967815955, 32), to_signed(967101468, 32), to_signed(966384706, 32), to_signed(965665669, 32),
     to_signed(964944360, 32), to_signed(964220780, 32), to_signed(963494932, 32), to_signed(962766816, 32),
     to_signed(962036435, 32), to_signed(961303790, 32), to_signed(960568883, 32), to_signed(959831716, 32),
     to_signed(959092290, 32), to_signed(958350608, 32), to_signed(957606670, 32), to_signed(956860479, 32),
     to_signed(956112036, 32), to_signed(955361344, 32), to_signed(954608403, 32), to_signed(953853216, 32),
     to_signed(953095785, 32), to_signed(952336111, 32), to_signed(951574196, 32), to_signed(950810042, 32),
     to_signed(950043650, 32), to_signed(949275023, 32), to_signed(948504163, 32), to_signed(947731070, 32),
     to_signed(946955747, 32), to_signed(946178196, 32), to_signed(945398418, 32), to_signed(944616416, 32),
     to_signed(943832191, 32), to_signed(943045745, 32), to_signed(942257081, 32), to_signed(941466198, 32),
     to_signed(940673101, 32), to_signed(939877790, 32), to_signed(939080267, 32), to_signed(938280535, 32),
     to_signed(937478595, 32), to_signed(936674448, 32), to_signed(935868098, 32), to_signed(935059546, 32),
     to_signed(934248793, 32), to_signed(933435842, 32), to_signed(932620694, 32), to_signed(931803352, 32),
     to_signed(930983817, 32), to_signed(930162092, 32), to_signed(929338177, 32), to_signed(928512076, 32),
     to_signed(927683790, 32), to_signed(926853322, 32), to_signed(926020672, 32), to_signed(925185843, 32),
     to_signed(924348837, 32), to_signed(923509656, 32), to_signed(922668302, 32), to_signed(921824777, 32),
     to_signed(920979082, 32), to_signed(920131221, 32), to_signed(919281194, 32), to_signed(918429004, 32),
     to_signed(917574653, 32), to_signed(916718143, 32), to_signed(915859476, 32), to_signed(914998653, 32),
     to_signed(914135678, 32), to_signed(913270551, 32), to_signed(912403276, 32), to_signed(911533853, 32),
     to_signed(910662286, 32), to_signed(909788576, 32), to_signed(908912725, 32), to_signed(908034735, 32),
     to_signed(907154608, 32), to_signed(906272347, 32), to_signed(905387953, 32), to_signed(904501429, 32),
     to_signed(903612776, 32), to_signed(902721998, 32), to_signed(901829095, 32), to_signed(900934069, 32),
     to_signed(900036924, 32), to_signed(899137661, 32), to_signed(898236282, 32), to_signed(897332790, 32),
     to_signed(896427186, 32), to_signed(895519473, 32), to_signed(894609652, 32), to_signed(893697727, 32),
     to_signed(892783698, 32), to_signed(891867569, 32), to_signed(890949341, 32), to_signed(890029016, 32),
     to_signed(889106597, 32), to_signed(888182086, 32), to_signed(887255485, 32), to_signed(886326796, 32),
     to_signed(885396022, 32), to_signed(884463164, 32), to_signed(883528225, 32), to_signed(882591207, 32),
     to_signed(881652112, 32), to_signed(880710943, 32), to_signed(879767701, 32), to_signed(878822389, 32),
     to_signed(877875009, 32), to_signed(876925563, 32), to_signed(875974054, 32), to_signed(875020483, 32),
     to_signed(874064853, 32), to_signed(873107167, 32), to_signed(872147426, 32), to_signed(871185633, 32),
     to_signed(870221790, 32), to_signed(869255900, 32), to_signed(868287963, 32), to_signed(867317984, 32),
     to_signed(866345964, 32), to_signed(865371905, 32), to_signed(864395810, 32), to_signed(863417681, 32),
     to_signed(862437520, 32), to_signed(861455330, 32), to_signed(860471112, 32), to_signed(859484870, 32),
     to_signed(858496606, 32), to_signed(857506321, 32), to_signed(856514019, 32), to_signed(855519701, 32),
     to_signed(854523370, 32), to_signed(853525028, 32), to_signed(852524677, 32), to_signed(851522321, 32),
     to_signed(850517961, 32), to_signed(849511600, 32), to_signed(848503239, 32), to_signed(847492882, 32),
     to_signed(846480531, 32), to_signed(845466188, 32), to_signed(844449856, 32), to_signed(843431536, 32),
     to_signed(842411232, 32), to_signed(841388945, 32), to_signed(840364679, 32), to_signed(839338435, 32),
     to_signed(838310216, 32), to_signed(837280024, 32), to_signed(836247863, 32), to_signed(835213733, 32),
     to_signed(834177638, 32), to_signed(833139580, 32), to_signed(832099562, 32), to_signed(831057586, 32),
     to_signed(830013654, 32), to_signed(828967769, 32), to_signed(827919934, 32), to_signed(826870150, 32),
     to_signed(825818421, 32), to_signed(824764748, 32), to_signed(823709135, 32), to_signed(822651583, 32),
     to_signed(821592095, 32), to_signed(820530675, 32), to_signed(819467323, 32), to_signed(818402043, 32),
     to_signed(817334838, 32), to_signed(816265709, 32), to_signed(815194659, 32), to_signed(814121692, 32),
     to_signed(813046808, 32), to_signed(811970011, 32), to_signed(810891304, 32), to_signed(809810688, 32),
     to_signed(808728167, 32), to_signed(807643743, 32), to_signed(806557419, 32), to_signed(805469196, 32),
     to_signed(804379079, 32), to_signed(803287068, 32), to_signed(802193167, 32), to_signed(801097379, 32),
     to_signed(799999706, 32), to_signed(798900150, 32), to_signed(797798714, 32), to_signed(796695401, 32),
     to_signed(795590213, 32), to_signed(794483153, 32), to_signed(793374223, 32), to_signed(792263427, 32),
     to_signed(791150767, 32), to_signed(790036244, 32), to_signed(788919863, 32), to_signed(787801625, 32),
     to_signed(786681534, 32), to_signed(785559591, 32), to_signed(784435800, 32), to_signed(783310163, 32),
     to_signed(782182683, 32), to_signed(781053363, 32), to_signed(779922204, 32), to_signed(778789210, 32),
     to_signed(777654384, 32), to_signed(776517728, 32), to_signed(775379244, 32), to_signed(774238936, 32),
     to_signed(773096806, 32), to_signed(771952857, 32), to_signed(770807092, 32), to_signed(769659512, 32),
     to_signed(768510122, 32), to_signed(767358923, 32), to_signed(766205919, 32), to_signed(765051111, 32),
     to_signed(763894504, 32), to_signed(762736098, 32), to_signed(761575898, 32), to_signed(760413906, 32));  -- sfix32 [512]
  CONSTANT Twiddle_im_table_data          : vector_of_signed32(0 TO 511) := 
    (to_signed(0, 32), to_signed(-1647099, 32), to_signed(-3294193, 32), to_signed(-4941281, 32),
     to_signed(-6588356, 32), to_signed(-8235416, 32), to_signed(-9882456, 32), to_signed(-11529474, 32),
     to_signed(-13176464, 32), to_signed(-14823423, 32), to_signed(-16470347, 32), to_signed(-18117233, 32),
     to_signed(-19764076, 32), to_signed(-21410872, 32), to_signed(-23057618, 32), to_signed(-24704310, 32),
     to_signed(-26350943, 32), to_signed(-27997515, 32), to_signed(-29644021, 32), to_signed(-31290457, 32),
     to_signed(-32936819, 32), to_signed(-34583104, 32), to_signed(-36229307, 32), to_signed(-37875426, 32),
     to_signed(-39521455, 32), to_signed(-41167391, 32), to_signed(-42813230, 32), to_signed(-44458968, 32),
     to_signed(-46104602, 32), to_signed(-47750128, 32), to_signed(-49395541, 32), to_signed(-51040837, 32),
     to_signed(-52686014, 32), to_signed(-54331067, 32), to_signed(-55975992, 32), to_signed(-57620785, 32),
     to_signed(-59265442, 32), to_signed(-60909960, 32), to_signed(-62554335, 32), to_signed(-64198563, 32),
     to_signed(-65842639, 32), to_signed(-67486561, 32), to_signed(-69130324, 32), to_signed(-70773924, 32),
     to_signed(-72417357, 32), to_signed(-74060620, 32), to_signed(-75703709, 32), to_signed(-77346620, 32),
     to_signed(-78989349, 32), to_signed(-80631892, 32), to_signed(-82274245, 32), to_signed(-83916404, 32),
     to_signed(-85558366, 32), to_signed(-87200127, 32), to_signed(-88841683, 32), to_signed(-90483029, 32),
     to_signed(-92124163, 32), to_signed(-93765079, 32), to_signed(-95405776, 32), to_signed(-97046247, 32),
     to_signed(-98686491, 32), to_signed(-100326502, 32), to_signed(-101966277, 32), to_signed(-103605812, 32),
     to_signed(-105245103, 32), to_signed(-106884147, 32), to_signed(-108522939, 32), to_signed(-110161476, 32),
     to_signed(-111799753, 32), to_signed(-113437768, 32), to_signed(-115075515, 32), to_signed(-116712992, 32),
     to_signed(-118350194, 32), to_signed(-119987118, 32), to_signed(-121623759, 32), to_signed(-123260114, 32),
     to_signed(-124896179, 32), to_signed(-126531950, 32), to_signed(-128167423, 32), to_signed(-129802595, 32),
     to_signed(-131437462, 32), to_signed(-133072019, 32), to_signed(-134706263, 32), to_signed(-136340190, 32),
     to_signed(-137973796, 32), to_signed(-139607077, 32), to_signed(-141240030, 32), to_signed(-142872651, 32),
     to_signed(-144504935, 32), to_signed(-146136880, 32), to_signed(-147768480, 32), to_signed(-149399733, 32),
     to_signed(-151030634, 32), to_signed(-152661180, 32), to_signed(-154291367, 32), to_signed(-155921191, 32),
     to_signed(-157550647, 32), to_signed(-159179733, 32), to_signed(-160808445, 32), to_signed(-162436778, 32),
     to_signed(-164064728, 32), to_signed(-165692293, 32), to_signed(-167319468, 32), to_signed(-168946249, 32),
     to_signed(-170572633, 32), to_signed(-172198615, 32), to_signed(-173824192, 32), to_signed(-175449360, 32),
     to_signed(-177074115, 32), to_signed(-178698453, 32), to_signed(-180322371, 32), to_signed(-181945865, 32),
     to_signed(-183568930, 32), to_signed(-185191564, 32), to_signed(-186813762, 32), to_signed(-188435520, 32),
     to_signed(-190056834, 32), to_signed(-191677702, 32), to_signed(-193298119, 32), to_signed(-194918080, 32),
     to_signed(-196537583, 32), to_signed(-198156624, 32), to_signed(-199775198, 32), to_signed(-201393302, 32),
     to_signed(-203010932, 32), to_signed(-204628085, 32), to_signed(-206244756, 32), to_signed(-207860942, 32),
     to_signed(-209476638, 32), to_signed(-211091842, 32), to_signed(-212706549, 32), to_signed(-214320755, 32),
     to_signed(-215934457, 32), to_signed(-217547651, 32), to_signed(-219160334, 32), to_signed(-220772500, 32),
     to_signed(-222384147, 32), to_signed(-223995270, 32), to_signed(-225605867, 32), to_signed(-227215933, 32),
     to_signed(-228825464, 32), to_signed(-230434456, 32), to_signed(-232042906, 32), to_signed(-233650811, 32),
     to_signed(-235258165, 32), to_signed(-236864966, 32), to_signed(-238471210, 32), to_signed(-240076892, 32),
     to_signed(-241682010, 32), to_signed(-243286558, 32), to_signed(-244890535, 32), to_signed(-246493935, 32),
     to_signed(-248096755, 32), to_signed(-249698991, 32), to_signed(-251300640, 32), to_signed(-252901697, 32),
     to_signed(-254502159, 32), to_signed(-256102022, 32), to_signed(-257701283, 32), to_signed(-259299937, 32),
     to_signed(-260897982, 32), to_signed(-262495412, 32), to_signed(-264092224, 32), to_signed(-265688415, 32),
     to_signed(-267283981, 32), to_signed(-268878918, 32), to_signed(-270473223, 32), to_signed(-272066891, 32),
     to_signed(-273659918, 32), to_signed(-275252302, 32), to_signed(-276844038, 32), to_signed(-278435122, 32),
     to_signed(-280025552, 32), to_signed(-281615322, 32), to_signed(-283204430, 32), to_signed(-284792871, 32),
     to_signed(-286380643, 32), to_signed(-287967740, 32), to_signed(-289554160, 32), to_signed(-291139898, 32),
     to_signed(-292724951, 32), to_signed(-294309316, 32), to_signed(-295892988, 32), to_signed(-297475964, 32),
     to_signed(-299058239, 32), to_signed(-300639811, 32), to_signed(-302220676, 32), to_signed(-303800829, 32),
     to_signed(-305380268, 32), to_signed(-306958988, 32), to_signed(-308536985, 32), to_signed(-310114257, 32),
     to_signed(-311690799, 32), to_signed(-313266607, 32), to_signed(-314841679, 32), to_signed(-316416009, 32),
     to_signed(-317989595, 32), to_signed(-319562433, 32), to_signed(-321134518, 32), to_signed(-322705848, 32),
     to_signed(-324276419, 32), to_signed(-325846226, 32), to_signed(-327415267, 32), to_signed(-328983538, 32),
     to_signed(-330551034, 32), to_signed(-332117752, 32), to_signed(-333683689, 32), to_signed(-335248841, 32),
     to_signed(-336813204, 32), to_signed(-338376774, 32), to_signed(-339939549, 32), to_signed(-341501523, 32),
     to_signed(-343062693, 32), to_signed(-344623057, 32), to_signed(-346182609, 32), to_signed(-347741347, 32),
     to_signed(-349299266, 32), to_signed(-350856364, 32), to_signed(-352412636, 32), to_signed(-353968079, 32),
     to_signed(-355522689, 32), to_signed(-357076462, 32), to_signed(-358629395, 32), to_signed(-360181484, 32),
     to_signed(-361732726, 32), to_signed(-363283116, 32), to_signed(-364832652, 32), to_signed(-366381329, 32),
     to_signed(-367929144, 32), to_signed(-369476093, 32), to_signed(-371022173, 32), to_signed(-372567379, 32),
     to_signed(-374111709, 32), to_signed(-375655159, 32), to_signed(-377197725, 32), to_signed(-378739403, 32),
     to_signed(-380280190, 32), to_signed(-381820082, 32), to_signed(-383359076, 32), to_signed(-384897167, 32),
     to_signed(-386434353, 32), to_signed(-387970630, 32), to_signed(-389505993, 32), to_signed(-391040440, 32),
     to_signed(-392573967, 32), to_signed(-394106570, 32), to_signed(-395638246, 32), to_signed(-397168991, 32),
     to_signed(-398698801, 32), to_signed(-400227673, 32), to_signed(-401755603, 32), to_signed(-403282588, 32),
     to_signed(-404808624, 32), to_signed(-406333708, 32), to_signed(-407857835, 32), to_signed(-409381002, 32),
     to_signed(-410903207, 32), to_signed(-412424444, 32), to_signed(-413944711, 32), to_signed(-415464004, 32),
     to_signed(-416982319, 32), to_signed(-418499653, 32), to_signed(-420016002, 32), to_signed(-421531363, 32),
     to_signed(-423045732, 32), to_signed(-424559105, 32), to_signed(-426071480, 32), to_signed(-427582852, 32),
     to_signed(-429093217, 32), to_signed(-430602573, 32), to_signed(-432110916, 32), to_signed(-433618242, 32),
     to_signed(-435124548, 32), to_signed(-436629829, 32), to_signed(-438134084, 32), to_signed(-439637307, 32),
     to_signed(-441139496, 32), to_signed(-442640647, 32), to_signed(-444140756, 32), to_signed(-445639820, 32),
     to_signed(-447137835, 32), to_signed(-448634799, 32), to_signed(-450130706, 32), to_signed(-451625555, 32),
     to_signed(-453119340, 32), to_signed(-454612060, 32), to_signed(-456103710, 32), to_signed(-457594286, 32),
     to_signed(-459083786, 32), to_signed(-460572205, 32), to_signed(-462059541, 32), to_signed(-463545789, 32),
     to_signed(-465030947, 32), to_signed(-466515010, 32), to_signed(-467997976, 32), to_signed(-469479840, 32),
     to_signed(-470960600, 32), to_signed(-472440251, 32), to_signed(-473918791, 32), to_signed(-475396216, 32),
     to_signed(-476872522, 32), to_signed(-478347705, 32), to_signed(-479821764, 32), to_signed(-481294693, 32),
     to_signed(-482766489, 32), to_signed(-484237150, 32), to_signed(-485706671, 32), to_signed(-487175049, 32),
     to_signed(-488642281, 32), to_signed(-490108363, 32), to_signed(-491573292, 32), to_signed(-493037064, 32),
     to_signed(-494499676, 32), to_signed(-495961124, 32), to_signed(-497421405, 32), to_signed(-498880516, 32),
     to_signed(-500338453, 32), to_signed(-501795212, 32), to_signed(-503250791, 32), to_signed(-504705185, 32),
     to_signed(-506158392, 32), to_signed(-507610408, 32), to_signed(-509061229, 32), to_signed(-510510853, 32),
     to_signed(-511959275, 32), to_signed(-513406493, 32), to_signed(-514852502, 32), to_signed(-516297300, 32),
     to_signed(-517740883, 32), to_signed(-519183248, 32), to_signed(-520624391, 32), to_signed(-522064309, 32),
     to_signed(-523502998, 32), to_signed(-524940456, 32), to_signed(-526376678, 32), to_signed(-527811662, 32),
     to_signed(-529245404, 32), to_signed(-530677900, 32), to_signed(-532109148, 32), to_signed(-533539144, 32),
     to_signed(-534967884, 32), to_signed(-536395365, 32), to_signed(-537821584, 32), to_signed(-539246538, 32),
     to_signed(-540670223, 32), to_signed(-542092635, 32), to_signed(-543513772, 32), to_signed(-544933630, 32),
     to_signed(-546352205, 32), to_signed(-547769495, 32), to_signed(-549185496, 32), to_signed(-550600205, 32),
     to_signed(-552013618, 32), to_signed(-553425732, 32), to_signed(-554836544, 32), to_signed(-556246051, 32),
     to_signed(-557654248, 32), to_signed(-559061133, 32), to_signed(-560466703, 32), to_signed(-561870954, 32),
     to_signed(-563273883, 32), to_signed(-564675486, 32), to_signed(-566075761, 32), to_signed(-567474703, 32),
     to_signed(-568872310, 32), to_signed(-570268579, 32), to_signed(-571663506, 32), to_signed(-573057087, 32),
     to_signed(-574449320, 32), to_signed(-575840202, 32), to_signed(-577229728, 32), to_signed(-578617896, 32),
     to_signed(-580004702, 32), to_signed(-581390144, 32), to_signed(-582774218, 32), to_signed(-584156920, 32),
     to_signed(-585538248, 32), to_signed(-586918198, 32), to_signed(-588296766, 32), to_signed(-589673951, 32),
     to_signed(-591049748, 32), to_signed(-592424154, 32), to_signed(-593797166, 32), to_signed(-595168781, 32),
     to_signed(-596538995, 32), to_signed(-597907806, 32), to_signed(-599275210, 32), to_signed(-600641203, 32),
     to_signed(-602005783, 32), to_signed(-603368947, 32), to_signed(-604730691, 32), to_signed(-606091012, 32),
     to_signed(-607449906, 32), to_signed(-608807372, 32), to_signed(-610163404, 32), to_signed(-611518001, 32),
     to_signed(-612871159, 32), to_signed(-614222875, 32), to_signed(-615573145, 32), to_signed(-616921967, 32),
     to_signed(-618269338, 32), to_signed(-619615253, 32), to_signed(-620959711, 32), to_signed(-622302707, 32),
     to_signed(-623644239, 32), to_signed(-624984303, 32), to_signed(-626322897, 32), to_signed(-627660017, 32),
     to_signed(-628995660, 32), to_signed(-630329823, 32), to_signed(-631662503, 32), to_signed(-632993696, 32),
     to_signed(-634323400, 32), to_signed(-635651611, 32), to_signed(-636978327, 32), to_signed(-638303543, 32),
     to_signed(-639627258, 32), to_signed(-640949467, 32), to_signed(-642270169, 32), to_signed(-643589359, 32),
     to_signed(-644907034, 32), to_signed(-646223192, 32), to_signed(-647537830, 32), to_signed(-648850943, 32),
     to_signed(-650162530, 32), to_signed(-651472587, 32), to_signed(-652781111, 32), to_signed(-654088099, 32),
     to_signed(-655393548, 32), to_signed(-656697454, 32), to_signed(-657999816, 32), to_signed(-659300629, 32),
     to_signed(-660599890, 32), to_signed(-661897597, 32), to_signed(-663193747, 32), to_signed(-664488336, 32),
     to_signed(-665781362, 32), to_signed(-667072820, 32), to_signed(-668362709, 32), to_signed(-669651026, 32),
     to_signed(-670937767, 32), to_signed(-672222928, 32), to_signed(-673506508, 32), to_signed(-674788504, 32),
     to_signed(-676068911, 32), to_signed(-677347728, 32), to_signed(-678624950, 32), to_signed(-679900576, 32),
     to_signed(-681174602, 32), to_signed(-682447025, 32), to_signed(-683717842, 32), to_signed(-684987051, 32),
     to_signed(-686254647, 32), to_signed(-687520629, 32), to_signed(-688784993, 32), to_signed(-690047736, 32),
     to_signed(-691308855, 32), to_signed(-692568348, 32), to_signed(-693826211, 32), to_signed(-695082441, 32),
     to_signed(-696337036, 32), to_signed(-697589992, 32), to_signed(-698841307, 32), to_signed(-700090977, 32),
     to_signed(-701339000, 32), to_signed(-702585372, 32), to_signed(-703830092, 32), to_signed(-705073155, 32),
     to_signed(-706314559, 32), to_signed(-707554301, 32), to_signed(-708792378, 32), to_signed(-710028787, 32),
     to_signed(-711263525, 32), to_signed(-712496590, 32), to_signed(-713727978, 32), to_signed(-714957687, 32),
     to_signed(-716185713, 32), to_signed(-717412054, 32), to_signed(-718636707, 32), to_signed(-719859669, 32),
     to_signed(-721080937, 32), to_signed(-722300508, 32), to_signed(-723518380, 32), to_signed(-724734549, 32),
     to_signed(-725949013, 32), to_signed(-727161768, 32), to_signed(-728372813, 32), to_signed(-729582143, 32),
     to_signed(-730789757, 32), to_signed(-731995651, 32), to_signed(-733199822, 32), to_signed(-734402269, 32),
     to_signed(-735602987, 32), to_signed(-736801974, 32), to_signed(-737999228, 32), to_signed(-739194745, 32),
     to_signed(-740388522, 32), to_signed(-741580558, 32), to_signed(-742770848, 32), to_signed(-743959390, 32),
     to_signed(-745146182, 32), to_signed(-746331221, 32), to_signed(-747514503, 32), to_signed(-748696026, 32),
     to_signed(-749875788, 32), to_signed(-751053785, 32), to_signed(-752230015, 32), to_signed(-753404474, 32),
     to_signed(-754577161, 32), to_signed(-755748072, 32), to_signed(-756917205, 32), to_signed(-758084557, 32));  -- sfix32 [512]

  -- Signals
  SIGNAL Radix22TwdlMapping_cnt           : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_phase         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw  : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Radix22TwdlMapping_twdlAddrMap   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdl45Reg     : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1      : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2      : std_logic;
  SIGNAL Radix22TwdlMapping_holdCycleCnt  : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Radix22TwdlMapping_phaseCnt      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Radix22TwdlMapping_cnt_next      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_phase_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1_next : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw_next : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Radix22TwdlMapping_twdlAddrMap_next : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdl45Reg_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2_next : std_logic;
  SIGNAL Radix22TwdlMapping_holdCycleCnt_next : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Radix22TwdlMapping_phaseCnt_next : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL twdlAddr                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL twdlAddrVld                      : std_logic;
  SIGNAL twdlOctant                       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45                           : std_logic;
  SIGNAL twiddleS_re                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twiddleReg_re                    : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twiddleS_im                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twiddleReg_im                    : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twdlOctantReg                    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45Reg                        : std_logic;

BEGIN
  -- Radix22TwdlMapping
  Radix22TwdlMapping_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22TwdlMapping_octantReg1 <= to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdlAddr_raw <= to_unsigned(16#000#, 12);
        Radix22TwdlMapping_twdlAddrMap <= to_unsigned(16#000#, 9);
        Radix22TwdlMapping_twdl45Reg <= '0';
        Radix22TwdlMapping_dvldReg1 <= '0';
        Radix22TwdlMapping_dvldReg2 <= '0';
        Radix22TwdlMapping_cnt <= to_unsigned(16#0#, 2);
        Radix22TwdlMapping_holdCycleCnt <= to_unsigned(16#000#, 10);
        Radix22TwdlMapping_phase <= to_unsigned(16#0#, 2);
        Radix22TwdlMapping_phaseCnt <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Radix22TwdlMapping_cnt <= Radix22TwdlMapping_cnt_next;
        Radix22TwdlMapping_phase <= Radix22TwdlMapping_phase_next;
        Radix22TwdlMapping_octantReg1 <= Radix22TwdlMapping_octantReg1_next;
        Radix22TwdlMapping_twdlAddr_raw <= Radix22TwdlMapping_twdlAddr_raw_next;
        Radix22TwdlMapping_twdlAddrMap <= Radix22TwdlMapping_twdlAddrMap_next;
        Radix22TwdlMapping_twdl45Reg <= Radix22TwdlMapping_twdl45Reg_next;
        Radix22TwdlMapping_dvldReg1 <= Radix22TwdlMapping_dvldReg1_next;
        Radix22TwdlMapping_dvldReg2 <= Radix22TwdlMapping_dvldReg2_next;
        Radix22TwdlMapping_holdCycleCnt <= Radix22TwdlMapping_holdCycleCnt_next;
        Radix22TwdlMapping_phaseCnt <= Radix22TwdlMapping_phaseCnt_next;
      END IF;
    END IF;
  END PROCESS Radix22TwdlMapping_process;

  Radix22TwdlMapping_output : PROCESS (Radix22TwdlMapping_cnt, Radix22TwdlMapping_dvldReg1,
       Radix22TwdlMapping_dvldReg2, Radix22TwdlMapping_holdCycleCnt,
       Radix22TwdlMapping_octantReg1, Radix22TwdlMapping_phase,
       Radix22TwdlMapping_phaseCnt, Radix22TwdlMapping_twdl45Reg,
       Radix22TwdlMapping_twdlAddrMap, Radix22TwdlMapping_twdlAddr_raw,
       dout_10_1_vld)
    VARIABLE octant : unsigned(2 DOWNTO 0);
    VARIABLE cnt_bitReverse : unsigned(9 DOWNTO 0);
    VARIABLE addr_cast : unsigned(11 DOWNTO 0);
    VARIABLE c : unsigned(9 DOWNTO 0);
    VARIABLE sub_temp : signed(25 DOWNTO 0);
    VARIABLE sub_temp_0 : signed(13 DOWNTO 0);
    VARIABLE sub_temp_1 : signed(13 DOWNTO 0);
    VARIABLE sub_temp_2 : signed(25 DOWNTO 0);
    VARIABLE sub_temp_3 : signed(25 DOWNTO 0);
  BEGIN
    sub_temp := to_signed(16#0000000#, 26);
    sub_temp_0 := to_signed(16#0000#, 14);
    sub_temp_1 := to_signed(16#0000#, 14);
    sub_temp_2 := to_signed(16#0000000#, 26);
    sub_temp_3 := to_signed(16#0000000#, 26);
    addr_cast := to_unsigned(16#000#, 12);
    Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt;
    Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase;
    Radix22TwdlMapping_holdCycleCnt_next <= Radix22TwdlMapping_holdCycleCnt;
    Radix22TwdlMapping_phaseCnt_next <= Radix22TwdlMapping_phaseCnt;
    Radix22TwdlMapping_dvldReg2_next <= Radix22TwdlMapping_dvldReg1;
    Radix22TwdlMapping_dvldReg1_next <= dout_10_1_vld;
    CASE Radix22TwdlMapping_twdlAddr_raw IS
      WHEN "001000000000" =>
        octant := to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "010000000000" =>
        octant := to_unsigned(16#1#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "011000000000" =>
        octant := to_unsigned(16#2#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "100000000000" =>
        octant := to_unsigned(16#3#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "101000000000" =>
        octant := to_unsigned(16#4#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN OTHERS => 
        octant := Radix22TwdlMapping_twdlAddr_raw(11 DOWNTO 9);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
    END CASE;
    Radix22TwdlMapping_octantReg1_next <= octant;
    CASE octant IS
      WHEN "000" =>
        Radix22TwdlMapping_twdlAddrMap_next <= Radix22TwdlMapping_twdlAddr_raw(8 DOWNTO 0);
      WHEN "001" =>
        sub_temp_0 := to_signed(16#0400#, 14) - signed(resize(Radix22TwdlMapping_twdlAddr_raw, 14));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_0(8 DOWNTO 0));
      WHEN "010" =>
        sub_temp_1 := signed(resize(Radix22TwdlMapping_twdlAddr_raw, 14)) - to_signed(16#0400#, 14);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_1(8 DOWNTO 0));
      WHEN "011" =>
        sub_temp_2 := to_signed(16#0100000#, 26) - signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_2(17 DOWNTO 9));
      WHEN "100" =>
        sub_temp_3 := signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26)) - to_signed(16#0100000#, 26);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_3(17 DOWNTO 9));
      WHEN OTHERS => 
        sub_temp := to_signed(16#0180000#, 26) - signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp(17 DOWNTO 9));
    END CASE;
    cnt_bitReverse := resize(unsigned'(Radix22TwdlMapping_cnt(0) & Radix22TwdlMapping_cnt(1)), 10);
    c := cnt_bitReverse sll 8;
    IF Radix22TwdlMapping_phase = to_unsigned(16#0#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= to_unsigned(16#000#, 12);
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#1#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(cnt_bitReverse sll 8, 12);
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#2#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(c, 12) sll 1;
    ELSE 
      addr_cast := resize(c, 12);
      Radix22TwdlMapping_twdlAddr_raw_next <= (addr_cast sll 1) + addr_cast;
    END IF;
    IF dout_10_1_vld = '1' AND (Radix22TwdlMapping_phaseCnt = to_unsigned(16#FF#, 8)) THEN 
      Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase + to_unsigned(16#1#, 2);
    END IF;
    IF dout_10_1_vld = '1' THEN 
      IF Radix22TwdlMapping_holdCycleCnt = to_unsigned(16#3FF#, 10) THEN 
        Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt + to_unsigned(16#1#, 2);
      END IF;
      Radix22TwdlMapping_holdCycleCnt_next <= Radix22TwdlMapping_holdCycleCnt + to_unsigned(16#001#, 10);
      IF Radix22TwdlMapping_phaseCnt = to_unsigned(16#FF#, 8) THEN 
        Radix22TwdlMapping_phaseCnt_next <= to_unsigned(16#00#, 8);
      ELSE 
        Radix22TwdlMapping_phaseCnt_next <= Radix22TwdlMapping_phaseCnt + to_unsigned(16#01#, 8);
      END IF;
    END IF;
    twdlAddr <= Radix22TwdlMapping_twdlAddrMap;
    twdlAddrVld <= Radix22TwdlMapping_dvldReg2;
    twdlOctant <= Radix22TwdlMapping_octantReg1;
    twdl45 <= Radix22TwdlMapping_twdl45Reg;
  END PROCESS Radix22TwdlMapping_output;


  -- Twiddle ROM1
  twiddleS_re <= Twiddle_re_table_data(to_integer(twdlAddr));

  TWIDDLEROM_RE_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twiddleReg_re <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        twiddleReg_re <= twiddleS_re;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_RE_process;


  -- Twiddle ROM2
  twiddleS_im <= Twiddle_im_table_data(to_integer(twdlAddr));

  TWIDDLEROM_IM_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twiddleReg_im <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        twiddleReg_im <= twiddleS_im;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_IM_process;


  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdlOctantReg <= to_unsigned(16#0#, 3);
      ELSIF enb = '1' THEN
        twdlOctantReg <= twdlOctant;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl45Reg <= '0';
      ELSIF enb = '1' THEN
        twdl45Reg <= twdl45;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  -- Radix22TwdlOctCorr
  Radix22TwdlOctCorr_output : PROCESS (twdl45Reg, twdlOctantReg, twiddleReg_im, twiddleReg_re)
    VARIABLE twdlIn_re : signed(31 DOWNTO 0);
    VARIABLE twdlIn_im : signed(31 DOWNTO 0);
    VARIABLE cast : signed(32 DOWNTO 0);
    VARIABLE cast_0 : signed(32 DOWNTO 0);
    VARIABLE cast_1 : signed(32 DOWNTO 0);
    VARIABLE cast_2 : signed(32 DOWNTO 0);
    VARIABLE cast_3 : signed(32 DOWNTO 0);
    VARIABLE cast_4 : signed(32 DOWNTO 0);
  BEGIN
    cast := to_signed(0, 33);
    cast_0 := to_signed(0, 33);
    cast_1 := to_signed(0, 33);
    cast_2 := to_signed(0, 33);
    cast_3 := to_signed(0, 33);
    cast_4 := to_signed(0, 33);
    twdlIn_re := twiddleReg_re;
    twdlIn_im := twiddleReg_im;
    IF twdl45Reg = '1' THEN 
      CASE twdlOctantReg IS
        WHEN "000" =>
          twdlIn_re := to_signed(759250125, 32);
          twdlIn_im := to_signed(-759250125, 32);
        WHEN "010" =>
          twdlIn_re := to_signed(-759250125, 32);
          twdlIn_im := to_signed(-759250125, 32);
        WHEN "100" =>
          twdlIn_re := to_signed(-759250125, 32);
          twdlIn_im := to_signed(759250125, 32);
        WHEN OTHERS => 
          twdlIn_re := to_signed(759250125, 32);
          twdlIn_im := to_signed(-759250125, 32);
      END CASE;
    ELSE 
      CASE twdlOctantReg IS
        WHEN "000" =>
          NULL;
        WHEN "001" =>
          cast :=  - (resize(twiddleReg_im, 33));
          twdlIn_re := cast(31 DOWNTO 0);
          cast_2 :=  - (resize(twiddleReg_re, 33));
          twdlIn_im := cast_2(31 DOWNTO 0);
        WHEN "010" =>
          twdlIn_re := twiddleReg_im;
          cast_3 :=  - (resize(twiddleReg_re, 33));
          twdlIn_im := cast_3(31 DOWNTO 0);
        WHEN "011" =>
          cast_0 :=  - (resize(twiddleReg_re, 33));
          twdlIn_re := cast_0(31 DOWNTO 0);
          twdlIn_im := twiddleReg_im;
        WHEN "100" =>
          cast_1 :=  - (resize(twiddleReg_re, 33));
          twdlIn_re := cast_1(31 DOWNTO 0);
          cast_4 :=  - (resize(twiddleReg_im, 33));
          twdlIn_im := cast_4(31 DOWNTO 0);
        WHEN OTHERS => 
          twdlIn_re := twiddleReg_im;
          twdlIn_im := twiddleReg_re;
      END CASE;
    END IF;
    twdl_11_1_re <= twdlIn_re;
    twdl_11_1_im <= twdlIn_im;
  END PROCESS Radix22TwdlOctCorr_output;


END rtl;


-- End of TWDLROM_11_1_block1.vhd --

-- Start of TWDLROM_3_1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\TWDLROM_3_1.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: TWDLROM_3_1
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/TWDLROM_3_1
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY TWDLROM_3_1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_2_1_vld                      :   IN    std_logic;
        twdl_3_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16_En14
        twdl_3_1_im                       :   OUT   signed(15 DOWNTO 0)  -- sfix16_En14
        );
END TWDLROM_3_1;


ARCHITECTURE rtl OF TWDLROM_3_1 IS

  -- Constants
  CONSTANT Twiddle_re_table_data          : vector_of_signed16(0 TO 511) := 
    (to_signed(16#4000#, 16), to_signed(16#4000#, 16), to_signed(16#4000#, 16), to_signed(16#4000#, 16),
     to_signed(16#4000#, 16), to_signed(16#4000#, 16), to_signed(16#3FFF#, 16), to_signed(16#3FFF#, 16),
     to_signed(16#3FFF#, 16), to_signed(16#3FFE#, 16), to_signed(16#3FFE#, 16), to_signed(16#3FFE#, 16),
     to_signed(16#3FFD#, 16), to_signed(16#3FFD#, 16), to_signed(16#3FFC#, 16), to_signed(16#3FFC#, 16),
     to_signed(16#3FFB#, 16), to_signed(16#3FFA#, 16), to_signed(16#3FFA#, 16), to_signed(16#3FF9#, 16),
     to_signed(16#3FF8#, 16), to_signed(16#3FF7#, 16), to_signed(16#3FF7#, 16), to_signed(16#3FF6#, 16),
     to_signed(16#3FF5#, 16), to_signed(16#3FF4#, 16), to_signed(16#3FF3#, 16), to_signed(16#3FF2#, 16),
     to_signed(16#3FF1#, 16), to_signed(16#3FF0#, 16), to_signed(16#3FEF#, 16), to_signed(16#3FED#, 16),
     to_signed(16#3FEC#, 16), to_signed(16#3FEB#, 16), to_signed(16#3FEA#, 16), to_signed(16#3FE8#, 16),
     to_signed(16#3FE7#, 16), to_signed(16#3FE6#, 16), to_signed(16#3FE4#, 16), to_signed(16#3FE3#, 16),
     to_signed(16#3FE1#, 16), to_signed(16#3FE0#, 16), to_signed(16#3FDE#, 16), to_signed(16#3FDC#, 16),
     to_signed(16#3FDB#, 16), to_signed(16#3FD9#, 16), to_signed(16#3FD7#, 16), to_signed(16#3FD5#, 16),
     to_signed(16#3FD4#, 16), to_signed(16#3FD2#, 16), to_signed(16#3FD0#, 16), to_signed(16#3FCE#, 16),
     to_signed(16#3FCC#, 16), to_signed(16#3FCA#, 16), to_signed(16#3FC8#, 16), to_signed(16#3FC6#, 16),
     to_signed(16#3FC4#, 16), to_signed(16#3FC1#, 16), to_signed(16#3FBF#, 16), to_signed(16#3FBD#, 16),
     to_signed(16#3FBB#, 16), to_signed(16#3FB8#, 16), to_signed(16#3FB6#, 16), to_signed(16#3FB4#, 16),
     to_signed(16#3FB1#, 16), to_signed(16#3FAF#, 16), to_signed(16#3FAC#, 16), to_signed(16#3FAA#, 16),
     to_signed(16#3FA7#, 16), to_signed(16#3FA4#, 16), to_signed(16#3FA2#, 16), to_signed(16#3F9F#, 16),
     to_signed(16#3F9C#, 16), to_signed(16#3F99#, 16), to_signed(16#3F97#, 16), to_signed(16#3F94#, 16),
     to_signed(16#3F91#, 16), to_signed(16#3F8E#, 16), to_signed(16#3F8B#, 16), to_signed(16#3F88#, 16),
     to_signed(16#3F85#, 16), to_signed(16#3F82#, 16), to_signed(16#3F7F#, 16), to_signed(16#3F7B#, 16),
     to_signed(16#3F78#, 16), to_signed(16#3F75#, 16), to_signed(16#3F72#, 16), to_signed(16#3F6E#, 16),
     to_signed(16#3F6B#, 16), to_signed(16#3F68#, 16), to_signed(16#3F64#, 16), to_signed(16#3F61#, 16),
     to_signed(16#3F5D#, 16), to_signed(16#3F5A#, 16), to_signed(16#3F56#, 16), to_signed(16#3F52#, 16),
     to_signed(16#3F4F#, 16), to_signed(16#3F4B#, 16), to_signed(16#3F47#, 16), to_signed(16#3F43#, 16),
     to_signed(16#3F40#, 16), to_signed(16#3F3C#, 16), to_signed(16#3F38#, 16), to_signed(16#3F34#, 16),
     to_signed(16#3F30#, 16), to_signed(16#3F2C#, 16), to_signed(16#3F28#, 16), to_signed(16#3F24#, 16),
     to_signed(16#3F20#, 16), to_signed(16#3F1C#, 16), to_signed(16#3F17#, 16), to_signed(16#3F13#, 16),
     to_signed(16#3F0F#, 16), to_signed(16#3F0A#, 16), to_signed(16#3F06#, 16), to_signed(16#3F02#, 16),
     to_signed(16#3EFD#, 16), to_signed(16#3EF9#, 16), to_signed(16#3EF4#, 16), to_signed(16#3EF0#, 16),
     to_signed(16#3EEB#, 16), to_signed(16#3EE7#, 16), to_signed(16#3EE2#, 16), to_signed(16#3EDD#, 16),
     to_signed(16#3ED8#, 16), to_signed(16#3ED4#, 16), to_signed(16#3ECF#, 16), to_signed(16#3ECA#, 16),
     to_signed(16#3EC5#, 16), to_signed(16#3EC0#, 16), to_signed(16#3EBB#, 16), to_signed(16#3EB6#, 16),
     to_signed(16#3EB1#, 16), to_signed(16#3EAC#, 16), to_signed(16#3EA7#, 16), to_signed(16#3EA2#, 16),
     to_signed(16#3E9D#, 16), to_signed(16#3E98#, 16), to_signed(16#3E92#, 16), to_signed(16#3E8D#, 16),
     to_signed(16#3E88#, 16), to_signed(16#3E82#, 16), to_signed(16#3E7D#, 16), to_signed(16#3E77#, 16),
     to_signed(16#3E72#, 16), to_signed(16#3E6C#, 16), to_signed(16#3E67#, 16), to_signed(16#3E61#, 16),
     to_signed(16#3E5C#, 16), to_signed(16#3E56#, 16), to_signed(16#3E50#, 16), to_signed(16#3E4A#, 16),
     to_signed(16#3E45#, 16), to_signed(16#3E3F#, 16), to_signed(16#3E39#, 16), to_signed(16#3E33#, 16),
     to_signed(16#3E2D#, 16), to_signed(16#3E27#, 16), to_signed(16#3E21#, 16), to_signed(16#3E1B#, 16),
     to_signed(16#3E15#, 16), to_signed(16#3E0F#, 16), to_signed(16#3E09#, 16), to_signed(16#3E03#, 16),
     to_signed(16#3DFC#, 16), to_signed(16#3DF6#, 16), to_signed(16#3DF0#, 16), to_signed(16#3DE9#, 16),
     to_signed(16#3DE3#, 16), to_signed(16#3DDD#, 16), to_signed(16#3DD6#, 16), to_signed(16#3DD0#, 16),
     to_signed(16#3DC9#, 16), to_signed(16#3DC2#, 16), to_signed(16#3DBC#, 16), to_signed(16#3DB5#, 16),
     to_signed(16#3DAF#, 16), to_signed(16#3DA8#, 16), to_signed(16#3DA1#, 16), to_signed(16#3D9A#, 16),
     to_signed(16#3D93#, 16), to_signed(16#3D8D#, 16), to_signed(16#3D86#, 16), to_signed(16#3D7F#, 16),
     to_signed(16#3D78#, 16), to_signed(16#3D71#, 16), to_signed(16#3D6A#, 16), to_signed(16#3D63#, 16),
     to_signed(16#3D5B#, 16), to_signed(16#3D54#, 16), to_signed(16#3D4D#, 16), to_signed(16#3D46#, 16),
     to_signed(16#3D3F#, 16), to_signed(16#3D37#, 16), to_signed(16#3D30#, 16), to_signed(16#3D28#, 16),
     to_signed(16#3D21#, 16), to_signed(16#3D1A#, 16), to_signed(16#3D12#, 16), to_signed(16#3D0B#, 16),
     to_signed(16#3D03#, 16), to_signed(16#3CFB#, 16), to_signed(16#3CF4#, 16), to_signed(16#3CEC#, 16),
     to_signed(16#3CE4#, 16), to_signed(16#3CDD#, 16), to_signed(16#3CD5#, 16), to_signed(16#3CCD#, 16),
     to_signed(16#3CC5#, 16), to_signed(16#3CBD#, 16), to_signed(16#3CB5#, 16), to_signed(16#3CAD#, 16),
     to_signed(16#3CA5#, 16), to_signed(16#3C9D#, 16), to_signed(16#3C95#, 16), to_signed(16#3C8D#, 16),
     to_signed(16#3C85#, 16), to_signed(16#3C7D#, 16), to_signed(16#3C74#, 16), to_signed(16#3C6C#, 16),
     to_signed(16#3C64#, 16), to_signed(16#3C5B#, 16), to_signed(16#3C53#, 16), to_signed(16#3C4B#, 16),
     to_signed(16#3C42#, 16), to_signed(16#3C3A#, 16), to_signed(16#3C31#, 16), to_signed(16#3C29#, 16),
     to_signed(16#3C20#, 16), to_signed(16#3C17#, 16), to_signed(16#3C0F#, 16), to_signed(16#3C06#, 16),
     to_signed(16#3BFD#, 16), to_signed(16#3BF5#, 16), to_signed(16#3BEC#, 16), to_signed(16#3BE3#, 16),
     to_signed(16#3BDA#, 16), to_signed(16#3BD1#, 16), to_signed(16#3BC8#, 16), to_signed(16#3BBF#, 16),
     to_signed(16#3BB6#, 16), to_signed(16#3BAD#, 16), to_signed(16#3BA4#, 16), to_signed(16#3B9B#, 16),
     to_signed(16#3B92#, 16), to_signed(16#3B88#, 16), to_signed(16#3B7F#, 16), to_signed(16#3B76#, 16),
     to_signed(16#3B6D#, 16), to_signed(16#3B63#, 16), to_signed(16#3B5A#, 16), to_signed(16#3B50#, 16),
     to_signed(16#3B47#, 16), to_signed(16#3B3E#, 16), to_signed(16#3B34#, 16), to_signed(16#3B2A#, 16),
     to_signed(16#3B21#, 16), to_signed(16#3B17#, 16), to_signed(16#3B0E#, 16), to_signed(16#3B04#, 16),
     to_signed(16#3AFA#, 16), to_signed(16#3AF0#, 16), to_signed(16#3AE6#, 16), to_signed(16#3ADD#, 16),
     to_signed(16#3AD3#, 16), to_signed(16#3AC9#, 16), to_signed(16#3ABF#, 16), to_signed(16#3AB5#, 16),
     to_signed(16#3AAB#, 16), to_signed(16#3AA1#, 16), to_signed(16#3A97#, 16), to_signed(16#3A8D#, 16),
     to_signed(16#3A82#, 16), to_signed(16#3A78#, 16), to_signed(16#3A6E#, 16), to_signed(16#3A64#, 16),
     to_signed(16#3A59#, 16), to_signed(16#3A4F#, 16), to_signed(16#3A45#, 16), to_signed(16#3A3A#, 16),
     to_signed(16#3A30#, 16), to_signed(16#3A25#, 16), to_signed(16#3A1B#, 16), to_signed(16#3A10#, 16),
     to_signed(16#3A06#, 16), to_signed(16#39FB#, 16), to_signed(16#39F0#, 16), to_signed(16#39E6#, 16),
     to_signed(16#39DB#, 16), to_signed(16#39D0#, 16), to_signed(16#39C5#, 16), to_signed(16#39BB#, 16),
     to_signed(16#39B0#, 16), to_signed(16#39A5#, 16), to_signed(16#399A#, 16), to_signed(16#398F#, 16),
     to_signed(16#3984#, 16), to_signed(16#3979#, 16), to_signed(16#396E#, 16), to_signed(16#3963#, 16),
     to_signed(16#3958#, 16), to_signed(16#394C#, 16), to_signed(16#3941#, 16), to_signed(16#3936#, 16),
     to_signed(16#392B#, 16), to_signed(16#391F#, 16), to_signed(16#3914#, 16), to_signed(16#3909#, 16),
     to_signed(16#38FD#, 16), to_signed(16#38F2#, 16), to_signed(16#38E6#, 16), to_signed(16#38DB#, 16),
     to_signed(16#38CF#, 16), to_signed(16#38C3#, 16), to_signed(16#38B8#, 16), to_signed(16#38AC#, 16),
     to_signed(16#38A1#, 16), to_signed(16#3895#, 16), to_signed(16#3889#, 16), to_signed(16#387D#, 16),
     to_signed(16#3871#, 16), to_signed(16#3866#, 16), to_signed(16#385A#, 16), to_signed(16#384E#, 16),
     to_signed(16#3842#, 16), to_signed(16#3836#, 16), to_signed(16#382A#, 16), to_signed(16#381E#, 16),
     to_signed(16#3812#, 16), to_signed(16#3805#, 16), to_signed(16#37F9#, 16), to_signed(16#37ED#, 16),
     to_signed(16#37E1#, 16), to_signed(16#37D5#, 16), to_signed(16#37C8#, 16), to_signed(16#37BC#, 16),
     to_signed(16#37B0#, 16), to_signed(16#37A3#, 16), to_signed(16#3797#, 16), to_signed(16#378A#, 16),
     to_signed(16#377E#, 16), to_signed(16#3771#, 16), to_signed(16#3765#, 16), to_signed(16#3758#, 16),
     to_signed(16#374B#, 16), to_signed(16#373F#, 16), to_signed(16#3732#, 16), to_signed(16#3725#, 16),
     to_signed(16#3718#, 16), to_signed(16#370C#, 16), to_signed(16#36FF#, 16), to_signed(16#36F2#, 16),
     to_signed(16#36E5#, 16), to_signed(16#36D8#, 16), to_signed(16#36CB#, 16), to_signed(16#36BE#, 16),
     to_signed(16#36B1#, 16), to_signed(16#36A4#, 16), to_signed(16#3697#, 16), to_signed(16#368A#, 16),
     to_signed(16#367D#, 16), to_signed(16#366F#, 16), to_signed(16#3662#, 16), to_signed(16#3655#, 16),
     to_signed(16#3648#, 16), to_signed(16#363A#, 16), to_signed(16#362D#, 16), to_signed(16#3620#, 16),
     to_signed(16#3612#, 16), to_signed(16#3605#, 16), to_signed(16#35F7#, 16), to_signed(16#35EA#, 16),
     to_signed(16#35DC#, 16), to_signed(16#35CE#, 16), to_signed(16#35C1#, 16), to_signed(16#35B3#, 16),
     to_signed(16#35A5#, 16), to_signed(16#3598#, 16), to_signed(16#358A#, 16), to_signed(16#357C#, 16),
     to_signed(16#356E#, 16), to_signed(16#3561#, 16), to_signed(16#3553#, 16), to_signed(16#3545#, 16),
     to_signed(16#3537#, 16), to_signed(16#3529#, 16), to_signed(16#351B#, 16), to_signed(16#350D#, 16),
     to_signed(16#34FF#, 16), to_signed(16#34F1#, 16), to_signed(16#34E2#, 16), to_signed(16#34D4#, 16),
     to_signed(16#34C6#, 16), to_signed(16#34B8#, 16), to_signed(16#34AA#, 16), to_signed(16#349B#, 16),
     to_signed(16#348D#, 16), to_signed(16#347F#, 16), to_signed(16#3470#, 16), to_signed(16#3462#, 16),
     to_signed(16#3453#, 16), to_signed(16#3445#, 16), to_signed(16#3436#, 16), to_signed(16#3428#, 16),
     to_signed(16#3419#, 16), to_signed(16#340B#, 16), to_signed(16#33FC#, 16), to_signed(16#33ED#, 16),
     to_signed(16#33DF#, 16), to_signed(16#33D0#, 16), to_signed(16#33C1#, 16), to_signed(16#33B2#, 16),
     to_signed(16#33A3#, 16), to_signed(16#3395#, 16), to_signed(16#3386#, 16), to_signed(16#3377#, 16),
     to_signed(16#3368#, 16), to_signed(16#3359#, 16), to_signed(16#334A#, 16), to_signed(16#333B#, 16),
     to_signed(16#332C#, 16), to_signed(16#331D#, 16), to_signed(16#330D#, 16), to_signed(16#32FE#, 16),
     to_signed(16#32EF#, 16), to_signed(16#32E0#, 16), to_signed(16#32D0#, 16), to_signed(16#32C1#, 16),
     to_signed(16#32B2#, 16), to_signed(16#32A3#, 16), to_signed(16#3293#, 16), to_signed(16#3284#, 16),
     to_signed(16#3274#, 16), to_signed(16#3265#, 16), to_signed(16#3255#, 16), to_signed(16#3246#, 16),
     to_signed(16#3236#, 16), to_signed(16#3227#, 16), to_signed(16#3217#, 16), to_signed(16#3207#, 16),
     to_signed(16#31F8#, 16), to_signed(16#31E8#, 16), to_signed(16#31D8#, 16), to_signed(16#31C8#, 16),
     to_signed(16#31B9#, 16), to_signed(16#31A9#, 16), to_signed(16#3199#, 16), to_signed(16#3189#, 16),
     to_signed(16#3179#, 16), to_signed(16#3169#, 16), to_signed(16#3159#, 16), to_signed(16#3149#, 16),
     to_signed(16#3139#, 16), to_signed(16#3129#, 16), to_signed(16#3119#, 16), to_signed(16#3109#, 16),
     to_signed(16#30F9#, 16), to_signed(16#30E8#, 16), to_signed(16#30D8#, 16), to_signed(16#30C8#, 16),
     to_signed(16#30B8#, 16), to_signed(16#30A7#, 16), to_signed(16#3097#, 16), to_signed(16#3087#, 16),
     to_signed(16#3076#, 16), to_signed(16#3066#, 16), to_signed(16#3055#, 16), to_signed(16#3045#, 16),
     to_signed(16#3034#, 16), to_signed(16#3024#, 16), to_signed(16#3013#, 16), to_signed(16#3002#, 16),
     to_signed(16#2FF2#, 16), to_signed(16#2FE1#, 16), to_signed(16#2FD0#, 16), to_signed(16#2FC0#, 16),
     to_signed(16#2FAF#, 16), to_signed(16#2F9E#, 16), to_signed(16#2F8D#, 16), to_signed(16#2F7D#, 16),
     to_signed(16#2F6C#, 16), to_signed(16#2F5B#, 16), to_signed(16#2F4A#, 16), to_signed(16#2F39#, 16),
     to_signed(16#2F28#, 16), to_signed(16#2F17#, 16), to_signed(16#2F06#, 16), to_signed(16#2EF5#, 16),
     to_signed(16#2EE4#, 16), to_signed(16#2ED3#, 16), to_signed(16#2EC2#, 16), to_signed(16#2EB0#, 16),
     to_signed(16#2E9F#, 16), to_signed(16#2E8E#, 16), to_signed(16#2E7D#, 16), to_signed(16#2E6B#, 16),
     to_signed(16#2E5A#, 16), to_signed(16#2E49#, 16), to_signed(16#2E37#, 16), to_signed(16#2E26#, 16),
     to_signed(16#2E15#, 16), to_signed(16#2E03#, 16), to_signed(16#2DF2#, 16), to_signed(16#2DE0#, 16),
     to_signed(16#2DCF#, 16), to_signed(16#2DBD#, 16), to_signed(16#2DAB#, 16), to_signed(16#2D9A#, 16),
     to_signed(16#2D88#, 16), to_signed(16#2D76#, 16), to_signed(16#2D65#, 16), to_signed(16#2D53#, 16));  -- sfix16 [512]
  CONSTANT Twiddle_im_table_data          : vector_of_signed16(0 TO 511) := 
    (to_signed(16#0000#, 16), to_signed(-16#0019#, 16), to_signed(-16#0032#, 16), to_signed(-16#004B#, 16),
     to_signed(-16#0065#, 16), to_signed(-16#007E#, 16), to_signed(-16#0097#, 16), to_signed(-16#00B0#, 16),
     to_signed(-16#00C9#, 16), to_signed(-16#00E2#, 16), to_signed(-16#00FB#, 16), to_signed(-16#0114#, 16),
     to_signed(-16#012E#, 16), to_signed(-16#0147#, 16), to_signed(-16#0160#, 16), to_signed(-16#0179#, 16),
     to_signed(-16#0192#, 16), to_signed(-16#01AB#, 16), to_signed(-16#01C4#, 16), to_signed(-16#01DD#, 16),
     to_signed(-16#01F7#, 16), to_signed(-16#0210#, 16), to_signed(-16#0229#, 16), to_signed(-16#0242#, 16),
     to_signed(-16#025B#, 16), to_signed(-16#0274#, 16), to_signed(-16#028D#, 16), to_signed(-16#02A6#, 16),
     to_signed(-16#02C0#, 16), to_signed(-16#02D9#, 16), to_signed(-16#02F2#, 16), to_signed(-16#030B#, 16),
     to_signed(-16#0324#, 16), to_signed(-16#033D#, 16), to_signed(-16#0356#, 16), to_signed(-16#036F#, 16),
     to_signed(-16#0388#, 16), to_signed(-16#03A1#, 16), to_signed(-16#03BB#, 16), to_signed(-16#03D4#, 16),
     to_signed(-16#03ED#, 16), to_signed(-16#0406#, 16), to_signed(-16#041F#, 16), to_signed(-16#0438#, 16),
     to_signed(-16#0451#, 16), to_signed(-16#046A#, 16), to_signed(-16#0483#, 16), to_signed(-16#049C#, 16),
     to_signed(-16#04B5#, 16), to_signed(-16#04CE#, 16), to_signed(-16#04E7#, 16), to_signed(-16#0500#, 16),
     to_signed(-16#051A#, 16), to_signed(-16#0533#, 16), to_signed(-16#054C#, 16), to_signed(-16#0565#, 16),
     to_signed(-16#057E#, 16), to_signed(-16#0597#, 16), to_signed(-16#05B0#, 16), to_signed(-16#05C9#, 16),
     to_signed(-16#05E2#, 16), to_signed(-16#05FB#, 16), to_signed(-16#0614#, 16), to_signed(-16#062D#, 16),
     to_signed(-16#0646#, 16), to_signed(-16#065F#, 16), to_signed(-16#0678#, 16), to_signed(-16#0691#, 16),
     to_signed(-16#06AA#, 16), to_signed(-16#06C3#, 16), to_signed(-16#06DC#, 16), to_signed(-16#06F5#, 16),
     to_signed(-16#070E#, 16), to_signed(-16#0727#, 16), to_signed(-16#0740#, 16), to_signed(-16#0759#, 16),
     to_signed(-16#0772#, 16), to_signed(-16#078B#, 16), to_signed(-16#07A4#, 16), to_signed(-16#07BD#, 16),
     to_signed(-16#07D6#, 16), to_signed(-16#07EF#, 16), to_signed(-16#0807#, 16), to_signed(-16#0820#, 16),
     to_signed(-16#0839#, 16), to_signed(-16#0852#, 16), to_signed(-16#086B#, 16), to_signed(-16#0884#, 16),
     to_signed(-16#089D#, 16), to_signed(-16#08B6#, 16), to_signed(-16#08CF#, 16), to_signed(-16#08E8#, 16),
     to_signed(-16#0901#, 16), to_signed(-16#0919#, 16), to_signed(-16#0932#, 16), to_signed(-16#094B#, 16),
     to_signed(-16#0964#, 16), to_signed(-16#097D#, 16), to_signed(-16#0996#, 16), to_signed(-16#09AF#, 16),
     to_signed(-16#09C7#, 16), to_signed(-16#09E0#, 16), to_signed(-16#09F9#, 16), to_signed(-16#0A12#, 16),
     to_signed(-16#0A2B#, 16), to_signed(-16#0A44#, 16), to_signed(-16#0A5C#, 16), to_signed(-16#0A75#, 16),
     to_signed(-16#0A8E#, 16), to_signed(-16#0AA7#, 16), to_signed(-16#0AC0#, 16), to_signed(-16#0AD8#, 16),
     to_signed(-16#0AF1#, 16), to_signed(-16#0B0A#, 16), to_signed(-16#0B23#, 16), to_signed(-16#0B3B#, 16),
     to_signed(-16#0B54#, 16), to_signed(-16#0B6D#, 16), to_signed(-16#0B85#, 16), to_signed(-16#0B9E#, 16),
     to_signed(-16#0BB7#, 16), to_signed(-16#0BD0#, 16), to_signed(-16#0BE8#, 16), to_signed(-16#0C01#, 16),
     to_signed(-16#0C1A#, 16), to_signed(-16#0C32#, 16), to_signed(-16#0C4B#, 16), to_signed(-16#0C64#, 16),
     to_signed(-16#0C7C#, 16), to_signed(-16#0C95#, 16), to_signed(-16#0CAE#, 16), to_signed(-16#0CC6#, 16),
     to_signed(-16#0CDF#, 16), to_signed(-16#0CF8#, 16), to_signed(-16#0D10#, 16), to_signed(-16#0D29#, 16),
     to_signed(-16#0D41#, 16), to_signed(-16#0D5A#, 16), to_signed(-16#0D72#, 16), to_signed(-16#0D8B#, 16),
     to_signed(-16#0DA4#, 16), to_signed(-16#0DBC#, 16), to_signed(-16#0DD5#, 16), to_signed(-16#0DED#, 16),
     to_signed(-16#0E06#, 16), to_signed(-16#0E1E#, 16), to_signed(-16#0E37#, 16), to_signed(-16#0E4F#, 16),
     to_signed(-16#0E68#, 16), to_signed(-16#0E80#, 16), to_signed(-16#0E99#, 16), to_signed(-16#0EB1#, 16),
     to_signed(-16#0ECA#, 16), to_signed(-16#0EE2#, 16), to_signed(-16#0EFB#, 16), to_signed(-16#0F13#, 16),
     to_signed(-16#0F2B#, 16), to_signed(-16#0F44#, 16), to_signed(-16#0F5C#, 16), to_signed(-16#0F75#, 16),
     to_signed(-16#0F8D#, 16), to_signed(-16#0FA5#, 16), to_signed(-16#0FBE#, 16), to_signed(-16#0FD6#, 16),
     to_signed(-16#0FEE#, 16), to_signed(-16#1007#, 16), to_signed(-16#101F#, 16), to_signed(-16#1037#, 16),
     to_signed(-16#1050#, 16), to_signed(-16#1068#, 16), to_signed(-16#1080#, 16), to_signed(-16#1099#, 16),
     to_signed(-16#10B1#, 16), to_signed(-16#10C9#, 16), to_signed(-16#10E1#, 16), to_signed(-16#10FA#, 16),
     to_signed(-16#1112#, 16), to_signed(-16#112A#, 16), to_signed(-16#1142#, 16), to_signed(-16#115A#, 16),
     to_signed(-16#1173#, 16), to_signed(-16#118B#, 16), to_signed(-16#11A3#, 16), to_signed(-16#11BB#, 16),
     to_signed(-16#11D3#, 16), to_signed(-16#11EB#, 16), to_signed(-16#1204#, 16), to_signed(-16#121C#, 16),
     to_signed(-16#1234#, 16), to_signed(-16#124C#, 16), to_signed(-16#1264#, 16), to_signed(-16#127C#, 16),
     to_signed(-16#1294#, 16), to_signed(-16#12AC#, 16), to_signed(-16#12C4#, 16), to_signed(-16#12DC#, 16),
     to_signed(-16#12F4#, 16), to_signed(-16#130C#, 16), to_signed(-16#1324#, 16), to_signed(-16#133C#, 16),
     to_signed(-16#1354#, 16), to_signed(-16#136C#, 16), to_signed(-16#1384#, 16), to_signed(-16#139C#, 16),
     to_signed(-16#13B4#, 16), to_signed(-16#13CC#, 16), to_signed(-16#13E4#, 16), to_signed(-16#13FB#, 16),
     to_signed(-16#1413#, 16), to_signed(-16#142B#, 16), to_signed(-16#1443#, 16), to_signed(-16#145B#, 16),
     to_signed(-16#1473#, 16), to_signed(-16#148B#, 16), to_signed(-16#14A2#, 16), to_signed(-16#14BA#, 16),
     to_signed(-16#14D2#, 16), to_signed(-16#14EA#, 16), to_signed(-16#1501#, 16), to_signed(-16#1519#, 16),
     to_signed(-16#1531#, 16), to_signed(-16#1549#, 16), to_signed(-16#1560#, 16), to_signed(-16#1578#, 16),
     to_signed(-16#1590#, 16), to_signed(-16#15A7#, 16), to_signed(-16#15BF#, 16), to_signed(-16#15D7#, 16),
     to_signed(-16#15EE#, 16), to_signed(-16#1606#, 16), to_signed(-16#161D#, 16), to_signed(-16#1635#, 16),
     to_signed(-16#164C#, 16), to_signed(-16#1664#, 16), to_signed(-16#167C#, 16), to_signed(-16#1693#, 16),
     to_signed(-16#16AB#, 16), to_signed(-16#16C2#, 16), to_signed(-16#16DA#, 16), to_signed(-16#16F1#, 16),
     to_signed(-16#1709#, 16), to_signed(-16#1720#, 16), to_signed(-16#1737#, 16), to_signed(-16#174F#, 16),
     to_signed(-16#1766#, 16), to_signed(-16#177E#, 16), to_signed(-16#1795#, 16), to_signed(-16#17AC#, 16),
     to_signed(-16#17C4#, 16), to_signed(-16#17DB#, 16), to_signed(-16#17F2#, 16), to_signed(-16#180A#, 16),
     to_signed(-16#1821#, 16), to_signed(-16#1838#, 16), to_signed(-16#184F#, 16), to_signed(-16#1867#, 16),
     to_signed(-16#187E#, 16), to_signed(-16#1895#, 16), to_signed(-16#18AC#, 16), to_signed(-16#18C3#, 16),
     to_signed(-16#18DB#, 16), to_signed(-16#18F2#, 16), to_signed(-16#1909#, 16), to_signed(-16#1920#, 16),
     to_signed(-16#1937#, 16), to_signed(-16#194E#, 16), to_signed(-16#1965#, 16), to_signed(-16#197C#, 16),
     to_signed(-16#1993#, 16), to_signed(-16#19AA#, 16), to_signed(-16#19C1#, 16), to_signed(-16#19D8#, 16),
     to_signed(-16#19EF#, 16), to_signed(-16#1A06#, 16), to_signed(-16#1A1D#, 16), to_signed(-16#1A34#, 16),
     to_signed(-16#1A4B#, 16), to_signed(-16#1A62#, 16), to_signed(-16#1A79#, 16), to_signed(-16#1A90#, 16),
     to_signed(-16#1AA7#, 16), to_signed(-16#1ABE#, 16), to_signed(-16#1AD4#, 16), to_signed(-16#1AEB#, 16),
     to_signed(-16#1B02#, 16), to_signed(-16#1B19#, 16), to_signed(-16#1B30#, 16), to_signed(-16#1B46#, 16),
     to_signed(-16#1B5D#, 16), to_signed(-16#1B74#, 16), to_signed(-16#1B8A#, 16), to_signed(-16#1BA1#, 16),
     to_signed(-16#1BB8#, 16), to_signed(-16#1BCE#, 16), to_signed(-16#1BE5#, 16), to_signed(-16#1BFC#, 16),
     to_signed(-16#1C12#, 16), to_signed(-16#1C29#, 16), to_signed(-16#1C3F#, 16), to_signed(-16#1C56#, 16),
     to_signed(-16#1C6C#, 16), to_signed(-16#1C83#, 16), to_signed(-16#1C99#, 16), to_signed(-16#1CB0#, 16),
     to_signed(-16#1CC6#, 16), to_signed(-16#1CDD#, 16), to_signed(-16#1CF3#, 16), to_signed(-16#1D0A#, 16),
     to_signed(-16#1D20#, 16), to_signed(-16#1D36#, 16), to_signed(-16#1D4D#, 16), to_signed(-16#1D63#, 16),
     to_signed(-16#1D79#, 16), to_signed(-16#1D90#, 16), to_signed(-16#1DA6#, 16), to_signed(-16#1DBC#, 16),
     to_signed(-16#1DD3#, 16), to_signed(-16#1DE9#, 16), to_signed(-16#1DFF#, 16), to_signed(-16#1E15#, 16),
     to_signed(-16#1E2B#, 16), to_signed(-16#1E42#, 16), to_signed(-16#1E58#, 16), to_signed(-16#1E6E#, 16),
     to_signed(-16#1E84#, 16), to_signed(-16#1E9A#, 16), to_signed(-16#1EB0#, 16), to_signed(-16#1EC6#, 16),
     to_signed(-16#1EDC#, 16), to_signed(-16#1EF2#, 16), to_signed(-16#1F08#, 16), to_signed(-16#1F1E#, 16),
     to_signed(-16#1F34#, 16), to_signed(-16#1F4A#, 16), to_signed(-16#1F60#, 16), to_signed(-16#1F76#, 16),
     to_signed(-16#1F8C#, 16), to_signed(-16#1FA2#, 16), to_signed(-16#1FB7#, 16), to_signed(-16#1FCD#, 16),
     to_signed(-16#1FE3#, 16), to_signed(-16#1FF9#, 16), to_signed(-16#200F#, 16), to_signed(-16#2024#, 16),
     to_signed(-16#203A#, 16), to_signed(-16#2050#, 16), to_signed(-16#2065#, 16), to_signed(-16#207B#, 16),
     to_signed(-16#2091#, 16), to_signed(-16#20A6#, 16), to_signed(-16#20BC#, 16), to_signed(-16#20D1#, 16),
     to_signed(-16#20E7#, 16), to_signed(-16#20FD#, 16), to_signed(-16#2112#, 16), to_signed(-16#2128#, 16),
     to_signed(-16#213D#, 16), to_signed(-16#2153#, 16), to_signed(-16#2168#, 16), to_signed(-16#217D#, 16),
     to_signed(-16#2193#, 16), to_signed(-16#21A8#, 16), to_signed(-16#21BE#, 16), to_signed(-16#21D3#, 16),
     to_signed(-16#21E8#, 16), to_signed(-16#21FE#, 16), to_signed(-16#2213#, 16), to_signed(-16#2228#, 16),
     to_signed(-16#223D#, 16), to_signed(-16#2253#, 16), to_signed(-16#2268#, 16), to_signed(-16#227D#, 16),
     to_signed(-16#2292#, 16), to_signed(-16#22A7#, 16), to_signed(-16#22BC#, 16), to_signed(-16#22D2#, 16),
     to_signed(-16#22E7#, 16), to_signed(-16#22FC#, 16), to_signed(-16#2311#, 16), to_signed(-16#2326#, 16),
     to_signed(-16#233B#, 16), to_signed(-16#2350#, 16), to_signed(-16#2365#, 16), to_signed(-16#237A#, 16),
     to_signed(-16#238E#, 16), to_signed(-16#23A3#, 16), to_signed(-16#23B8#, 16), to_signed(-16#23CD#, 16),
     to_signed(-16#23E2#, 16), to_signed(-16#23F7#, 16), to_signed(-16#240B#, 16), to_signed(-16#2420#, 16),
     to_signed(-16#2435#, 16), to_signed(-16#244A#, 16), to_signed(-16#245E#, 16), to_signed(-16#2473#, 16),
     to_signed(-16#2488#, 16), to_signed(-16#249C#, 16), to_signed(-16#24B1#, 16), to_signed(-16#24C5#, 16),
     to_signed(-16#24DA#, 16), to_signed(-16#24EF#, 16), to_signed(-16#2503#, 16), to_signed(-16#2518#, 16),
     to_signed(-16#252C#, 16), to_signed(-16#2541#, 16), to_signed(-16#2555#, 16), to_signed(-16#2569#, 16),
     to_signed(-16#257E#, 16), to_signed(-16#2592#, 16), to_signed(-16#25A6#, 16), to_signed(-16#25BB#, 16),
     to_signed(-16#25CF#, 16), to_signed(-16#25E3#, 16), to_signed(-16#25F8#, 16), to_signed(-16#260C#, 16),
     to_signed(-16#2620#, 16), to_signed(-16#2634#, 16), to_signed(-16#2648#, 16), to_signed(-16#265C#, 16),
     to_signed(-16#2671#, 16), to_signed(-16#2685#, 16), to_signed(-16#2699#, 16), to_signed(-16#26AD#, 16),
     to_signed(-16#26C1#, 16), to_signed(-16#26D5#, 16), to_signed(-16#26E9#, 16), to_signed(-16#26FD#, 16),
     to_signed(-16#2711#, 16), to_signed(-16#2724#, 16), to_signed(-16#2738#, 16), to_signed(-16#274C#, 16),
     to_signed(-16#2760#, 16), to_signed(-16#2774#, 16), to_signed(-16#2788#, 16), to_signed(-16#279B#, 16),
     to_signed(-16#27AF#, 16), to_signed(-16#27C3#, 16), to_signed(-16#27D6#, 16), to_signed(-16#27EA#, 16),
     to_signed(-16#27FE#, 16), to_signed(-16#2811#, 16), to_signed(-16#2825#, 16), to_signed(-16#2838#, 16),
     to_signed(-16#284C#, 16), to_signed(-16#2860#, 16), to_signed(-16#2873#, 16), to_signed(-16#2886#, 16),
     to_signed(-16#289A#, 16), to_signed(-16#28AD#, 16), to_signed(-16#28C1#, 16), to_signed(-16#28D4#, 16),
     to_signed(-16#28E7#, 16), to_signed(-16#28FB#, 16), to_signed(-16#290E#, 16), to_signed(-16#2921#, 16),
     to_signed(-16#2935#, 16), to_signed(-16#2948#, 16), to_signed(-16#295B#, 16), to_signed(-16#296E#, 16),
     to_signed(-16#2981#, 16), to_signed(-16#2994#, 16), to_signed(-16#29A7#, 16), to_signed(-16#29BB#, 16),
     to_signed(-16#29CE#, 16), to_signed(-16#29E1#, 16), to_signed(-16#29F4#, 16), to_signed(-16#2A07#, 16),
     to_signed(-16#2A1A#, 16), to_signed(-16#2A2C#, 16), to_signed(-16#2A3F#, 16), to_signed(-16#2A52#, 16),
     to_signed(-16#2A65#, 16), to_signed(-16#2A78#, 16), to_signed(-16#2A8B#, 16), to_signed(-16#2A9D#, 16),
     to_signed(-16#2AB0#, 16), to_signed(-16#2AC3#, 16), to_signed(-16#2AD6#, 16), to_signed(-16#2AE8#, 16),
     to_signed(-16#2AFB#, 16), to_signed(-16#2B0D#, 16), to_signed(-16#2B20#, 16), to_signed(-16#2B33#, 16),
     to_signed(-16#2B45#, 16), to_signed(-16#2B58#, 16), to_signed(-16#2B6A#, 16), to_signed(-16#2B7D#, 16),
     to_signed(-16#2B8F#, 16), to_signed(-16#2BA1#, 16), to_signed(-16#2BB4#, 16), to_signed(-16#2BC6#, 16),
     to_signed(-16#2BD8#, 16), to_signed(-16#2BEB#, 16), to_signed(-16#2BFD#, 16), to_signed(-16#2C0F#, 16),
     to_signed(-16#2C21#, 16), to_signed(-16#2C34#, 16), to_signed(-16#2C46#, 16), to_signed(-16#2C58#, 16),
     to_signed(-16#2C6A#, 16), to_signed(-16#2C7C#, 16), to_signed(-16#2C8E#, 16), to_signed(-16#2CA0#, 16),
     to_signed(-16#2CB2#, 16), to_signed(-16#2CC4#, 16), to_signed(-16#2CD6#, 16), to_signed(-16#2CE8#, 16),
     to_signed(-16#2CFA#, 16), to_signed(-16#2D0C#, 16), to_signed(-16#2D1E#, 16), to_signed(-16#2D2F#, 16));  -- sfix16 [512]

  -- Signals
  SIGNAL Radix22TwdlMapping_cnt           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Radix22TwdlMapping_phase         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw  : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Radix22TwdlMapping_twdlAddrMap   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdl45Reg     : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1      : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2      : std_logic;
  SIGNAL Radix22TwdlMapping_cnt_next      : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Radix22TwdlMapping_phase_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1_next : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw_next : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Radix22TwdlMapping_twdlAddrMap_next : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdl45Reg_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2_next : std_logic;
  SIGNAL twdlAddr                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL twdlAddrVld                      : std_logic;
  SIGNAL twdlOctant                       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45                           : std_logic;
  SIGNAL twiddleS_re                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twiddleReg_re                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twiddleS_im                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twiddleReg_im                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdlOctantReg                    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45Reg                        : std_logic;

BEGIN
  -- Radix22TwdlMapping
  Radix22TwdlMapping_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22TwdlMapping_octantReg1 <= to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdlAddr_raw <= to_unsigned(16#000#, 12);
        Radix22TwdlMapping_twdlAddrMap <= to_unsigned(16#000#, 9);
        Radix22TwdlMapping_twdl45Reg <= '0';
        Radix22TwdlMapping_dvldReg1 <= '0';
        Radix22TwdlMapping_dvldReg2 <= '0';
        Radix22TwdlMapping_cnt <= to_unsigned(16#000#, 10);
        Radix22TwdlMapping_phase <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        Radix22TwdlMapping_cnt <= Radix22TwdlMapping_cnt_next;
        Radix22TwdlMapping_phase <= Radix22TwdlMapping_phase_next;
        Radix22TwdlMapping_octantReg1 <= Radix22TwdlMapping_octantReg1_next;
        Radix22TwdlMapping_twdlAddr_raw <= Radix22TwdlMapping_twdlAddr_raw_next;
        Radix22TwdlMapping_twdlAddrMap <= Radix22TwdlMapping_twdlAddrMap_next;
        Radix22TwdlMapping_twdl45Reg <= Radix22TwdlMapping_twdl45Reg_next;
        Radix22TwdlMapping_dvldReg1 <= Radix22TwdlMapping_dvldReg1_next;
        Radix22TwdlMapping_dvldReg2 <= Radix22TwdlMapping_dvldReg2_next;
      END IF;
    END IF;
  END PROCESS Radix22TwdlMapping_process;

  Radix22TwdlMapping_output : PROCESS (Radix22TwdlMapping_cnt, Radix22TwdlMapping_dvldReg1,
       Radix22TwdlMapping_dvldReg2, Radix22TwdlMapping_octantReg1,
       Radix22TwdlMapping_phase, Radix22TwdlMapping_twdl45Reg,
       Radix22TwdlMapping_twdlAddrMap, Radix22TwdlMapping_twdlAddr_raw,
       dout_2_1_vld)
    VARIABLE octant : unsigned(2 DOWNTO 0);
    VARIABLE cnt_cast : unsigned(11 DOWNTO 0);
    VARIABLE sub_temp : signed(25 DOWNTO 0);
    VARIABLE sub_temp_0 : signed(13 DOWNTO 0);
    VARIABLE sub_temp_1 : signed(13 DOWNTO 0);
    VARIABLE sub_temp_2 : signed(25 DOWNTO 0);
    VARIABLE sub_temp_3 : signed(25 DOWNTO 0);
  BEGIN
    sub_temp := to_signed(16#0000000#, 26);
    sub_temp_0 := to_signed(16#0000#, 14);
    sub_temp_1 := to_signed(16#0000#, 14);
    sub_temp_2 := to_signed(16#0000000#, 26);
    sub_temp_3 := to_signed(16#0000000#, 26);
    cnt_cast := to_unsigned(16#000#, 12);
    Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt;
    Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase;
    Radix22TwdlMapping_dvldReg2_next <= Radix22TwdlMapping_dvldReg1;
    Radix22TwdlMapping_dvldReg1_next <= dout_2_1_vld;
    CASE Radix22TwdlMapping_twdlAddr_raw IS
      WHEN "001000000000" =>
        octant := to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "010000000000" =>
        octant := to_unsigned(16#1#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "011000000000" =>
        octant := to_unsigned(16#2#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "100000000000" =>
        octant := to_unsigned(16#3#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "101000000000" =>
        octant := to_unsigned(16#4#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN OTHERS => 
        octant := Radix22TwdlMapping_twdlAddr_raw(11 DOWNTO 9);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
    END CASE;
    Radix22TwdlMapping_octantReg1_next <= octant;
    CASE octant IS
      WHEN "000" =>
        Radix22TwdlMapping_twdlAddrMap_next <= Radix22TwdlMapping_twdlAddr_raw(8 DOWNTO 0);
      WHEN "001" =>
        sub_temp_0 := to_signed(16#0400#, 14) - signed(resize(Radix22TwdlMapping_twdlAddr_raw, 14));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_0(8 DOWNTO 0));
      WHEN "010" =>
        sub_temp_1 := signed(resize(Radix22TwdlMapping_twdlAddr_raw, 14)) - to_signed(16#0400#, 14);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_1(8 DOWNTO 0));
      WHEN "011" =>
        sub_temp_2 := to_signed(16#0100000#, 26) - signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_2(17 DOWNTO 9));
      WHEN "100" =>
        sub_temp_3 := signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26)) - to_signed(16#0100000#, 26);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_3(17 DOWNTO 9));
      WHEN OTHERS => 
        sub_temp := to_signed(16#0180000#, 26) - signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp(17 DOWNTO 9));
    END CASE;
    IF Radix22TwdlMapping_phase = to_unsigned(16#0#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= to_unsigned(16#000#, 12);
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#1#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(Radix22TwdlMapping_cnt, 12) sll 1;
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#2#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(Radix22TwdlMapping_cnt, 12);
    ELSE 
      cnt_cast := resize(Radix22TwdlMapping_cnt, 12);
      Radix22TwdlMapping_twdlAddr_raw_next <= (cnt_cast sll 1) + cnt_cast;
    END IF;
    IF dout_2_1_vld = '1' AND (Radix22TwdlMapping_cnt > to_unsigned(16#3FE#, 10)) THEN 
      Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase + to_unsigned(16#1#, 2);
    END IF;
    IF dout_2_1_vld = '1' THEN 
      Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt + to_unsigned(16#001#, 10);
    END IF;
    twdlAddr <= Radix22TwdlMapping_twdlAddrMap;
    twdlAddrVld <= Radix22TwdlMapping_dvldReg2;
    twdlOctant <= Radix22TwdlMapping_octantReg1;
    twdl45 <= Radix22TwdlMapping_twdl45Reg;
  END PROCESS Radix22TwdlMapping_output;


  -- Twiddle ROM1
  twiddleS_re <= Twiddle_re_table_data(to_integer(twdlAddr));

  TWIDDLEROM_RE_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twiddleReg_re <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twiddleReg_re <= twiddleS_re;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_RE_process;


  -- Twiddle ROM2
  twiddleS_im <= Twiddle_im_table_data(to_integer(twdlAddr));

  TWIDDLEROM_IM_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twiddleReg_im <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twiddleReg_im <= twiddleS_im;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_IM_process;


  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdlOctantReg <= to_unsigned(16#0#, 3);
      ELSIF enb = '1' THEN
        twdlOctantReg <= twdlOctant;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl45Reg <= '0';
      ELSIF enb = '1' THEN
        twdl45Reg <= twdl45;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  -- Radix22TwdlOctCorr
  Radix22TwdlOctCorr_output : PROCESS (twdl45Reg, twdlOctantReg, twiddleReg_im, twiddleReg_re)
    VARIABLE twdlIn_re : signed(15 DOWNTO 0);
    VARIABLE twdlIn_im : signed(15 DOWNTO 0);
    VARIABLE cast : signed(16 DOWNTO 0);
    VARIABLE cast_0 : signed(16 DOWNTO 0);
    VARIABLE cast_1 : signed(16 DOWNTO 0);
    VARIABLE cast_2 : signed(16 DOWNTO 0);
    VARIABLE cast_3 : signed(16 DOWNTO 0);
    VARIABLE cast_4 : signed(16 DOWNTO 0);
  BEGIN
    cast := to_signed(16#00000#, 17);
    cast_0 := to_signed(16#00000#, 17);
    cast_1 := to_signed(16#00000#, 17);
    cast_2 := to_signed(16#00000#, 17);
    cast_3 := to_signed(16#00000#, 17);
    cast_4 := to_signed(16#00000#, 17);
    twdlIn_re := twiddleReg_re;
    twdlIn_im := twiddleReg_im;
    IF twdl45Reg = '1' THEN 
      CASE twdlOctantReg IS
        WHEN "000" =>
          twdlIn_re := to_signed(16#2D41#, 16);
          twdlIn_im := to_signed(-16#2D41#, 16);
        WHEN "010" =>
          twdlIn_re := to_signed(-16#2D41#, 16);
          twdlIn_im := to_signed(-16#2D41#, 16);
        WHEN "100" =>
          twdlIn_re := to_signed(-16#2D41#, 16);
          twdlIn_im := to_signed(16#2D41#, 16);
        WHEN OTHERS => 
          twdlIn_re := to_signed(16#2D41#, 16);
          twdlIn_im := to_signed(-16#2D41#, 16);
      END CASE;
    ELSE 
      CASE twdlOctantReg IS
        WHEN "000" =>
          NULL;
        WHEN "001" =>
          cast :=  - (resize(twiddleReg_im, 17));
          twdlIn_re := cast(15 DOWNTO 0);
          cast_2 :=  - (resize(twiddleReg_re, 17));
          twdlIn_im := cast_2(15 DOWNTO 0);
        WHEN "010" =>
          twdlIn_re := twiddleReg_im;
          cast_3 :=  - (resize(twiddleReg_re, 17));
          twdlIn_im := cast_3(15 DOWNTO 0);
        WHEN "011" =>
          cast_0 :=  - (resize(twiddleReg_re, 17));
          twdlIn_re := cast_0(15 DOWNTO 0);
          twdlIn_im := twiddleReg_im;
        WHEN "100" =>
          cast_1 :=  - (resize(twiddleReg_re, 17));
          twdlIn_re := cast_1(15 DOWNTO 0);
          cast_4 :=  - (resize(twiddleReg_im, 17));
          twdlIn_im := cast_4(15 DOWNTO 0);
        WHEN OTHERS => 
          twdlIn_re := twiddleReg_im;
          twdlIn_im := twiddleReg_re;
      END CASE;
    END IF;
    twdl_3_1_re <= twdlIn_re;
    twdl_3_1_im <= twdlIn_im;
  END PROCESS Radix22TwdlOctCorr_output;


END rtl;


-- End of TWDLROM_3_1.vhd --

-- Start of TWDLROM_3_1_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\TWDLROM_3_1_block.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: TWDLROM_3_1_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/TWDLROM_3_1
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY TWDLROM_3_1_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_2_1_vld                      :   IN    std_logic;
        twdl_3_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16_En14
        twdl_3_1_im                       :   OUT   signed(15 DOWNTO 0)  -- sfix16_En14
        );
END TWDLROM_3_1_block;


ARCHITECTURE rtl OF TWDLROM_3_1_block IS

  -- Constants
  CONSTANT Twiddle_re_table_data          : vector_of_signed16(0 TO 511) := 
    (to_signed(16#4000#, 16), to_signed(16#4000#, 16), to_signed(16#4000#, 16), to_signed(16#4000#, 16),
     to_signed(16#4000#, 16), to_signed(16#4000#, 16), to_signed(16#3FFF#, 16), to_signed(16#3FFF#, 16),
     to_signed(16#3FFF#, 16), to_signed(16#3FFE#, 16), to_signed(16#3FFE#, 16), to_signed(16#3FFE#, 16),
     to_signed(16#3FFD#, 16), to_signed(16#3FFD#, 16), to_signed(16#3FFC#, 16), to_signed(16#3FFC#, 16),
     to_signed(16#3FFB#, 16), to_signed(16#3FFA#, 16), to_signed(16#3FFA#, 16), to_signed(16#3FF9#, 16),
     to_signed(16#3FF8#, 16), to_signed(16#3FF7#, 16), to_signed(16#3FF7#, 16), to_signed(16#3FF6#, 16),
     to_signed(16#3FF5#, 16), to_signed(16#3FF4#, 16), to_signed(16#3FF3#, 16), to_signed(16#3FF2#, 16),
     to_signed(16#3FF1#, 16), to_signed(16#3FF0#, 16), to_signed(16#3FEF#, 16), to_signed(16#3FED#, 16),
     to_signed(16#3FEC#, 16), to_signed(16#3FEB#, 16), to_signed(16#3FEA#, 16), to_signed(16#3FE8#, 16),
     to_signed(16#3FE7#, 16), to_signed(16#3FE6#, 16), to_signed(16#3FE4#, 16), to_signed(16#3FE3#, 16),
     to_signed(16#3FE1#, 16), to_signed(16#3FE0#, 16), to_signed(16#3FDE#, 16), to_signed(16#3FDC#, 16),
     to_signed(16#3FDB#, 16), to_signed(16#3FD9#, 16), to_signed(16#3FD7#, 16), to_signed(16#3FD5#, 16),
     to_signed(16#3FD4#, 16), to_signed(16#3FD2#, 16), to_signed(16#3FD0#, 16), to_signed(16#3FCE#, 16),
     to_signed(16#3FCC#, 16), to_signed(16#3FCA#, 16), to_signed(16#3FC8#, 16), to_signed(16#3FC6#, 16),
     to_signed(16#3FC4#, 16), to_signed(16#3FC1#, 16), to_signed(16#3FBF#, 16), to_signed(16#3FBD#, 16),
     to_signed(16#3FBB#, 16), to_signed(16#3FB8#, 16), to_signed(16#3FB6#, 16), to_signed(16#3FB4#, 16),
     to_signed(16#3FB1#, 16), to_signed(16#3FAF#, 16), to_signed(16#3FAC#, 16), to_signed(16#3FAA#, 16),
     to_signed(16#3FA7#, 16), to_signed(16#3FA4#, 16), to_signed(16#3FA2#, 16), to_signed(16#3F9F#, 16),
     to_signed(16#3F9C#, 16), to_signed(16#3F99#, 16), to_signed(16#3F97#, 16), to_signed(16#3F94#, 16),
     to_signed(16#3F91#, 16), to_signed(16#3F8E#, 16), to_signed(16#3F8B#, 16), to_signed(16#3F88#, 16),
     to_signed(16#3F85#, 16), to_signed(16#3F82#, 16), to_signed(16#3F7F#, 16), to_signed(16#3F7B#, 16),
     to_signed(16#3F78#, 16), to_signed(16#3F75#, 16), to_signed(16#3F72#, 16), to_signed(16#3F6E#, 16),
     to_signed(16#3F6B#, 16), to_signed(16#3F68#, 16), to_signed(16#3F64#, 16), to_signed(16#3F61#, 16),
     to_signed(16#3F5D#, 16), to_signed(16#3F5A#, 16), to_signed(16#3F56#, 16), to_signed(16#3F52#, 16),
     to_signed(16#3F4F#, 16), to_signed(16#3F4B#, 16), to_signed(16#3F47#, 16), to_signed(16#3F43#, 16),
     to_signed(16#3F40#, 16), to_signed(16#3F3C#, 16), to_signed(16#3F38#, 16), to_signed(16#3F34#, 16),
     to_signed(16#3F30#, 16), to_signed(16#3F2C#, 16), to_signed(16#3F28#, 16), to_signed(16#3F24#, 16),
     to_signed(16#3F20#, 16), to_signed(16#3F1C#, 16), to_signed(16#3F17#, 16), to_signed(16#3F13#, 16),
     to_signed(16#3F0F#, 16), to_signed(16#3F0A#, 16), to_signed(16#3F06#, 16), to_signed(16#3F02#, 16),
     to_signed(16#3EFD#, 16), to_signed(16#3EF9#, 16), to_signed(16#3EF4#, 16), to_signed(16#3EF0#, 16),
     to_signed(16#3EEB#, 16), to_signed(16#3EE7#, 16), to_signed(16#3EE2#, 16), to_signed(16#3EDD#, 16),
     to_signed(16#3ED8#, 16), to_signed(16#3ED4#, 16), to_signed(16#3ECF#, 16), to_signed(16#3ECA#, 16),
     to_signed(16#3EC5#, 16), to_signed(16#3EC0#, 16), to_signed(16#3EBB#, 16), to_signed(16#3EB6#, 16),
     to_signed(16#3EB1#, 16), to_signed(16#3EAC#, 16), to_signed(16#3EA7#, 16), to_signed(16#3EA2#, 16),
     to_signed(16#3E9D#, 16), to_signed(16#3E98#, 16), to_signed(16#3E92#, 16), to_signed(16#3E8D#, 16),
     to_signed(16#3E88#, 16), to_signed(16#3E82#, 16), to_signed(16#3E7D#, 16), to_signed(16#3E77#, 16),
     to_signed(16#3E72#, 16), to_signed(16#3E6C#, 16), to_signed(16#3E67#, 16), to_signed(16#3E61#, 16),
     to_signed(16#3E5C#, 16), to_signed(16#3E56#, 16), to_signed(16#3E50#, 16), to_signed(16#3E4A#, 16),
     to_signed(16#3E45#, 16), to_signed(16#3E3F#, 16), to_signed(16#3E39#, 16), to_signed(16#3E33#, 16),
     to_signed(16#3E2D#, 16), to_signed(16#3E27#, 16), to_signed(16#3E21#, 16), to_signed(16#3E1B#, 16),
     to_signed(16#3E15#, 16), to_signed(16#3E0F#, 16), to_signed(16#3E09#, 16), to_signed(16#3E03#, 16),
     to_signed(16#3DFC#, 16), to_signed(16#3DF6#, 16), to_signed(16#3DF0#, 16), to_signed(16#3DE9#, 16),
     to_signed(16#3DE3#, 16), to_signed(16#3DDD#, 16), to_signed(16#3DD6#, 16), to_signed(16#3DD0#, 16),
     to_signed(16#3DC9#, 16), to_signed(16#3DC2#, 16), to_signed(16#3DBC#, 16), to_signed(16#3DB5#, 16),
     to_signed(16#3DAF#, 16), to_signed(16#3DA8#, 16), to_signed(16#3DA1#, 16), to_signed(16#3D9A#, 16),
     to_signed(16#3D93#, 16), to_signed(16#3D8D#, 16), to_signed(16#3D86#, 16), to_signed(16#3D7F#, 16),
     to_signed(16#3D78#, 16), to_signed(16#3D71#, 16), to_signed(16#3D6A#, 16), to_signed(16#3D63#, 16),
     to_signed(16#3D5B#, 16), to_signed(16#3D54#, 16), to_signed(16#3D4D#, 16), to_signed(16#3D46#, 16),
     to_signed(16#3D3F#, 16), to_signed(16#3D37#, 16), to_signed(16#3D30#, 16), to_signed(16#3D28#, 16),
     to_signed(16#3D21#, 16), to_signed(16#3D1A#, 16), to_signed(16#3D12#, 16), to_signed(16#3D0B#, 16),
     to_signed(16#3D03#, 16), to_signed(16#3CFB#, 16), to_signed(16#3CF4#, 16), to_signed(16#3CEC#, 16),
     to_signed(16#3CE4#, 16), to_signed(16#3CDD#, 16), to_signed(16#3CD5#, 16), to_signed(16#3CCD#, 16),
     to_signed(16#3CC5#, 16), to_signed(16#3CBD#, 16), to_signed(16#3CB5#, 16), to_signed(16#3CAD#, 16),
     to_signed(16#3CA5#, 16), to_signed(16#3C9D#, 16), to_signed(16#3C95#, 16), to_signed(16#3C8D#, 16),
     to_signed(16#3C85#, 16), to_signed(16#3C7D#, 16), to_signed(16#3C74#, 16), to_signed(16#3C6C#, 16),
     to_signed(16#3C64#, 16), to_signed(16#3C5B#, 16), to_signed(16#3C53#, 16), to_signed(16#3C4B#, 16),
     to_signed(16#3C42#, 16), to_signed(16#3C3A#, 16), to_signed(16#3C31#, 16), to_signed(16#3C29#, 16),
     to_signed(16#3C20#, 16), to_signed(16#3C17#, 16), to_signed(16#3C0F#, 16), to_signed(16#3C06#, 16),
     to_signed(16#3BFD#, 16), to_signed(16#3BF5#, 16), to_signed(16#3BEC#, 16), to_signed(16#3BE3#, 16),
     to_signed(16#3BDA#, 16), to_signed(16#3BD1#, 16), to_signed(16#3BC8#, 16), to_signed(16#3BBF#, 16),
     to_signed(16#3BB6#, 16), to_signed(16#3BAD#, 16), to_signed(16#3BA4#, 16), to_signed(16#3B9B#, 16),
     to_signed(16#3B92#, 16), to_signed(16#3B88#, 16), to_signed(16#3B7F#, 16), to_signed(16#3B76#, 16),
     to_signed(16#3B6D#, 16), to_signed(16#3B63#, 16), to_signed(16#3B5A#, 16), to_signed(16#3B50#, 16),
     to_signed(16#3B47#, 16), to_signed(16#3B3E#, 16), to_signed(16#3B34#, 16), to_signed(16#3B2A#, 16),
     to_signed(16#3B21#, 16), to_signed(16#3B17#, 16), to_signed(16#3B0E#, 16), to_signed(16#3B04#, 16),
     to_signed(16#3AFA#, 16), to_signed(16#3AF0#, 16), to_signed(16#3AE6#, 16), to_signed(16#3ADD#, 16),
     to_signed(16#3AD3#, 16), to_signed(16#3AC9#, 16), to_signed(16#3ABF#, 16), to_signed(16#3AB5#, 16),
     to_signed(16#3AAB#, 16), to_signed(16#3AA1#, 16), to_signed(16#3A97#, 16), to_signed(16#3A8D#, 16),
     to_signed(16#3A82#, 16), to_signed(16#3A78#, 16), to_signed(16#3A6E#, 16), to_signed(16#3A64#, 16),
     to_signed(16#3A59#, 16), to_signed(16#3A4F#, 16), to_signed(16#3A45#, 16), to_signed(16#3A3A#, 16),
     to_signed(16#3A30#, 16), to_signed(16#3A25#, 16), to_signed(16#3A1B#, 16), to_signed(16#3A10#, 16),
     to_signed(16#3A06#, 16), to_signed(16#39FB#, 16), to_signed(16#39F0#, 16), to_signed(16#39E6#, 16),
     to_signed(16#39DB#, 16), to_signed(16#39D0#, 16), to_signed(16#39C5#, 16), to_signed(16#39BB#, 16),
     to_signed(16#39B0#, 16), to_signed(16#39A5#, 16), to_signed(16#399A#, 16), to_signed(16#398F#, 16),
     to_signed(16#3984#, 16), to_signed(16#3979#, 16), to_signed(16#396E#, 16), to_signed(16#3963#, 16),
     to_signed(16#3958#, 16), to_signed(16#394C#, 16), to_signed(16#3941#, 16), to_signed(16#3936#, 16),
     to_signed(16#392B#, 16), to_signed(16#391F#, 16), to_signed(16#3914#, 16), to_signed(16#3909#, 16),
     to_signed(16#38FD#, 16), to_signed(16#38F2#, 16), to_signed(16#38E6#, 16), to_signed(16#38DB#, 16),
     to_signed(16#38CF#, 16), to_signed(16#38C3#, 16), to_signed(16#38B8#, 16), to_signed(16#38AC#, 16),
     to_signed(16#38A1#, 16), to_signed(16#3895#, 16), to_signed(16#3889#, 16), to_signed(16#387D#, 16),
     to_signed(16#3871#, 16), to_signed(16#3866#, 16), to_signed(16#385A#, 16), to_signed(16#384E#, 16),
     to_signed(16#3842#, 16), to_signed(16#3836#, 16), to_signed(16#382A#, 16), to_signed(16#381E#, 16),
     to_signed(16#3812#, 16), to_signed(16#3805#, 16), to_signed(16#37F9#, 16), to_signed(16#37ED#, 16),
     to_signed(16#37E1#, 16), to_signed(16#37D5#, 16), to_signed(16#37C8#, 16), to_signed(16#37BC#, 16),
     to_signed(16#37B0#, 16), to_signed(16#37A3#, 16), to_signed(16#3797#, 16), to_signed(16#378A#, 16),
     to_signed(16#377E#, 16), to_signed(16#3771#, 16), to_signed(16#3765#, 16), to_signed(16#3758#, 16),
     to_signed(16#374B#, 16), to_signed(16#373F#, 16), to_signed(16#3732#, 16), to_signed(16#3725#, 16),
     to_signed(16#3718#, 16), to_signed(16#370C#, 16), to_signed(16#36FF#, 16), to_signed(16#36F2#, 16),
     to_signed(16#36E5#, 16), to_signed(16#36D8#, 16), to_signed(16#36CB#, 16), to_signed(16#36BE#, 16),
     to_signed(16#36B1#, 16), to_signed(16#36A4#, 16), to_signed(16#3697#, 16), to_signed(16#368A#, 16),
     to_signed(16#367D#, 16), to_signed(16#366F#, 16), to_signed(16#3662#, 16), to_signed(16#3655#, 16),
     to_signed(16#3648#, 16), to_signed(16#363A#, 16), to_signed(16#362D#, 16), to_signed(16#3620#, 16),
     to_signed(16#3612#, 16), to_signed(16#3605#, 16), to_signed(16#35F7#, 16), to_signed(16#35EA#, 16),
     to_signed(16#35DC#, 16), to_signed(16#35CE#, 16), to_signed(16#35C1#, 16), to_signed(16#35B3#, 16),
     to_signed(16#35A5#, 16), to_signed(16#3598#, 16), to_signed(16#358A#, 16), to_signed(16#357C#, 16),
     to_signed(16#356E#, 16), to_signed(16#3561#, 16), to_signed(16#3553#, 16), to_signed(16#3545#, 16),
     to_signed(16#3537#, 16), to_signed(16#3529#, 16), to_signed(16#351B#, 16), to_signed(16#350D#, 16),
     to_signed(16#34FF#, 16), to_signed(16#34F1#, 16), to_signed(16#34E2#, 16), to_signed(16#34D4#, 16),
     to_signed(16#34C6#, 16), to_signed(16#34B8#, 16), to_signed(16#34AA#, 16), to_signed(16#349B#, 16),
     to_signed(16#348D#, 16), to_signed(16#347F#, 16), to_signed(16#3470#, 16), to_signed(16#3462#, 16),
     to_signed(16#3453#, 16), to_signed(16#3445#, 16), to_signed(16#3436#, 16), to_signed(16#3428#, 16),
     to_signed(16#3419#, 16), to_signed(16#340B#, 16), to_signed(16#33FC#, 16), to_signed(16#33ED#, 16),
     to_signed(16#33DF#, 16), to_signed(16#33D0#, 16), to_signed(16#33C1#, 16), to_signed(16#33B2#, 16),
     to_signed(16#33A3#, 16), to_signed(16#3395#, 16), to_signed(16#3386#, 16), to_signed(16#3377#, 16),
     to_signed(16#3368#, 16), to_signed(16#3359#, 16), to_signed(16#334A#, 16), to_signed(16#333B#, 16),
     to_signed(16#332C#, 16), to_signed(16#331D#, 16), to_signed(16#330D#, 16), to_signed(16#32FE#, 16),
     to_signed(16#32EF#, 16), to_signed(16#32E0#, 16), to_signed(16#32D0#, 16), to_signed(16#32C1#, 16),
     to_signed(16#32B2#, 16), to_signed(16#32A3#, 16), to_signed(16#3293#, 16), to_signed(16#3284#, 16),
     to_signed(16#3274#, 16), to_signed(16#3265#, 16), to_signed(16#3255#, 16), to_signed(16#3246#, 16),
     to_signed(16#3236#, 16), to_signed(16#3227#, 16), to_signed(16#3217#, 16), to_signed(16#3207#, 16),
     to_signed(16#31F8#, 16), to_signed(16#31E8#, 16), to_signed(16#31D8#, 16), to_signed(16#31C8#, 16),
     to_signed(16#31B9#, 16), to_signed(16#31A9#, 16), to_signed(16#3199#, 16), to_signed(16#3189#, 16),
     to_signed(16#3179#, 16), to_signed(16#3169#, 16), to_signed(16#3159#, 16), to_signed(16#3149#, 16),
     to_signed(16#3139#, 16), to_signed(16#3129#, 16), to_signed(16#3119#, 16), to_signed(16#3109#, 16),
     to_signed(16#30F9#, 16), to_signed(16#30E8#, 16), to_signed(16#30D8#, 16), to_signed(16#30C8#, 16),
     to_signed(16#30B8#, 16), to_signed(16#30A7#, 16), to_signed(16#3097#, 16), to_signed(16#3087#, 16),
     to_signed(16#3076#, 16), to_signed(16#3066#, 16), to_signed(16#3055#, 16), to_signed(16#3045#, 16),
     to_signed(16#3034#, 16), to_signed(16#3024#, 16), to_signed(16#3013#, 16), to_signed(16#3002#, 16),
     to_signed(16#2FF2#, 16), to_signed(16#2FE1#, 16), to_signed(16#2FD0#, 16), to_signed(16#2FC0#, 16),
     to_signed(16#2FAF#, 16), to_signed(16#2F9E#, 16), to_signed(16#2F8D#, 16), to_signed(16#2F7D#, 16),
     to_signed(16#2F6C#, 16), to_signed(16#2F5B#, 16), to_signed(16#2F4A#, 16), to_signed(16#2F39#, 16),
     to_signed(16#2F28#, 16), to_signed(16#2F17#, 16), to_signed(16#2F06#, 16), to_signed(16#2EF5#, 16),
     to_signed(16#2EE4#, 16), to_signed(16#2ED3#, 16), to_signed(16#2EC2#, 16), to_signed(16#2EB0#, 16),
     to_signed(16#2E9F#, 16), to_signed(16#2E8E#, 16), to_signed(16#2E7D#, 16), to_signed(16#2E6B#, 16),
     to_signed(16#2E5A#, 16), to_signed(16#2E49#, 16), to_signed(16#2E37#, 16), to_signed(16#2E26#, 16),
     to_signed(16#2E15#, 16), to_signed(16#2E03#, 16), to_signed(16#2DF2#, 16), to_signed(16#2DE0#, 16),
     to_signed(16#2DCF#, 16), to_signed(16#2DBD#, 16), to_signed(16#2DAB#, 16), to_signed(16#2D9A#, 16),
     to_signed(16#2D88#, 16), to_signed(16#2D76#, 16), to_signed(16#2D65#, 16), to_signed(16#2D53#, 16));  -- sfix16 [512]
  CONSTANT Twiddle_im_table_data          : vector_of_signed16(0 TO 511) := 
    (to_signed(16#0000#, 16), to_signed(-16#0019#, 16), to_signed(-16#0032#, 16), to_signed(-16#004B#, 16),
     to_signed(-16#0065#, 16), to_signed(-16#007E#, 16), to_signed(-16#0097#, 16), to_signed(-16#00B0#, 16),
     to_signed(-16#00C9#, 16), to_signed(-16#00E2#, 16), to_signed(-16#00FB#, 16), to_signed(-16#0114#, 16),
     to_signed(-16#012E#, 16), to_signed(-16#0147#, 16), to_signed(-16#0160#, 16), to_signed(-16#0179#, 16),
     to_signed(-16#0192#, 16), to_signed(-16#01AB#, 16), to_signed(-16#01C4#, 16), to_signed(-16#01DD#, 16),
     to_signed(-16#01F7#, 16), to_signed(-16#0210#, 16), to_signed(-16#0229#, 16), to_signed(-16#0242#, 16),
     to_signed(-16#025B#, 16), to_signed(-16#0274#, 16), to_signed(-16#028D#, 16), to_signed(-16#02A6#, 16),
     to_signed(-16#02C0#, 16), to_signed(-16#02D9#, 16), to_signed(-16#02F2#, 16), to_signed(-16#030B#, 16),
     to_signed(-16#0324#, 16), to_signed(-16#033D#, 16), to_signed(-16#0356#, 16), to_signed(-16#036F#, 16),
     to_signed(-16#0388#, 16), to_signed(-16#03A1#, 16), to_signed(-16#03BB#, 16), to_signed(-16#03D4#, 16),
     to_signed(-16#03ED#, 16), to_signed(-16#0406#, 16), to_signed(-16#041F#, 16), to_signed(-16#0438#, 16),
     to_signed(-16#0451#, 16), to_signed(-16#046A#, 16), to_signed(-16#0483#, 16), to_signed(-16#049C#, 16),
     to_signed(-16#04B5#, 16), to_signed(-16#04CE#, 16), to_signed(-16#04E7#, 16), to_signed(-16#0500#, 16),
     to_signed(-16#051A#, 16), to_signed(-16#0533#, 16), to_signed(-16#054C#, 16), to_signed(-16#0565#, 16),
     to_signed(-16#057E#, 16), to_signed(-16#0597#, 16), to_signed(-16#05B0#, 16), to_signed(-16#05C9#, 16),
     to_signed(-16#05E2#, 16), to_signed(-16#05FB#, 16), to_signed(-16#0614#, 16), to_signed(-16#062D#, 16),
     to_signed(-16#0646#, 16), to_signed(-16#065F#, 16), to_signed(-16#0678#, 16), to_signed(-16#0691#, 16),
     to_signed(-16#06AA#, 16), to_signed(-16#06C3#, 16), to_signed(-16#06DC#, 16), to_signed(-16#06F5#, 16),
     to_signed(-16#070E#, 16), to_signed(-16#0727#, 16), to_signed(-16#0740#, 16), to_signed(-16#0759#, 16),
     to_signed(-16#0772#, 16), to_signed(-16#078B#, 16), to_signed(-16#07A4#, 16), to_signed(-16#07BD#, 16),
     to_signed(-16#07D6#, 16), to_signed(-16#07EF#, 16), to_signed(-16#0807#, 16), to_signed(-16#0820#, 16),
     to_signed(-16#0839#, 16), to_signed(-16#0852#, 16), to_signed(-16#086B#, 16), to_signed(-16#0884#, 16),
     to_signed(-16#089D#, 16), to_signed(-16#08B6#, 16), to_signed(-16#08CF#, 16), to_signed(-16#08E8#, 16),
     to_signed(-16#0901#, 16), to_signed(-16#0919#, 16), to_signed(-16#0932#, 16), to_signed(-16#094B#, 16),
     to_signed(-16#0964#, 16), to_signed(-16#097D#, 16), to_signed(-16#0996#, 16), to_signed(-16#09AF#, 16),
     to_signed(-16#09C7#, 16), to_signed(-16#09E0#, 16), to_signed(-16#09F9#, 16), to_signed(-16#0A12#, 16),
     to_signed(-16#0A2B#, 16), to_signed(-16#0A44#, 16), to_signed(-16#0A5C#, 16), to_signed(-16#0A75#, 16),
     to_signed(-16#0A8E#, 16), to_signed(-16#0AA7#, 16), to_signed(-16#0AC0#, 16), to_signed(-16#0AD8#, 16),
     to_signed(-16#0AF1#, 16), to_signed(-16#0B0A#, 16), to_signed(-16#0B23#, 16), to_signed(-16#0B3B#, 16),
     to_signed(-16#0B54#, 16), to_signed(-16#0B6D#, 16), to_signed(-16#0B85#, 16), to_signed(-16#0B9E#, 16),
     to_signed(-16#0BB7#, 16), to_signed(-16#0BD0#, 16), to_signed(-16#0BE8#, 16), to_signed(-16#0C01#, 16),
     to_signed(-16#0C1A#, 16), to_signed(-16#0C32#, 16), to_signed(-16#0C4B#, 16), to_signed(-16#0C64#, 16),
     to_signed(-16#0C7C#, 16), to_signed(-16#0C95#, 16), to_signed(-16#0CAE#, 16), to_signed(-16#0CC6#, 16),
     to_signed(-16#0CDF#, 16), to_signed(-16#0CF8#, 16), to_signed(-16#0D10#, 16), to_signed(-16#0D29#, 16),
     to_signed(-16#0D41#, 16), to_signed(-16#0D5A#, 16), to_signed(-16#0D72#, 16), to_signed(-16#0D8B#, 16),
     to_signed(-16#0DA4#, 16), to_signed(-16#0DBC#, 16), to_signed(-16#0DD5#, 16), to_signed(-16#0DED#, 16),
     to_signed(-16#0E06#, 16), to_signed(-16#0E1E#, 16), to_signed(-16#0E37#, 16), to_signed(-16#0E4F#, 16),
     to_signed(-16#0E68#, 16), to_signed(-16#0E80#, 16), to_signed(-16#0E99#, 16), to_signed(-16#0EB1#, 16),
     to_signed(-16#0ECA#, 16), to_signed(-16#0EE2#, 16), to_signed(-16#0EFB#, 16), to_signed(-16#0F13#, 16),
     to_signed(-16#0F2B#, 16), to_signed(-16#0F44#, 16), to_signed(-16#0F5C#, 16), to_signed(-16#0F75#, 16),
     to_signed(-16#0F8D#, 16), to_signed(-16#0FA5#, 16), to_signed(-16#0FBE#, 16), to_signed(-16#0FD6#, 16),
     to_signed(-16#0FEE#, 16), to_signed(-16#1007#, 16), to_signed(-16#101F#, 16), to_signed(-16#1037#, 16),
     to_signed(-16#1050#, 16), to_signed(-16#1068#, 16), to_signed(-16#1080#, 16), to_signed(-16#1099#, 16),
     to_signed(-16#10B1#, 16), to_signed(-16#10C9#, 16), to_signed(-16#10E1#, 16), to_signed(-16#10FA#, 16),
     to_signed(-16#1112#, 16), to_signed(-16#112A#, 16), to_signed(-16#1142#, 16), to_signed(-16#115A#, 16),
     to_signed(-16#1173#, 16), to_signed(-16#118B#, 16), to_signed(-16#11A3#, 16), to_signed(-16#11BB#, 16),
     to_signed(-16#11D3#, 16), to_signed(-16#11EB#, 16), to_signed(-16#1204#, 16), to_signed(-16#121C#, 16),
     to_signed(-16#1234#, 16), to_signed(-16#124C#, 16), to_signed(-16#1264#, 16), to_signed(-16#127C#, 16),
     to_signed(-16#1294#, 16), to_signed(-16#12AC#, 16), to_signed(-16#12C4#, 16), to_signed(-16#12DC#, 16),
     to_signed(-16#12F4#, 16), to_signed(-16#130C#, 16), to_signed(-16#1324#, 16), to_signed(-16#133C#, 16),
     to_signed(-16#1354#, 16), to_signed(-16#136C#, 16), to_signed(-16#1384#, 16), to_signed(-16#139C#, 16),
     to_signed(-16#13B4#, 16), to_signed(-16#13CC#, 16), to_signed(-16#13E4#, 16), to_signed(-16#13FB#, 16),
     to_signed(-16#1413#, 16), to_signed(-16#142B#, 16), to_signed(-16#1443#, 16), to_signed(-16#145B#, 16),
     to_signed(-16#1473#, 16), to_signed(-16#148B#, 16), to_signed(-16#14A2#, 16), to_signed(-16#14BA#, 16),
     to_signed(-16#14D2#, 16), to_signed(-16#14EA#, 16), to_signed(-16#1501#, 16), to_signed(-16#1519#, 16),
     to_signed(-16#1531#, 16), to_signed(-16#1549#, 16), to_signed(-16#1560#, 16), to_signed(-16#1578#, 16),
     to_signed(-16#1590#, 16), to_signed(-16#15A7#, 16), to_signed(-16#15BF#, 16), to_signed(-16#15D7#, 16),
     to_signed(-16#15EE#, 16), to_signed(-16#1606#, 16), to_signed(-16#161D#, 16), to_signed(-16#1635#, 16),
     to_signed(-16#164C#, 16), to_signed(-16#1664#, 16), to_signed(-16#167C#, 16), to_signed(-16#1693#, 16),
     to_signed(-16#16AB#, 16), to_signed(-16#16C2#, 16), to_signed(-16#16DA#, 16), to_signed(-16#16F1#, 16),
     to_signed(-16#1709#, 16), to_signed(-16#1720#, 16), to_signed(-16#1737#, 16), to_signed(-16#174F#, 16),
     to_signed(-16#1766#, 16), to_signed(-16#177E#, 16), to_signed(-16#1795#, 16), to_signed(-16#17AC#, 16),
     to_signed(-16#17C4#, 16), to_signed(-16#17DB#, 16), to_signed(-16#17F2#, 16), to_signed(-16#180A#, 16),
     to_signed(-16#1821#, 16), to_signed(-16#1838#, 16), to_signed(-16#184F#, 16), to_signed(-16#1867#, 16),
     to_signed(-16#187E#, 16), to_signed(-16#1895#, 16), to_signed(-16#18AC#, 16), to_signed(-16#18C3#, 16),
     to_signed(-16#18DB#, 16), to_signed(-16#18F2#, 16), to_signed(-16#1909#, 16), to_signed(-16#1920#, 16),
     to_signed(-16#1937#, 16), to_signed(-16#194E#, 16), to_signed(-16#1965#, 16), to_signed(-16#197C#, 16),
     to_signed(-16#1993#, 16), to_signed(-16#19AA#, 16), to_signed(-16#19C1#, 16), to_signed(-16#19D8#, 16),
     to_signed(-16#19EF#, 16), to_signed(-16#1A06#, 16), to_signed(-16#1A1D#, 16), to_signed(-16#1A34#, 16),
     to_signed(-16#1A4B#, 16), to_signed(-16#1A62#, 16), to_signed(-16#1A79#, 16), to_signed(-16#1A90#, 16),
     to_signed(-16#1AA7#, 16), to_signed(-16#1ABE#, 16), to_signed(-16#1AD4#, 16), to_signed(-16#1AEB#, 16),
     to_signed(-16#1B02#, 16), to_signed(-16#1B19#, 16), to_signed(-16#1B30#, 16), to_signed(-16#1B46#, 16),
     to_signed(-16#1B5D#, 16), to_signed(-16#1B74#, 16), to_signed(-16#1B8A#, 16), to_signed(-16#1BA1#, 16),
     to_signed(-16#1BB8#, 16), to_signed(-16#1BCE#, 16), to_signed(-16#1BE5#, 16), to_signed(-16#1BFC#, 16),
     to_signed(-16#1C12#, 16), to_signed(-16#1C29#, 16), to_signed(-16#1C3F#, 16), to_signed(-16#1C56#, 16),
     to_signed(-16#1C6C#, 16), to_signed(-16#1C83#, 16), to_signed(-16#1C99#, 16), to_signed(-16#1CB0#, 16),
     to_signed(-16#1CC6#, 16), to_signed(-16#1CDD#, 16), to_signed(-16#1CF3#, 16), to_signed(-16#1D0A#, 16),
     to_signed(-16#1D20#, 16), to_signed(-16#1D36#, 16), to_signed(-16#1D4D#, 16), to_signed(-16#1D63#, 16),
     to_signed(-16#1D79#, 16), to_signed(-16#1D90#, 16), to_signed(-16#1DA6#, 16), to_signed(-16#1DBC#, 16),
     to_signed(-16#1DD3#, 16), to_signed(-16#1DE9#, 16), to_signed(-16#1DFF#, 16), to_signed(-16#1E15#, 16),
     to_signed(-16#1E2B#, 16), to_signed(-16#1E42#, 16), to_signed(-16#1E58#, 16), to_signed(-16#1E6E#, 16),
     to_signed(-16#1E84#, 16), to_signed(-16#1E9A#, 16), to_signed(-16#1EB0#, 16), to_signed(-16#1EC6#, 16),
     to_signed(-16#1EDC#, 16), to_signed(-16#1EF2#, 16), to_signed(-16#1F08#, 16), to_signed(-16#1F1E#, 16),
     to_signed(-16#1F34#, 16), to_signed(-16#1F4A#, 16), to_signed(-16#1F60#, 16), to_signed(-16#1F76#, 16),
     to_signed(-16#1F8C#, 16), to_signed(-16#1FA2#, 16), to_signed(-16#1FB7#, 16), to_signed(-16#1FCD#, 16),
     to_signed(-16#1FE3#, 16), to_signed(-16#1FF9#, 16), to_signed(-16#200F#, 16), to_signed(-16#2024#, 16),
     to_signed(-16#203A#, 16), to_signed(-16#2050#, 16), to_signed(-16#2065#, 16), to_signed(-16#207B#, 16),
     to_signed(-16#2091#, 16), to_signed(-16#20A6#, 16), to_signed(-16#20BC#, 16), to_signed(-16#20D1#, 16),
     to_signed(-16#20E7#, 16), to_signed(-16#20FD#, 16), to_signed(-16#2112#, 16), to_signed(-16#2128#, 16),
     to_signed(-16#213D#, 16), to_signed(-16#2153#, 16), to_signed(-16#2168#, 16), to_signed(-16#217D#, 16),
     to_signed(-16#2193#, 16), to_signed(-16#21A8#, 16), to_signed(-16#21BE#, 16), to_signed(-16#21D3#, 16),
     to_signed(-16#21E8#, 16), to_signed(-16#21FE#, 16), to_signed(-16#2213#, 16), to_signed(-16#2228#, 16),
     to_signed(-16#223D#, 16), to_signed(-16#2253#, 16), to_signed(-16#2268#, 16), to_signed(-16#227D#, 16),
     to_signed(-16#2292#, 16), to_signed(-16#22A7#, 16), to_signed(-16#22BC#, 16), to_signed(-16#22D2#, 16),
     to_signed(-16#22E7#, 16), to_signed(-16#22FC#, 16), to_signed(-16#2311#, 16), to_signed(-16#2326#, 16),
     to_signed(-16#233B#, 16), to_signed(-16#2350#, 16), to_signed(-16#2365#, 16), to_signed(-16#237A#, 16),
     to_signed(-16#238E#, 16), to_signed(-16#23A3#, 16), to_signed(-16#23B8#, 16), to_signed(-16#23CD#, 16),
     to_signed(-16#23E2#, 16), to_signed(-16#23F7#, 16), to_signed(-16#240B#, 16), to_signed(-16#2420#, 16),
     to_signed(-16#2435#, 16), to_signed(-16#244A#, 16), to_signed(-16#245E#, 16), to_signed(-16#2473#, 16),
     to_signed(-16#2488#, 16), to_signed(-16#249C#, 16), to_signed(-16#24B1#, 16), to_signed(-16#24C5#, 16),
     to_signed(-16#24DA#, 16), to_signed(-16#24EF#, 16), to_signed(-16#2503#, 16), to_signed(-16#2518#, 16),
     to_signed(-16#252C#, 16), to_signed(-16#2541#, 16), to_signed(-16#2555#, 16), to_signed(-16#2569#, 16),
     to_signed(-16#257E#, 16), to_signed(-16#2592#, 16), to_signed(-16#25A6#, 16), to_signed(-16#25BB#, 16),
     to_signed(-16#25CF#, 16), to_signed(-16#25E3#, 16), to_signed(-16#25F8#, 16), to_signed(-16#260C#, 16),
     to_signed(-16#2620#, 16), to_signed(-16#2634#, 16), to_signed(-16#2648#, 16), to_signed(-16#265C#, 16),
     to_signed(-16#2671#, 16), to_signed(-16#2685#, 16), to_signed(-16#2699#, 16), to_signed(-16#26AD#, 16),
     to_signed(-16#26C1#, 16), to_signed(-16#26D5#, 16), to_signed(-16#26E9#, 16), to_signed(-16#26FD#, 16),
     to_signed(-16#2711#, 16), to_signed(-16#2724#, 16), to_signed(-16#2738#, 16), to_signed(-16#274C#, 16),
     to_signed(-16#2760#, 16), to_signed(-16#2774#, 16), to_signed(-16#2788#, 16), to_signed(-16#279B#, 16),
     to_signed(-16#27AF#, 16), to_signed(-16#27C3#, 16), to_signed(-16#27D6#, 16), to_signed(-16#27EA#, 16),
     to_signed(-16#27FE#, 16), to_signed(-16#2811#, 16), to_signed(-16#2825#, 16), to_signed(-16#2838#, 16),
     to_signed(-16#284C#, 16), to_signed(-16#2860#, 16), to_signed(-16#2873#, 16), to_signed(-16#2886#, 16),
     to_signed(-16#289A#, 16), to_signed(-16#28AD#, 16), to_signed(-16#28C1#, 16), to_signed(-16#28D4#, 16),
     to_signed(-16#28E7#, 16), to_signed(-16#28FB#, 16), to_signed(-16#290E#, 16), to_signed(-16#2921#, 16),
     to_signed(-16#2935#, 16), to_signed(-16#2948#, 16), to_signed(-16#295B#, 16), to_signed(-16#296E#, 16),
     to_signed(-16#2981#, 16), to_signed(-16#2994#, 16), to_signed(-16#29A7#, 16), to_signed(-16#29BB#, 16),
     to_signed(-16#29CE#, 16), to_signed(-16#29E1#, 16), to_signed(-16#29F4#, 16), to_signed(-16#2A07#, 16),
     to_signed(-16#2A1A#, 16), to_signed(-16#2A2C#, 16), to_signed(-16#2A3F#, 16), to_signed(-16#2A52#, 16),
     to_signed(-16#2A65#, 16), to_signed(-16#2A78#, 16), to_signed(-16#2A8B#, 16), to_signed(-16#2A9D#, 16),
     to_signed(-16#2AB0#, 16), to_signed(-16#2AC3#, 16), to_signed(-16#2AD6#, 16), to_signed(-16#2AE8#, 16),
     to_signed(-16#2AFB#, 16), to_signed(-16#2B0D#, 16), to_signed(-16#2B20#, 16), to_signed(-16#2B33#, 16),
     to_signed(-16#2B45#, 16), to_signed(-16#2B58#, 16), to_signed(-16#2B6A#, 16), to_signed(-16#2B7D#, 16),
     to_signed(-16#2B8F#, 16), to_signed(-16#2BA1#, 16), to_signed(-16#2BB4#, 16), to_signed(-16#2BC6#, 16),
     to_signed(-16#2BD8#, 16), to_signed(-16#2BEB#, 16), to_signed(-16#2BFD#, 16), to_signed(-16#2C0F#, 16),
     to_signed(-16#2C21#, 16), to_signed(-16#2C34#, 16), to_signed(-16#2C46#, 16), to_signed(-16#2C58#, 16),
     to_signed(-16#2C6A#, 16), to_signed(-16#2C7C#, 16), to_signed(-16#2C8E#, 16), to_signed(-16#2CA0#, 16),
     to_signed(-16#2CB2#, 16), to_signed(-16#2CC4#, 16), to_signed(-16#2CD6#, 16), to_signed(-16#2CE8#, 16),
     to_signed(-16#2CFA#, 16), to_signed(-16#2D0C#, 16), to_signed(-16#2D1E#, 16), to_signed(-16#2D2F#, 16));  -- sfix16 [512]

  -- Signals
  SIGNAL Radix22TwdlMapping_cnt           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Radix22TwdlMapping_phase         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw  : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Radix22TwdlMapping_twdlAddrMap   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdl45Reg     : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1      : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2      : std_logic;
  SIGNAL Radix22TwdlMapping_cnt_next      : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Radix22TwdlMapping_phase_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1_next : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw_next : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Radix22TwdlMapping_twdlAddrMap_next : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdl45Reg_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2_next : std_logic;
  SIGNAL twdlAddr                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL twdlAddrVld                      : std_logic;
  SIGNAL twdlOctant                       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45                           : std_logic;
  SIGNAL twiddleS_re                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twiddleReg_re                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twiddleS_im                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twiddleReg_im                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdlOctantReg                    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45Reg                        : std_logic;

BEGIN
  -- Radix22TwdlMapping
  Radix22TwdlMapping_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22TwdlMapping_octantReg1 <= to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdlAddr_raw <= to_unsigned(16#000#, 12);
        Radix22TwdlMapping_twdlAddrMap <= to_unsigned(16#000#, 9);
        Radix22TwdlMapping_twdl45Reg <= '0';
        Radix22TwdlMapping_dvldReg1 <= '0';
        Radix22TwdlMapping_dvldReg2 <= '0';
        Radix22TwdlMapping_cnt <= to_unsigned(16#000#, 10);
        Radix22TwdlMapping_phase <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        Radix22TwdlMapping_cnt <= Radix22TwdlMapping_cnt_next;
        Radix22TwdlMapping_phase <= Radix22TwdlMapping_phase_next;
        Radix22TwdlMapping_octantReg1 <= Radix22TwdlMapping_octantReg1_next;
        Radix22TwdlMapping_twdlAddr_raw <= Radix22TwdlMapping_twdlAddr_raw_next;
        Radix22TwdlMapping_twdlAddrMap <= Radix22TwdlMapping_twdlAddrMap_next;
        Radix22TwdlMapping_twdl45Reg <= Radix22TwdlMapping_twdl45Reg_next;
        Radix22TwdlMapping_dvldReg1 <= Radix22TwdlMapping_dvldReg1_next;
        Radix22TwdlMapping_dvldReg2 <= Radix22TwdlMapping_dvldReg2_next;
      END IF;
    END IF;
  END PROCESS Radix22TwdlMapping_process;

  Radix22TwdlMapping_output : PROCESS (Radix22TwdlMapping_cnt, Radix22TwdlMapping_dvldReg1,
       Radix22TwdlMapping_dvldReg2, Radix22TwdlMapping_octantReg1,
       Radix22TwdlMapping_phase, Radix22TwdlMapping_twdl45Reg,
       Radix22TwdlMapping_twdlAddrMap, Radix22TwdlMapping_twdlAddr_raw,
       dout_2_1_vld)
    VARIABLE octant : unsigned(2 DOWNTO 0);
    VARIABLE cnt_cast : unsigned(11 DOWNTO 0);
    VARIABLE sub_temp : signed(25 DOWNTO 0);
    VARIABLE sub_temp_0 : signed(13 DOWNTO 0);
    VARIABLE sub_temp_1 : signed(13 DOWNTO 0);
    VARIABLE sub_temp_2 : signed(25 DOWNTO 0);
    VARIABLE sub_temp_3 : signed(25 DOWNTO 0);
  BEGIN
    sub_temp := to_signed(16#0000000#, 26);
    sub_temp_0 := to_signed(16#0000#, 14);
    sub_temp_1 := to_signed(16#0000#, 14);
    sub_temp_2 := to_signed(16#0000000#, 26);
    sub_temp_3 := to_signed(16#0000000#, 26);
    cnt_cast := to_unsigned(16#000#, 12);
    Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt;
    Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase;
    Radix22TwdlMapping_dvldReg2_next <= Radix22TwdlMapping_dvldReg1;
    Radix22TwdlMapping_dvldReg1_next <= dout_2_1_vld;
    CASE Radix22TwdlMapping_twdlAddr_raw IS
      WHEN "001000000000" =>
        octant := to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "010000000000" =>
        octant := to_unsigned(16#1#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "011000000000" =>
        octant := to_unsigned(16#2#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "100000000000" =>
        octant := to_unsigned(16#3#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "101000000000" =>
        octant := to_unsigned(16#4#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN OTHERS => 
        octant := Radix22TwdlMapping_twdlAddr_raw(11 DOWNTO 9);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
    END CASE;
    Radix22TwdlMapping_octantReg1_next <= octant;
    CASE octant IS
      WHEN "000" =>
        Radix22TwdlMapping_twdlAddrMap_next <= Radix22TwdlMapping_twdlAddr_raw(8 DOWNTO 0);
      WHEN "001" =>
        sub_temp_0 := to_signed(16#0400#, 14) - signed(resize(Radix22TwdlMapping_twdlAddr_raw, 14));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_0(8 DOWNTO 0));
      WHEN "010" =>
        sub_temp_1 := signed(resize(Radix22TwdlMapping_twdlAddr_raw, 14)) - to_signed(16#0400#, 14);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_1(8 DOWNTO 0));
      WHEN "011" =>
        sub_temp_2 := to_signed(16#0100000#, 26) - signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_2(17 DOWNTO 9));
      WHEN "100" =>
        sub_temp_3 := signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26)) - to_signed(16#0100000#, 26);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_3(17 DOWNTO 9));
      WHEN OTHERS => 
        sub_temp := to_signed(16#0180000#, 26) - signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp(17 DOWNTO 9));
    END CASE;
    IF Radix22TwdlMapping_phase = to_unsigned(16#0#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= to_unsigned(16#000#, 12);
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#1#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(Radix22TwdlMapping_cnt, 12) sll 1;
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#2#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(Radix22TwdlMapping_cnt, 12);
    ELSE 
      cnt_cast := resize(Radix22TwdlMapping_cnt, 12);
      Radix22TwdlMapping_twdlAddr_raw_next <= (cnt_cast sll 1) + cnt_cast;
    END IF;
    IF dout_2_1_vld = '1' AND (Radix22TwdlMapping_cnt > to_unsigned(16#3FE#, 10)) THEN 
      Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase + to_unsigned(16#1#, 2);
    END IF;
    IF dout_2_1_vld = '1' THEN 
      Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt + to_unsigned(16#001#, 10);
    END IF;
    twdlAddr <= Radix22TwdlMapping_twdlAddrMap;
    twdlAddrVld <= Radix22TwdlMapping_dvldReg2;
    twdlOctant <= Radix22TwdlMapping_octantReg1;
    twdl45 <= Radix22TwdlMapping_twdl45Reg;
  END PROCESS Radix22TwdlMapping_output;


  -- Twiddle ROM1
  twiddleS_re <= Twiddle_re_table_data(to_integer(twdlAddr));

  TWIDDLEROM_RE_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twiddleReg_re <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twiddleReg_re <= twiddleS_re;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_RE_process;


  -- Twiddle ROM2
  twiddleS_im <= Twiddle_im_table_data(to_integer(twdlAddr));

  TWIDDLEROM_IM_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twiddleReg_im <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twiddleReg_im <= twiddleS_im;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_IM_process;


  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdlOctantReg <= to_unsigned(16#0#, 3);
      ELSIF enb = '1' THEN
        twdlOctantReg <= twdlOctant;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl45Reg <= '0';
      ELSIF enb = '1' THEN
        twdl45Reg <= twdl45;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  -- Radix22TwdlOctCorr
  Radix22TwdlOctCorr_output : PROCESS (twdl45Reg, twdlOctantReg, twiddleReg_im, twiddleReg_re)
    VARIABLE twdlIn_re : signed(15 DOWNTO 0);
    VARIABLE twdlIn_im : signed(15 DOWNTO 0);
    VARIABLE cast : signed(16 DOWNTO 0);
    VARIABLE cast_0 : signed(16 DOWNTO 0);
    VARIABLE cast_1 : signed(16 DOWNTO 0);
    VARIABLE cast_2 : signed(16 DOWNTO 0);
    VARIABLE cast_3 : signed(16 DOWNTO 0);
    VARIABLE cast_4 : signed(16 DOWNTO 0);
  BEGIN
    cast := to_signed(16#00000#, 17);
    cast_0 := to_signed(16#00000#, 17);
    cast_1 := to_signed(16#00000#, 17);
    cast_2 := to_signed(16#00000#, 17);
    cast_3 := to_signed(16#00000#, 17);
    cast_4 := to_signed(16#00000#, 17);
    twdlIn_re := twiddleReg_re;
    twdlIn_im := twiddleReg_im;
    IF twdl45Reg = '1' THEN 
      CASE twdlOctantReg IS
        WHEN "000" =>
          twdlIn_re := to_signed(16#2D41#, 16);
          twdlIn_im := to_signed(-16#2D41#, 16);
        WHEN "010" =>
          twdlIn_re := to_signed(-16#2D41#, 16);
          twdlIn_im := to_signed(-16#2D41#, 16);
        WHEN "100" =>
          twdlIn_re := to_signed(-16#2D41#, 16);
          twdlIn_im := to_signed(16#2D41#, 16);
        WHEN OTHERS => 
          twdlIn_re := to_signed(16#2D41#, 16);
          twdlIn_im := to_signed(-16#2D41#, 16);
      END CASE;
    ELSE 
      CASE twdlOctantReg IS
        WHEN "000" =>
          NULL;
        WHEN "001" =>
          cast :=  - (resize(twiddleReg_im, 17));
          twdlIn_re := cast(15 DOWNTO 0);
          cast_2 :=  - (resize(twiddleReg_re, 17));
          twdlIn_im := cast_2(15 DOWNTO 0);
        WHEN "010" =>
          twdlIn_re := twiddleReg_im;
          cast_3 :=  - (resize(twiddleReg_re, 17));
          twdlIn_im := cast_3(15 DOWNTO 0);
        WHEN "011" =>
          cast_0 :=  - (resize(twiddleReg_re, 17));
          twdlIn_re := cast_0(15 DOWNTO 0);
          twdlIn_im := twiddleReg_im;
        WHEN "100" =>
          cast_1 :=  - (resize(twiddleReg_re, 17));
          twdlIn_re := cast_1(15 DOWNTO 0);
          cast_4 :=  - (resize(twiddleReg_im, 17));
          twdlIn_im := cast_4(15 DOWNTO 0);
        WHEN OTHERS => 
          twdlIn_re := twiddleReg_im;
          twdlIn_im := twiddleReg_re;
      END CASE;
    END IF;
    twdl_3_1_re <= twdlIn_re;
    twdl_3_1_im <= twdlIn_im;
  END PROCESS Radix22TwdlOctCorr_output;


END rtl;


-- End of TWDLROM_3_1_block.vhd --

-- Start of TWDLROM_3_1_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\TWDLROM_3_1_block1.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: TWDLROM_3_1_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/TWDLROM_3_1
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY TWDLROM_3_1_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_2_1_vld                      :   IN    std_logic;
        twdl_3_1_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32_En30
        twdl_3_1_im                       :   OUT   signed(31 DOWNTO 0)  -- sfix32_En30
        );
END TWDLROM_3_1_block1;


ARCHITECTURE rtl OF TWDLROM_3_1_block1 IS

  -- Constants
  CONSTANT Twiddle_re_table_data          : vector_of_signed32(0 TO 511) := 
    (to_signed(1073741824, 32), to_signed(1073740561, 32), to_signed(1073736771, 32), to_signed(1073730454, 32),
     to_signed(1073721611, 32), to_signed(1073710241, 32), to_signed(1073696345, 32), to_signed(1073679922, 32),
     to_signed(1073660973, 32), to_signed(1073639498, 32), to_signed(1073615496, 32), to_signed(1073588967, 32),
     to_signed(1073559913, 32), to_signed(1073528332, 32), to_signed(1073494225, 32), to_signed(1073457592, 32),
     to_signed(1073418433, 32), to_signed(1073376748, 32), to_signed(1073332538, 32), to_signed(1073285802, 32),
     to_signed(1073236540, 32), to_signed(1073184753, 32), to_signed(1073130440, 32), to_signed(1073073603, 32),
     to_signed(1073014240, 32), to_signed(1072952352, 32), to_signed(1072887940, 32), to_signed(1072821003, 32),
     to_signed(1072751542, 32), to_signed(1072679556, 32), to_signed(1072605046, 32), to_signed(1072528012, 32),
     to_signed(1072448455, 32), to_signed(1072366374, 32), to_signed(1072281769, 32), to_signed(1072194642, 32),
     to_signed(1072104991, 32), to_signed(1072012818, 32), to_signed(1071918122, 32), to_signed(1071820903, 32),
     to_signed(1071721163, 32), to_signed(1071618901, 32), to_signed(1071514117, 32), to_signed(1071406812, 32),
     to_signed(1071296985, 32), to_signed(1071184638, 32), to_signed(1071069770, 32), to_signed(1070952382, 32),
     to_signed(1070832474, 32), to_signed(1070710046, 32), to_signed(1070585099, 32), to_signed(1070457632, 32),
     to_signed(1070327646, 32), to_signed(1070195142, 32), to_signed(1070060120, 32), to_signed(1069922579, 32),
     to_signed(1069782521, 32), to_signed(1069639946, 32), to_signed(1069494854, 32), to_signed(1069347245, 32),
     to_signed(1069197120, 32), to_signed(1069044479, 32), to_signed(1068889322, 32), to_signed(1068731650, 32),
     to_signed(1068571464, 32), to_signed(1068408763, 32), to_signed(1068243547, 32), to_signed(1068075818, 32),
     to_signed(1067905576, 32), to_signed(1067732821, 32), to_signed(1067557554, 32), to_signed(1067379774, 32),
     to_signed(1067199483, 32), to_signed(1067016680, 32), to_signed(1066831367, 32), to_signed(1066643544, 32),
     to_signed(1066453210, 32), to_signed(1066260367, 32), to_signed(1066065015, 32), to_signed(1065867154, 32),
     to_signed(1065666786, 32), to_signed(1065463909, 32), to_signed(1065258526, 32), to_signed(1065050636, 32),
     to_signed(1064840240, 32), to_signed(1064627338, 32), to_signed(1064411931, 32), to_signed(1064194019, 32),
     to_signed(1063973603, 32), to_signed(1063750684, 32), to_signed(1063525261, 32), to_signed(1063297336, 32),
     to_signed(1063066909, 32), to_signed(1062833980, 32), to_signed(1062598550, 32), to_signed(1062360620, 32),
     to_signed(1062120190, 32), to_signed(1061877261, 32), to_signed(1061631833, 32), to_signed(1061383907, 32),
     to_signed(1061133483, 32), to_signed(1060880563, 32), to_signed(1060625146, 32), to_signed(1060367233, 32),
     to_signed(1060106826, 32), to_signed(1059843923, 32), to_signed(1059578527, 32), to_signed(1059310638, 32),
     to_signed(1059040255, 32), to_signed(1058767381, 32), to_signed(1058492016, 32), to_signed(1058214159, 32),
     to_signed(1057933813, 32), to_signed(1057650977, 32), to_signed(1057365653, 32), to_signed(1057077840, 32),
     to_signed(1056787540, 32), to_signed(1056494753, 32), to_signed(1056199480, 32), to_signed(1055901722, 32),
     to_signed(1055601479, 32), to_signed(1055298753, 32), to_signed(1054993543, 32), to_signed(1054685850, 32),
     to_signed(1054375676, 32), to_signed(1054063021, 32), to_signed(1053747885, 32), to_signed(1053430270, 32),
     to_signed(1053110176, 32), to_signed(1052787604, 32), to_signed(1052462555, 32), to_signed(1052135029, 32),
     to_signed(1051805027, 32), to_signed(1051472550, 32), to_signed(1051137599, 32), to_signed(1050800175, 32),
     to_signed(1050460278, 32), to_signed(1050117909, 32), to_signed(1049773069, 32), to_signed(1049425759, 32),
     to_signed(1049075980, 32), to_signed(1048723732, 32), to_signed(1048369016, 32), to_signed(1048011834, 32),
     to_signed(1047652185, 32), to_signed(1047290071, 32), to_signed(1046925492, 32), to_signed(1046558451, 32),
     to_signed(1046188946, 32), to_signed(1045816980, 32), to_signed(1045442553, 32), to_signed(1045065665, 32),
     to_signed(1044686319, 32), to_signed(1044304514, 32), to_signed(1043920252, 32), to_signed(1043533534, 32),
     to_signed(1043144360, 32), to_signed(1042752731, 32), to_signed(1042358649, 32), to_signed(1041962114, 32),
     to_signed(1041563127, 32), to_signed(1041161689, 32), to_signed(1040757802, 32), to_signed(1040351465, 32),
     to_signed(1039942680, 32), to_signed(1039531448, 32), to_signed(1039117770, 32), to_signed(1038701647, 32),
     to_signed(1038283080, 32), to_signed(1037862069, 32), to_signed(1037438617, 32), to_signed(1037012723, 32),
     to_signed(1036584389, 32), to_signed(1036153615, 32), to_signed(1035720404, 32), to_signed(1035284755, 32),
     to_signed(1034846671, 32), to_signed(1034406151, 32), to_signed(1033963197, 32), to_signed(1033517810, 32),
     to_signed(1033069992, 32), to_signed(1032619742, 32), to_signed(1032167062, 32), to_signed(1031711954, 32),
     to_signed(1031254418, 32), to_signed(1030794455, 32), to_signed(1030332067, 32), to_signed(1029867254, 32),
     to_signed(1029400018, 32), to_signed(1028930359, 32), to_signed(1028458280, 32), to_signed(1027983780, 32),
     to_signed(1027506862, 32), to_signed(1027027525, 32), to_signed(1026545772, 32), to_signed(1026061603, 32),
     to_signed(1025575020, 32), to_signed(1025086024, 32), to_signed(1024594615, 32), to_signed(1024100796, 32),
     to_signed(1023604567, 32), to_signed(1023105929, 32), to_signed(1022604883, 32), to_signed(1022101432, 32),
     to_signed(1021595575, 32), to_signed(1021087314, 32), to_signed(1020576651, 32), to_signed(1020063586, 32),
     to_signed(1019548121, 32), to_signed(1019030256, 32), to_signed(1018509994, 32), to_signed(1017987335, 32),
     to_signed(1017462281, 32), to_signed(1016934832, 32), to_signed(1016404991, 32), to_signed(1015872758, 32),
     to_signed(1015338134, 32), to_signed(1014801122, 32), to_signed(1014261721, 32), to_signed(1013719934, 32),
     to_signed(1013175761, 32), to_signed(1012629204, 32), to_signed(1012080264, 32), to_signed(1011528943, 32),
     to_signed(1010975242, 32), to_signed(1010419162, 32), to_signed(1009860704, 32), to_signed(1009299870, 32),
     to_signed(1008736660, 32), to_signed(1008171077, 32), to_signed(1007603122, 32), to_signed(1007032796, 32),
     to_signed(1006460100, 32), to_signed(1005885036, 32), to_signed(1005307605, 32), to_signed(1004727809, 32),
     to_signed(1004145648, 32), to_signed(1003561124, 32), to_signed(1002974239, 32), to_signed(1002384994, 32),
     to_signed(1001793390, 32), to_signed(1001199428, 32), to_signed(1000603111, 32), to_signed(1000004439, 32),
     to_signed(999403415, 32), to_signed(998800038, 32), to_signed(998194311, 32), to_signed(997586236, 32),
     to_signed(996975812, 32), to_signed(996363043, 32), to_signed(995747930, 32), to_signed(995130473, 32),
     to_signed(994510675, 32), to_signed(993888536, 32), to_signed(993264059, 32), to_signed(992637245, 32),
     to_signed(992008094, 32), to_signed(991376610, 32), to_signed(990742793, 32), to_signed(990106644, 32),
     to_signed(989468165, 32), to_signed(988827359, 32), to_signed(988184225, 32), to_signed(987538766, 32),
     to_signed(986890984, 32), to_signed(986240879, 32), to_signed(985588453, 32), to_signed(984933708, 32),
     to_signed(984276646, 32), to_signed(983617267, 32), to_signed(982955574, 32), to_signed(982291568, 32),
     to_signed(981625251, 32), to_signed(980956623, 32), to_signed(980285688, 32), to_signed(979612445, 32),
     to_signed(978936898, 32), to_signed(978259047, 32), to_signed(977578894, 32), to_signed(976896441, 32),
     to_signed(976211688, 32), to_signed(975524639, 32), to_signed(974835295, 32), to_signed(974143656, 32),
     to_signed(973449725, 32), to_signed(972753504, 32), to_signed(972054994, 32), to_signed(971354196, 32),
     to_signed(970651112, 32), to_signed(969945745, 32), to_signed(969238095, 32), to_signed(968528165, 32),
     to_signed(967815955, 32), to_signed(967101468, 32), to_signed(966384706, 32), to_signed(965665669, 32),
     to_signed(964944360, 32), to_signed(964220780, 32), to_signed(963494932, 32), to_signed(962766816, 32),
     to_signed(962036435, 32), to_signed(961303790, 32), to_signed(960568883, 32), to_signed(959831716, 32),
     to_signed(959092290, 32), to_signed(958350608, 32), to_signed(957606670, 32), to_signed(956860479, 32),
     to_signed(956112036, 32), to_signed(955361344, 32), to_signed(954608403, 32), to_signed(953853216, 32),
     to_signed(953095785, 32), to_signed(952336111, 32), to_signed(951574196, 32), to_signed(950810042, 32),
     to_signed(950043650, 32), to_signed(949275023, 32), to_signed(948504163, 32), to_signed(947731070, 32),
     to_signed(946955747, 32), to_signed(946178196, 32), to_signed(945398418, 32), to_signed(944616416, 32),
     to_signed(943832191, 32), to_signed(943045745, 32), to_signed(942257081, 32), to_signed(941466198, 32),
     to_signed(940673101, 32), to_signed(939877790, 32), to_signed(939080267, 32), to_signed(938280535, 32),
     to_signed(937478595, 32), to_signed(936674448, 32), to_signed(935868098, 32), to_signed(935059546, 32),
     to_signed(934248793, 32), to_signed(933435842, 32), to_signed(932620694, 32), to_signed(931803352, 32),
     to_signed(930983817, 32), to_signed(930162092, 32), to_signed(929338177, 32), to_signed(928512076, 32),
     to_signed(927683790, 32), to_signed(926853322, 32), to_signed(926020672, 32), to_signed(925185843, 32),
     to_signed(924348837, 32), to_signed(923509656, 32), to_signed(922668302, 32), to_signed(921824777, 32),
     to_signed(920979082, 32), to_signed(920131221, 32), to_signed(919281194, 32), to_signed(918429004, 32),
     to_signed(917574653, 32), to_signed(916718143, 32), to_signed(915859476, 32), to_signed(914998653, 32),
     to_signed(914135678, 32), to_signed(913270551, 32), to_signed(912403276, 32), to_signed(911533853, 32),
     to_signed(910662286, 32), to_signed(909788576, 32), to_signed(908912725, 32), to_signed(908034735, 32),
     to_signed(907154608, 32), to_signed(906272347, 32), to_signed(905387953, 32), to_signed(904501429, 32),
     to_signed(903612776, 32), to_signed(902721998, 32), to_signed(901829095, 32), to_signed(900934069, 32),
     to_signed(900036924, 32), to_signed(899137661, 32), to_signed(898236282, 32), to_signed(897332790, 32),
     to_signed(896427186, 32), to_signed(895519473, 32), to_signed(894609652, 32), to_signed(893697727, 32),
     to_signed(892783698, 32), to_signed(891867569, 32), to_signed(890949341, 32), to_signed(890029016, 32),
     to_signed(889106597, 32), to_signed(888182086, 32), to_signed(887255485, 32), to_signed(886326796, 32),
     to_signed(885396022, 32), to_signed(884463164, 32), to_signed(883528225, 32), to_signed(882591207, 32),
     to_signed(881652112, 32), to_signed(880710943, 32), to_signed(879767701, 32), to_signed(878822389, 32),
     to_signed(877875009, 32), to_signed(876925563, 32), to_signed(875974054, 32), to_signed(875020483, 32),
     to_signed(874064853, 32), to_signed(873107167, 32), to_signed(872147426, 32), to_signed(871185633, 32),
     to_signed(870221790, 32), to_signed(869255900, 32), to_signed(868287963, 32), to_signed(867317984, 32),
     to_signed(866345964, 32), to_signed(865371905, 32), to_signed(864395810, 32), to_signed(863417681, 32),
     to_signed(862437520, 32), to_signed(861455330, 32), to_signed(860471112, 32), to_signed(859484870, 32),
     to_signed(858496606, 32), to_signed(857506321, 32), to_signed(856514019, 32), to_signed(855519701, 32),
     to_signed(854523370, 32), to_signed(853525028, 32), to_signed(852524677, 32), to_signed(851522321, 32),
     to_signed(850517961, 32), to_signed(849511600, 32), to_signed(848503239, 32), to_signed(847492882, 32),
     to_signed(846480531, 32), to_signed(845466188, 32), to_signed(844449856, 32), to_signed(843431536, 32),
     to_signed(842411232, 32), to_signed(841388945, 32), to_signed(840364679, 32), to_signed(839338435, 32),
     to_signed(838310216, 32), to_signed(837280024, 32), to_signed(836247863, 32), to_signed(835213733, 32),
     to_signed(834177638, 32), to_signed(833139580, 32), to_signed(832099562, 32), to_signed(831057586, 32),
     to_signed(830013654, 32), to_signed(828967769, 32), to_signed(827919934, 32), to_signed(826870150, 32),
     to_signed(825818421, 32), to_signed(824764748, 32), to_signed(823709135, 32), to_signed(822651583, 32),
     to_signed(821592095, 32), to_signed(820530675, 32), to_signed(819467323, 32), to_signed(818402043, 32),
     to_signed(817334838, 32), to_signed(816265709, 32), to_signed(815194659, 32), to_signed(814121692, 32),
     to_signed(813046808, 32), to_signed(811970011, 32), to_signed(810891304, 32), to_signed(809810688, 32),
     to_signed(808728167, 32), to_signed(807643743, 32), to_signed(806557419, 32), to_signed(805469196, 32),
     to_signed(804379079, 32), to_signed(803287068, 32), to_signed(802193167, 32), to_signed(801097379, 32),
     to_signed(799999706, 32), to_signed(798900150, 32), to_signed(797798714, 32), to_signed(796695401, 32),
     to_signed(795590213, 32), to_signed(794483153, 32), to_signed(793374223, 32), to_signed(792263427, 32),
     to_signed(791150767, 32), to_signed(790036244, 32), to_signed(788919863, 32), to_signed(787801625, 32),
     to_signed(786681534, 32), to_signed(785559591, 32), to_signed(784435800, 32), to_signed(783310163, 32),
     to_signed(782182683, 32), to_signed(781053363, 32), to_signed(779922204, 32), to_signed(778789210, 32),
     to_signed(777654384, 32), to_signed(776517728, 32), to_signed(775379244, 32), to_signed(774238936, 32),
     to_signed(773096806, 32), to_signed(771952857, 32), to_signed(770807092, 32), to_signed(769659512, 32),
     to_signed(768510122, 32), to_signed(767358923, 32), to_signed(766205919, 32), to_signed(765051111, 32),
     to_signed(763894504, 32), to_signed(762736098, 32), to_signed(761575898, 32), to_signed(760413906, 32));  -- sfix32 [512]
  CONSTANT Twiddle_im_table_data          : vector_of_signed32(0 TO 511) := 
    (to_signed(0, 32), to_signed(-1647099, 32), to_signed(-3294193, 32), to_signed(-4941281, 32),
     to_signed(-6588356, 32), to_signed(-8235416, 32), to_signed(-9882456, 32), to_signed(-11529474, 32),
     to_signed(-13176464, 32), to_signed(-14823423, 32), to_signed(-16470347, 32), to_signed(-18117233, 32),
     to_signed(-19764076, 32), to_signed(-21410872, 32), to_signed(-23057618, 32), to_signed(-24704310, 32),
     to_signed(-26350943, 32), to_signed(-27997515, 32), to_signed(-29644021, 32), to_signed(-31290457, 32),
     to_signed(-32936819, 32), to_signed(-34583104, 32), to_signed(-36229307, 32), to_signed(-37875426, 32),
     to_signed(-39521455, 32), to_signed(-41167391, 32), to_signed(-42813230, 32), to_signed(-44458968, 32),
     to_signed(-46104602, 32), to_signed(-47750128, 32), to_signed(-49395541, 32), to_signed(-51040837, 32),
     to_signed(-52686014, 32), to_signed(-54331067, 32), to_signed(-55975992, 32), to_signed(-57620785, 32),
     to_signed(-59265442, 32), to_signed(-60909960, 32), to_signed(-62554335, 32), to_signed(-64198563, 32),
     to_signed(-65842639, 32), to_signed(-67486561, 32), to_signed(-69130324, 32), to_signed(-70773924, 32),
     to_signed(-72417357, 32), to_signed(-74060620, 32), to_signed(-75703709, 32), to_signed(-77346620, 32),
     to_signed(-78989349, 32), to_signed(-80631892, 32), to_signed(-82274245, 32), to_signed(-83916404, 32),
     to_signed(-85558366, 32), to_signed(-87200127, 32), to_signed(-88841683, 32), to_signed(-90483029, 32),
     to_signed(-92124163, 32), to_signed(-93765079, 32), to_signed(-95405776, 32), to_signed(-97046247, 32),
     to_signed(-98686491, 32), to_signed(-100326502, 32), to_signed(-101966277, 32), to_signed(-103605812, 32),
     to_signed(-105245103, 32), to_signed(-106884147, 32), to_signed(-108522939, 32), to_signed(-110161476, 32),
     to_signed(-111799753, 32), to_signed(-113437768, 32), to_signed(-115075515, 32), to_signed(-116712992, 32),
     to_signed(-118350194, 32), to_signed(-119987118, 32), to_signed(-121623759, 32), to_signed(-123260114, 32),
     to_signed(-124896179, 32), to_signed(-126531950, 32), to_signed(-128167423, 32), to_signed(-129802595, 32),
     to_signed(-131437462, 32), to_signed(-133072019, 32), to_signed(-134706263, 32), to_signed(-136340190, 32),
     to_signed(-137973796, 32), to_signed(-139607077, 32), to_signed(-141240030, 32), to_signed(-142872651, 32),
     to_signed(-144504935, 32), to_signed(-146136880, 32), to_signed(-147768480, 32), to_signed(-149399733, 32),
     to_signed(-151030634, 32), to_signed(-152661180, 32), to_signed(-154291367, 32), to_signed(-155921191, 32),
     to_signed(-157550647, 32), to_signed(-159179733, 32), to_signed(-160808445, 32), to_signed(-162436778, 32),
     to_signed(-164064728, 32), to_signed(-165692293, 32), to_signed(-167319468, 32), to_signed(-168946249, 32),
     to_signed(-170572633, 32), to_signed(-172198615, 32), to_signed(-173824192, 32), to_signed(-175449360, 32),
     to_signed(-177074115, 32), to_signed(-178698453, 32), to_signed(-180322371, 32), to_signed(-181945865, 32),
     to_signed(-183568930, 32), to_signed(-185191564, 32), to_signed(-186813762, 32), to_signed(-188435520, 32),
     to_signed(-190056834, 32), to_signed(-191677702, 32), to_signed(-193298119, 32), to_signed(-194918080, 32),
     to_signed(-196537583, 32), to_signed(-198156624, 32), to_signed(-199775198, 32), to_signed(-201393302, 32),
     to_signed(-203010932, 32), to_signed(-204628085, 32), to_signed(-206244756, 32), to_signed(-207860942, 32),
     to_signed(-209476638, 32), to_signed(-211091842, 32), to_signed(-212706549, 32), to_signed(-214320755, 32),
     to_signed(-215934457, 32), to_signed(-217547651, 32), to_signed(-219160334, 32), to_signed(-220772500, 32),
     to_signed(-222384147, 32), to_signed(-223995270, 32), to_signed(-225605867, 32), to_signed(-227215933, 32),
     to_signed(-228825464, 32), to_signed(-230434456, 32), to_signed(-232042906, 32), to_signed(-233650811, 32),
     to_signed(-235258165, 32), to_signed(-236864966, 32), to_signed(-238471210, 32), to_signed(-240076892, 32),
     to_signed(-241682010, 32), to_signed(-243286558, 32), to_signed(-244890535, 32), to_signed(-246493935, 32),
     to_signed(-248096755, 32), to_signed(-249698991, 32), to_signed(-251300640, 32), to_signed(-252901697, 32),
     to_signed(-254502159, 32), to_signed(-256102022, 32), to_signed(-257701283, 32), to_signed(-259299937, 32),
     to_signed(-260897982, 32), to_signed(-262495412, 32), to_signed(-264092224, 32), to_signed(-265688415, 32),
     to_signed(-267283981, 32), to_signed(-268878918, 32), to_signed(-270473223, 32), to_signed(-272066891, 32),
     to_signed(-273659918, 32), to_signed(-275252302, 32), to_signed(-276844038, 32), to_signed(-278435122, 32),
     to_signed(-280025552, 32), to_signed(-281615322, 32), to_signed(-283204430, 32), to_signed(-284792871, 32),
     to_signed(-286380643, 32), to_signed(-287967740, 32), to_signed(-289554160, 32), to_signed(-291139898, 32),
     to_signed(-292724951, 32), to_signed(-294309316, 32), to_signed(-295892988, 32), to_signed(-297475964, 32),
     to_signed(-299058239, 32), to_signed(-300639811, 32), to_signed(-302220676, 32), to_signed(-303800829, 32),
     to_signed(-305380268, 32), to_signed(-306958988, 32), to_signed(-308536985, 32), to_signed(-310114257, 32),
     to_signed(-311690799, 32), to_signed(-313266607, 32), to_signed(-314841679, 32), to_signed(-316416009, 32),
     to_signed(-317989595, 32), to_signed(-319562433, 32), to_signed(-321134518, 32), to_signed(-322705848, 32),
     to_signed(-324276419, 32), to_signed(-325846226, 32), to_signed(-327415267, 32), to_signed(-328983538, 32),
     to_signed(-330551034, 32), to_signed(-332117752, 32), to_signed(-333683689, 32), to_signed(-335248841, 32),
     to_signed(-336813204, 32), to_signed(-338376774, 32), to_signed(-339939549, 32), to_signed(-341501523, 32),
     to_signed(-343062693, 32), to_signed(-344623057, 32), to_signed(-346182609, 32), to_signed(-347741347, 32),
     to_signed(-349299266, 32), to_signed(-350856364, 32), to_signed(-352412636, 32), to_signed(-353968079, 32),
     to_signed(-355522689, 32), to_signed(-357076462, 32), to_signed(-358629395, 32), to_signed(-360181484, 32),
     to_signed(-361732726, 32), to_signed(-363283116, 32), to_signed(-364832652, 32), to_signed(-366381329, 32),
     to_signed(-367929144, 32), to_signed(-369476093, 32), to_signed(-371022173, 32), to_signed(-372567379, 32),
     to_signed(-374111709, 32), to_signed(-375655159, 32), to_signed(-377197725, 32), to_signed(-378739403, 32),
     to_signed(-380280190, 32), to_signed(-381820082, 32), to_signed(-383359076, 32), to_signed(-384897167, 32),
     to_signed(-386434353, 32), to_signed(-387970630, 32), to_signed(-389505993, 32), to_signed(-391040440, 32),
     to_signed(-392573967, 32), to_signed(-394106570, 32), to_signed(-395638246, 32), to_signed(-397168991, 32),
     to_signed(-398698801, 32), to_signed(-400227673, 32), to_signed(-401755603, 32), to_signed(-403282588, 32),
     to_signed(-404808624, 32), to_signed(-406333708, 32), to_signed(-407857835, 32), to_signed(-409381002, 32),
     to_signed(-410903207, 32), to_signed(-412424444, 32), to_signed(-413944711, 32), to_signed(-415464004, 32),
     to_signed(-416982319, 32), to_signed(-418499653, 32), to_signed(-420016002, 32), to_signed(-421531363, 32),
     to_signed(-423045732, 32), to_signed(-424559105, 32), to_signed(-426071480, 32), to_signed(-427582852, 32),
     to_signed(-429093217, 32), to_signed(-430602573, 32), to_signed(-432110916, 32), to_signed(-433618242, 32),
     to_signed(-435124548, 32), to_signed(-436629829, 32), to_signed(-438134084, 32), to_signed(-439637307, 32),
     to_signed(-441139496, 32), to_signed(-442640647, 32), to_signed(-444140756, 32), to_signed(-445639820, 32),
     to_signed(-447137835, 32), to_signed(-448634799, 32), to_signed(-450130706, 32), to_signed(-451625555, 32),
     to_signed(-453119340, 32), to_signed(-454612060, 32), to_signed(-456103710, 32), to_signed(-457594286, 32),
     to_signed(-459083786, 32), to_signed(-460572205, 32), to_signed(-462059541, 32), to_signed(-463545789, 32),
     to_signed(-465030947, 32), to_signed(-466515010, 32), to_signed(-467997976, 32), to_signed(-469479840, 32),
     to_signed(-470960600, 32), to_signed(-472440251, 32), to_signed(-473918791, 32), to_signed(-475396216, 32),
     to_signed(-476872522, 32), to_signed(-478347705, 32), to_signed(-479821764, 32), to_signed(-481294693, 32),
     to_signed(-482766489, 32), to_signed(-484237150, 32), to_signed(-485706671, 32), to_signed(-487175049, 32),
     to_signed(-488642281, 32), to_signed(-490108363, 32), to_signed(-491573292, 32), to_signed(-493037064, 32),
     to_signed(-494499676, 32), to_signed(-495961124, 32), to_signed(-497421405, 32), to_signed(-498880516, 32),
     to_signed(-500338453, 32), to_signed(-501795212, 32), to_signed(-503250791, 32), to_signed(-504705185, 32),
     to_signed(-506158392, 32), to_signed(-507610408, 32), to_signed(-509061229, 32), to_signed(-510510853, 32),
     to_signed(-511959275, 32), to_signed(-513406493, 32), to_signed(-514852502, 32), to_signed(-516297300, 32),
     to_signed(-517740883, 32), to_signed(-519183248, 32), to_signed(-520624391, 32), to_signed(-522064309, 32),
     to_signed(-523502998, 32), to_signed(-524940456, 32), to_signed(-526376678, 32), to_signed(-527811662, 32),
     to_signed(-529245404, 32), to_signed(-530677900, 32), to_signed(-532109148, 32), to_signed(-533539144, 32),
     to_signed(-534967884, 32), to_signed(-536395365, 32), to_signed(-537821584, 32), to_signed(-539246538, 32),
     to_signed(-540670223, 32), to_signed(-542092635, 32), to_signed(-543513772, 32), to_signed(-544933630, 32),
     to_signed(-546352205, 32), to_signed(-547769495, 32), to_signed(-549185496, 32), to_signed(-550600205, 32),
     to_signed(-552013618, 32), to_signed(-553425732, 32), to_signed(-554836544, 32), to_signed(-556246051, 32),
     to_signed(-557654248, 32), to_signed(-559061133, 32), to_signed(-560466703, 32), to_signed(-561870954, 32),
     to_signed(-563273883, 32), to_signed(-564675486, 32), to_signed(-566075761, 32), to_signed(-567474703, 32),
     to_signed(-568872310, 32), to_signed(-570268579, 32), to_signed(-571663506, 32), to_signed(-573057087, 32),
     to_signed(-574449320, 32), to_signed(-575840202, 32), to_signed(-577229728, 32), to_signed(-578617896, 32),
     to_signed(-580004702, 32), to_signed(-581390144, 32), to_signed(-582774218, 32), to_signed(-584156920, 32),
     to_signed(-585538248, 32), to_signed(-586918198, 32), to_signed(-588296766, 32), to_signed(-589673951, 32),
     to_signed(-591049748, 32), to_signed(-592424154, 32), to_signed(-593797166, 32), to_signed(-595168781, 32),
     to_signed(-596538995, 32), to_signed(-597907806, 32), to_signed(-599275210, 32), to_signed(-600641203, 32),
     to_signed(-602005783, 32), to_signed(-603368947, 32), to_signed(-604730691, 32), to_signed(-606091012, 32),
     to_signed(-607449906, 32), to_signed(-608807372, 32), to_signed(-610163404, 32), to_signed(-611518001, 32),
     to_signed(-612871159, 32), to_signed(-614222875, 32), to_signed(-615573145, 32), to_signed(-616921967, 32),
     to_signed(-618269338, 32), to_signed(-619615253, 32), to_signed(-620959711, 32), to_signed(-622302707, 32),
     to_signed(-623644239, 32), to_signed(-624984303, 32), to_signed(-626322897, 32), to_signed(-627660017, 32),
     to_signed(-628995660, 32), to_signed(-630329823, 32), to_signed(-631662503, 32), to_signed(-632993696, 32),
     to_signed(-634323400, 32), to_signed(-635651611, 32), to_signed(-636978327, 32), to_signed(-638303543, 32),
     to_signed(-639627258, 32), to_signed(-640949467, 32), to_signed(-642270169, 32), to_signed(-643589359, 32),
     to_signed(-644907034, 32), to_signed(-646223192, 32), to_signed(-647537830, 32), to_signed(-648850943, 32),
     to_signed(-650162530, 32), to_signed(-651472587, 32), to_signed(-652781111, 32), to_signed(-654088099, 32),
     to_signed(-655393548, 32), to_signed(-656697454, 32), to_signed(-657999816, 32), to_signed(-659300629, 32),
     to_signed(-660599890, 32), to_signed(-661897597, 32), to_signed(-663193747, 32), to_signed(-664488336, 32),
     to_signed(-665781362, 32), to_signed(-667072820, 32), to_signed(-668362709, 32), to_signed(-669651026, 32),
     to_signed(-670937767, 32), to_signed(-672222928, 32), to_signed(-673506508, 32), to_signed(-674788504, 32),
     to_signed(-676068911, 32), to_signed(-677347728, 32), to_signed(-678624950, 32), to_signed(-679900576, 32),
     to_signed(-681174602, 32), to_signed(-682447025, 32), to_signed(-683717842, 32), to_signed(-684987051, 32),
     to_signed(-686254647, 32), to_signed(-687520629, 32), to_signed(-688784993, 32), to_signed(-690047736, 32),
     to_signed(-691308855, 32), to_signed(-692568348, 32), to_signed(-693826211, 32), to_signed(-695082441, 32),
     to_signed(-696337036, 32), to_signed(-697589992, 32), to_signed(-698841307, 32), to_signed(-700090977, 32),
     to_signed(-701339000, 32), to_signed(-702585372, 32), to_signed(-703830092, 32), to_signed(-705073155, 32),
     to_signed(-706314559, 32), to_signed(-707554301, 32), to_signed(-708792378, 32), to_signed(-710028787, 32),
     to_signed(-711263525, 32), to_signed(-712496590, 32), to_signed(-713727978, 32), to_signed(-714957687, 32),
     to_signed(-716185713, 32), to_signed(-717412054, 32), to_signed(-718636707, 32), to_signed(-719859669, 32),
     to_signed(-721080937, 32), to_signed(-722300508, 32), to_signed(-723518380, 32), to_signed(-724734549, 32),
     to_signed(-725949013, 32), to_signed(-727161768, 32), to_signed(-728372813, 32), to_signed(-729582143, 32),
     to_signed(-730789757, 32), to_signed(-731995651, 32), to_signed(-733199822, 32), to_signed(-734402269, 32),
     to_signed(-735602987, 32), to_signed(-736801974, 32), to_signed(-737999228, 32), to_signed(-739194745, 32),
     to_signed(-740388522, 32), to_signed(-741580558, 32), to_signed(-742770848, 32), to_signed(-743959390, 32),
     to_signed(-745146182, 32), to_signed(-746331221, 32), to_signed(-747514503, 32), to_signed(-748696026, 32),
     to_signed(-749875788, 32), to_signed(-751053785, 32), to_signed(-752230015, 32), to_signed(-753404474, 32),
     to_signed(-754577161, 32), to_signed(-755748072, 32), to_signed(-756917205, 32), to_signed(-758084557, 32));  -- sfix32 [512]

  -- Signals
  SIGNAL Radix22TwdlMapping_cnt           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Radix22TwdlMapping_phase         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw  : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Radix22TwdlMapping_twdlAddrMap   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdl45Reg     : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1      : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2      : std_logic;
  SIGNAL Radix22TwdlMapping_holdCycleCnt  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_cnt_next      : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Radix22TwdlMapping_phase_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1_next : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw_next : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Radix22TwdlMapping_twdlAddrMap_next : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdl45Reg_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2_next : std_logic;
  SIGNAL Radix22TwdlMapping_holdCycleCnt_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL twdlAddr                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL twdlAddrVld                      : std_logic;
  SIGNAL twdlOctant                       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45                           : std_logic;
  SIGNAL twiddleS_re                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twiddleReg_re                    : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twiddleS_im                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twiddleReg_im                    : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twdlOctantReg                    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45Reg                        : std_logic;

BEGIN
  -- Radix22TwdlMapping
  Radix22TwdlMapping_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22TwdlMapping_octantReg1 <= to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdlAddr_raw <= to_unsigned(16#000#, 12);
        Radix22TwdlMapping_twdlAddrMap <= to_unsigned(16#000#, 9);
        Radix22TwdlMapping_twdl45Reg <= '0';
        Radix22TwdlMapping_dvldReg1 <= '0';
        Radix22TwdlMapping_dvldReg2 <= '0';
        Radix22TwdlMapping_cnt <= to_unsigned(16#000#, 10);
        Radix22TwdlMapping_holdCycleCnt <= to_unsigned(16#0#, 2);
        Radix22TwdlMapping_phase <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        Radix22TwdlMapping_cnt <= Radix22TwdlMapping_cnt_next;
        Radix22TwdlMapping_phase <= Radix22TwdlMapping_phase_next;
        Radix22TwdlMapping_octantReg1 <= Radix22TwdlMapping_octantReg1_next;
        Radix22TwdlMapping_twdlAddr_raw <= Radix22TwdlMapping_twdlAddr_raw_next;
        Radix22TwdlMapping_twdlAddrMap <= Radix22TwdlMapping_twdlAddrMap_next;
        Radix22TwdlMapping_twdl45Reg <= Radix22TwdlMapping_twdl45Reg_next;
        Radix22TwdlMapping_dvldReg1 <= Radix22TwdlMapping_dvldReg1_next;
        Radix22TwdlMapping_dvldReg2 <= Radix22TwdlMapping_dvldReg2_next;
        Radix22TwdlMapping_holdCycleCnt <= Radix22TwdlMapping_holdCycleCnt_next;
      END IF;
    END IF;
  END PROCESS Radix22TwdlMapping_process;

  Radix22TwdlMapping_output : PROCESS (Radix22TwdlMapping_cnt, Radix22TwdlMapping_dvldReg1,
       Radix22TwdlMapping_dvldReg2, Radix22TwdlMapping_holdCycleCnt,
       Radix22TwdlMapping_octantReg1, Radix22TwdlMapping_phase,
       Radix22TwdlMapping_twdl45Reg, Radix22TwdlMapping_twdlAddrMap,
       Radix22TwdlMapping_twdlAddr_raw, dout_2_1_vld)
    VARIABLE octant : unsigned(2 DOWNTO 0);
    VARIABLE addr_cast : unsigned(11 DOWNTO 0);
    VARIABLE c : unsigned(9 DOWNTO 0);
    VARIABLE sub_temp : signed(25 DOWNTO 0);
    VARIABLE sub_temp_0 : signed(13 DOWNTO 0);
    VARIABLE sub_temp_1 : signed(13 DOWNTO 0);
    VARIABLE sub_temp_2 : signed(25 DOWNTO 0);
    VARIABLE sub_temp_3 : signed(25 DOWNTO 0);
  BEGIN
    sub_temp := to_signed(16#0000000#, 26);
    sub_temp_0 := to_signed(16#0000#, 14);
    sub_temp_1 := to_signed(16#0000#, 14);
    sub_temp_2 := to_signed(16#0000000#, 26);
    sub_temp_3 := to_signed(16#0000000#, 26);
    addr_cast := to_unsigned(16#000#, 12);
    Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt;
    Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase;
    Radix22TwdlMapping_holdCycleCnt_next <= Radix22TwdlMapping_holdCycleCnt;
    Radix22TwdlMapping_dvldReg2_next <= Radix22TwdlMapping_dvldReg1;
    Radix22TwdlMapping_dvldReg1_next <= dout_2_1_vld;
    CASE Radix22TwdlMapping_twdlAddr_raw IS
      WHEN "001000000000" =>
        octant := to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "010000000000" =>
        octant := to_unsigned(16#1#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "011000000000" =>
        octant := to_unsigned(16#2#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "100000000000" =>
        octant := to_unsigned(16#3#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "101000000000" =>
        octant := to_unsigned(16#4#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN OTHERS => 
        octant := Radix22TwdlMapping_twdlAddr_raw(11 DOWNTO 9);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
    END CASE;
    Radix22TwdlMapping_octantReg1_next <= octant;
    CASE octant IS
      WHEN "000" =>
        Radix22TwdlMapping_twdlAddrMap_next <= Radix22TwdlMapping_twdlAddr_raw(8 DOWNTO 0);
      WHEN "001" =>
        sub_temp_0 := to_signed(16#0400#, 14) - signed(resize(Radix22TwdlMapping_twdlAddr_raw, 14));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_0(8 DOWNTO 0));
      WHEN "010" =>
        sub_temp_1 := signed(resize(Radix22TwdlMapping_twdlAddr_raw, 14)) - to_signed(16#0400#, 14);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_1(8 DOWNTO 0));
      WHEN "011" =>
        sub_temp_2 := to_signed(16#0100000#, 26) - signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_2(17 DOWNTO 9));
      WHEN "100" =>
        sub_temp_3 := signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26)) - to_signed(16#0100000#, 26);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_3(17 DOWNTO 9));
      WHEN OTHERS => 
        sub_temp := to_signed(16#0180000#, 26) - signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp(17 DOWNTO 9));
    END CASE;
    c := unsigned'(Radix22TwdlMapping_cnt(0) & Radix22TwdlMapping_cnt(1) & Radix22TwdlMapping_cnt(2) & Radix22TwdlMapping_cnt(3) & Radix22TwdlMapping_cnt(4) & Radix22TwdlMapping_cnt(5) & Radix22TwdlMapping_cnt(6) & Radix22TwdlMapping_cnt(7) & Radix22TwdlMapping_cnt(8) & Radix22TwdlMapping_cnt(9));
    IF Radix22TwdlMapping_phase = to_unsigned(16#0#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= to_unsigned(16#000#, 12);
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#1#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(c, 12);
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#2#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(c, 12) sll 1;
    ELSE 
      addr_cast := resize(c, 12);
      Radix22TwdlMapping_twdlAddr_raw_next <= (addr_cast sll 1) + addr_cast;
    END IF;
    IF dout_2_1_vld = '1' THEN 
      Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase + to_unsigned(16#1#, 2);
    END IF;
    IF dout_2_1_vld = '1' THEN 
      IF Radix22TwdlMapping_holdCycleCnt = to_unsigned(16#3#, 2) THEN 
        Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt + to_unsigned(16#001#, 10);
      END IF;
      Radix22TwdlMapping_holdCycleCnt_next <= Radix22TwdlMapping_holdCycleCnt + to_unsigned(16#1#, 2);
    END IF;
    twdlAddr <= Radix22TwdlMapping_twdlAddrMap;
    twdlAddrVld <= Radix22TwdlMapping_dvldReg2;
    twdlOctant <= Radix22TwdlMapping_octantReg1;
    twdl45 <= Radix22TwdlMapping_twdl45Reg;
  END PROCESS Radix22TwdlMapping_output;


  -- Twiddle ROM1
  twiddleS_re <= Twiddle_re_table_data(to_integer(twdlAddr));

  TWIDDLEROM_RE_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twiddleReg_re <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        twiddleReg_re <= twiddleS_re;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_RE_process;


  -- Twiddle ROM2
  twiddleS_im <= Twiddle_im_table_data(to_integer(twdlAddr));

  TWIDDLEROM_IM_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twiddleReg_im <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        twiddleReg_im <= twiddleS_im;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_IM_process;


  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdlOctantReg <= to_unsigned(16#0#, 3);
      ELSIF enb = '1' THEN
        twdlOctantReg <= twdlOctant;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl45Reg <= '0';
      ELSIF enb = '1' THEN
        twdl45Reg <= twdl45;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  -- Radix22TwdlOctCorr
  Radix22TwdlOctCorr_output : PROCESS (twdl45Reg, twdlOctantReg, twiddleReg_im, twiddleReg_re)
    VARIABLE twdlIn_re : signed(31 DOWNTO 0);
    VARIABLE twdlIn_im : signed(31 DOWNTO 0);
    VARIABLE cast : signed(32 DOWNTO 0);
    VARIABLE cast_0 : signed(32 DOWNTO 0);
    VARIABLE cast_1 : signed(32 DOWNTO 0);
    VARIABLE cast_2 : signed(32 DOWNTO 0);
    VARIABLE cast_3 : signed(32 DOWNTO 0);
    VARIABLE cast_4 : signed(32 DOWNTO 0);
  BEGIN
    cast := to_signed(0, 33);
    cast_0 := to_signed(0, 33);
    cast_1 := to_signed(0, 33);
    cast_2 := to_signed(0, 33);
    cast_3 := to_signed(0, 33);
    cast_4 := to_signed(0, 33);
    twdlIn_re := twiddleReg_re;
    twdlIn_im := twiddleReg_im;
    IF twdl45Reg = '1' THEN 
      CASE twdlOctantReg IS
        WHEN "000" =>
          twdlIn_re := to_signed(759250125, 32);
          twdlIn_im := to_signed(-759250125, 32);
        WHEN "010" =>
          twdlIn_re := to_signed(-759250125, 32);
          twdlIn_im := to_signed(-759250125, 32);
        WHEN "100" =>
          twdlIn_re := to_signed(-759250125, 32);
          twdlIn_im := to_signed(759250125, 32);
        WHEN OTHERS => 
          twdlIn_re := to_signed(759250125, 32);
          twdlIn_im := to_signed(-759250125, 32);
      END CASE;
    ELSE 
      CASE twdlOctantReg IS
        WHEN "000" =>
          NULL;
        WHEN "001" =>
          cast :=  - (resize(twiddleReg_im, 33));
          twdlIn_re := cast(31 DOWNTO 0);
          cast_2 :=  - (resize(twiddleReg_re, 33));
          twdlIn_im := cast_2(31 DOWNTO 0);
        WHEN "010" =>
          twdlIn_re := twiddleReg_im;
          cast_3 :=  - (resize(twiddleReg_re, 33));
          twdlIn_im := cast_3(31 DOWNTO 0);
        WHEN "011" =>
          cast_0 :=  - (resize(twiddleReg_re, 33));
          twdlIn_re := cast_0(31 DOWNTO 0);
          twdlIn_im := twiddleReg_im;
        WHEN "100" =>
          cast_1 :=  - (resize(twiddleReg_re, 33));
          twdlIn_re := cast_1(31 DOWNTO 0);
          cast_4 :=  - (resize(twiddleReg_im, 33));
          twdlIn_im := cast_4(31 DOWNTO 0);
        WHEN OTHERS => 
          twdlIn_re := twiddleReg_im;
          twdlIn_im := twiddleReg_re;
      END CASE;
    END IF;
    twdl_3_1_re <= twdlIn_re;
    twdl_3_1_im <= twdlIn_im;
  END PROCESS Radix22TwdlOctCorr_output;


END rtl;


-- End of TWDLROM_3_1_block1.vhd --

-- Start of TWDLROM_5_1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\TWDLROM_5_1.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: TWDLROM_5_1
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/TWDLROM_5_1
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY TWDLROM_5_1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_4_1_vld                      :   IN    std_logic;
        twdl_5_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16_En14
        twdl_5_1_im                       :   OUT   signed(15 DOWNTO 0)  -- sfix16_En14
        );
END TWDLROM_5_1;


ARCHITECTURE rtl OF TWDLROM_5_1 IS

  -- Constants
  CONSTANT Twiddle_re_table_data          : vector_of_signed16(0 TO 511) := 
    (to_signed(16#4000#, 16), to_signed(16#4000#, 16), to_signed(16#4000#, 16), to_signed(16#4000#, 16),
     to_signed(16#4000#, 16), to_signed(16#4000#, 16), to_signed(16#3FFF#, 16), to_signed(16#3FFF#, 16),
     to_signed(16#3FFF#, 16), to_signed(16#3FFE#, 16), to_signed(16#3FFE#, 16), to_signed(16#3FFE#, 16),
     to_signed(16#3FFD#, 16), to_signed(16#3FFD#, 16), to_signed(16#3FFC#, 16), to_signed(16#3FFC#, 16),
     to_signed(16#3FFB#, 16), to_signed(16#3FFA#, 16), to_signed(16#3FFA#, 16), to_signed(16#3FF9#, 16),
     to_signed(16#3FF8#, 16), to_signed(16#3FF7#, 16), to_signed(16#3FF7#, 16), to_signed(16#3FF6#, 16),
     to_signed(16#3FF5#, 16), to_signed(16#3FF4#, 16), to_signed(16#3FF3#, 16), to_signed(16#3FF2#, 16),
     to_signed(16#3FF1#, 16), to_signed(16#3FF0#, 16), to_signed(16#3FEF#, 16), to_signed(16#3FED#, 16),
     to_signed(16#3FEC#, 16), to_signed(16#3FEB#, 16), to_signed(16#3FEA#, 16), to_signed(16#3FE8#, 16),
     to_signed(16#3FE7#, 16), to_signed(16#3FE6#, 16), to_signed(16#3FE4#, 16), to_signed(16#3FE3#, 16),
     to_signed(16#3FE1#, 16), to_signed(16#3FE0#, 16), to_signed(16#3FDE#, 16), to_signed(16#3FDC#, 16),
     to_signed(16#3FDB#, 16), to_signed(16#3FD9#, 16), to_signed(16#3FD7#, 16), to_signed(16#3FD5#, 16),
     to_signed(16#3FD4#, 16), to_signed(16#3FD2#, 16), to_signed(16#3FD0#, 16), to_signed(16#3FCE#, 16),
     to_signed(16#3FCC#, 16), to_signed(16#3FCA#, 16), to_signed(16#3FC8#, 16), to_signed(16#3FC6#, 16),
     to_signed(16#3FC4#, 16), to_signed(16#3FC1#, 16), to_signed(16#3FBF#, 16), to_signed(16#3FBD#, 16),
     to_signed(16#3FBB#, 16), to_signed(16#3FB8#, 16), to_signed(16#3FB6#, 16), to_signed(16#3FB4#, 16),
     to_signed(16#3FB1#, 16), to_signed(16#3FAF#, 16), to_signed(16#3FAC#, 16), to_signed(16#3FAA#, 16),
     to_signed(16#3FA7#, 16), to_signed(16#3FA4#, 16), to_signed(16#3FA2#, 16), to_signed(16#3F9F#, 16),
     to_signed(16#3F9C#, 16), to_signed(16#3F99#, 16), to_signed(16#3F97#, 16), to_signed(16#3F94#, 16),
     to_signed(16#3F91#, 16), to_signed(16#3F8E#, 16), to_signed(16#3F8B#, 16), to_signed(16#3F88#, 16),
     to_signed(16#3F85#, 16), to_signed(16#3F82#, 16), to_signed(16#3F7F#, 16), to_signed(16#3F7B#, 16),
     to_signed(16#3F78#, 16), to_signed(16#3F75#, 16), to_signed(16#3F72#, 16), to_signed(16#3F6E#, 16),
     to_signed(16#3F6B#, 16), to_signed(16#3F68#, 16), to_signed(16#3F64#, 16), to_signed(16#3F61#, 16),
     to_signed(16#3F5D#, 16), to_signed(16#3F5A#, 16), to_signed(16#3F56#, 16), to_signed(16#3F52#, 16),
     to_signed(16#3F4F#, 16), to_signed(16#3F4B#, 16), to_signed(16#3F47#, 16), to_signed(16#3F43#, 16),
     to_signed(16#3F40#, 16), to_signed(16#3F3C#, 16), to_signed(16#3F38#, 16), to_signed(16#3F34#, 16),
     to_signed(16#3F30#, 16), to_signed(16#3F2C#, 16), to_signed(16#3F28#, 16), to_signed(16#3F24#, 16),
     to_signed(16#3F20#, 16), to_signed(16#3F1C#, 16), to_signed(16#3F17#, 16), to_signed(16#3F13#, 16),
     to_signed(16#3F0F#, 16), to_signed(16#3F0A#, 16), to_signed(16#3F06#, 16), to_signed(16#3F02#, 16),
     to_signed(16#3EFD#, 16), to_signed(16#3EF9#, 16), to_signed(16#3EF4#, 16), to_signed(16#3EF0#, 16),
     to_signed(16#3EEB#, 16), to_signed(16#3EE7#, 16), to_signed(16#3EE2#, 16), to_signed(16#3EDD#, 16),
     to_signed(16#3ED8#, 16), to_signed(16#3ED4#, 16), to_signed(16#3ECF#, 16), to_signed(16#3ECA#, 16),
     to_signed(16#3EC5#, 16), to_signed(16#3EC0#, 16), to_signed(16#3EBB#, 16), to_signed(16#3EB6#, 16),
     to_signed(16#3EB1#, 16), to_signed(16#3EAC#, 16), to_signed(16#3EA7#, 16), to_signed(16#3EA2#, 16),
     to_signed(16#3E9D#, 16), to_signed(16#3E98#, 16), to_signed(16#3E92#, 16), to_signed(16#3E8D#, 16),
     to_signed(16#3E88#, 16), to_signed(16#3E82#, 16), to_signed(16#3E7D#, 16), to_signed(16#3E77#, 16),
     to_signed(16#3E72#, 16), to_signed(16#3E6C#, 16), to_signed(16#3E67#, 16), to_signed(16#3E61#, 16),
     to_signed(16#3E5C#, 16), to_signed(16#3E56#, 16), to_signed(16#3E50#, 16), to_signed(16#3E4A#, 16),
     to_signed(16#3E45#, 16), to_signed(16#3E3F#, 16), to_signed(16#3E39#, 16), to_signed(16#3E33#, 16),
     to_signed(16#3E2D#, 16), to_signed(16#3E27#, 16), to_signed(16#3E21#, 16), to_signed(16#3E1B#, 16),
     to_signed(16#3E15#, 16), to_signed(16#3E0F#, 16), to_signed(16#3E09#, 16), to_signed(16#3E03#, 16),
     to_signed(16#3DFC#, 16), to_signed(16#3DF6#, 16), to_signed(16#3DF0#, 16), to_signed(16#3DE9#, 16),
     to_signed(16#3DE3#, 16), to_signed(16#3DDD#, 16), to_signed(16#3DD6#, 16), to_signed(16#3DD0#, 16),
     to_signed(16#3DC9#, 16), to_signed(16#3DC2#, 16), to_signed(16#3DBC#, 16), to_signed(16#3DB5#, 16),
     to_signed(16#3DAF#, 16), to_signed(16#3DA8#, 16), to_signed(16#3DA1#, 16), to_signed(16#3D9A#, 16),
     to_signed(16#3D93#, 16), to_signed(16#3D8D#, 16), to_signed(16#3D86#, 16), to_signed(16#3D7F#, 16),
     to_signed(16#3D78#, 16), to_signed(16#3D71#, 16), to_signed(16#3D6A#, 16), to_signed(16#3D63#, 16),
     to_signed(16#3D5B#, 16), to_signed(16#3D54#, 16), to_signed(16#3D4D#, 16), to_signed(16#3D46#, 16),
     to_signed(16#3D3F#, 16), to_signed(16#3D37#, 16), to_signed(16#3D30#, 16), to_signed(16#3D28#, 16),
     to_signed(16#3D21#, 16), to_signed(16#3D1A#, 16), to_signed(16#3D12#, 16), to_signed(16#3D0B#, 16),
     to_signed(16#3D03#, 16), to_signed(16#3CFB#, 16), to_signed(16#3CF4#, 16), to_signed(16#3CEC#, 16),
     to_signed(16#3CE4#, 16), to_signed(16#3CDD#, 16), to_signed(16#3CD5#, 16), to_signed(16#3CCD#, 16),
     to_signed(16#3CC5#, 16), to_signed(16#3CBD#, 16), to_signed(16#3CB5#, 16), to_signed(16#3CAD#, 16),
     to_signed(16#3CA5#, 16), to_signed(16#3C9D#, 16), to_signed(16#3C95#, 16), to_signed(16#3C8D#, 16),
     to_signed(16#3C85#, 16), to_signed(16#3C7D#, 16), to_signed(16#3C74#, 16), to_signed(16#3C6C#, 16),
     to_signed(16#3C64#, 16), to_signed(16#3C5B#, 16), to_signed(16#3C53#, 16), to_signed(16#3C4B#, 16),
     to_signed(16#3C42#, 16), to_signed(16#3C3A#, 16), to_signed(16#3C31#, 16), to_signed(16#3C29#, 16),
     to_signed(16#3C20#, 16), to_signed(16#3C17#, 16), to_signed(16#3C0F#, 16), to_signed(16#3C06#, 16),
     to_signed(16#3BFD#, 16), to_signed(16#3BF5#, 16), to_signed(16#3BEC#, 16), to_signed(16#3BE3#, 16),
     to_signed(16#3BDA#, 16), to_signed(16#3BD1#, 16), to_signed(16#3BC8#, 16), to_signed(16#3BBF#, 16),
     to_signed(16#3BB6#, 16), to_signed(16#3BAD#, 16), to_signed(16#3BA4#, 16), to_signed(16#3B9B#, 16),
     to_signed(16#3B92#, 16), to_signed(16#3B88#, 16), to_signed(16#3B7F#, 16), to_signed(16#3B76#, 16),
     to_signed(16#3B6D#, 16), to_signed(16#3B63#, 16), to_signed(16#3B5A#, 16), to_signed(16#3B50#, 16),
     to_signed(16#3B47#, 16), to_signed(16#3B3E#, 16), to_signed(16#3B34#, 16), to_signed(16#3B2A#, 16),
     to_signed(16#3B21#, 16), to_signed(16#3B17#, 16), to_signed(16#3B0E#, 16), to_signed(16#3B04#, 16),
     to_signed(16#3AFA#, 16), to_signed(16#3AF0#, 16), to_signed(16#3AE6#, 16), to_signed(16#3ADD#, 16),
     to_signed(16#3AD3#, 16), to_signed(16#3AC9#, 16), to_signed(16#3ABF#, 16), to_signed(16#3AB5#, 16),
     to_signed(16#3AAB#, 16), to_signed(16#3AA1#, 16), to_signed(16#3A97#, 16), to_signed(16#3A8D#, 16),
     to_signed(16#3A82#, 16), to_signed(16#3A78#, 16), to_signed(16#3A6E#, 16), to_signed(16#3A64#, 16),
     to_signed(16#3A59#, 16), to_signed(16#3A4F#, 16), to_signed(16#3A45#, 16), to_signed(16#3A3A#, 16),
     to_signed(16#3A30#, 16), to_signed(16#3A25#, 16), to_signed(16#3A1B#, 16), to_signed(16#3A10#, 16),
     to_signed(16#3A06#, 16), to_signed(16#39FB#, 16), to_signed(16#39F0#, 16), to_signed(16#39E6#, 16),
     to_signed(16#39DB#, 16), to_signed(16#39D0#, 16), to_signed(16#39C5#, 16), to_signed(16#39BB#, 16),
     to_signed(16#39B0#, 16), to_signed(16#39A5#, 16), to_signed(16#399A#, 16), to_signed(16#398F#, 16),
     to_signed(16#3984#, 16), to_signed(16#3979#, 16), to_signed(16#396E#, 16), to_signed(16#3963#, 16),
     to_signed(16#3958#, 16), to_signed(16#394C#, 16), to_signed(16#3941#, 16), to_signed(16#3936#, 16),
     to_signed(16#392B#, 16), to_signed(16#391F#, 16), to_signed(16#3914#, 16), to_signed(16#3909#, 16),
     to_signed(16#38FD#, 16), to_signed(16#38F2#, 16), to_signed(16#38E6#, 16), to_signed(16#38DB#, 16),
     to_signed(16#38CF#, 16), to_signed(16#38C3#, 16), to_signed(16#38B8#, 16), to_signed(16#38AC#, 16),
     to_signed(16#38A1#, 16), to_signed(16#3895#, 16), to_signed(16#3889#, 16), to_signed(16#387D#, 16),
     to_signed(16#3871#, 16), to_signed(16#3866#, 16), to_signed(16#385A#, 16), to_signed(16#384E#, 16),
     to_signed(16#3842#, 16), to_signed(16#3836#, 16), to_signed(16#382A#, 16), to_signed(16#381E#, 16),
     to_signed(16#3812#, 16), to_signed(16#3805#, 16), to_signed(16#37F9#, 16), to_signed(16#37ED#, 16),
     to_signed(16#37E1#, 16), to_signed(16#37D5#, 16), to_signed(16#37C8#, 16), to_signed(16#37BC#, 16),
     to_signed(16#37B0#, 16), to_signed(16#37A3#, 16), to_signed(16#3797#, 16), to_signed(16#378A#, 16),
     to_signed(16#377E#, 16), to_signed(16#3771#, 16), to_signed(16#3765#, 16), to_signed(16#3758#, 16),
     to_signed(16#374B#, 16), to_signed(16#373F#, 16), to_signed(16#3732#, 16), to_signed(16#3725#, 16),
     to_signed(16#3718#, 16), to_signed(16#370C#, 16), to_signed(16#36FF#, 16), to_signed(16#36F2#, 16),
     to_signed(16#36E5#, 16), to_signed(16#36D8#, 16), to_signed(16#36CB#, 16), to_signed(16#36BE#, 16),
     to_signed(16#36B1#, 16), to_signed(16#36A4#, 16), to_signed(16#3697#, 16), to_signed(16#368A#, 16),
     to_signed(16#367D#, 16), to_signed(16#366F#, 16), to_signed(16#3662#, 16), to_signed(16#3655#, 16),
     to_signed(16#3648#, 16), to_signed(16#363A#, 16), to_signed(16#362D#, 16), to_signed(16#3620#, 16),
     to_signed(16#3612#, 16), to_signed(16#3605#, 16), to_signed(16#35F7#, 16), to_signed(16#35EA#, 16),
     to_signed(16#35DC#, 16), to_signed(16#35CE#, 16), to_signed(16#35C1#, 16), to_signed(16#35B3#, 16),
     to_signed(16#35A5#, 16), to_signed(16#3598#, 16), to_signed(16#358A#, 16), to_signed(16#357C#, 16),
     to_signed(16#356E#, 16), to_signed(16#3561#, 16), to_signed(16#3553#, 16), to_signed(16#3545#, 16),
     to_signed(16#3537#, 16), to_signed(16#3529#, 16), to_signed(16#351B#, 16), to_signed(16#350D#, 16),
     to_signed(16#34FF#, 16), to_signed(16#34F1#, 16), to_signed(16#34E2#, 16), to_signed(16#34D4#, 16),
     to_signed(16#34C6#, 16), to_signed(16#34B8#, 16), to_signed(16#34AA#, 16), to_signed(16#349B#, 16),
     to_signed(16#348D#, 16), to_signed(16#347F#, 16), to_signed(16#3470#, 16), to_signed(16#3462#, 16),
     to_signed(16#3453#, 16), to_signed(16#3445#, 16), to_signed(16#3436#, 16), to_signed(16#3428#, 16),
     to_signed(16#3419#, 16), to_signed(16#340B#, 16), to_signed(16#33FC#, 16), to_signed(16#33ED#, 16),
     to_signed(16#33DF#, 16), to_signed(16#33D0#, 16), to_signed(16#33C1#, 16), to_signed(16#33B2#, 16),
     to_signed(16#33A3#, 16), to_signed(16#3395#, 16), to_signed(16#3386#, 16), to_signed(16#3377#, 16),
     to_signed(16#3368#, 16), to_signed(16#3359#, 16), to_signed(16#334A#, 16), to_signed(16#333B#, 16),
     to_signed(16#332C#, 16), to_signed(16#331D#, 16), to_signed(16#330D#, 16), to_signed(16#32FE#, 16),
     to_signed(16#32EF#, 16), to_signed(16#32E0#, 16), to_signed(16#32D0#, 16), to_signed(16#32C1#, 16),
     to_signed(16#32B2#, 16), to_signed(16#32A3#, 16), to_signed(16#3293#, 16), to_signed(16#3284#, 16),
     to_signed(16#3274#, 16), to_signed(16#3265#, 16), to_signed(16#3255#, 16), to_signed(16#3246#, 16),
     to_signed(16#3236#, 16), to_signed(16#3227#, 16), to_signed(16#3217#, 16), to_signed(16#3207#, 16),
     to_signed(16#31F8#, 16), to_signed(16#31E8#, 16), to_signed(16#31D8#, 16), to_signed(16#31C8#, 16),
     to_signed(16#31B9#, 16), to_signed(16#31A9#, 16), to_signed(16#3199#, 16), to_signed(16#3189#, 16),
     to_signed(16#3179#, 16), to_signed(16#3169#, 16), to_signed(16#3159#, 16), to_signed(16#3149#, 16),
     to_signed(16#3139#, 16), to_signed(16#3129#, 16), to_signed(16#3119#, 16), to_signed(16#3109#, 16),
     to_signed(16#30F9#, 16), to_signed(16#30E8#, 16), to_signed(16#30D8#, 16), to_signed(16#30C8#, 16),
     to_signed(16#30B8#, 16), to_signed(16#30A7#, 16), to_signed(16#3097#, 16), to_signed(16#3087#, 16),
     to_signed(16#3076#, 16), to_signed(16#3066#, 16), to_signed(16#3055#, 16), to_signed(16#3045#, 16),
     to_signed(16#3034#, 16), to_signed(16#3024#, 16), to_signed(16#3013#, 16), to_signed(16#3002#, 16),
     to_signed(16#2FF2#, 16), to_signed(16#2FE1#, 16), to_signed(16#2FD0#, 16), to_signed(16#2FC0#, 16),
     to_signed(16#2FAF#, 16), to_signed(16#2F9E#, 16), to_signed(16#2F8D#, 16), to_signed(16#2F7D#, 16),
     to_signed(16#2F6C#, 16), to_signed(16#2F5B#, 16), to_signed(16#2F4A#, 16), to_signed(16#2F39#, 16),
     to_signed(16#2F28#, 16), to_signed(16#2F17#, 16), to_signed(16#2F06#, 16), to_signed(16#2EF5#, 16),
     to_signed(16#2EE4#, 16), to_signed(16#2ED3#, 16), to_signed(16#2EC2#, 16), to_signed(16#2EB0#, 16),
     to_signed(16#2E9F#, 16), to_signed(16#2E8E#, 16), to_signed(16#2E7D#, 16), to_signed(16#2E6B#, 16),
     to_signed(16#2E5A#, 16), to_signed(16#2E49#, 16), to_signed(16#2E37#, 16), to_signed(16#2E26#, 16),
     to_signed(16#2E15#, 16), to_signed(16#2E03#, 16), to_signed(16#2DF2#, 16), to_signed(16#2DE0#, 16),
     to_signed(16#2DCF#, 16), to_signed(16#2DBD#, 16), to_signed(16#2DAB#, 16), to_signed(16#2D9A#, 16),
     to_signed(16#2D88#, 16), to_signed(16#2D76#, 16), to_signed(16#2D65#, 16), to_signed(16#2D53#, 16));  -- sfix16 [512]
  CONSTANT Twiddle_im_table_data          : vector_of_signed16(0 TO 511) := 
    (to_signed(16#0000#, 16), to_signed(-16#0019#, 16), to_signed(-16#0032#, 16), to_signed(-16#004B#, 16),
     to_signed(-16#0065#, 16), to_signed(-16#007E#, 16), to_signed(-16#0097#, 16), to_signed(-16#00B0#, 16),
     to_signed(-16#00C9#, 16), to_signed(-16#00E2#, 16), to_signed(-16#00FB#, 16), to_signed(-16#0114#, 16),
     to_signed(-16#012E#, 16), to_signed(-16#0147#, 16), to_signed(-16#0160#, 16), to_signed(-16#0179#, 16),
     to_signed(-16#0192#, 16), to_signed(-16#01AB#, 16), to_signed(-16#01C4#, 16), to_signed(-16#01DD#, 16),
     to_signed(-16#01F7#, 16), to_signed(-16#0210#, 16), to_signed(-16#0229#, 16), to_signed(-16#0242#, 16),
     to_signed(-16#025B#, 16), to_signed(-16#0274#, 16), to_signed(-16#028D#, 16), to_signed(-16#02A6#, 16),
     to_signed(-16#02C0#, 16), to_signed(-16#02D9#, 16), to_signed(-16#02F2#, 16), to_signed(-16#030B#, 16),
     to_signed(-16#0324#, 16), to_signed(-16#033D#, 16), to_signed(-16#0356#, 16), to_signed(-16#036F#, 16),
     to_signed(-16#0388#, 16), to_signed(-16#03A1#, 16), to_signed(-16#03BB#, 16), to_signed(-16#03D4#, 16),
     to_signed(-16#03ED#, 16), to_signed(-16#0406#, 16), to_signed(-16#041F#, 16), to_signed(-16#0438#, 16),
     to_signed(-16#0451#, 16), to_signed(-16#046A#, 16), to_signed(-16#0483#, 16), to_signed(-16#049C#, 16),
     to_signed(-16#04B5#, 16), to_signed(-16#04CE#, 16), to_signed(-16#04E7#, 16), to_signed(-16#0500#, 16),
     to_signed(-16#051A#, 16), to_signed(-16#0533#, 16), to_signed(-16#054C#, 16), to_signed(-16#0565#, 16),
     to_signed(-16#057E#, 16), to_signed(-16#0597#, 16), to_signed(-16#05B0#, 16), to_signed(-16#05C9#, 16),
     to_signed(-16#05E2#, 16), to_signed(-16#05FB#, 16), to_signed(-16#0614#, 16), to_signed(-16#062D#, 16),
     to_signed(-16#0646#, 16), to_signed(-16#065F#, 16), to_signed(-16#0678#, 16), to_signed(-16#0691#, 16),
     to_signed(-16#06AA#, 16), to_signed(-16#06C3#, 16), to_signed(-16#06DC#, 16), to_signed(-16#06F5#, 16),
     to_signed(-16#070E#, 16), to_signed(-16#0727#, 16), to_signed(-16#0740#, 16), to_signed(-16#0759#, 16),
     to_signed(-16#0772#, 16), to_signed(-16#078B#, 16), to_signed(-16#07A4#, 16), to_signed(-16#07BD#, 16),
     to_signed(-16#07D6#, 16), to_signed(-16#07EF#, 16), to_signed(-16#0807#, 16), to_signed(-16#0820#, 16),
     to_signed(-16#0839#, 16), to_signed(-16#0852#, 16), to_signed(-16#086B#, 16), to_signed(-16#0884#, 16),
     to_signed(-16#089D#, 16), to_signed(-16#08B6#, 16), to_signed(-16#08CF#, 16), to_signed(-16#08E8#, 16),
     to_signed(-16#0901#, 16), to_signed(-16#0919#, 16), to_signed(-16#0932#, 16), to_signed(-16#094B#, 16),
     to_signed(-16#0964#, 16), to_signed(-16#097D#, 16), to_signed(-16#0996#, 16), to_signed(-16#09AF#, 16),
     to_signed(-16#09C7#, 16), to_signed(-16#09E0#, 16), to_signed(-16#09F9#, 16), to_signed(-16#0A12#, 16),
     to_signed(-16#0A2B#, 16), to_signed(-16#0A44#, 16), to_signed(-16#0A5C#, 16), to_signed(-16#0A75#, 16),
     to_signed(-16#0A8E#, 16), to_signed(-16#0AA7#, 16), to_signed(-16#0AC0#, 16), to_signed(-16#0AD8#, 16),
     to_signed(-16#0AF1#, 16), to_signed(-16#0B0A#, 16), to_signed(-16#0B23#, 16), to_signed(-16#0B3B#, 16),
     to_signed(-16#0B54#, 16), to_signed(-16#0B6D#, 16), to_signed(-16#0B85#, 16), to_signed(-16#0B9E#, 16),
     to_signed(-16#0BB7#, 16), to_signed(-16#0BD0#, 16), to_signed(-16#0BE8#, 16), to_signed(-16#0C01#, 16),
     to_signed(-16#0C1A#, 16), to_signed(-16#0C32#, 16), to_signed(-16#0C4B#, 16), to_signed(-16#0C64#, 16),
     to_signed(-16#0C7C#, 16), to_signed(-16#0C95#, 16), to_signed(-16#0CAE#, 16), to_signed(-16#0CC6#, 16),
     to_signed(-16#0CDF#, 16), to_signed(-16#0CF8#, 16), to_signed(-16#0D10#, 16), to_signed(-16#0D29#, 16),
     to_signed(-16#0D41#, 16), to_signed(-16#0D5A#, 16), to_signed(-16#0D72#, 16), to_signed(-16#0D8B#, 16),
     to_signed(-16#0DA4#, 16), to_signed(-16#0DBC#, 16), to_signed(-16#0DD5#, 16), to_signed(-16#0DED#, 16),
     to_signed(-16#0E06#, 16), to_signed(-16#0E1E#, 16), to_signed(-16#0E37#, 16), to_signed(-16#0E4F#, 16),
     to_signed(-16#0E68#, 16), to_signed(-16#0E80#, 16), to_signed(-16#0E99#, 16), to_signed(-16#0EB1#, 16),
     to_signed(-16#0ECA#, 16), to_signed(-16#0EE2#, 16), to_signed(-16#0EFB#, 16), to_signed(-16#0F13#, 16),
     to_signed(-16#0F2B#, 16), to_signed(-16#0F44#, 16), to_signed(-16#0F5C#, 16), to_signed(-16#0F75#, 16),
     to_signed(-16#0F8D#, 16), to_signed(-16#0FA5#, 16), to_signed(-16#0FBE#, 16), to_signed(-16#0FD6#, 16),
     to_signed(-16#0FEE#, 16), to_signed(-16#1007#, 16), to_signed(-16#101F#, 16), to_signed(-16#1037#, 16),
     to_signed(-16#1050#, 16), to_signed(-16#1068#, 16), to_signed(-16#1080#, 16), to_signed(-16#1099#, 16),
     to_signed(-16#10B1#, 16), to_signed(-16#10C9#, 16), to_signed(-16#10E1#, 16), to_signed(-16#10FA#, 16),
     to_signed(-16#1112#, 16), to_signed(-16#112A#, 16), to_signed(-16#1142#, 16), to_signed(-16#115A#, 16),
     to_signed(-16#1173#, 16), to_signed(-16#118B#, 16), to_signed(-16#11A3#, 16), to_signed(-16#11BB#, 16),
     to_signed(-16#11D3#, 16), to_signed(-16#11EB#, 16), to_signed(-16#1204#, 16), to_signed(-16#121C#, 16),
     to_signed(-16#1234#, 16), to_signed(-16#124C#, 16), to_signed(-16#1264#, 16), to_signed(-16#127C#, 16),
     to_signed(-16#1294#, 16), to_signed(-16#12AC#, 16), to_signed(-16#12C4#, 16), to_signed(-16#12DC#, 16),
     to_signed(-16#12F4#, 16), to_signed(-16#130C#, 16), to_signed(-16#1324#, 16), to_signed(-16#133C#, 16),
     to_signed(-16#1354#, 16), to_signed(-16#136C#, 16), to_signed(-16#1384#, 16), to_signed(-16#139C#, 16),
     to_signed(-16#13B4#, 16), to_signed(-16#13CC#, 16), to_signed(-16#13E4#, 16), to_signed(-16#13FB#, 16),
     to_signed(-16#1413#, 16), to_signed(-16#142B#, 16), to_signed(-16#1443#, 16), to_signed(-16#145B#, 16),
     to_signed(-16#1473#, 16), to_signed(-16#148B#, 16), to_signed(-16#14A2#, 16), to_signed(-16#14BA#, 16),
     to_signed(-16#14D2#, 16), to_signed(-16#14EA#, 16), to_signed(-16#1501#, 16), to_signed(-16#1519#, 16),
     to_signed(-16#1531#, 16), to_signed(-16#1549#, 16), to_signed(-16#1560#, 16), to_signed(-16#1578#, 16),
     to_signed(-16#1590#, 16), to_signed(-16#15A7#, 16), to_signed(-16#15BF#, 16), to_signed(-16#15D7#, 16),
     to_signed(-16#15EE#, 16), to_signed(-16#1606#, 16), to_signed(-16#161D#, 16), to_signed(-16#1635#, 16),
     to_signed(-16#164C#, 16), to_signed(-16#1664#, 16), to_signed(-16#167C#, 16), to_signed(-16#1693#, 16),
     to_signed(-16#16AB#, 16), to_signed(-16#16C2#, 16), to_signed(-16#16DA#, 16), to_signed(-16#16F1#, 16),
     to_signed(-16#1709#, 16), to_signed(-16#1720#, 16), to_signed(-16#1737#, 16), to_signed(-16#174F#, 16),
     to_signed(-16#1766#, 16), to_signed(-16#177E#, 16), to_signed(-16#1795#, 16), to_signed(-16#17AC#, 16),
     to_signed(-16#17C4#, 16), to_signed(-16#17DB#, 16), to_signed(-16#17F2#, 16), to_signed(-16#180A#, 16),
     to_signed(-16#1821#, 16), to_signed(-16#1838#, 16), to_signed(-16#184F#, 16), to_signed(-16#1867#, 16),
     to_signed(-16#187E#, 16), to_signed(-16#1895#, 16), to_signed(-16#18AC#, 16), to_signed(-16#18C3#, 16),
     to_signed(-16#18DB#, 16), to_signed(-16#18F2#, 16), to_signed(-16#1909#, 16), to_signed(-16#1920#, 16),
     to_signed(-16#1937#, 16), to_signed(-16#194E#, 16), to_signed(-16#1965#, 16), to_signed(-16#197C#, 16),
     to_signed(-16#1993#, 16), to_signed(-16#19AA#, 16), to_signed(-16#19C1#, 16), to_signed(-16#19D8#, 16),
     to_signed(-16#19EF#, 16), to_signed(-16#1A06#, 16), to_signed(-16#1A1D#, 16), to_signed(-16#1A34#, 16),
     to_signed(-16#1A4B#, 16), to_signed(-16#1A62#, 16), to_signed(-16#1A79#, 16), to_signed(-16#1A90#, 16),
     to_signed(-16#1AA7#, 16), to_signed(-16#1ABE#, 16), to_signed(-16#1AD4#, 16), to_signed(-16#1AEB#, 16),
     to_signed(-16#1B02#, 16), to_signed(-16#1B19#, 16), to_signed(-16#1B30#, 16), to_signed(-16#1B46#, 16),
     to_signed(-16#1B5D#, 16), to_signed(-16#1B74#, 16), to_signed(-16#1B8A#, 16), to_signed(-16#1BA1#, 16),
     to_signed(-16#1BB8#, 16), to_signed(-16#1BCE#, 16), to_signed(-16#1BE5#, 16), to_signed(-16#1BFC#, 16),
     to_signed(-16#1C12#, 16), to_signed(-16#1C29#, 16), to_signed(-16#1C3F#, 16), to_signed(-16#1C56#, 16),
     to_signed(-16#1C6C#, 16), to_signed(-16#1C83#, 16), to_signed(-16#1C99#, 16), to_signed(-16#1CB0#, 16),
     to_signed(-16#1CC6#, 16), to_signed(-16#1CDD#, 16), to_signed(-16#1CF3#, 16), to_signed(-16#1D0A#, 16),
     to_signed(-16#1D20#, 16), to_signed(-16#1D36#, 16), to_signed(-16#1D4D#, 16), to_signed(-16#1D63#, 16),
     to_signed(-16#1D79#, 16), to_signed(-16#1D90#, 16), to_signed(-16#1DA6#, 16), to_signed(-16#1DBC#, 16),
     to_signed(-16#1DD3#, 16), to_signed(-16#1DE9#, 16), to_signed(-16#1DFF#, 16), to_signed(-16#1E15#, 16),
     to_signed(-16#1E2B#, 16), to_signed(-16#1E42#, 16), to_signed(-16#1E58#, 16), to_signed(-16#1E6E#, 16),
     to_signed(-16#1E84#, 16), to_signed(-16#1E9A#, 16), to_signed(-16#1EB0#, 16), to_signed(-16#1EC6#, 16),
     to_signed(-16#1EDC#, 16), to_signed(-16#1EF2#, 16), to_signed(-16#1F08#, 16), to_signed(-16#1F1E#, 16),
     to_signed(-16#1F34#, 16), to_signed(-16#1F4A#, 16), to_signed(-16#1F60#, 16), to_signed(-16#1F76#, 16),
     to_signed(-16#1F8C#, 16), to_signed(-16#1FA2#, 16), to_signed(-16#1FB7#, 16), to_signed(-16#1FCD#, 16),
     to_signed(-16#1FE3#, 16), to_signed(-16#1FF9#, 16), to_signed(-16#200F#, 16), to_signed(-16#2024#, 16),
     to_signed(-16#203A#, 16), to_signed(-16#2050#, 16), to_signed(-16#2065#, 16), to_signed(-16#207B#, 16),
     to_signed(-16#2091#, 16), to_signed(-16#20A6#, 16), to_signed(-16#20BC#, 16), to_signed(-16#20D1#, 16),
     to_signed(-16#20E7#, 16), to_signed(-16#20FD#, 16), to_signed(-16#2112#, 16), to_signed(-16#2128#, 16),
     to_signed(-16#213D#, 16), to_signed(-16#2153#, 16), to_signed(-16#2168#, 16), to_signed(-16#217D#, 16),
     to_signed(-16#2193#, 16), to_signed(-16#21A8#, 16), to_signed(-16#21BE#, 16), to_signed(-16#21D3#, 16),
     to_signed(-16#21E8#, 16), to_signed(-16#21FE#, 16), to_signed(-16#2213#, 16), to_signed(-16#2228#, 16),
     to_signed(-16#223D#, 16), to_signed(-16#2253#, 16), to_signed(-16#2268#, 16), to_signed(-16#227D#, 16),
     to_signed(-16#2292#, 16), to_signed(-16#22A7#, 16), to_signed(-16#22BC#, 16), to_signed(-16#22D2#, 16),
     to_signed(-16#22E7#, 16), to_signed(-16#22FC#, 16), to_signed(-16#2311#, 16), to_signed(-16#2326#, 16),
     to_signed(-16#233B#, 16), to_signed(-16#2350#, 16), to_signed(-16#2365#, 16), to_signed(-16#237A#, 16),
     to_signed(-16#238E#, 16), to_signed(-16#23A3#, 16), to_signed(-16#23B8#, 16), to_signed(-16#23CD#, 16),
     to_signed(-16#23E2#, 16), to_signed(-16#23F7#, 16), to_signed(-16#240B#, 16), to_signed(-16#2420#, 16),
     to_signed(-16#2435#, 16), to_signed(-16#244A#, 16), to_signed(-16#245E#, 16), to_signed(-16#2473#, 16),
     to_signed(-16#2488#, 16), to_signed(-16#249C#, 16), to_signed(-16#24B1#, 16), to_signed(-16#24C5#, 16),
     to_signed(-16#24DA#, 16), to_signed(-16#24EF#, 16), to_signed(-16#2503#, 16), to_signed(-16#2518#, 16),
     to_signed(-16#252C#, 16), to_signed(-16#2541#, 16), to_signed(-16#2555#, 16), to_signed(-16#2569#, 16),
     to_signed(-16#257E#, 16), to_signed(-16#2592#, 16), to_signed(-16#25A6#, 16), to_signed(-16#25BB#, 16),
     to_signed(-16#25CF#, 16), to_signed(-16#25E3#, 16), to_signed(-16#25F8#, 16), to_signed(-16#260C#, 16),
     to_signed(-16#2620#, 16), to_signed(-16#2634#, 16), to_signed(-16#2648#, 16), to_signed(-16#265C#, 16),
     to_signed(-16#2671#, 16), to_signed(-16#2685#, 16), to_signed(-16#2699#, 16), to_signed(-16#26AD#, 16),
     to_signed(-16#26C1#, 16), to_signed(-16#26D5#, 16), to_signed(-16#26E9#, 16), to_signed(-16#26FD#, 16),
     to_signed(-16#2711#, 16), to_signed(-16#2724#, 16), to_signed(-16#2738#, 16), to_signed(-16#274C#, 16),
     to_signed(-16#2760#, 16), to_signed(-16#2774#, 16), to_signed(-16#2788#, 16), to_signed(-16#279B#, 16),
     to_signed(-16#27AF#, 16), to_signed(-16#27C3#, 16), to_signed(-16#27D6#, 16), to_signed(-16#27EA#, 16),
     to_signed(-16#27FE#, 16), to_signed(-16#2811#, 16), to_signed(-16#2825#, 16), to_signed(-16#2838#, 16),
     to_signed(-16#284C#, 16), to_signed(-16#2860#, 16), to_signed(-16#2873#, 16), to_signed(-16#2886#, 16),
     to_signed(-16#289A#, 16), to_signed(-16#28AD#, 16), to_signed(-16#28C1#, 16), to_signed(-16#28D4#, 16),
     to_signed(-16#28E7#, 16), to_signed(-16#28FB#, 16), to_signed(-16#290E#, 16), to_signed(-16#2921#, 16),
     to_signed(-16#2935#, 16), to_signed(-16#2948#, 16), to_signed(-16#295B#, 16), to_signed(-16#296E#, 16),
     to_signed(-16#2981#, 16), to_signed(-16#2994#, 16), to_signed(-16#29A7#, 16), to_signed(-16#29BB#, 16),
     to_signed(-16#29CE#, 16), to_signed(-16#29E1#, 16), to_signed(-16#29F4#, 16), to_signed(-16#2A07#, 16),
     to_signed(-16#2A1A#, 16), to_signed(-16#2A2C#, 16), to_signed(-16#2A3F#, 16), to_signed(-16#2A52#, 16),
     to_signed(-16#2A65#, 16), to_signed(-16#2A78#, 16), to_signed(-16#2A8B#, 16), to_signed(-16#2A9D#, 16),
     to_signed(-16#2AB0#, 16), to_signed(-16#2AC3#, 16), to_signed(-16#2AD6#, 16), to_signed(-16#2AE8#, 16),
     to_signed(-16#2AFB#, 16), to_signed(-16#2B0D#, 16), to_signed(-16#2B20#, 16), to_signed(-16#2B33#, 16),
     to_signed(-16#2B45#, 16), to_signed(-16#2B58#, 16), to_signed(-16#2B6A#, 16), to_signed(-16#2B7D#, 16),
     to_signed(-16#2B8F#, 16), to_signed(-16#2BA1#, 16), to_signed(-16#2BB4#, 16), to_signed(-16#2BC6#, 16),
     to_signed(-16#2BD8#, 16), to_signed(-16#2BEB#, 16), to_signed(-16#2BFD#, 16), to_signed(-16#2C0F#, 16),
     to_signed(-16#2C21#, 16), to_signed(-16#2C34#, 16), to_signed(-16#2C46#, 16), to_signed(-16#2C58#, 16),
     to_signed(-16#2C6A#, 16), to_signed(-16#2C7C#, 16), to_signed(-16#2C8E#, 16), to_signed(-16#2CA0#, 16),
     to_signed(-16#2CB2#, 16), to_signed(-16#2CC4#, 16), to_signed(-16#2CD6#, 16), to_signed(-16#2CE8#, 16),
     to_signed(-16#2CFA#, 16), to_signed(-16#2D0C#, 16), to_signed(-16#2D1E#, 16), to_signed(-16#2D2F#, 16));  -- sfix16 [512]

  -- Signals
  SIGNAL Radix22TwdlMapping_cnt           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Radix22TwdlMapping_phase         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw  : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Radix22TwdlMapping_twdlAddrMap   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdl45Reg     : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1      : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2      : std_logic;
  SIGNAL Radix22TwdlMapping_cnt_next      : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Radix22TwdlMapping_phase_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1_next : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw_next : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Radix22TwdlMapping_twdlAddrMap_next : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdl45Reg_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2_next : std_logic;
  SIGNAL twdlAddr                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL twdlAddrVld                      : std_logic;
  SIGNAL twdlOctant                       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45                           : std_logic;
  SIGNAL twiddleS_re                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twiddleReg_re                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twiddleS_im                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twiddleReg_im                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdlOctantReg                    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45Reg                        : std_logic;

BEGIN
  -- Radix22TwdlMapping
  Radix22TwdlMapping_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22TwdlMapping_octantReg1 <= to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdlAddr_raw <= to_unsigned(16#000#, 12);
        Radix22TwdlMapping_twdlAddrMap <= to_unsigned(16#000#, 9);
        Radix22TwdlMapping_twdl45Reg <= '0';
        Radix22TwdlMapping_dvldReg1 <= '0';
        Radix22TwdlMapping_dvldReg2 <= '0';
        Radix22TwdlMapping_cnt <= to_unsigned(16#000#, 10);
        Radix22TwdlMapping_phase <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        Radix22TwdlMapping_cnt <= Radix22TwdlMapping_cnt_next;
        Radix22TwdlMapping_phase <= Radix22TwdlMapping_phase_next;
        Radix22TwdlMapping_octantReg1 <= Radix22TwdlMapping_octantReg1_next;
        Radix22TwdlMapping_twdlAddr_raw <= Radix22TwdlMapping_twdlAddr_raw_next;
        Radix22TwdlMapping_twdlAddrMap <= Radix22TwdlMapping_twdlAddrMap_next;
        Radix22TwdlMapping_twdl45Reg <= Radix22TwdlMapping_twdl45Reg_next;
        Radix22TwdlMapping_dvldReg1 <= Radix22TwdlMapping_dvldReg1_next;
        Radix22TwdlMapping_dvldReg2 <= Radix22TwdlMapping_dvldReg2_next;
      END IF;
    END IF;
  END PROCESS Radix22TwdlMapping_process;

  Radix22TwdlMapping_output : PROCESS (Radix22TwdlMapping_cnt, Radix22TwdlMapping_dvldReg1,
       Radix22TwdlMapping_dvldReg2, Radix22TwdlMapping_octantReg1,
       Radix22TwdlMapping_phase, Radix22TwdlMapping_twdl45Reg,
       Radix22TwdlMapping_twdlAddrMap, Radix22TwdlMapping_twdlAddr_raw,
       dout_4_1_vld)
    VARIABLE octant : unsigned(2 DOWNTO 0);
    VARIABLE cnt_cast : unsigned(11 DOWNTO 0);
    VARIABLE sub_temp : signed(25 DOWNTO 0);
    VARIABLE sub_temp_0 : signed(13 DOWNTO 0);
    VARIABLE sub_temp_1 : signed(13 DOWNTO 0);
    VARIABLE sub_temp_2 : signed(25 DOWNTO 0);
    VARIABLE sub_temp_3 : signed(25 DOWNTO 0);
  BEGIN
    sub_temp := to_signed(16#0000000#, 26);
    sub_temp_0 := to_signed(16#0000#, 14);
    sub_temp_1 := to_signed(16#0000#, 14);
    sub_temp_2 := to_signed(16#0000000#, 26);
    sub_temp_3 := to_signed(16#0000000#, 26);
    cnt_cast := to_unsigned(16#000#, 12);
    Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt;
    Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase;
    Radix22TwdlMapping_dvldReg2_next <= Radix22TwdlMapping_dvldReg1;
    Radix22TwdlMapping_dvldReg1_next <= dout_4_1_vld;
    CASE Radix22TwdlMapping_twdlAddr_raw IS
      WHEN "001000000000" =>
        octant := to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "010000000000" =>
        octant := to_unsigned(16#1#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "011000000000" =>
        octant := to_unsigned(16#2#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "100000000000" =>
        octant := to_unsigned(16#3#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "101000000000" =>
        octant := to_unsigned(16#4#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN OTHERS => 
        octant := Radix22TwdlMapping_twdlAddr_raw(11 DOWNTO 9);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
    END CASE;
    Radix22TwdlMapping_octantReg1_next <= octant;
    CASE octant IS
      WHEN "000" =>
        Radix22TwdlMapping_twdlAddrMap_next <= Radix22TwdlMapping_twdlAddr_raw(8 DOWNTO 0);
      WHEN "001" =>
        sub_temp_0 := to_signed(16#0400#, 14) - signed(resize(Radix22TwdlMapping_twdlAddr_raw, 14));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_0(8 DOWNTO 0));
      WHEN "010" =>
        sub_temp_1 := signed(resize(Radix22TwdlMapping_twdlAddr_raw, 14)) - to_signed(16#0400#, 14);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_1(8 DOWNTO 0));
      WHEN "011" =>
        sub_temp_2 := to_signed(16#0100000#, 26) - signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_2(17 DOWNTO 9));
      WHEN "100" =>
        sub_temp_3 := signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26)) - to_signed(16#0100000#, 26);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_3(17 DOWNTO 9));
      WHEN OTHERS => 
        sub_temp := to_signed(16#0180000#, 26) - signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp(17 DOWNTO 9));
    END CASE;
    IF Radix22TwdlMapping_phase = to_unsigned(16#0#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= to_unsigned(16#000#, 12);
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#1#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(Radix22TwdlMapping_cnt, 12) sll 1;
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#2#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(Radix22TwdlMapping_cnt, 12);
    ELSE 
      cnt_cast := resize(Radix22TwdlMapping_cnt, 12);
      Radix22TwdlMapping_twdlAddr_raw_next <= (cnt_cast sll 1) + cnt_cast;
    END IF;
    IF dout_4_1_vld = '1' AND (Radix22TwdlMapping_cnt > to_unsigned(16#3FB#, 10)) THEN 
      Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase + to_unsigned(16#1#, 2);
    END IF;
    IF dout_4_1_vld = '1' THEN 
      Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt + to_unsigned(16#004#, 10);
    END IF;
    twdlAddr <= Radix22TwdlMapping_twdlAddrMap;
    twdlAddrVld <= Radix22TwdlMapping_dvldReg2;
    twdlOctant <= Radix22TwdlMapping_octantReg1;
    twdl45 <= Radix22TwdlMapping_twdl45Reg;
  END PROCESS Radix22TwdlMapping_output;


  -- Twiddle ROM1
  twiddleS_re <= Twiddle_re_table_data(to_integer(twdlAddr));

  TWIDDLEROM_RE_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twiddleReg_re <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twiddleReg_re <= twiddleS_re;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_RE_process;


  -- Twiddle ROM2
  twiddleS_im <= Twiddle_im_table_data(to_integer(twdlAddr));

  TWIDDLEROM_IM_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twiddleReg_im <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twiddleReg_im <= twiddleS_im;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_IM_process;


  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdlOctantReg <= to_unsigned(16#0#, 3);
      ELSIF enb = '1' THEN
        twdlOctantReg <= twdlOctant;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl45Reg <= '0';
      ELSIF enb = '1' THEN
        twdl45Reg <= twdl45;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  -- Radix22TwdlOctCorr
  Radix22TwdlOctCorr_output : PROCESS (twdl45Reg, twdlOctantReg, twiddleReg_im, twiddleReg_re)
    VARIABLE twdlIn_re : signed(15 DOWNTO 0);
    VARIABLE twdlIn_im : signed(15 DOWNTO 0);
    VARIABLE cast : signed(16 DOWNTO 0);
    VARIABLE cast_0 : signed(16 DOWNTO 0);
    VARIABLE cast_1 : signed(16 DOWNTO 0);
    VARIABLE cast_2 : signed(16 DOWNTO 0);
    VARIABLE cast_3 : signed(16 DOWNTO 0);
    VARIABLE cast_4 : signed(16 DOWNTO 0);
  BEGIN
    cast := to_signed(16#00000#, 17);
    cast_0 := to_signed(16#00000#, 17);
    cast_1 := to_signed(16#00000#, 17);
    cast_2 := to_signed(16#00000#, 17);
    cast_3 := to_signed(16#00000#, 17);
    cast_4 := to_signed(16#00000#, 17);
    twdlIn_re := twiddleReg_re;
    twdlIn_im := twiddleReg_im;
    IF twdl45Reg = '1' THEN 
      CASE twdlOctantReg IS
        WHEN "000" =>
          twdlIn_re := to_signed(16#2D41#, 16);
          twdlIn_im := to_signed(-16#2D41#, 16);
        WHEN "010" =>
          twdlIn_re := to_signed(-16#2D41#, 16);
          twdlIn_im := to_signed(-16#2D41#, 16);
        WHEN "100" =>
          twdlIn_re := to_signed(-16#2D41#, 16);
          twdlIn_im := to_signed(16#2D41#, 16);
        WHEN OTHERS => 
          twdlIn_re := to_signed(16#2D41#, 16);
          twdlIn_im := to_signed(-16#2D41#, 16);
      END CASE;
    ELSE 
      CASE twdlOctantReg IS
        WHEN "000" =>
          NULL;
        WHEN "001" =>
          cast :=  - (resize(twiddleReg_im, 17));
          twdlIn_re := cast(15 DOWNTO 0);
          cast_2 :=  - (resize(twiddleReg_re, 17));
          twdlIn_im := cast_2(15 DOWNTO 0);
        WHEN "010" =>
          twdlIn_re := twiddleReg_im;
          cast_3 :=  - (resize(twiddleReg_re, 17));
          twdlIn_im := cast_3(15 DOWNTO 0);
        WHEN "011" =>
          cast_0 :=  - (resize(twiddleReg_re, 17));
          twdlIn_re := cast_0(15 DOWNTO 0);
          twdlIn_im := twiddleReg_im;
        WHEN "100" =>
          cast_1 :=  - (resize(twiddleReg_re, 17));
          twdlIn_re := cast_1(15 DOWNTO 0);
          cast_4 :=  - (resize(twiddleReg_im, 17));
          twdlIn_im := cast_4(15 DOWNTO 0);
        WHEN OTHERS => 
          twdlIn_re := twiddleReg_im;
          twdlIn_im := twiddleReg_re;
      END CASE;
    END IF;
    twdl_5_1_re <= twdlIn_re;
    twdl_5_1_im <= twdlIn_im;
  END PROCESS Radix22TwdlOctCorr_output;


END rtl;


-- End of TWDLROM_5_1.vhd --

-- Start of TWDLROM_5_1_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\TWDLROM_5_1_block.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: TWDLROM_5_1_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/TWDLROM_5_1
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY TWDLROM_5_1_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_4_1_vld                      :   IN    std_logic;
        twdl_5_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16_En14
        twdl_5_1_im                       :   OUT   signed(15 DOWNTO 0)  -- sfix16_En14
        );
END TWDLROM_5_1_block;


ARCHITECTURE rtl OF TWDLROM_5_1_block IS

  -- Constants
  CONSTANT Twiddle_re_table_data          : vector_of_signed16(0 TO 511) := 
    (to_signed(16#4000#, 16), to_signed(16#4000#, 16), to_signed(16#4000#, 16), to_signed(16#4000#, 16),
     to_signed(16#4000#, 16), to_signed(16#4000#, 16), to_signed(16#3FFF#, 16), to_signed(16#3FFF#, 16),
     to_signed(16#3FFF#, 16), to_signed(16#3FFE#, 16), to_signed(16#3FFE#, 16), to_signed(16#3FFE#, 16),
     to_signed(16#3FFD#, 16), to_signed(16#3FFD#, 16), to_signed(16#3FFC#, 16), to_signed(16#3FFC#, 16),
     to_signed(16#3FFB#, 16), to_signed(16#3FFA#, 16), to_signed(16#3FFA#, 16), to_signed(16#3FF9#, 16),
     to_signed(16#3FF8#, 16), to_signed(16#3FF7#, 16), to_signed(16#3FF7#, 16), to_signed(16#3FF6#, 16),
     to_signed(16#3FF5#, 16), to_signed(16#3FF4#, 16), to_signed(16#3FF3#, 16), to_signed(16#3FF2#, 16),
     to_signed(16#3FF1#, 16), to_signed(16#3FF0#, 16), to_signed(16#3FEF#, 16), to_signed(16#3FED#, 16),
     to_signed(16#3FEC#, 16), to_signed(16#3FEB#, 16), to_signed(16#3FEA#, 16), to_signed(16#3FE8#, 16),
     to_signed(16#3FE7#, 16), to_signed(16#3FE6#, 16), to_signed(16#3FE4#, 16), to_signed(16#3FE3#, 16),
     to_signed(16#3FE1#, 16), to_signed(16#3FE0#, 16), to_signed(16#3FDE#, 16), to_signed(16#3FDC#, 16),
     to_signed(16#3FDB#, 16), to_signed(16#3FD9#, 16), to_signed(16#3FD7#, 16), to_signed(16#3FD5#, 16),
     to_signed(16#3FD4#, 16), to_signed(16#3FD2#, 16), to_signed(16#3FD0#, 16), to_signed(16#3FCE#, 16),
     to_signed(16#3FCC#, 16), to_signed(16#3FCA#, 16), to_signed(16#3FC8#, 16), to_signed(16#3FC6#, 16),
     to_signed(16#3FC4#, 16), to_signed(16#3FC1#, 16), to_signed(16#3FBF#, 16), to_signed(16#3FBD#, 16),
     to_signed(16#3FBB#, 16), to_signed(16#3FB8#, 16), to_signed(16#3FB6#, 16), to_signed(16#3FB4#, 16),
     to_signed(16#3FB1#, 16), to_signed(16#3FAF#, 16), to_signed(16#3FAC#, 16), to_signed(16#3FAA#, 16),
     to_signed(16#3FA7#, 16), to_signed(16#3FA4#, 16), to_signed(16#3FA2#, 16), to_signed(16#3F9F#, 16),
     to_signed(16#3F9C#, 16), to_signed(16#3F99#, 16), to_signed(16#3F97#, 16), to_signed(16#3F94#, 16),
     to_signed(16#3F91#, 16), to_signed(16#3F8E#, 16), to_signed(16#3F8B#, 16), to_signed(16#3F88#, 16),
     to_signed(16#3F85#, 16), to_signed(16#3F82#, 16), to_signed(16#3F7F#, 16), to_signed(16#3F7B#, 16),
     to_signed(16#3F78#, 16), to_signed(16#3F75#, 16), to_signed(16#3F72#, 16), to_signed(16#3F6E#, 16),
     to_signed(16#3F6B#, 16), to_signed(16#3F68#, 16), to_signed(16#3F64#, 16), to_signed(16#3F61#, 16),
     to_signed(16#3F5D#, 16), to_signed(16#3F5A#, 16), to_signed(16#3F56#, 16), to_signed(16#3F52#, 16),
     to_signed(16#3F4F#, 16), to_signed(16#3F4B#, 16), to_signed(16#3F47#, 16), to_signed(16#3F43#, 16),
     to_signed(16#3F40#, 16), to_signed(16#3F3C#, 16), to_signed(16#3F38#, 16), to_signed(16#3F34#, 16),
     to_signed(16#3F30#, 16), to_signed(16#3F2C#, 16), to_signed(16#3F28#, 16), to_signed(16#3F24#, 16),
     to_signed(16#3F20#, 16), to_signed(16#3F1C#, 16), to_signed(16#3F17#, 16), to_signed(16#3F13#, 16),
     to_signed(16#3F0F#, 16), to_signed(16#3F0A#, 16), to_signed(16#3F06#, 16), to_signed(16#3F02#, 16),
     to_signed(16#3EFD#, 16), to_signed(16#3EF9#, 16), to_signed(16#3EF4#, 16), to_signed(16#3EF0#, 16),
     to_signed(16#3EEB#, 16), to_signed(16#3EE7#, 16), to_signed(16#3EE2#, 16), to_signed(16#3EDD#, 16),
     to_signed(16#3ED8#, 16), to_signed(16#3ED4#, 16), to_signed(16#3ECF#, 16), to_signed(16#3ECA#, 16),
     to_signed(16#3EC5#, 16), to_signed(16#3EC0#, 16), to_signed(16#3EBB#, 16), to_signed(16#3EB6#, 16),
     to_signed(16#3EB1#, 16), to_signed(16#3EAC#, 16), to_signed(16#3EA7#, 16), to_signed(16#3EA2#, 16),
     to_signed(16#3E9D#, 16), to_signed(16#3E98#, 16), to_signed(16#3E92#, 16), to_signed(16#3E8D#, 16),
     to_signed(16#3E88#, 16), to_signed(16#3E82#, 16), to_signed(16#3E7D#, 16), to_signed(16#3E77#, 16),
     to_signed(16#3E72#, 16), to_signed(16#3E6C#, 16), to_signed(16#3E67#, 16), to_signed(16#3E61#, 16),
     to_signed(16#3E5C#, 16), to_signed(16#3E56#, 16), to_signed(16#3E50#, 16), to_signed(16#3E4A#, 16),
     to_signed(16#3E45#, 16), to_signed(16#3E3F#, 16), to_signed(16#3E39#, 16), to_signed(16#3E33#, 16),
     to_signed(16#3E2D#, 16), to_signed(16#3E27#, 16), to_signed(16#3E21#, 16), to_signed(16#3E1B#, 16),
     to_signed(16#3E15#, 16), to_signed(16#3E0F#, 16), to_signed(16#3E09#, 16), to_signed(16#3E03#, 16),
     to_signed(16#3DFC#, 16), to_signed(16#3DF6#, 16), to_signed(16#3DF0#, 16), to_signed(16#3DE9#, 16),
     to_signed(16#3DE3#, 16), to_signed(16#3DDD#, 16), to_signed(16#3DD6#, 16), to_signed(16#3DD0#, 16),
     to_signed(16#3DC9#, 16), to_signed(16#3DC2#, 16), to_signed(16#3DBC#, 16), to_signed(16#3DB5#, 16),
     to_signed(16#3DAF#, 16), to_signed(16#3DA8#, 16), to_signed(16#3DA1#, 16), to_signed(16#3D9A#, 16),
     to_signed(16#3D93#, 16), to_signed(16#3D8D#, 16), to_signed(16#3D86#, 16), to_signed(16#3D7F#, 16),
     to_signed(16#3D78#, 16), to_signed(16#3D71#, 16), to_signed(16#3D6A#, 16), to_signed(16#3D63#, 16),
     to_signed(16#3D5B#, 16), to_signed(16#3D54#, 16), to_signed(16#3D4D#, 16), to_signed(16#3D46#, 16),
     to_signed(16#3D3F#, 16), to_signed(16#3D37#, 16), to_signed(16#3D30#, 16), to_signed(16#3D28#, 16),
     to_signed(16#3D21#, 16), to_signed(16#3D1A#, 16), to_signed(16#3D12#, 16), to_signed(16#3D0B#, 16),
     to_signed(16#3D03#, 16), to_signed(16#3CFB#, 16), to_signed(16#3CF4#, 16), to_signed(16#3CEC#, 16),
     to_signed(16#3CE4#, 16), to_signed(16#3CDD#, 16), to_signed(16#3CD5#, 16), to_signed(16#3CCD#, 16),
     to_signed(16#3CC5#, 16), to_signed(16#3CBD#, 16), to_signed(16#3CB5#, 16), to_signed(16#3CAD#, 16),
     to_signed(16#3CA5#, 16), to_signed(16#3C9D#, 16), to_signed(16#3C95#, 16), to_signed(16#3C8D#, 16),
     to_signed(16#3C85#, 16), to_signed(16#3C7D#, 16), to_signed(16#3C74#, 16), to_signed(16#3C6C#, 16),
     to_signed(16#3C64#, 16), to_signed(16#3C5B#, 16), to_signed(16#3C53#, 16), to_signed(16#3C4B#, 16),
     to_signed(16#3C42#, 16), to_signed(16#3C3A#, 16), to_signed(16#3C31#, 16), to_signed(16#3C29#, 16),
     to_signed(16#3C20#, 16), to_signed(16#3C17#, 16), to_signed(16#3C0F#, 16), to_signed(16#3C06#, 16),
     to_signed(16#3BFD#, 16), to_signed(16#3BF5#, 16), to_signed(16#3BEC#, 16), to_signed(16#3BE3#, 16),
     to_signed(16#3BDA#, 16), to_signed(16#3BD1#, 16), to_signed(16#3BC8#, 16), to_signed(16#3BBF#, 16),
     to_signed(16#3BB6#, 16), to_signed(16#3BAD#, 16), to_signed(16#3BA4#, 16), to_signed(16#3B9B#, 16),
     to_signed(16#3B92#, 16), to_signed(16#3B88#, 16), to_signed(16#3B7F#, 16), to_signed(16#3B76#, 16),
     to_signed(16#3B6D#, 16), to_signed(16#3B63#, 16), to_signed(16#3B5A#, 16), to_signed(16#3B50#, 16),
     to_signed(16#3B47#, 16), to_signed(16#3B3E#, 16), to_signed(16#3B34#, 16), to_signed(16#3B2A#, 16),
     to_signed(16#3B21#, 16), to_signed(16#3B17#, 16), to_signed(16#3B0E#, 16), to_signed(16#3B04#, 16),
     to_signed(16#3AFA#, 16), to_signed(16#3AF0#, 16), to_signed(16#3AE6#, 16), to_signed(16#3ADD#, 16),
     to_signed(16#3AD3#, 16), to_signed(16#3AC9#, 16), to_signed(16#3ABF#, 16), to_signed(16#3AB5#, 16),
     to_signed(16#3AAB#, 16), to_signed(16#3AA1#, 16), to_signed(16#3A97#, 16), to_signed(16#3A8D#, 16),
     to_signed(16#3A82#, 16), to_signed(16#3A78#, 16), to_signed(16#3A6E#, 16), to_signed(16#3A64#, 16),
     to_signed(16#3A59#, 16), to_signed(16#3A4F#, 16), to_signed(16#3A45#, 16), to_signed(16#3A3A#, 16),
     to_signed(16#3A30#, 16), to_signed(16#3A25#, 16), to_signed(16#3A1B#, 16), to_signed(16#3A10#, 16),
     to_signed(16#3A06#, 16), to_signed(16#39FB#, 16), to_signed(16#39F0#, 16), to_signed(16#39E6#, 16),
     to_signed(16#39DB#, 16), to_signed(16#39D0#, 16), to_signed(16#39C5#, 16), to_signed(16#39BB#, 16),
     to_signed(16#39B0#, 16), to_signed(16#39A5#, 16), to_signed(16#399A#, 16), to_signed(16#398F#, 16),
     to_signed(16#3984#, 16), to_signed(16#3979#, 16), to_signed(16#396E#, 16), to_signed(16#3963#, 16),
     to_signed(16#3958#, 16), to_signed(16#394C#, 16), to_signed(16#3941#, 16), to_signed(16#3936#, 16),
     to_signed(16#392B#, 16), to_signed(16#391F#, 16), to_signed(16#3914#, 16), to_signed(16#3909#, 16),
     to_signed(16#38FD#, 16), to_signed(16#38F2#, 16), to_signed(16#38E6#, 16), to_signed(16#38DB#, 16),
     to_signed(16#38CF#, 16), to_signed(16#38C3#, 16), to_signed(16#38B8#, 16), to_signed(16#38AC#, 16),
     to_signed(16#38A1#, 16), to_signed(16#3895#, 16), to_signed(16#3889#, 16), to_signed(16#387D#, 16),
     to_signed(16#3871#, 16), to_signed(16#3866#, 16), to_signed(16#385A#, 16), to_signed(16#384E#, 16),
     to_signed(16#3842#, 16), to_signed(16#3836#, 16), to_signed(16#382A#, 16), to_signed(16#381E#, 16),
     to_signed(16#3812#, 16), to_signed(16#3805#, 16), to_signed(16#37F9#, 16), to_signed(16#37ED#, 16),
     to_signed(16#37E1#, 16), to_signed(16#37D5#, 16), to_signed(16#37C8#, 16), to_signed(16#37BC#, 16),
     to_signed(16#37B0#, 16), to_signed(16#37A3#, 16), to_signed(16#3797#, 16), to_signed(16#378A#, 16),
     to_signed(16#377E#, 16), to_signed(16#3771#, 16), to_signed(16#3765#, 16), to_signed(16#3758#, 16),
     to_signed(16#374B#, 16), to_signed(16#373F#, 16), to_signed(16#3732#, 16), to_signed(16#3725#, 16),
     to_signed(16#3718#, 16), to_signed(16#370C#, 16), to_signed(16#36FF#, 16), to_signed(16#36F2#, 16),
     to_signed(16#36E5#, 16), to_signed(16#36D8#, 16), to_signed(16#36CB#, 16), to_signed(16#36BE#, 16),
     to_signed(16#36B1#, 16), to_signed(16#36A4#, 16), to_signed(16#3697#, 16), to_signed(16#368A#, 16),
     to_signed(16#367D#, 16), to_signed(16#366F#, 16), to_signed(16#3662#, 16), to_signed(16#3655#, 16),
     to_signed(16#3648#, 16), to_signed(16#363A#, 16), to_signed(16#362D#, 16), to_signed(16#3620#, 16),
     to_signed(16#3612#, 16), to_signed(16#3605#, 16), to_signed(16#35F7#, 16), to_signed(16#35EA#, 16),
     to_signed(16#35DC#, 16), to_signed(16#35CE#, 16), to_signed(16#35C1#, 16), to_signed(16#35B3#, 16),
     to_signed(16#35A5#, 16), to_signed(16#3598#, 16), to_signed(16#358A#, 16), to_signed(16#357C#, 16),
     to_signed(16#356E#, 16), to_signed(16#3561#, 16), to_signed(16#3553#, 16), to_signed(16#3545#, 16),
     to_signed(16#3537#, 16), to_signed(16#3529#, 16), to_signed(16#351B#, 16), to_signed(16#350D#, 16),
     to_signed(16#34FF#, 16), to_signed(16#34F1#, 16), to_signed(16#34E2#, 16), to_signed(16#34D4#, 16),
     to_signed(16#34C6#, 16), to_signed(16#34B8#, 16), to_signed(16#34AA#, 16), to_signed(16#349B#, 16),
     to_signed(16#348D#, 16), to_signed(16#347F#, 16), to_signed(16#3470#, 16), to_signed(16#3462#, 16),
     to_signed(16#3453#, 16), to_signed(16#3445#, 16), to_signed(16#3436#, 16), to_signed(16#3428#, 16),
     to_signed(16#3419#, 16), to_signed(16#340B#, 16), to_signed(16#33FC#, 16), to_signed(16#33ED#, 16),
     to_signed(16#33DF#, 16), to_signed(16#33D0#, 16), to_signed(16#33C1#, 16), to_signed(16#33B2#, 16),
     to_signed(16#33A3#, 16), to_signed(16#3395#, 16), to_signed(16#3386#, 16), to_signed(16#3377#, 16),
     to_signed(16#3368#, 16), to_signed(16#3359#, 16), to_signed(16#334A#, 16), to_signed(16#333B#, 16),
     to_signed(16#332C#, 16), to_signed(16#331D#, 16), to_signed(16#330D#, 16), to_signed(16#32FE#, 16),
     to_signed(16#32EF#, 16), to_signed(16#32E0#, 16), to_signed(16#32D0#, 16), to_signed(16#32C1#, 16),
     to_signed(16#32B2#, 16), to_signed(16#32A3#, 16), to_signed(16#3293#, 16), to_signed(16#3284#, 16),
     to_signed(16#3274#, 16), to_signed(16#3265#, 16), to_signed(16#3255#, 16), to_signed(16#3246#, 16),
     to_signed(16#3236#, 16), to_signed(16#3227#, 16), to_signed(16#3217#, 16), to_signed(16#3207#, 16),
     to_signed(16#31F8#, 16), to_signed(16#31E8#, 16), to_signed(16#31D8#, 16), to_signed(16#31C8#, 16),
     to_signed(16#31B9#, 16), to_signed(16#31A9#, 16), to_signed(16#3199#, 16), to_signed(16#3189#, 16),
     to_signed(16#3179#, 16), to_signed(16#3169#, 16), to_signed(16#3159#, 16), to_signed(16#3149#, 16),
     to_signed(16#3139#, 16), to_signed(16#3129#, 16), to_signed(16#3119#, 16), to_signed(16#3109#, 16),
     to_signed(16#30F9#, 16), to_signed(16#30E8#, 16), to_signed(16#30D8#, 16), to_signed(16#30C8#, 16),
     to_signed(16#30B8#, 16), to_signed(16#30A7#, 16), to_signed(16#3097#, 16), to_signed(16#3087#, 16),
     to_signed(16#3076#, 16), to_signed(16#3066#, 16), to_signed(16#3055#, 16), to_signed(16#3045#, 16),
     to_signed(16#3034#, 16), to_signed(16#3024#, 16), to_signed(16#3013#, 16), to_signed(16#3002#, 16),
     to_signed(16#2FF2#, 16), to_signed(16#2FE1#, 16), to_signed(16#2FD0#, 16), to_signed(16#2FC0#, 16),
     to_signed(16#2FAF#, 16), to_signed(16#2F9E#, 16), to_signed(16#2F8D#, 16), to_signed(16#2F7D#, 16),
     to_signed(16#2F6C#, 16), to_signed(16#2F5B#, 16), to_signed(16#2F4A#, 16), to_signed(16#2F39#, 16),
     to_signed(16#2F28#, 16), to_signed(16#2F17#, 16), to_signed(16#2F06#, 16), to_signed(16#2EF5#, 16),
     to_signed(16#2EE4#, 16), to_signed(16#2ED3#, 16), to_signed(16#2EC2#, 16), to_signed(16#2EB0#, 16),
     to_signed(16#2E9F#, 16), to_signed(16#2E8E#, 16), to_signed(16#2E7D#, 16), to_signed(16#2E6B#, 16),
     to_signed(16#2E5A#, 16), to_signed(16#2E49#, 16), to_signed(16#2E37#, 16), to_signed(16#2E26#, 16),
     to_signed(16#2E15#, 16), to_signed(16#2E03#, 16), to_signed(16#2DF2#, 16), to_signed(16#2DE0#, 16),
     to_signed(16#2DCF#, 16), to_signed(16#2DBD#, 16), to_signed(16#2DAB#, 16), to_signed(16#2D9A#, 16),
     to_signed(16#2D88#, 16), to_signed(16#2D76#, 16), to_signed(16#2D65#, 16), to_signed(16#2D53#, 16));  -- sfix16 [512]
  CONSTANT Twiddle_im_table_data          : vector_of_signed16(0 TO 511) := 
    (to_signed(16#0000#, 16), to_signed(-16#0019#, 16), to_signed(-16#0032#, 16), to_signed(-16#004B#, 16),
     to_signed(-16#0065#, 16), to_signed(-16#007E#, 16), to_signed(-16#0097#, 16), to_signed(-16#00B0#, 16),
     to_signed(-16#00C9#, 16), to_signed(-16#00E2#, 16), to_signed(-16#00FB#, 16), to_signed(-16#0114#, 16),
     to_signed(-16#012E#, 16), to_signed(-16#0147#, 16), to_signed(-16#0160#, 16), to_signed(-16#0179#, 16),
     to_signed(-16#0192#, 16), to_signed(-16#01AB#, 16), to_signed(-16#01C4#, 16), to_signed(-16#01DD#, 16),
     to_signed(-16#01F7#, 16), to_signed(-16#0210#, 16), to_signed(-16#0229#, 16), to_signed(-16#0242#, 16),
     to_signed(-16#025B#, 16), to_signed(-16#0274#, 16), to_signed(-16#028D#, 16), to_signed(-16#02A6#, 16),
     to_signed(-16#02C0#, 16), to_signed(-16#02D9#, 16), to_signed(-16#02F2#, 16), to_signed(-16#030B#, 16),
     to_signed(-16#0324#, 16), to_signed(-16#033D#, 16), to_signed(-16#0356#, 16), to_signed(-16#036F#, 16),
     to_signed(-16#0388#, 16), to_signed(-16#03A1#, 16), to_signed(-16#03BB#, 16), to_signed(-16#03D4#, 16),
     to_signed(-16#03ED#, 16), to_signed(-16#0406#, 16), to_signed(-16#041F#, 16), to_signed(-16#0438#, 16),
     to_signed(-16#0451#, 16), to_signed(-16#046A#, 16), to_signed(-16#0483#, 16), to_signed(-16#049C#, 16),
     to_signed(-16#04B5#, 16), to_signed(-16#04CE#, 16), to_signed(-16#04E7#, 16), to_signed(-16#0500#, 16),
     to_signed(-16#051A#, 16), to_signed(-16#0533#, 16), to_signed(-16#054C#, 16), to_signed(-16#0565#, 16),
     to_signed(-16#057E#, 16), to_signed(-16#0597#, 16), to_signed(-16#05B0#, 16), to_signed(-16#05C9#, 16),
     to_signed(-16#05E2#, 16), to_signed(-16#05FB#, 16), to_signed(-16#0614#, 16), to_signed(-16#062D#, 16),
     to_signed(-16#0646#, 16), to_signed(-16#065F#, 16), to_signed(-16#0678#, 16), to_signed(-16#0691#, 16),
     to_signed(-16#06AA#, 16), to_signed(-16#06C3#, 16), to_signed(-16#06DC#, 16), to_signed(-16#06F5#, 16),
     to_signed(-16#070E#, 16), to_signed(-16#0727#, 16), to_signed(-16#0740#, 16), to_signed(-16#0759#, 16),
     to_signed(-16#0772#, 16), to_signed(-16#078B#, 16), to_signed(-16#07A4#, 16), to_signed(-16#07BD#, 16),
     to_signed(-16#07D6#, 16), to_signed(-16#07EF#, 16), to_signed(-16#0807#, 16), to_signed(-16#0820#, 16),
     to_signed(-16#0839#, 16), to_signed(-16#0852#, 16), to_signed(-16#086B#, 16), to_signed(-16#0884#, 16),
     to_signed(-16#089D#, 16), to_signed(-16#08B6#, 16), to_signed(-16#08CF#, 16), to_signed(-16#08E8#, 16),
     to_signed(-16#0901#, 16), to_signed(-16#0919#, 16), to_signed(-16#0932#, 16), to_signed(-16#094B#, 16),
     to_signed(-16#0964#, 16), to_signed(-16#097D#, 16), to_signed(-16#0996#, 16), to_signed(-16#09AF#, 16),
     to_signed(-16#09C7#, 16), to_signed(-16#09E0#, 16), to_signed(-16#09F9#, 16), to_signed(-16#0A12#, 16),
     to_signed(-16#0A2B#, 16), to_signed(-16#0A44#, 16), to_signed(-16#0A5C#, 16), to_signed(-16#0A75#, 16),
     to_signed(-16#0A8E#, 16), to_signed(-16#0AA7#, 16), to_signed(-16#0AC0#, 16), to_signed(-16#0AD8#, 16),
     to_signed(-16#0AF1#, 16), to_signed(-16#0B0A#, 16), to_signed(-16#0B23#, 16), to_signed(-16#0B3B#, 16),
     to_signed(-16#0B54#, 16), to_signed(-16#0B6D#, 16), to_signed(-16#0B85#, 16), to_signed(-16#0B9E#, 16),
     to_signed(-16#0BB7#, 16), to_signed(-16#0BD0#, 16), to_signed(-16#0BE8#, 16), to_signed(-16#0C01#, 16),
     to_signed(-16#0C1A#, 16), to_signed(-16#0C32#, 16), to_signed(-16#0C4B#, 16), to_signed(-16#0C64#, 16),
     to_signed(-16#0C7C#, 16), to_signed(-16#0C95#, 16), to_signed(-16#0CAE#, 16), to_signed(-16#0CC6#, 16),
     to_signed(-16#0CDF#, 16), to_signed(-16#0CF8#, 16), to_signed(-16#0D10#, 16), to_signed(-16#0D29#, 16),
     to_signed(-16#0D41#, 16), to_signed(-16#0D5A#, 16), to_signed(-16#0D72#, 16), to_signed(-16#0D8B#, 16),
     to_signed(-16#0DA4#, 16), to_signed(-16#0DBC#, 16), to_signed(-16#0DD5#, 16), to_signed(-16#0DED#, 16),
     to_signed(-16#0E06#, 16), to_signed(-16#0E1E#, 16), to_signed(-16#0E37#, 16), to_signed(-16#0E4F#, 16),
     to_signed(-16#0E68#, 16), to_signed(-16#0E80#, 16), to_signed(-16#0E99#, 16), to_signed(-16#0EB1#, 16),
     to_signed(-16#0ECA#, 16), to_signed(-16#0EE2#, 16), to_signed(-16#0EFB#, 16), to_signed(-16#0F13#, 16),
     to_signed(-16#0F2B#, 16), to_signed(-16#0F44#, 16), to_signed(-16#0F5C#, 16), to_signed(-16#0F75#, 16),
     to_signed(-16#0F8D#, 16), to_signed(-16#0FA5#, 16), to_signed(-16#0FBE#, 16), to_signed(-16#0FD6#, 16),
     to_signed(-16#0FEE#, 16), to_signed(-16#1007#, 16), to_signed(-16#101F#, 16), to_signed(-16#1037#, 16),
     to_signed(-16#1050#, 16), to_signed(-16#1068#, 16), to_signed(-16#1080#, 16), to_signed(-16#1099#, 16),
     to_signed(-16#10B1#, 16), to_signed(-16#10C9#, 16), to_signed(-16#10E1#, 16), to_signed(-16#10FA#, 16),
     to_signed(-16#1112#, 16), to_signed(-16#112A#, 16), to_signed(-16#1142#, 16), to_signed(-16#115A#, 16),
     to_signed(-16#1173#, 16), to_signed(-16#118B#, 16), to_signed(-16#11A3#, 16), to_signed(-16#11BB#, 16),
     to_signed(-16#11D3#, 16), to_signed(-16#11EB#, 16), to_signed(-16#1204#, 16), to_signed(-16#121C#, 16),
     to_signed(-16#1234#, 16), to_signed(-16#124C#, 16), to_signed(-16#1264#, 16), to_signed(-16#127C#, 16),
     to_signed(-16#1294#, 16), to_signed(-16#12AC#, 16), to_signed(-16#12C4#, 16), to_signed(-16#12DC#, 16),
     to_signed(-16#12F4#, 16), to_signed(-16#130C#, 16), to_signed(-16#1324#, 16), to_signed(-16#133C#, 16),
     to_signed(-16#1354#, 16), to_signed(-16#136C#, 16), to_signed(-16#1384#, 16), to_signed(-16#139C#, 16),
     to_signed(-16#13B4#, 16), to_signed(-16#13CC#, 16), to_signed(-16#13E4#, 16), to_signed(-16#13FB#, 16),
     to_signed(-16#1413#, 16), to_signed(-16#142B#, 16), to_signed(-16#1443#, 16), to_signed(-16#145B#, 16),
     to_signed(-16#1473#, 16), to_signed(-16#148B#, 16), to_signed(-16#14A2#, 16), to_signed(-16#14BA#, 16),
     to_signed(-16#14D2#, 16), to_signed(-16#14EA#, 16), to_signed(-16#1501#, 16), to_signed(-16#1519#, 16),
     to_signed(-16#1531#, 16), to_signed(-16#1549#, 16), to_signed(-16#1560#, 16), to_signed(-16#1578#, 16),
     to_signed(-16#1590#, 16), to_signed(-16#15A7#, 16), to_signed(-16#15BF#, 16), to_signed(-16#15D7#, 16),
     to_signed(-16#15EE#, 16), to_signed(-16#1606#, 16), to_signed(-16#161D#, 16), to_signed(-16#1635#, 16),
     to_signed(-16#164C#, 16), to_signed(-16#1664#, 16), to_signed(-16#167C#, 16), to_signed(-16#1693#, 16),
     to_signed(-16#16AB#, 16), to_signed(-16#16C2#, 16), to_signed(-16#16DA#, 16), to_signed(-16#16F1#, 16),
     to_signed(-16#1709#, 16), to_signed(-16#1720#, 16), to_signed(-16#1737#, 16), to_signed(-16#174F#, 16),
     to_signed(-16#1766#, 16), to_signed(-16#177E#, 16), to_signed(-16#1795#, 16), to_signed(-16#17AC#, 16),
     to_signed(-16#17C4#, 16), to_signed(-16#17DB#, 16), to_signed(-16#17F2#, 16), to_signed(-16#180A#, 16),
     to_signed(-16#1821#, 16), to_signed(-16#1838#, 16), to_signed(-16#184F#, 16), to_signed(-16#1867#, 16),
     to_signed(-16#187E#, 16), to_signed(-16#1895#, 16), to_signed(-16#18AC#, 16), to_signed(-16#18C3#, 16),
     to_signed(-16#18DB#, 16), to_signed(-16#18F2#, 16), to_signed(-16#1909#, 16), to_signed(-16#1920#, 16),
     to_signed(-16#1937#, 16), to_signed(-16#194E#, 16), to_signed(-16#1965#, 16), to_signed(-16#197C#, 16),
     to_signed(-16#1993#, 16), to_signed(-16#19AA#, 16), to_signed(-16#19C1#, 16), to_signed(-16#19D8#, 16),
     to_signed(-16#19EF#, 16), to_signed(-16#1A06#, 16), to_signed(-16#1A1D#, 16), to_signed(-16#1A34#, 16),
     to_signed(-16#1A4B#, 16), to_signed(-16#1A62#, 16), to_signed(-16#1A79#, 16), to_signed(-16#1A90#, 16),
     to_signed(-16#1AA7#, 16), to_signed(-16#1ABE#, 16), to_signed(-16#1AD4#, 16), to_signed(-16#1AEB#, 16),
     to_signed(-16#1B02#, 16), to_signed(-16#1B19#, 16), to_signed(-16#1B30#, 16), to_signed(-16#1B46#, 16),
     to_signed(-16#1B5D#, 16), to_signed(-16#1B74#, 16), to_signed(-16#1B8A#, 16), to_signed(-16#1BA1#, 16),
     to_signed(-16#1BB8#, 16), to_signed(-16#1BCE#, 16), to_signed(-16#1BE5#, 16), to_signed(-16#1BFC#, 16),
     to_signed(-16#1C12#, 16), to_signed(-16#1C29#, 16), to_signed(-16#1C3F#, 16), to_signed(-16#1C56#, 16),
     to_signed(-16#1C6C#, 16), to_signed(-16#1C83#, 16), to_signed(-16#1C99#, 16), to_signed(-16#1CB0#, 16),
     to_signed(-16#1CC6#, 16), to_signed(-16#1CDD#, 16), to_signed(-16#1CF3#, 16), to_signed(-16#1D0A#, 16),
     to_signed(-16#1D20#, 16), to_signed(-16#1D36#, 16), to_signed(-16#1D4D#, 16), to_signed(-16#1D63#, 16),
     to_signed(-16#1D79#, 16), to_signed(-16#1D90#, 16), to_signed(-16#1DA6#, 16), to_signed(-16#1DBC#, 16),
     to_signed(-16#1DD3#, 16), to_signed(-16#1DE9#, 16), to_signed(-16#1DFF#, 16), to_signed(-16#1E15#, 16),
     to_signed(-16#1E2B#, 16), to_signed(-16#1E42#, 16), to_signed(-16#1E58#, 16), to_signed(-16#1E6E#, 16),
     to_signed(-16#1E84#, 16), to_signed(-16#1E9A#, 16), to_signed(-16#1EB0#, 16), to_signed(-16#1EC6#, 16),
     to_signed(-16#1EDC#, 16), to_signed(-16#1EF2#, 16), to_signed(-16#1F08#, 16), to_signed(-16#1F1E#, 16),
     to_signed(-16#1F34#, 16), to_signed(-16#1F4A#, 16), to_signed(-16#1F60#, 16), to_signed(-16#1F76#, 16),
     to_signed(-16#1F8C#, 16), to_signed(-16#1FA2#, 16), to_signed(-16#1FB7#, 16), to_signed(-16#1FCD#, 16),
     to_signed(-16#1FE3#, 16), to_signed(-16#1FF9#, 16), to_signed(-16#200F#, 16), to_signed(-16#2024#, 16),
     to_signed(-16#203A#, 16), to_signed(-16#2050#, 16), to_signed(-16#2065#, 16), to_signed(-16#207B#, 16),
     to_signed(-16#2091#, 16), to_signed(-16#20A6#, 16), to_signed(-16#20BC#, 16), to_signed(-16#20D1#, 16),
     to_signed(-16#20E7#, 16), to_signed(-16#20FD#, 16), to_signed(-16#2112#, 16), to_signed(-16#2128#, 16),
     to_signed(-16#213D#, 16), to_signed(-16#2153#, 16), to_signed(-16#2168#, 16), to_signed(-16#217D#, 16),
     to_signed(-16#2193#, 16), to_signed(-16#21A8#, 16), to_signed(-16#21BE#, 16), to_signed(-16#21D3#, 16),
     to_signed(-16#21E8#, 16), to_signed(-16#21FE#, 16), to_signed(-16#2213#, 16), to_signed(-16#2228#, 16),
     to_signed(-16#223D#, 16), to_signed(-16#2253#, 16), to_signed(-16#2268#, 16), to_signed(-16#227D#, 16),
     to_signed(-16#2292#, 16), to_signed(-16#22A7#, 16), to_signed(-16#22BC#, 16), to_signed(-16#22D2#, 16),
     to_signed(-16#22E7#, 16), to_signed(-16#22FC#, 16), to_signed(-16#2311#, 16), to_signed(-16#2326#, 16),
     to_signed(-16#233B#, 16), to_signed(-16#2350#, 16), to_signed(-16#2365#, 16), to_signed(-16#237A#, 16),
     to_signed(-16#238E#, 16), to_signed(-16#23A3#, 16), to_signed(-16#23B8#, 16), to_signed(-16#23CD#, 16),
     to_signed(-16#23E2#, 16), to_signed(-16#23F7#, 16), to_signed(-16#240B#, 16), to_signed(-16#2420#, 16),
     to_signed(-16#2435#, 16), to_signed(-16#244A#, 16), to_signed(-16#245E#, 16), to_signed(-16#2473#, 16),
     to_signed(-16#2488#, 16), to_signed(-16#249C#, 16), to_signed(-16#24B1#, 16), to_signed(-16#24C5#, 16),
     to_signed(-16#24DA#, 16), to_signed(-16#24EF#, 16), to_signed(-16#2503#, 16), to_signed(-16#2518#, 16),
     to_signed(-16#252C#, 16), to_signed(-16#2541#, 16), to_signed(-16#2555#, 16), to_signed(-16#2569#, 16),
     to_signed(-16#257E#, 16), to_signed(-16#2592#, 16), to_signed(-16#25A6#, 16), to_signed(-16#25BB#, 16),
     to_signed(-16#25CF#, 16), to_signed(-16#25E3#, 16), to_signed(-16#25F8#, 16), to_signed(-16#260C#, 16),
     to_signed(-16#2620#, 16), to_signed(-16#2634#, 16), to_signed(-16#2648#, 16), to_signed(-16#265C#, 16),
     to_signed(-16#2671#, 16), to_signed(-16#2685#, 16), to_signed(-16#2699#, 16), to_signed(-16#26AD#, 16),
     to_signed(-16#26C1#, 16), to_signed(-16#26D5#, 16), to_signed(-16#26E9#, 16), to_signed(-16#26FD#, 16),
     to_signed(-16#2711#, 16), to_signed(-16#2724#, 16), to_signed(-16#2738#, 16), to_signed(-16#274C#, 16),
     to_signed(-16#2760#, 16), to_signed(-16#2774#, 16), to_signed(-16#2788#, 16), to_signed(-16#279B#, 16),
     to_signed(-16#27AF#, 16), to_signed(-16#27C3#, 16), to_signed(-16#27D6#, 16), to_signed(-16#27EA#, 16),
     to_signed(-16#27FE#, 16), to_signed(-16#2811#, 16), to_signed(-16#2825#, 16), to_signed(-16#2838#, 16),
     to_signed(-16#284C#, 16), to_signed(-16#2860#, 16), to_signed(-16#2873#, 16), to_signed(-16#2886#, 16),
     to_signed(-16#289A#, 16), to_signed(-16#28AD#, 16), to_signed(-16#28C1#, 16), to_signed(-16#28D4#, 16),
     to_signed(-16#28E7#, 16), to_signed(-16#28FB#, 16), to_signed(-16#290E#, 16), to_signed(-16#2921#, 16),
     to_signed(-16#2935#, 16), to_signed(-16#2948#, 16), to_signed(-16#295B#, 16), to_signed(-16#296E#, 16),
     to_signed(-16#2981#, 16), to_signed(-16#2994#, 16), to_signed(-16#29A7#, 16), to_signed(-16#29BB#, 16),
     to_signed(-16#29CE#, 16), to_signed(-16#29E1#, 16), to_signed(-16#29F4#, 16), to_signed(-16#2A07#, 16),
     to_signed(-16#2A1A#, 16), to_signed(-16#2A2C#, 16), to_signed(-16#2A3F#, 16), to_signed(-16#2A52#, 16),
     to_signed(-16#2A65#, 16), to_signed(-16#2A78#, 16), to_signed(-16#2A8B#, 16), to_signed(-16#2A9D#, 16),
     to_signed(-16#2AB0#, 16), to_signed(-16#2AC3#, 16), to_signed(-16#2AD6#, 16), to_signed(-16#2AE8#, 16),
     to_signed(-16#2AFB#, 16), to_signed(-16#2B0D#, 16), to_signed(-16#2B20#, 16), to_signed(-16#2B33#, 16),
     to_signed(-16#2B45#, 16), to_signed(-16#2B58#, 16), to_signed(-16#2B6A#, 16), to_signed(-16#2B7D#, 16),
     to_signed(-16#2B8F#, 16), to_signed(-16#2BA1#, 16), to_signed(-16#2BB4#, 16), to_signed(-16#2BC6#, 16),
     to_signed(-16#2BD8#, 16), to_signed(-16#2BEB#, 16), to_signed(-16#2BFD#, 16), to_signed(-16#2C0F#, 16),
     to_signed(-16#2C21#, 16), to_signed(-16#2C34#, 16), to_signed(-16#2C46#, 16), to_signed(-16#2C58#, 16),
     to_signed(-16#2C6A#, 16), to_signed(-16#2C7C#, 16), to_signed(-16#2C8E#, 16), to_signed(-16#2CA0#, 16),
     to_signed(-16#2CB2#, 16), to_signed(-16#2CC4#, 16), to_signed(-16#2CD6#, 16), to_signed(-16#2CE8#, 16),
     to_signed(-16#2CFA#, 16), to_signed(-16#2D0C#, 16), to_signed(-16#2D1E#, 16), to_signed(-16#2D2F#, 16));  -- sfix16 [512]

  -- Signals
  SIGNAL Radix22TwdlMapping_cnt           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Radix22TwdlMapping_phase         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw  : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Radix22TwdlMapping_twdlAddrMap   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdl45Reg     : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1      : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2      : std_logic;
  SIGNAL Radix22TwdlMapping_cnt_next      : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Radix22TwdlMapping_phase_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1_next : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw_next : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Radix22TwdlMapping_twdlAddrMap_next : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdl45Reg_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2_next : std_logic;
  SIGNAL twdlAddr                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL twdlAddrVld                      : std_logic;
  SIGNAL twdlOctant                       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45                           : std_logic;
  SIGNAL twiddleS_re                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twiddleReg_re                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twiddleS_im                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twiddleReg_im                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdlOctantReg                    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45Reg                        : std_logic;

BEGIN
  -- Radix22TwdlMapping
  Radix22TwdlMapping_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22TwdlMapping_octantReg1 <= to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdlAddr_raw <= to_unsigned(16#000#, 12);
        Radix22TwdlMapping_twdlAddrMap <= to_unsigned(16#000#, 9);
        Radix22TwdlMapping_twdl45Reg <= '0';
        Radix22TwdlMapping_dvldReg1 <= '0';
        Radix22TwdlMapping_dvldReg2 <= '0';
        Radix22TwdlMapping_cnt <= to_unsigned(16#000#, 10);
        Radix22TwdlMapping_phase <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        Radix22TwdlMapping_cnt <= Radix22TwdlMapping_cnt_next;
        Radix22TwdlMapping_phase <= Radix22TwdlMapping_phase_next;
        Radix22TwdlMapping_octantReg1 <= Radix22TwdlMapping_octantReg1_next;
        Radix22TwdlMapping_twdlAddr_raw <= Radix22TwdlMapping_twdlAddr_raw_next;
        Radix22TwdlMapping_twdlAddrMap <= Radix22TwdlMapping_twdlAddrMap_next;
        Radix22TwdlMapping_twdl45Reg <= Radix22TwdlMapping_twdl45Reg_next;
        Radix22TwdlMapping_dvldReg1 <= Radix22TwdlMapping_dvldReg1_next;
        Radix22TwdlMapping_dvldReg2 <= Radix22TwdlMapping_dvldReg2_next;
      END IF;
    END IF;
  END PROCESS Radix22TwdlMapping_process;

  Radix22TwdlMapping_output : PROCESS (Radix22TwdlMapping_cnt, Radix22TwdlMapping_dvldReg1,
       Radix22TwdlMapping_dvldReg2, Radix22TwdlMapping_octantReg1,
       Radix22TwdlMapping_phase, Radix22TwdlMapping_twdl45Reg,
       Radix22TwdlMapping_twdlAddrMap, Radix22TwdlMapping_twdlAddr_raw,
       dout_4_1_vld)
    VARIABLE octant : unsigned(2 DOWNTO 0);
    VARIABLE cnt_cast : unsigned(11 DOWNTO 0);
    VARIABLE sub_temp : signed(25 DOWNTO 0);
    VARIABLE sub_temp_0 : signed(13 DOWNTO 0);
    VARIABLE sub_temp_1 : signed(13 DOWNTO 0);
    VARIABLE sub_temp_2 : signed(25 DOWNTO 0);
    VARIABLE sub_temp_3 : signed(25 DOWNTO 0);
  BEGIN
    sub_temp := to_signed(16#0000000#, 26);
    sub_temp_0 := to_signed(16#0000#, 14);
    sub_temp_1 := to_signed(16#0000#, 14);
    sub_temp_2 := to_signed(16#0000000#, 26);
    sub_temp_3 := to_signed(16#0000000#, 26);
    cnt_cast := to_unsigned(16#000#, 12);
    Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt;
    Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase;
    Radix22TwdlMapping_dvldReg2_next <= Radix22TwdlMapping_dvldReg1;
    Radix22TwdlMapping_dvldReg1_next <= dout_4_1_vld;
    CASE Radix22TwdlMapping_twdlAddr_raw IS
      WHEN "001000000000" =>
        octant := to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "010000000000" =>
        octant := to_unsigned(16#1#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "011000000000" =>
        octant := to_unsigned(16#2#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "100000000000" =>
        octant := to_unsigned(16#3#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "101000000000" =>
        octant := to_unsigned(16#4#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN OTHERS => 
        octant := Radix22TwdlMapping_twdlAddr_raw(11 DOWNTO 9);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
    END CASE;
    Radix22TwdlMapping_octantReg1_next <= octant;
    CASE octant IS
      WHEN "000" =>
        Radix22TwdlMapping_twdlAddrMap_next <= Radix22TwdlMapping_twdlAddr_raw(8 DOWNTO 0);
      WHEN "001" =>
        sub_temp_0 := to_signed(16#0400#, 14) - signed(resize(Radix22TwdlMapping_twdlAddr_raw, 14));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_0(8 DOWNTO 0));
      WHEN "010" =>
        sub_temp_1 := signed(resize(Radix22TwdlMapping_twdlAddr_raw, 14)) - to_signed(16#0400#, 14);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_1(8 DOWNTO 0));
      WHEN "011" =>
        sub_temp_2 := to_signed(16#0100000#, 26) - signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_2(17 DOWNTO 9));
      WHEN "100" =>
        sub_temp_3 := signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26)) - to_signed(16#0100000#, 26);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_3(17 DOWNTO 9));
      WHEN OTHERS => 
        sub_temp := to_signed(16#0180000#, 26) - signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp(17 DOWNTO 9));
    END CASE;
    IF Radix22TwdlMapping_phase = to_unsigned(16#0#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= to_unsigned(16#000#, 12);
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#1#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(Radix22TwdlMapping_cnt, 12) sll 1;
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#2#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(Radix22TwdlMapping_cnt, 12);
    ELSE 
      cnt_cast := resize(Radix22TwdlMapping_cnt, 12);
      Radix22TwdlMapping_twdlAddr_raw_next <= (cnt_cast sll 1) + cnt_cast;
    END IF;
    IF dout_4_1_vld = '1' AND (Radix22TwdlMapping_cnt > to_unsigned(16#3FB#, 10)) THEN 
      Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase + to_unsigned(16#1#, 2);
    END IF;
    IF dout_4_1_vld = '1' THEN 
      Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt + to_unsigned(16#004#, 10);
    END IF;
    twdlAddr <= Radix22TwdlMapping_twdlAddrMap;
    twdlAddrVld <= Radix22TwdlMapping_dvldReg2;
    twdlOctant <= Radix22TwdlMapping_octantReg1;
    twdl45 <= Radix22TwdlMapping_twdl45Reg;
  END PROCESS Radix22TwdlMapping_output;


  -- Twiddle ROM1
  twiddleS_re <= Twiddle_re_table_data(to_integer(twdlAddr));

  TWIDDLEROM_RE_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twiddleReg_re <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twiddleReg_re <= twiddleS_re;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_RE_process;


  -- Twiddle ROM2
  twiddleS_im <= Twiddle_im_table_data(to_integer(twdlAddr));

  TWIDDLEROM_IM_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twiddleReg_im <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twiddleReg_im <= twiddleS_im;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_IM_process;


  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdlOctantReg <= to_unsigned(16#0#, 3);
      ELSIF enb = '1' THEN
        twdlOctantReg <= twdlOctant;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl45Reg <= '0';
      ELSIF enb = '1' THEN
        twdl45Reg <= twdl45;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  -- Radix22TwdlOctCorr
  Radix22TwdlOctCorr_output : PROCESS (twdl45Reg, twdlOctantReg, twiddleReg_im, twiddleReg_re)
    VARIABLE twdlIn_re : signed(15 DOWNTO 0);
    VARIABLE twdlIn_im : signed(15 DOWNTO 0);
    VARIABLE cast : signed(16 DOWNTO 0);
    VARIABLE cast_0 : signed(16 DOWNTO 0);
    VARIABLE cast_1 : signed(16 DOWNTO 0);
    VARIABLE cast_2 : signed(16 DOWNTO 0);
    VARIABLE cast_3 : signed(16 DOWNTO 0);
    VARIABLE cast_4 : signed(16 DOWNTO 0);
  BEGIN
    cast := to_signed(16#00000#, 17);
    cast_0 := to_signed(16#00000#, 17);
    cast_1 := to_signed(16#00000#, 17);
    cast_2 := to_signed(16#00000#, 17);
    cast_3 := to_signed(16#00000#, 17);
    cast_4 := to_signed(16#00000#, 17);
    twdlIn_re := twiddleReg_re;
    twdlIn_im := twiddleReg_im;
    IF twdl45Reg = '1' THEN 
      CASE twdlOctantReg IS
        WHEN "000" =>
          twdlIn_re := to_signed(16#2D41#, 16);
          twdlIn_im := to_signed(-16#2D41#, 16);
        WHEN "010" =>
          twdlIn_re := to_signed(-16#2D41#, 16);
          twdlIn_im := to_signed(-16#2D41#, 16);
        WHEN "100" =>
          twdlIn_re := to_signed(-16#2D41#, 16);
          twdlIn_im := to_signed(16#2D41#, 16);
        WHEN OTHERS => 
          twdlIn_re := to_signed(16#2D41#, 16);
          twdlIn_im := to_signed(-16#2D41#, 16);
      END CASE;
    ELSE 
      CASE twdlOctantReg IS
        WHEN "000" =>
          NULL;
        WHEN "001" =>
          cast :=  - (resize(twiddleReg_im, 17));
          twdlIn_re := cast(15 DOWNTO 0);
          cast_2 :=  - (resize(twiddleReg_re, 17));
          twdlIn_im := cast_2(15 DOWNTO 0);
        WHEN "010" =>
          twdlIn_re := twiddleReg_im;
          cast_3 :=  - (resize(twiddleReg_re, 17));
          twdlIn_im := cast_3(15 DOWNTO 0);
        WHEN "011" =>
          cast_0 :=  - (resize(twiddleReg_re, 17));
          twdlIn_re := cast_0(15 DOWNTO 0);
          twdlIn_im := twiddleReg_im;
        WHEN "100" =>
          cast_1 :=  - (resize(twiddleReg_re, 17));
          twdlIn_re := cast_1(15 DOWNTO 0);
          cast_4 :=  - (resize(twiddleReg_im, 17));
          twdlIn_im := cast_4(15 DOWNTO 0);
        WHEN OTHERS => 
          twdlIn_re := twiddleReg_im;
          twdlIn_im := twiddleReg_re;
      END CASE;
    END IF;
    twdl_5_1_re <= twdlIn_re;
    twdl_5_1_im <= twdlIn_im;
  END PROCESS Radix22TwdlOctCorr_output;


END rtl;


-- End of TWDLROM_5_1_block.vhd --

-- Start of TWDLROM_5_1_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\TWDLROM_5_1_block1.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: TWDLROM_5_1_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/TWDLROM_5_1
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY TWDLROM_5_1_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_4_1_vld                      :   IN    std_logic;
        twdl_5_1_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32_En30
        twdl_5_1_im                       :   OUT   signed(31 DOWNTO 0)  -- sfix32_En30
        );
END TWDLROM_5_1_block1;


ARCHITECTURE rtl OF TWDLROM_5_1_block1 IS

  -- Constants
  CONSTANT Twiddle_re_table_data          : vector_of_signed32(0 TO 511) := 
    (to_signed(1073741824, 32), to_signed(1073740561, 32), to_signed(1073736771, 32), to_signed(1073730454, 32),
     to_signed(1073721611, 32), to_signed(1073710241, 32), to_signed(1073696345, 32), to_signed(1073679922, 32),
     to_signed(1073660973, 32), to_signed(1073639498, 32), to_signed(1073615496, 32), to_signed(1073588967, 32),
     to_signed(1073559913, 32), to_signed(1073528332, 32), to_signed(1073494225, 32), to_signed(1073457592, 32),
     to_signed(1073418433, 32), to_signed(1073376748, 32), to_signed(1073332538, 32), to_signed(1073285802, 32),
     to_signed(1073236540, 32), to_signed(1073184753, 32), to_signed(1073130440, 32), to_signed(1073073603, 32),
     to_signed(1073014240, 32), to_signed(1072952352, 32), to_signed(1072887940, 32), to_signed(1072821003, 32),
     to_signed(1072751542, 32), to_signed(1072679556, 32), to_signed(1072605046, 32), to_signed(1072528012, 32),
     to_signed(1072448455, 32), to_signed(1072366374, 32), to_signed(1072281769, 32), to_signed(1072194642, 32),
     to_signed(1072104991, 32), to_signed(1072012818, 32), to_signed(1071918122, 32), to_signed(1071820903, 32),
     to_signed(1071721163, 32), to_signed(1071618901, 32), to_signed(1071514117, 32), to_signed(1071406812, 32),
     to_signed(1071296985, 32), to_signed(1071184638, 32), to_signed(1071069770, 32), to_signed(1070952382, 32),
     to_signed(1070832474, 32), to_signed(1070710046, 32), to_signed(1070585099, 32), to_signed(1070457632, 32),
     to_signed(1070327646, 32), to_signed(1070195142, 32), to_signed(1070060120, 32), to_signed(1069922579, 32),
     to_signed(1069782521, 32), to_signed(1069639946, 32), to_signed(1069494854, 32), to_signed(1069347245, 32),
     to_signed(1069197120, 32), to_signed(1069044479, 32), to_signed(1068889322, 32), to_signed(1068731650, 32),
     to_signed(1068571464, 32), to_signed(1068408763, 32), to_signed(1068243547, 32), to_signed(1068075818, 32),
     to_signed(1067905576, 32), to_signed(1067732821, 32), to_signed(1067557554, 32), to_signed(1067379774, 32),
     to_signed(1067199483, 32), to_signed(1067016680, 32), to_signed(1066831367, 32), to_signed(1066643544, 32),
     to_signed(1066453210, 32), to_signed(1066260367, 32), to_signed(1066065015, 32), to_signed(1065867154, 32),
     to_signed(1065666786, 32), to_signed(1065463909, 32), to_signed(1065258526, 32), to_signed(1065050636, 32),
     to_signed(1064840240, 32), to_signed(1064627338, 32), to_signed(1064411931, 32), to_signed(1064194019, 32),
     to_signed(1063973603, 32), to_signed(1063750684, 32), to_signed(1063525261, 32), to_signed(1063297336, 32),
     to_signed(1063066909, 32), to_signed(1062833980, 32), to_signed(1062598550, 32), to_signed(1062360620, 32),
     to_signed(1062120190, 32), to_signed(1061877261, 32), to_signed(1061631833, 32), to_signed(1061383907, 32),
     to_signed(1061133483, 32), to_signed(1060880563, 32), to_signed(1060625146, 32), to_signed(1060367233, 32),
     to_signed(1060106826, 32), to_signed(1059843923, 32), to_signed(1059578527, 32), to_signed(1059310638, 32),
     to_signed(1059040255, 32), to_signed(1058767381, 32), to_signed(1058492016, 32), to_signed(1058214159, 32),
     to_signed(1057933813, 32), to_signed(1057650977, 32), to_signed(1057365653, 32), to_signed(1057077840, 32),
     to_signed(1056787540, 32), to_signed(1056494753, 32), to_signed(1056199480, 32), to_signed(1055901722, 32),
     to_signed(1055601479, 32), to_signed(1055298753, 32), to_signed(1054993543, 32), to_signed(1054685850, 32),
     to_signed(1054375676, 32), to_signed(1054063021, 32), to_signed(1053747885, 32), to_signed(1053430270, 32),
     to_signed(1053110176, 32), to_signed(1052787604, 32), to_signed(1052462555, 32), to_signed(1052135029, 32),
     to_signed(1051805027, 32), to_signed(1051472550, 32), to_signed(1051137599, 32), to_signed(1050800175, 32),
     to_signed(1050460278, 32), to_signed(1050117909, 32), to_signed(1049773069, 32), to_signed(1049425759, 32),
     to_signed(1049075980, 32), to_signed(1048723732, 32), to_signed(1048369016, 32), to_signed(1048011834, 32),
     to_signed(1047652185, 32), to_signed(1047290071, 32), to_signed(1046925492, 32), to_signed(1046558451, 32),
     to_signed(1046188946, 32), to_signed(1045816980, 32), to_signed(1045442553, 32), to_signed(1045065665, 32),
     to_signed(1044686319, 32), to_signed(1044304514, 32), to_signed(1043920252, 32), to_signed(1043533534, 32),
     to_signed(1043144360, 32), to_signed(1042752731, 32), to_signed(1042358649, 32), to_signed(1041962114, 32),
     to_signed(1041563127, 32), to_signed(1041161689, 32), to_signed(1040757802, 32), to_signed(1040351465, 32),
     to_signed(1039942680, 32), to_signed(1039531448, 32), to_signed(1039117770, 32), to_signed(1038701647, 32),
     to_signed(1038283080, 32), to_signed(1037862069, 32), to_signed(1037438617, 32), to_signed(1037012723, 32),
     to_signed(1036584389, 32), to_signed(1036153615, 32), to_signed(1035720404, 32), to_signed(1035284755, 32),
     to_signed(1034846671, 32), to_signed(1034406151, 32), to_signed(1033963197, 32), to_signed(1033517810, 32),
     to_signed(1033069992, 32), to_signed(1032619742, 32), to_signed(1032167062, 32), to_signed(1031711954, 32),
     to_signed(1031254418, 32), to_signed(1030794455, 32), to_signed(1030332067, 32), to_signed(1029867254, 32),
     to_signed(1029400018, 32), to_signed(1028930359, 32), to_signed(1028458280, 32), to_signed(1027983780, 32),
     to_signed(1027506862, 32), to_signed(1027027525, 32), to_signed(1026545772, 32), to_signed(1026061603, 32),
     to_signed(1025575020, 32), to_signed(1025086024, 32), to_signed(1024594615, 32), to_signed(1024100796, 32),
     to_signed(1023604567, 32), to_signed(1023105929, 32), to_signed(1022604883, 32), to_signed(1022101432, 32),
     to_signed(1021595575, 32), to_signed(1021087314, 32), to_signed(1020576651, 32), to_signed(1020063586, 32),
     to_signed(1019548121, 32), to_signed(1019030256, 32), to_signed(1018509994, 32), to_signed(1017987335, 32),
     to_signed(1017462281, 32), to_signed(1016934832, 32), to_signed(1016404991, 32), to_signed(1015872758, 32),
     to_signed(1015338134, 32), to_signed(1014801122, 32), to_signed(1014261721, 32), to_signed(1013719934, 32),
     to_signed(1013175761, 32), to_signed(1012629204, 32), to_signed(1012080264, 32), to_signed(1011528943, 32),
     to_signed(1010975242, 32), to_signed(1010419162, 32), to_signed(1009860704, 32), to_signed(1009299870, 32),
     to_signed(1008736660, 32), to_signed(1008171077, 32), to_signed(1007603122, 32), to_signed(1007032796, 32),
     to_signed(1006460100, 32), to_signed(1005885036, 32), to_signed(1005307605, 32), to_signed(1004727809, 32),
     to_signed(1004145648, 32), to_signed(1003561124, 32), to_signed(1002974239, 32), to_signed(1002384994, 32),
     to_signed(1001793390, 32), to_signed(1001199428, 32), to_signed(1000603111, 32), to_signed(1000004439, 32),
     to_signed(999403415, 32), to_signed(998800038, 32), to_signed(998194311, 32), to_signed(997586236, 32),
     to_signed(996975812, 32), to_signed(996363043, 32), to_signed(995747930, 32), to_signed(995130473, 32),
     to_signed(994510675, 32), to_signed(993888536, 32), to_signed(993264059, 32), to_signed(992637245, 32),
     to_signed(992008094, 32), to_signed(991376610, 32), to_signed(990742793, 32), to_signed(990106644, 32),
     to_signed(989468165, 32), to_signed(988827359, 32), to_signed(988184225, 32), to_signed(987538766, 32),
     to_signed(986890984, 32), to_signed(986240879, 32), to_signed(985588453, 32), to_signed(984933708, 32),
     to_signed(984276646, 32), to_signed(983617267, 32), to_signed(982955574, 32), to_signed(982291568, 32),
     to_signed(981625251, 32), to_signed(980956623, 32), to_signed(980285688, 32), to_signed(979612445, 32),
     to_signed(978936898, 32), to_signed(978259047, 32), to_signed(977578894, 32), to_signed(976896441, 32),
     to_signed(976211688, 32), to_signed(975524639, 32), to_signed(974835295, 32), to_signed(974143656, 32),
     to_signed(973449725, 32), to_signed(972753504, 32), to_signed(972054994, 32), to_signed(971354196, 32),
     to_signed(970651112, 32), to_signed(969945745, 32), to_signed(969238095, 32), to_signed(968528165, 32),
     to_signed(967815955, 32), to_signed(967101468, 32), to_signed(966384706, 32), to_signed(965665669, 32),
     to_signed(964944360, 32), to_signed(964220780, 32), to_signed(963494932, 32), to_signed(962766816, 32),
     to_signed(962036435, 32), to_signed(961303790, 32), to_signed(960568883, 32), to_signed(959831716, 32),
     to_signed(959092290, 32), to_signed(958350608, 32), to_signed(957606670, 32), to_signed(956860479, 32),
     to_signed(956112036, 32), to_signed(955361344, 32), to_signed(954608403, 32), to_signed(953853216, 32),
     to_signed(953095785, 32), to_signed(952336111, 32), to_signed(951574196, 32), to_signed(950810042, 32),
     to_signed(950043650, 32), to_signed(949275023, 32), to_signed(948504163, 32), to_signed(947731070, 32),
     to_signed(946955747, 32), to_signed(946178196, 32), to_signed(945398418, 32), to_signed(944616416, 32),
     to_signed(943832191, 32), to_signed(943045745, 32), to_signed(942257081, 32), to_signed(941466198, 32),
     to_signed(940673101, 32), to_signed(939877790, 32), to_signed(939080267, 32), to_signed(938280535, 32),
     to_signed(937478595, 32), to_signed(936674448, 32), to_signed(935868098, 32), to_signed(935059546, 32),
     to_signed(934248793, 32), to_signed(933435842, 32), to_signed(932620694, 32), to_signed(931803352, 32),
     to_signed(930983817, 32), to_signed(930162092, 32), to_signed(929338177, 32), to_signed(928512076, 32),
     to_signed(927683790, 32), to_signed(926853322, 32), to_signed(926020672, 32), to_signed(925185843, 32),
     to_signed(924348837, 32), to_signed(923509656, 32), to_signed(922668302, 32), to_signed(921824777, 32),
     to_signed(920979082, 32), to_signed(920131221, 32), to_signed(919281194, 32), to_signed(918429004, 32),
     to_signed(917574653, 32), to_signed(916718143, 32), to_signed(915859476, 32), to_signed(914998653, 32),
     to_signed(914135678, 32), to_signed(913270551, 32), to_signed(912403276, 32), to_signed(911533853, 32),
     to_signed(910662286, 32), to_signed(909788576, 32), to_signed(908912725, 32), to_signed(908034735, 32),
     to_signed(907154608, 32), to_signed(906272347, 32), to_signed(905387953, 32), to_signed(904501429, 32),
     to_signed(903612776, 32), to_signed(902721998, 32), to_signed(901829095, 32), to_signed(900934069, 32),
     to_signed(900036924, 32), to_signed(899137661, 32), to_signed(898236282, 32), to_signed(897332790, 32),
     to_signed(896427186, 32), to_signed(895519473, 32), to_signed(894609652, 32), to_signed(893697727, 32),
     to_signed(892783698, 32), to_signed(891867569, 32), to_signed(890949341, 32), to_signed(890029016, 32),
     to_signed(889106597, 32), to_signed(888182086, 32), to_signed(887255485, 32), to_signed(886326796, 32),
     to_signed(885396022, 32), to_signed(884463164, 32), to_signed(883528225, 32), to_signed(882591207, 32),
     to_signed(881652112, 32), to_signed(880710943, 32), to_signed(879767701, 32), to_signed(878822389, 32),
     to_signed(877875009, 32), to_signed(876925563, 32), to_signed(875974054, 32), to_signed(875020483, 32),
     to_signed(874064853, 32), to_signed(873107167, 32), to_signed(872147426, 32), to_signed(871185633, 32),
     to_signed(870221790, 32), to_signed(869255900, 32), to_signed(868287963, 32), to_signed(867317984, 32),
     to_signed(866345964, 32), to_signed(865371905, 32), to_signed(864395810, 32), to_signed(863417681, 32),
     to_signed(862437520, 32), to_signed(861455330, 32), to_signed(860471112, 32), to_signed(859484870, 32),
     to_signed(858496606, 32), to_signed(857506321, 32), to_signed(856514019, 32), to_signed(855519701, 32),
     to_signed(854523370, 32), to_signed(853525028, 32), to_signed(852524677, 32), to_signed(851522321, 32),
     to_signed(850517961, 32), to_signed(849511600, 32), to_signed(848503239, 32), to_signed(847492882, 32),
     to_signed(846480531, 32), to_signed(845466188, 32), to_signed(844449856, 32), to_signed(843431536, 32),
     to_signed(842411232, 32), to_signed(841388945, 32), to_signed(840364679, 32), to_signed(839338435, 32),
     to_signed(838310216, 32), to_signed(837280024, 32), to_signed(836247863, 32), to_signed(835213733, 32),
     to_signed(834177638, 32), to_signed(833139580, 32), to_signed(832099562, 32), to_signed(831057586, 32),
     to_signed(830013654, 32), to_signed(828967769, 32), to_signed(827919934, 32), to_signed(826870150, 32),
     to_signed(825818421, 32), to_signed(824764748, 32), to_signed(823709135, 32), to_signed(822651583, 32),
     to_signed(821592095, 32), to_signed(820530675, 32), to_signed(819467323, 32), to_signed(818402043, 32),
     to_signed(817334838, 32), to_signed(816265709, 32), to_signed(815194659, 32), to_signed(814121692, 32),
     to_signed(813046808, 32), to_signed(811970011, 32), to_signed(810891304, 32), to_signed(809810688, 32),
     to_signed(808728167, 32), to_signed(807643743, 32), to_signed(806557419, 32), to_signed(805469196, 32),
     to_signed(804379079, 32), to_signed(803287068, 32), to_signed(802193167, 32), to_signed(801097379, 32),
     to_signed(799999706, 32), to_signed(798900150, 32), to_signed(797798714, 32), to_signed(796695401, 32),
     to_signed(795590213, 32), to_signed(794483153, 32), to_signed(793374223, 32), to_signed(792263427, 32),
     to_signed(791150767, 32), to_signed(790036244, 32), to_signed(788919863, 32), to_signed(787801625, 32),
     to_signed(786681534, 32), to_signed(785559591, 32), to_signed(784435800, 32), to_signed(783310163, 32),
     to_signed(782182683, 32), to_signed(781053363, 32), to_signed(779922204, 32), to_signed(778789210, 32),
     to_signed(777654384, 32), to_signed(776517728, 32), to_signed(775379244, 32), to_signed(774238936, 32),
     to_signed(773096806, 32), to_signed(771952857, 32), to_signed(770807092, 32), to_signed(769659512, 32),
     to_signed(768510122, 32), to_signed(767358923, 32), to_signed(766205919, 32), to_signed(765051111, 32),
     to_signed(763894504, 32), to_signed(762736098, 32), to_signed(761575898, 32), to_signed(760413906, 32));  -- sfix32 [512]
  CONSTANT Twiddle_im_table_data          : vector_of_signed32(0 TO 511) := 
    (to_signed(0, 32), to_signed(-1647099, 32), to_signed(-3294193, 32), to_signed(-4941281, 32),
     to_signed(-6588356, 32), to_signed(-8235416, 32), to_signed(-9882456, 32), to_signed(-11529474, 32),
     to_signed(-13176464, 32), to_signed(-14823423, 32), to_signed(-16470347, 32), to_signed(-18117233, 32),
     to_signed(-19764076, 32), to_signed(-21410872, 32), to_signed(-23057618, 32), to_signed(-24704310, 32),
     to_signed(-26350943, 32), to_signed(-27997515, 32), to_signed(-29644021, 32), to_signed(-31290457, 32),
     to_signed(-32936819, 32), to_signed(-34583104, 32), to_signed(-36229307, 32), to_signed(-37875426, 32),
     to_signed(-39521455, 32), to_signed(-41167391, 32), to_signed(-42813230, 32), to_signed(-44458968, 32),
     to_signed(-46104602, 32), to_signed(-47750128, 32), to_signed(-49395541, 32), to_signed(-51040837, 32),
     to_signed(-52686014, 32), to_signed(-54331067, 32), to_signed(-55975992, 32), to_signed(-57620785, 32),
     to_signed(-59265442, 32), to_signed(-60909960, 32), to_signed(-62554335, 32), to_signed(-64198563, 32),
     to_signed(-65842639, 32), to_signed(-67486561, 32), to_signed(-69130324, 32), to_signed(-70773924, 32),
     to_signed(-72417357, 32), to_signed(-74060620, 32), to_signed(-75703709, 32), to_signed(-77346620, 32),
     to_signed(-78989349, 32), to_signed(-80631892, 32), to_signed(-82274245, 32), to_signed(-83916404, 32),
     to_signed(-85558366, 32), to_signed(-87200127, 32), to_signed(-88841683, 32), to_signed(-90483029, 32),
     to_signed(-92124163, 32), to_signed(-93765079, 32), to_signed(-95405776, 32), to_signed(-97046247, 32),
     to_signed(-98686491, 32), to_signed(-100326502, 32), to_signed(-101966277, 32), to_signed(-103605812, 32),
     to_signed(-105245103, 32), to_signed(-106884147, 32), to_signed(-108522939, 32), to_signed(-110161476, 32),
     to_signed(-111799753, 32), to_signed(-113437768, 32), to_signed(-115075515, 32), to_signed(-116712992, 32),
     to_signed(-118350194, 32), to_signed(-119987118, 32), to_signed(-121623759, 32), to_signed(-123260114, 32),
     to_signed(-124896179, 32), to_signed(-126531950, 32), to_signed(-128167423, 32), to_signed(-129802595, 32),
     to_signed(-131437462, 32), to_signed(-133072019, 32), to_signed(-134706263, 32), to_signed(-136340190, 32),
     to_signed(-137973796, 32), to_signed(-139607077, 32), to_signed(-141240030, 32), to_signed(-142872651, 32),
     to_signed(-144504935, 32), to_signed(-146136880, 32), to_signed(-147768480, 32), to_signed(-149399733, 32),
     to_signed(-151030634, 32), to_signed(-152661180, 32), to_signed(-154291367, 32), to_signed(-155921191, 32),
     to_signed(-157550647, 32), to_signed(-159179733, 32), to_signed(-160808445, 32), to_signed(-162436778, 32),
     to_signed(-164064728, 32), to_signed(-165692293, 32), to_signed(-167319468, 32), to_signed(-168946249, 32),
     to_signed(-170572633, 32), to_signed(-172198615, 32), to_signed(-173824192, 32), to_signed(-175449360, 32),
     to_signed(-177074115, 32), to_signed(-178698453, 32), to_signed(-180322371, 32), to_signed(-181945865, 32),
     to_signed(-183568930, 32), to_signed(-185191564, 32), to_signed(-186813762, 32), to_signed(-188435520, 32),
     to_signed(-190056834, 32), to_signed(-191677702, 32), to_signed(-193298119, 32), to_signed(-194918080, 32),
     to_signed(-196537583, 32), to_signed(-198156624, 32), to_signed(-199775198, 32), to_signed(-201393302, 32),
     to_signed(-203010932, 32), to_signed(-204628085, 32), to_signed(-206244756, 32), to_signed(-207860942, 32),
     to_signed(-209476638, 32), to_signed(-211091842, 32), to_signed(-212706549, 32), to_signed(-214320755, 32),
     to_signed(-215934457, 32), to_signed(-217547651, 32), to_signed(-219160334, 32), to_signed(-220772500, 32),
     to_signed(-222384147, 32), to_signed(-223995270, 32), to_signed(-225605867, 32), to_signed(-227215933, 32),
     to_signed(-228825464, 32), to_signed(-230434456, 32), to_signed(-232042906, 32), to_signed(-233650811, 32),
     to_signed(-235258165, 32), to_signed(-236864966, 32), to_signed(-238471210, 32), to_signed(-240076892, 32),
     to_signed(-241682010, 32), to_signed(-243286558, 32), to_signed(-244890535, 32), to_signed(-246493935, 32),
     to_signed(-248096755, 32), to_signed(-249698991, 32), to_signed(-251300640, 32), to_signed(-252901697, 32),
     to_signed(-254502159, 32), to_signed(-256102022, 32), to_signed(-257701283, 32), to_signed(-259299937, 32),
     to_signed(-260897982, 32), to_signed(-262495412, 32), to_signed(-264092224, 32), to_signed(-265688415, 32),
     to_signed(-267283981, 32), to_signed(-268878918, 32), to_signed(-270473223, 32), to_signed(-272066891, 32),
     to_signed(-273659918, 32), to_signed(-275252302, 32), to_signed(-276844038, 32), to_signed(-278435122, 32),
     to_signed(-280025552, 32), to_signed(-281615322, 32), to_signed(-283204430, 32), to_signed(-284792871, 32),
     to_signed(-286380643, 32), to_signed(-287967740, 32), to_signed(-289554160, 32), to_signed(-291139898, 32),
     to_signed(-292724951, 32), to_signed(-294309316, 32), to_signed(-295892988, 32), to_signed(-297475964, 32),
     to_signed(-299058239, 32), to_signed(-300639811, 32), to_signed(-302220676, 32), to_signed(-303800829, 32),
     to_signed(-305380268, 32), to_signed(-306958988, 32), to_signed(-308536985, 32), to_signed(-310114257, 32),
     to_signed(-311690799, 32), to_signed(-313266607, 32), to_signed(-314841679, 32), to_signed(-316416009, 32),
     to_signed(-317989595, 32), to_signed(-319562433, 32), to_signed(-321134518, 32), to_signed(-322705848, 32),
     to_signed(-324276419, 32), to_signed(-325846226, 32), to_signed(-327415267, 32), to_signed(-328983538, 32),
     to_signed(-330551034, 32), to_signed(-332117752, 32), to_signed(-333683689, 32), to_signed(-335248841, 32),
     to_signed(-336813204, 32), to_signed(-338376774, 32), to_signed(-339939549, 32), to_signed(-341501523, 32),
     to_signed(-343062693, 32), to_signed(-344623057, 32), to_signed(-346182609, 32), to_signed(-347741347, 32),
     to_signed(-349299266, 32), to_signed(-350856364, 32), to_signed(-352412636, 32), to_signed(-353968079, 32),
     to_signed(-355522689, 32), to_signed(-357076462, 32), to_signed(-358629395, 32), to_signed(-360181484, 32),
     to_signed(-361732726, 32), to_signed(-363283116, 32), to_signed(-364832652, 32), to_signed(-366381329, 32),
     to_signed(-367929144, 32), to_signed(-369476093, 32), to_signed(-371022173, 32), to_signed(-372567379, 32),
     to_signed(-374111709, 32), to_signed(-375655159, 32), to_signed(-377197725, 32), to_signed(-378739403, 32),
     to_signed(-380280190, 32), to_signed(-381820082, 32), to_signed(-383359076, 32), to_signed(-384897167, 32),
     to_signed(-386434353, 32), to_signed(-387970630, 32), to_signed(-389505993, 32), to_signed(-391040440, 32),
     to_signed(-392573967, 32), to_signed(-394106570, 32), to_signed(-395638246, 32), to_signed(-397168991, 32),
     to_signed(-398698801, 32), to_signed(-400227673, 32), to_signed(-401755603, 32), to_signed(-403282588, 32),
     to_signed(-404808624, 32), to_signed(-406333708, 32), to_signed(-407857835, 32), to_signed(-409381002, 32),
     to_signed(-410903207, 32), to_signed(-412424444, 32), to_signed(-413944711, 32), to_signed(-415464004, 32),
     to_signed(-416982319, 32), to_signed(-418499653, 32), to_signed(-420016002, 32), to_signed(-421531363, 32),
     to_signed(-423045732, 32), to_signed(-424559105, 32), to_signed(-426071480, 32), to_signed(-427582852, 32),
     to_signed(-429093217, 32), to_signed(-430602573, 32), to_signed(-432110916, 32), to_signed(-433618242, 32),
     to_signed(-435124548, 32), to_signed(-436629829, 32), to_signed(-438134084, 32), to_signed(-439637307, 32),
     to_signed(-441139496, 32), to_signed(-442640647, 32), to_signed(-444140756, 32), to_signed(-445639820, 32),
     to_signed(-447137835, 32), to_signed(-448634799, 32), to_signed(-450130706, 32), to_signed(-451625555, 32),
     to_signed(-453119340, 32), to_signed(-454612060, 32), to_signed(-456103710, 32), to_signed(-457594286, 32),
     to_signed(-459083786, 32), to_signed(-460572205, 32), to_signed(-462059541, 32), to_signed(-463545789, 32),
     to_signed(-465030947, 32), to_signed(-466515010, 32), to_signed(-467997976, 32), to_signed(-469479840, 32),
     to_signed(-470960600, 32), to_signed(-472440251, 32), to_signed(-473918791, 32), to_signed(-475396216, 32),
     to_signed(-476872522, 32), to_signed(-478347705, 32), to_signed(-479821764, 32), to_signed(-481294693, 32),
     to_signed(-482766489, 32), to_signed(-484237150, 32), to_signed(-485706671, 32), to_signed(-487175049, 32),
     to_signed(-488642281, 32), to_signed(-490108363, 32), to_signed(-491573292, 32), to_signed(-493037064, 32),
     to_signed(-494499676, 32), to_signed(-495961124, 32), to_signed(-497421405, 32), to_signed(-498880516, 32),
     to_signed(-500338453, 32), to_signed(-501795212, 32), to_signed(-503250791, 32), to_signed(-504705185, 32),
     to_signed(-506158392, 32), to_signed(-507610408, 32), to_signed(-509061229, 32), to_signed(-510510853, 32),
     to_signed(-511959275, 32), to_signed(-513406493, 32), to_signed(-514852502, 32), to_signed(-516297300, 32),
     to_signed(-517740883, 32), to_signed(-519183248, 32), to_signed(-520624391, 32), to_signed(-522064309, 32),
     to_signed(-523502998, 32), to_signed(-524940456, 32), to_signed(-526376678, 32), to_signed(-527811662, 32),
     to_signed(-529245404, 32), to_signed(-530677900, 32), to_signed(-532109148, 32), to_signed(-533539144, 32),
     to_signed(-534967884, 32), to_signed(-536395365, 32), to_signed(-537821584, 32), to_signed(-539246538, 32),
     to_signed(-540670223, 32), to_signed(-542092635, 32), to_signed(-543513772, 32), to_signed(-544933630, 32),
     to_signed(-546352205, 32), to_signed(-547769495, 32), to_signed(-549185496, 32), to_signed(-550600205, 32),
     to_signed(-552013618, 32), to_signed(-553425732, 32), to_signed(-554836544, 32), to_signed(-556246051, 32),
     to_signed(-557654248, 32), to_signed(-559061133, 32), to_signed(-560466703, 32), to_signed(-561870954, 32),
     to_signed(-563273883, 32), to_signed(-564675486, 32), to_signed(-566075761, 32), to_signed(-567474703, 32),
     to_signed(-568872310, 32), to_signed(-570268579, 32), to_signed(-571663506, 32), to_signed(-573057087, 32),
     to_signed(-574449320, 32), to_signed(-575840202, 32), to_signed(-577229728, 32), to_signed(-578617896, 32),
     to_signed(-580004702, 32), to_signed(-581390144, 32), to_signed(-582774218, 32), to_signed(-584156920, 32),
     to_signed(-585538248, 32), to_signed(-586918198, 32), to_signed(-588296766, 32), to_signed(-589673951, 32),
     to_signed(-591049748, 32), to_signed(-592424154, 32), to_signed(-593797166, 32), to_signed(-595168781, 32),
     to_signed(-596538995, 32), to_signed(-597907806, 32), to_signed(-599275210, 32), to_signed(-600641203, 32),
     to_signed(-602005783, 32), to_signed(-603368947, 32), to_signed(-604730691, 32), to_signed(-606091012, 32),
     to_signed(-607449906, 32), to_signed(-608807372, 32), to_signed(-610163404, 32), to_signed(-611518001, 32),
     to_signed(-612871159, 32), to_signed(-614222875, 32), to_signed(-615573145, 32), to_signed(-616921967, 32),
     to_signed(-618269338, 32), to_signed(-619615253, 32), to_signed(-620959711, 32), to_signed(-622302707, 32),
     to_signed(-623644239, 32), to_signed(-624984303, 32), to_signed(-626322897, 32), to_signed(-627660017, 32),
     to_signed(-628995660, 32), to_signed(-630329823, 32), to_signed(-631662503, 32), to_signed(-632993696, 32),
     to_signed(-634323400, 32), to_signed(-635651611, 32), to_signed(-636978327, 32), to_signed(-638303543, 32),
     to_signed(-639627258, 32), to_signed(-640949467, 32), to_signed(-642270169, 32), to_signed(-643589359, 32),
     to_signed(-644907034, 32), to_signed(-646223192, 32), to_signed(-647537830, 32), to_signed(-648850943, 32),
     to_signed(-650162530, 32), to_signed(-651472587, 32), to_signed(-652781111, 32), to_signed(-654088099, 32),
     to_signed(-655393548, 32), to_signed(-656697454, 32), to_signed(-657999816, 32), to_signed(-659300629, 32),
     to_signed(-660599890, 32), to_signed(-661897597, 32), to_signed(-663193747, 32), to_signed(-664488336, 32),
     to_signed(-665781362, 32), to_signed(-667072820, 32), to_signed(-668362709, 32), to_signed(-669651026, 32),
     to_signed(-670937767, 32), to_signed(-672222928, 32), to_signed(-673506508, 32), to_signed(-674788504, 32),
     to_signed(-676068911, 32), to_signed(-677347728, 32), to_signed(-678624950, 32), to_signed(-679900576, 32),
     to_signed(-681174602, 32), to_signed(-682447025, 32), to_signed(-683717842, 32), to_signed(-684987051, 32),
     to_signed(-686254647, 32), to_signed(-687520629, 32), to_signed(-688784993, 32), to_signed(-690047736, 32),
     to_signed(-691308855, 32), to_signed(-692568348, 32), to_signed(-693826211, 32), to_signed(-695082441, 32),
     to_signed(-696337036, 32), to_signed(-697589992, 32), to_signed(-698841307, 32), to_signed(-700090977, 32),
     to_signed(-701339000, 32), to_signed(-702585372, 32), to_signed(-703830092, 32), to_signed(-705073155, 32),
     to_signed(-706314559, 32), to_signed(-707554301, 32), to_signed(-708792378, 32), to_signed(-710028787, 32),
     to_signed(-711263525, 32), to_signed(-712496590, 32), to_signed(-713727978, 32), to_signed(-714957687, 32),
     to_signed(-716185713, 32), to_signed(-717412054, 32), to_signed(-718636707, 32), to_signed(-719859669, 32),
     to_signed(-721080937, 32), to_signed(-722300508, 32), to_signed(-723518380, 32), to_signed(-724734549, 32),
     to_signed(-725949013, 32), to_signed(-727161768, 32), to_signed(-728372813, 32), to_signed(-729582143, 32),
     to_signed(-730789757, 32), to_signed(-731995651, 32), to_signed(-733199822, 32), to_signed(-734402269, 32),
     to_signed(-735602987, 32), to_signed(-736801974, 32), to_signed(-737999228, 32), to_signed(-739194745, 32),
     to_signed(-740388522, 32), to_signed(-741580558, 32), to_signed(-742770848, 32), to_signed(-743959390, 32),
     to_signed(-745146182, 32), to_signed(-746331221, 32), to_signed(-747514503, 32), to_signed(-748696026, 32),
     to_signed(-749875788, 32), to_signed(-751053785, 32), to_signed(-752230015, 32), to_signed(-753404474, 32),
     to_signed(-754577161, 32), to_signed(-755748072, 32), to_signed(-756917205, 32), to_signed(-758084557, 32));  -- sfix32 [512]

  -- Signals
  SIGNAL Radix22TwdlMapping_cnt           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Radix22TwdlMapping_phase         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw  : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Radix22TwdlMapping_twdlAddrMap   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdl45Reg     : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1      : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2      : std_logic;
  SIGNAL Radix22TwdlMapping_holdCycleCnt  : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Radix22TwdlMapping_phaseCnt      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_cnt_next      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Radix22TwdlMapping_phase_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1_next : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw_next : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Radix22TwdlMapping_twdlAddrMap_next : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdl45Reg_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2_next : std_logic;
  SIGNAL Radix22TwdlMapping_holdCycleCnt_next : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Radix22TwdlMapping_phaseCnt_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL twdlAddr                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL twdlAddrVld                      : std_logic;
  SIGNAL twdlOctant                       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45                           : std_logic;
  SIGNAL twiddleS_re                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twiddleReg_re                    : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twiddleS_im                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twiddleReg_im                    : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twdlOctantReg                    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45Reg                        : std_logic;

BEGIN
  -- Radix22TwdlMapping
  Radix22TwdlMapping_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22TwdlMapping_octantReg1 <= to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdlAddr_raw <= to_unsigned(16#000#, 12);
        Radix22TwdlMapping_twdlAddrMap <= to_unsigned(16#000#, 9);
        Radix22TwdlMapping_twdl45Reg <= '0';
        Radix22TwdlMapping_dvldReg1 <= '0';
        Radix22TwdlMapping_dvldReg2 <= '0';
        Radix22TwdlMapping_cnt <= to_unsigned(16#00#, 8);
        Radix22TwdlMapping_holdCycleCnt <= to_unsigned(16#0#, 4);
        Radix22TwdlMapping_phase <= to_unsigned(16#0#, 2);
        Radix22TwdlMapping_phaseCnt <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        Radix22TwdlMapping_cnt <= Radix22TwdlMapping_cnt_next;
        Radix22TwdlMapping_phase <= Radix22TwdlMapping_phase_next;
        Radix22TwdlMapping_octantReg1 <= Radix22TwdlMapping_octantReg1_next;
        Radix22TwdlMapping_twdlAddr_raw <= Radix22TwdlMapping_twdlAddr_raw_next;
        Radix22TwdlMapping_twdlAddrMap <= Radix22TwdlMapping_twdlAddrMap_next;
        Radix22TwdlMapping_twdl45Reg <= Radix22TwdlMapping_twdl45Reg_next;
        Radix22TwdlMapping_dvldReg1 <= Radix22TwdlMapping_dvldReg1_next;
        Radix22TwdlMapping_dvldReg2 <= Radix22TwdlMapping_dvldReg2_next;
        Radix22TwdlMapping_holdCycleCnt <= Radix22TwdlMapping_holdCycleCnt_next;
        Radix22TwdlMapping_phaseCnt <= Radix22TwdlMapping_phaseCnt_next;
      END IF;
    END IF;
  END PROCESS Radix22TwdlMapping_process;

  Radix22TwdlMapping_output : PROCESS (Radix22TwdlMapping_cnt, Radix22TwdlMapping_dvldReg1,
       Radix22TwdlMapping_dvldReg2, Radix22TwdlMapping_holdCycleCnt,
       Radix22TwdlMapping_octantReg1, Radix22TwdlMapping_phase,
       Radix22TwdlMapping_phaseCnt, Radix22TwdlMapping_twdl45Reg,
       Radix22TwdlMapping_twdlAddrMap, Radix22TwdlMapping_twdlAddr_raw,
       dout_4_1_vld)
    VARIABLE octant : unsigned(2 DOWNTO 0);
    VARIABLE cnt_bitReverse : unsigned(9 DOWNTO 0);
    VARIABLE addr_cast : unsigned(11 DOWNTO 0);
    VARIABLE c : unsigned(9 DOWNTO 0);
    VARIABLE sub_temp : signed(25 DOWNTO 0);
    VARIABLE sub_temp_0 : signed(13 DOWNTO 0);
    VARIABLE sub_temp_1 : signed(13 DOWNTO 0);
    VARIABLE sub_temp_2 : signed(25 DOWNTO 0);
    VARIABLE sub_temp_3 : signed(25 DOWNTO 0);
  BEGIN
    sub_temp := to_signed(16#0000000#, 26);
    sub_temp_0 := to_signed(16#0000#, 14);
    sub_temp_1 := to_signed(16#0000#, 14);
    sub_temp_2 := to_signed(16#0000000#, 26);
    sub_temp_3 := to_signed(16#0000000#, 26);
    addr_cast := to_unsigned(16#000#, 12);
    Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt;
    Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase;
    Radix22TwdlMapping_holdCycleCnt_next <= Radix22TwdlMapping_holdCycleCnt;
    Radix22TwdlMapping_phaseCnt_next <= Radix22TwdlMapping_phaseCnt;
    Radix22TwdlMapping_dvldReg2_next <= Radix22TwdlMapping_dvldReg1;
    Radix22TwdlMapping_dvldReg1_next <= dout_4_1_vld;
    CASE Radix22TwdlMapping_twdlAddr_raw IS
      WHEN "001000000000" =>
        octant := to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "010000000000" =>
        octant := to_unsigned(16#1#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "011000000000" =>
        octant := to_unsigned(16#2#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "100000000000" =>
        octant := to_unsigned(16#3#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "101000000000" =>
        octant := to_unsigned(16#4#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN OTHERS => 
        octant := Radix22TwdlMapping_twdlAddr_raw(11 DOWNTO 9);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
    END CASE;
    Radix22TwdlMapping_octantReg1_next <= octant;
    CASE octant IS
      WHEN "000" =>
        Radix22TwdlMapping_twdlAddrMap_next <= Radix22TwdlMapping_twdlAddr_raw(8 DOWNTO 0);
      WHEN "001" =>
        sub_temp_0 := to_signed(16#0400#, 14) - signed(resize(Radix22TwdlMapping_twdlAddr_raw, 14));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_0(8 DOWNTO 0));
      WHEN "010" =>
        sub_temp_1 := signed(resize(Radix22TwdlMapping_twdlAddr_raw, 14)) - to_signed(16#0400#, 14);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_1(8 DOWNTO 0));
      WHEN "011" =>
        sub_temp_2 := to_signed(16#0100000#, 26) - signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_2(17 DOWNTO 9));
      WHEN "100" =>
        sub_temp_3 := signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26)) - to_signed(16#0100000#, 26);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_3(17 DOWNTO 9));
      WHEN OTHERS => 
        sub_temp := to_signed(16#0180000#, 26) - signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp(17 DOWNTO 9));
    END CASE;
    cnt_bitReverse := resize(unsigned'(Radix22TwdlMapping_cnt(0) & Radix22TwdlMapping_cnt(1) & Radix22TwdlMapping_cnt(2) & Radix22TwdlMapping_cnt(3) & Radix22TwdlMapping_cnt(4) & Radix22TwdlMapping_cnt(5) & Radix22TwdlMapping_cnt(6) & Radix22TwdlMapping_cnt(7)), 10);
    c := cnt_bitReverse sll 2;
    IF Radix22TwdlMapping_phase = to_unsigned(16#0#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= to_unsigned(16#000#, 12);
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#1#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(cnt_bitReverse sll 2, 12);
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#2#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(c, 12) sll 1;
    ELSE 
      addr_cast := resize(c, 12);
      Radix22TwdlMapping_twdlAddr_raw_next <= (addr_cast sll 1) + addr_cast;
    END IF;
    IF dout_4_1_vld = '1' AND (Radix22TwdlMapping_phaseCnt = to_unsigned(16#3#, 2)) THEN 
      Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase + to_unsigned(16#1#, 2);
    END IF;
    IF dout_4_1_vld = '1' THEN 
      IF Radix22TwdlMapping_holdCycleCnt = to_unsigned(16#F#, 4) THEN 
        Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt + to_unsigned(16#01#, 8);
      END IF;
      Radix22TwdlMapping_holdCycleCnt_next <= Radix22TwdlMapping_holdCycleCnt + to_unsigned(16#1#, 4);
      IF Radix22TwdlMapping_phaseCnt = to_unsigned(16#3#, 2) THEN 
        Radix22TwdlMapping_phaseCnt_next <= to_unsigned(16#0#, 2);
      ELSE 
        Radix22TwdlMapping_phaseCnt_next <= Radix22TwdlMapping_phaseCnt + to_unsigned(16#1#, 2);
      END IF;
    END IF;
    twdlAddr <= Radix22TwdlMapping_twdlAddrMap;
    twdlAddrVld <= Radix22TwdlMapping_dvldReg2;
    twdlOctant <= Radix22TwdlMapping_octantReg1;
    twdl45 <= Radix22TwdlMapping_twdl45Reg;
  END PROCESS Radix22TwdlMapping_output;


  -- Twiddle ROM1
  twiddleS_re <= Twiddle_re_table_data(to_integer(twdlAddr));

  TWIDDLEROM_RE_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twiddleReg_re <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        twiddleReg_re <= twiddleS_re;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_RE_process;


  -- Twiddle ROM2
  twiddleS_im <= Twiddle_im_table_data(to_integer(twdlAddr));

  TWIDDLEROM_IM_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twiddleReg_im <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        twiddleReg_im <= twiddleS_im;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_IM_process;


  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdlOctantReg <= to_unsigned(16#0#, 3);
      ELSIF enb = '1' THEN
        twdlOctantReg <= twdlOctant;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl45Reg <= '0';
      ELSIF enb = '1' THEN
        twdl45Reg <= twdl45;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  -- Radix22TwdlOctCorr
  Radix22TwdlOctCorr_output : PROCESS (twdl45Reg, twdlOctantReg, twiddleReg_im, twiddleReg_re)
    VARIABLE twdlIn_re : signed(31 DOWNTO 0);
    VARIABLE twdlIn_im : signed(31 DOWNTO 0);
    VARIABLE cast : signed(32 DOWNTO 0);
    VARIABLE cast_0 : signed(32 DOWNTO 0);
    VARIABLE cast_1 : signed(32 DOWNTO 0);
    VARIABLE cast_2 : signed(32 DOWNTO 0);
    VARIABLE cast_3 : signed(32 DOWNTO 0);
    VARIABLE cast_4 : signed(32 DOWNTO 0);
  BEGIN
    cast := to_signed(0, 33);
    cast_0 := to_signed(0, 33);
    cast_1 := to_signed(0, 33);
    cast_2 := to_signed(0, 33);
    cast_3 := to_signed(0, 33);
    cast_4 := to_signed(0, 33);
    twdlIn_re := twiddleReg_re;
    twdlIn_im := twiddleReg_im;
    IF twdl45Reg = '1' THEN 
      CASE twdlOctantReg IS
        WHEN "000" =>
          twdlIn_re := to_signed(759250125, 32);
          twdlIn_im := to_signed(-759250125, 32);
        WHEN "010" =>
          twdlIn_re := to_signed(-759250125, 32);
          twdlIn_im := to_signed(-759250125, 32);
        WHEN "100" =>
          twdlIn_re := to_signed(-759250125, 32);
          twdlIn_im := to_signed(759250125, 32);
        WHEN OTHERS => 
          twdlIn_re := to_signed(759250125, 32);
          twdlIn_im := to_signed(-759250125, 32);
      END CASE;
    ELSE 
      CASE twdlOctantReg IS
        WHEN "000" =>
          NULL;
        WHEN "001" =>
          cast :=  - (resize(twiddleReg_im, 33));
          twdlIn_re := cast(31 DOWNTO 0);
          cast_2 :=  - (resize(twiddleReg_re, 33));
          twdlIn_im := cast_2(31 DOWNTO 0);
        WHEN "010" =>
          twdlIn_re := twiddleReg_im;
          cast_3 :=  - (resize(twiddleReg_re, 33));
          twdlIn_im := cast_3(31 DOWNTO 0);
        WHEN "011" =>
          cast_0 :=  - (resize(twiddleReg_re, 33));
          twdlIn_re := cast_0(31 DOWNTO 0);
          twdlIn_im := twiddleReg_im;
        WHEN "100" =>
          cast_1 :=  - (resize(twiddleReg_re, 33));
          twdlIn_re := cast_1(31 DOWNTO 0);
          cast_4 :=  - (resize(twiddleReg_im, 33));
          twdlIn_im := cast_4(31 DOWNTO 0);
        WHEN OTHERS => 
          twdlIn_re := twiddleReg_im;
          twdlIn_im := twiddleReg_re;
      END CASE;
    END IF;
    twdl_5_1_re <= twdlIn_re;
    twdl_5_1_im <= twdlIn_im;
  END PROCESS Radix22TwdlOctCorr_output;


END rtl;


-- End of TWDLROM_5_1_block1.vhd --

-- Start of TWDLROM_7_1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\TWDLROM_7_1.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: TWDLROM_7_1
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/TWDLROM_7_1
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY TWDLROM_7_1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_6_1_vld                      :   IN    std_logic;
        twdl_7_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16_En14
        twdl_7_1_im                       :   OUT   signed(15 DOWNTO 0)  -- sfix16_En14
        );
END TWDLROM_7_1;


ARCHITECTURE rtl OF TWDLROM_7_1 IS

  -- Constants
  CONSTANT Twiddle_re_table_data          : vector_of_signed16(0 TO 511) := 
    (to_signed(16#4000#, 16), to_signed(16#4000#, 16), to_signed(16#4000#, 16), to_signed(16#4000#, 16),
     to_signed(16#4000#, 16), to_signed(16#4000#, 16), to_signed(16#3FFF#, 16), to_signed(16#3FFF#, 16),
     to_signed(16#3FFF#, 16), to_signed(16#3FFE#, 16), to_signed(16#3FFE#, 16), to_signed(16#3FFE#, 16),
     to_signed(16#3FFD#, 16), to_signed(16#3FFD#, 16), to_signed(16#3FFC#, 16), to_signed(16#3FFC#, 16),
     to_signed(16#3FFB#, 16), to_signed(16#3FFA#, 16), to_signed(16#3FFA#, 16), to_signed(16#3FF9#, 16),
     to_signed(16#3FF8#, 16), to_signed(16#3FF7#, 16), to_signed(16#3FF7#, 16), to_signed(16#3FF6#, 16),
     to_signed(16#3FF5#, 16), to_signed(16#3FF4#, 16), to_signed(16#3FF3#, 16), to_signed(16#3FF2#, 16),
     to_signed(16#3FF1#, 16), to_signed(16#3FF0#, 16), to_signed(16#3FEF#, 16), to_signed(16#3FED#, 16),
     to_signed(16#3FEC#, 16), to_signed(16#3FEB#, 16), to_signed(16#3FEA#, 16), to_signed(16#3FE8#, 16),
     to_signed(16#3FE7#, 16), to_signed(16#3FE6#, 16), to_signed(16#3FE4#, 16), to_signed(16#3FE3#, 16),
     to_signed(16#3FE1#, 16), to_signed(16#3FE0#, 16), to_signed(16#3FDE#, 16), to_signed(16#3FDC#, 16),
     to_signed(16#3FDB#, 16), to_signed(16#3FD9#, 16), to_signed(16#3FD7#, 16), to_signed(16#3FD5#, 16),
     to_signed(16#3FD4#, 16), to_signed(16#3FD2#, 16), to_signed(16#3FD0#, 16), to_signed(16#3FCE#, 16),
     to_signed(16#3FCC#, 16), to_signed(16#3FCA#, 16), to_signed(16#3FC8#, 16), to_signed(16#3FC6#, 16),
     to_signed(16#3FC4#, 16), to_signed(16#3FC1#, 16), to_signed(16#3FBF#, 16), to_signed(16#3FBD#, 16),
     to_signed(16#3FBB#, 16), to_signed(16#3FB8#, 16), to_signed(16#3FB6#, 16), to_signed(16#3FB4#, 16),
     to_signed(16#3FB1#, 16), to_signed(16#3FAF#, 16), to_signed(16#3FAC#, 16), to_signed(16#3FAA#, 16),
     to_signed(16#3FA7#, 16), to_signed(16#3FA4#, 16), to_signed(16#3FA2#, 16), to_signed(16#3F9F#, 16),
     to_signed(16#3F9C#, 16), to_signed(16#3F99#, 16), to_signed(16#3F97#, 16), to_signed(16#3F94#, 16),
     to_signed(16#3F91#, 16), to_signed(16#3F8E#, 16), to_signed(16#3F8B#, 16), to_signed(16#3F88#, 16),
     to_signed(16#3F85#, 16), to_signed(16#3F82#, 16), to_signed(16#3F7F#, 16), to_signed(16#3F7B#, 16),
     to_signed(16#3F78#, 16), to_signed(16#3F75#, 16), to_signed(16#3F72#, 16), to_signed(16#3F6E#, 16),
     to_signed(16#3F6B#, 16), to_signed(16#3F68#, 16), to_signed(16#3F64#, 16), to_signed(16#3F61#, 16),
     to_signed(16#3F5D#, 16), to_signed(16#3F5A#, 16), to_signed(16#3F56#, 16), to_signed(16#3F52#, 16),
     to_signed(16#3F4F#, 16), to_signed(16#3F4B#, 16), to_signed(16#3F47#, 16), to_signed(16#3F43#, 16),
     to_signed(16#3F40#, 16), to_signed(16#3F3C#, 16), to_signed(16#3F38#, 16), to_signed(16#3F34#, 16),
     to_signed(16#3F30#, 16), to_signed(16#3F2C#, 16), to_signed(16#3F28#, 16), to_signed(16#3F24#, 16),
     to_signed(16#3F20#, 16), to_signed(16#3F1C#, 16), to_signed(16#3F17#, 16), to_signed(16#3F13#, 16),
     to_signed(16#3F0F#, 16), to_signed(16#3F0A#, 16), to_signed(16#3F06#, 16), to_signed(16#3F02#, 16),
     to_signed(16#3EFD#, 16), to_signed(16#3EF9#, 16), to_signed(16#3EF4#, 16), to_signed(16#3EF0#, 16),
     to_signed(16#3EEB#, 16), to_signed(16#3EE7#, 16), to_signed(16#3EE2#, 16), to_signed(16#3EDD#, 16),
     to_signed(16#3ED8#, 16), to_signed(16#3ED4#, 16), to_signed(16#3ECF#, 16), to_signed(16#3ECA#, 16),
     to_signed(16#3EC5#, 16), to_signed(16#3EC0#, 16), to_signed(16#3EBB#, 16), to_signed(16#3EB6#, 16),
     to_signed(16#3EB1#, 16), to_signed(16#3EAC#, 16), to_signed(16#3EA7#, 16), to_signed(16#3EA2#, 16),
     to_signed(16#3E9D#, 16), to_signed(16#3E98#, 16), to_signed(16#3E92#, 16), to_signed(16#3E8D#, 16),
     to_signed(16#3E88#, 16), to_signed(16#3E82#, 16), to_signed(16#3E7D#, 16), to_signed(16#3E77#, 16),
     to_signed(16#3E72#, 16), to_signed(16#3E6C#, 16), to_signed(16#3E67#, 16), to_signed(16#3E61#, 16),
     to_signed(16#3E5C#, 16), to_signed(16#3E56#, 16), to_signed(16#3E50#, 16), to_signed(16#3E4A#, 16),
     to_signed(16#3E45#, 16), to_signed(16#3E3F#, 16), to_signed(16#3E39#, 16), to_signed(16#3E33#, 16),
     to_signed(16#3E2D#, 16), to_signed(16#3E27#, 16), to_signed(16#3E21#, 16), to_signed(16#3E1B#, 16),
     to_signed(16#3E15#, 16), to_signed(16#3E0F#, 16), to_signed(16#3E09#, 16), to_signed(16#3E03#, 16),
     to_signed(16#3DFC#, 16), to_signed(16#3DF6#, 16), to_signed(16#3DF0#, 16), to_signed(16#3DE9#, 16),
     to_signed(16#3DE3#, 16), to_signed(16#3DDD#, 16), to_signed(16#3DD6#, 16), to_signed(16#3DD0#, 16),
     to_signed(16#3DC9#, 16), to_signed(16#3DC2#, 16), to_signed(16#3DBC#, 16), to_signed(16#3DB5#, 16),
     to_signed(16#3DAF#, 16), to_signed(16#3DA8#, 16), to_signed(16#3DA1#, 16), to_signed(16#3D9A#, 16),
     to_signed(16#3D93#, 16), to_signed(16#3D8D#, 16), to_signed(16#3D86#, 16), to_signed(16#3D7F#, 16),
     to_signed(16#3D78#, 16), to_signed(16#3D71#, 16), to_signed(16#3D6A#, 16), to_signed(16#3D63#, 16),
     to_signed(16#3D5B#, 16), to_signed(16#3D54#, 16), to_signed(16#3D4D#, 16), to_signed(16#3D46#, 16),
     to_signed(16#3D3F#, 16), to_signed(16#3D37#, 16), to_signed(16#3D30#, 16), to_signed(16#3D28#, 16),
     to_signed(16#3D21#, 16), to_signed(16#3D1A#, 16), to_signed(16#3D12#, 16), to_signed(16#3D0B#, 16),
     to_signed(16#3D03#, 16), to_signed(16#3CFB#, 16), to_signed(16#3CF4#, 16), to_signed(16#3CEC#, 16),
     to_signed(16#3CE4#, 16), to_signed(16#3CDD#, 16), to_signed(16#3CD5#, 16), to_signed(16#3CCD#, 16),
     to_signed(16#3CC5#, 16), to_signed(16#3CBD#, 16), to_signed(16#3CB5#, 16), to_signed(16#3CAD#, 16),
     to_signed(16#3CA5#, 16), to_signed(16#3C9D#, 16), to_signed(16#3C95#, 16), to_signed(16#3C8D#, 16),
     to_signed(16#3C85#, 16), to_signed(16#3C7D#, 16), to_signed(16#3C74#, 16), to_signed(16#3C6C#, 16),
     to_signed(16#3C64#, 16), to_signed(16#3C5B#, 16), to_signed(16#3C53#, 16), to_signed(16#3C4B#, 16),
     to_signed(16#3C42#, 16), to_signed(16#3C3A#, 16), to_signed(16#3C31#, 16), to_signed(16#3C29#, 16),
     to_signed(16#3C20#, 16), to_signed(16#3C17#, 16), to_signed(16#3C0F#, 16), to_signed(16#3C06#, 16),
     to_signed(16#3BFD#, 16), to_signed(16#3BF5#, 16), to_signed(16#3BEC#, 16), to_signed(16#3BE3#, 16),
     to_signed(16#3BDA#, 16), to_signed(16#3BD1#, 16), to_signed(16#3BC8#, 16), to_signed(16#3BBF#, 16),
     to_signed(16#3BB6#, 16), to_signed(16#3BAD#, 16), to_signed(16#3BA4#, 16), to_signed(16#3B9B#, 16),
     to_signed(16#3B92#, 16), to_signed(16#3B88#, 16), to_signed(16#3B7F#, 16), to_signed(16#3B76#, 16),
     to_signed(16#3B6D#, 16), to_signed(16#3B63#, 16), to_signed(16#3B5A#, 16), to_signed(16#3B50#, 16),
     to_signed(16#3B47#, 16), to_signed(16#3B3E#, 16), to_signed(16#3B34#, 16), to_signed(16#3B2A#, 16),
     to_signed(16#3B21#, 16), to_signed(16#3B17#, 16), to_signed(16#3B0E#, 16), to_signed(16#3B04#, 16),
     to_signed(16#3AFA#, 16), to_signed(16#3AF0#, 16), to_signed(16#3AE6#, 16), to_signed(16#3ADD#, 16),
     to_signed(16#3AD3#, 16), to_signed(16#3AC9#, 16), to_signed(16#3ABF#, 16), to_signed(16#3AB5#, 16),
     to_signed(16#3AAB#, 16), to_signed(16#3AA1#, 16), to_signed(16#3A97#, 16), to_signed(16#3A8D#, 16),
     to_signed(16#3A82#, 16), to_signed(16#3A78#, 16), to_signed(16#3A6E#, 16), to_signed(16#3A64#, 16),
     to_signed(16#3A59#, 16), to_signed(16#3A4F#, 16), to_signed(16#3A45#, 16), to_signed(16#3A3A#, 16),
     to_signed(16#3A30#, 16), to_signed(16#3A25#, 16), to_signed(16#3A1B#, 16), to_signed(16#3A10#, 16),
     to_signed(16#3A06#, 16), to_signed(16#39FB#, 16), to_signed(16#39F0#, 16), to_signed(16#39E6#, 16),
     to_signed(16#39DB#, 16), to_signed(16#39D0#, 16), to_signed(16#39C5#, 16), to_signed(16#39BB#, 16),
     to_signed(16#39B0#, 16), to_signed(16#39A5#, 16), to_signed(16#399A#, 16), to_signed(16#398F#, 16),
     to_signed(16#3984#, 16), to_signed(16#3979#, 16), to_signed(16#396E#, 16), to_signed(16#3963#, 16),
     to_signed(16#3958#, 16), to_signed(16#394C#, 16), to_signed(16#3941#, 16), to_signed(16#3936#, 16),
     to_signed(16#392B#, 16), to_signed(16#391F#, 16), to_signed(16#3914#, 16), to_signed(16#3909#, 16),
     to_signed(16#38FD#, 16), to_signed(16#38F2#, 16), to_signed(16#38E6#, 16), to_signed(16#38DB#, 16),
     to_signed(16#38CF#, 16), to_signed(16#38C3#, 16), to_signed(16#38B8#, 16), to_signed(16#38AC#, 16),
     to_signed(16#38A1#, 16), to_signed(16#3895#, 16), to_signed(16#3889#, 16), to_signed(16#387D#, 16),
     to_signed(16#3871#, 16), to_signed(16#3866#, 16), to_signed(16#385A#, 16), to_signed(16#384E#, 16),
     to_signed(16#3842#, 16), to_signed(16#3836#, 16), to_signed(16#382A#, 16), to_signed(16#381E#, 16),
     to_signed(16#3812#, 16), to_signed(16#3805#, 16), to_signed(16#37F9#, 16), to_signed(16#37ED#, 16),
     to_signed(16#37E1#, 16), to_signed(16#37D5#, 16), to_signed(16#37C8#, 16), to_signed(16#37BC#, 16),
     to_signed(16#37B0#, 16), to_signed(16#37A3#, 16), to_signed(16#3797#, 16), to_signed(16#378A#, 16),
     to_signed(16#377E#, 16), to_signed(16#3771#, 16), to_signed(16#3765#, 16), to_signed(16#3758#, 16),
     to_signed(16#374B#, 16), to_signed(16#373F#, 16), to_signed(16#3732#, 16), to_signed(16#3725#, 16),
     to_signed(16#3718#, 16), to_signed(16#370C#, 16), to_signed(16#36FF#, 16), to_signed(16#36F2#, 16),
     to_signed(16#36E5#, 16), to_signed(16#36D8#, 16), to_signed(16#36CB#, 16), to_signed(16#36BE#, 16),
     to_signed(16#36B1#, 16), to_signed(16#36A4#, 16), to_signed(16#3697#, 16), to_signed(16#368A#, 16),
     to_signed(16#367D#, 16), to_signed(16#366F#, 16), to_signed(16#3662#, 16), to_signed(16#3655#, 16),
     to_signed(16#3648#, 16), to_signed(16#363A#, 16), to_signed(16#362D#, 16), to_signed(16#3620#, 16),
     to_signed(16#3612#, 16), to_signed(16#3605#, 16), to_signed(16#35F7#, 16), to_signed(16#35EA#, 16),
     to_signed(16#35DC#, 16), to_signed(16#35CE#, 16), to_signed(16#35C1#, 16), to_signed(16#35B3#, 16),
     to_signed(16#35A5#, 16), to_signed(16#3598#, 16), to_signed(16#358A#, 16), to_signed(16#357C#, 16),
     to_signed(16#356E#, 16), to_signed(16#3561#, 16), to_signed(16#3553#, 16), to_signed(16#3545#, 16),
     to_signed(16#3537#, 16), to_signed(16#3529#, 16), to_signed(16#351B#, 16), to_signed(16#350D#, 16),
     to_signed(16#34FF#, 16), to_signed(16#34F1#, 16), to_signed(16#34E2#, 16), to_signed(16#34D4#, 16),
     to_signed(16#34C6#, 16), to_signed(16#34B8#, 16), to_signed(16#34AA#, 16), to_signed(16#349B#, 16),
     to_signed(16#348D#, 16), to_signed(16#347F#, 16), to_signed(16#3470#, 16), to_signed(16#3462#, 16),
     to_signed(16#3453#, 16), to_signed(16#3445#, 16), to_signed(16#3436#, 16), to_signed(16#3428#, 16),
     to_signed(16#3419#, 16), to_signed(16#340B#, 16), to_signed(16#33FC#, 16), to_signed(16#33ED#, 16),
     to_signed(16#33DF#, 16), to_signed(16#33D0#, 16), to_signed(16#33C1#, 16), to_signed(16#33B2#, 16),
     to_signed(16#33A3#, 16), to_signed(16#3395#, 16), to_signed(16#3386#, 16), to_signed(16#3377#, 16),
     to_signed(16#3368#, 16), to_signed(16#3359#, 16), to_signed(16#334A#, 16), to_signed(16#333B#, 16),
     to_signed(16#332C#, 16), to_signed(16#331D#, 16), to_signed(16#330D#, 16), to_signed(16#32FE#, 16),
     to_signed(16#32EF#, 16), to_signed(16#32E0#, 16), to_signed(16#32D0#, 16), to_signed(16#32C1#, 16),
     to_signed(16#32B2#, 16), to_signed(16#32A3#, 16), to_signed(16#3293#, 16), to_signed(16#3284#, 16),
     to_signed(16#3274#, 16), to_signed(16#3265#, 16), to_signed(16#3255#, 16), to_signed(16#3246#, 16),
     to_signed(16#3236#, 16), to_signed(16#3227#, 16), to_signed(16#3217#, 16), to_signed(16#3207#, 16),
     to_signed(16#31F8#, 16), to_signed(16#31E8#, 16), to_signed(16#31D8#, 16), to_signed(16#31C8#, 16),
     to_signed(16#31B9#, 16), to_signed(16#31A9#, 16), to_signed(16#3199#, 16), to_signed(16#3189#, 16),
     to_signed(16#3179#, 16), to_signed(16#3169#, 16), to_signed(16#3159#, 16), to_signed(16#3149#, 16),
     to_signed(16#3139#, 16), to_signed(16#3129#, 16), to_signed(16#3119#, 16), to_signed(16#3109#, 16),
     to_signed(16#30F9#, 16), to_signed(16#30E8#, 16), to_signed(16#30D8#, 16), to_signed(16#30C8#, 16),
     to_signed(16#30B8#, 16), to_signed(16#30A7#, 16), to_signed(16#3097#, 16), to_signed(16#3087#, 16),
     to_signed(16#3076#, 16), to_signed(16#3066#, 16), to_signed(16#3055#, 16), to_signed(16#3045#, 16),
     to_signed(16#3034#, 16), to_signed(16#3024#, 16), to_signed(16#3013#, 16), to_signed(16#3002#, 16),
     to_signed(16#2FF2#, 16), to_signed(16#2FE1#, 16), to_signed(16#2FD0#, 16), to_signed(16#2FC0#, 16),
     to_signed(16#2FAF#, 16), to_signed(16#2F9E#, 16), to_signed(16#2F8D#, 16), to_signed(16#2F7D#, 16),
     to_signed(16#2F6C#, 16), to_signed(16#2F5B#, 16), to_signed(16#2F4A#, 16), to_signed(16#2F39#, 16),
     to_signed(16#2F28#, 16), to_signed(16#2F17#, 16), to_signed(16#2F06#, 16), to_signed(16#2EF5#, 16),
     to_signed(16#2EE4#, 16), to_signed(16#2ED3#, 16), to_signed(16#2EC2#, 16), to_signed(16#2EB0#, 16),
     to_signed(16#2E9F#, 16), to_signed(16#2E8E#, 16), to_signed(16#2E7D#, 16), to_signed(16#2E6B#, 16),
     to_signed(16#2E5A#, 16), to_signed(16#2E49#, 16), to_signed(16#2E37#, 16), to_signed(16#2E26#, 16),
     to_signed(16#2E15#, 16), to_signed(16#2E03#, 16), to_signed(16#2DF2#, 16), to_signed(16#2DE0#, 16),
     to_signed(16#2DCF#, 16), to_signed(16#2DBD#, 16), to_signed(16#2DAB#, 16), to_signed(16#2D9A#, 16),
     to_signed(16#2D88#, 16), to_signed(16#2D76#, 16), to_signed(16#2D65#, 16), to_signed(16#2D53#, 16));  -- sfix16 [512]
  CONSTANT Twiddle_im_table_data          : vector_of_signed16(0 TO 511) := 
    (to_signed(16#0000#, 16), to_signed(-16#0019#, 16), to_signed(-16#0032#, 16), to_signed(-16#004B#, 16),
     to_signed(-16#0065#, 16), to_signed(-16#007E#, 16), to_signed(-16#0097#, 16), to_signed(-16#00B0#, 16),
     to_signed(-16#00C9#, 16), to_signed(-16#00E2#, 16), to_signed(-16#00FB#, 16), to_signed(-16#0114#, 16),
     to_signed(-16#012E#, 16), to_signed(-16#0147#, 16), to_signed(-16#0160#, 16), to_signed(-16#0179#, 16),
     to_signed(-16#0192#, 16), to_signed(-16#01AB#, 16), to_signed(-16#01C4#, 16), to_signed(-16#01DD#, 16),
     to_signed(-16#01F7#, 16), to_signed(-16#0210#, 16), to_signed(-16#0229#, 16), to_signed(-16#0242#, 16),
     to_signed(-16#025B#, 16), to_signed(-16#0274#, 16), to_signed(-16#028D#, 16), to_signed(-16#02A6#, 16),
     to_signed(-16#02C0#, 16), to_signed(-16#02D9#, 16), to_signed(-16#02F2#, 16), to_signed(-16#030B#, 16),
     to_signed(-16#0324#, 16), to_signed(-16#033D#, 16), to_signed(-16#0356#, 16), to_signed(-16#036F#, 16),
     to_signed(-16#0388#, 16), to_signed(-16#03A1#, 16), to_signed(-16#03BB#, 16), to_signed(-16#03D4#, 16),
     to_signed(-16#03ED#, 16), to_signed(-16#0406#, 16), to_signed(-16#041F#, 16), to_signed(-16#0438#, 16),
     to_signed(-16#0451#, 16), to_signed(-16#046A#, 16), to_signed(-16#0483#, 16), to_signed(-16#049C#, 16),
     to_signed(-16#04B5#, 16), to_signed(-16#04CE#, 16), to_signed(-16#04E7#, 16), to_signed(-16#0500#, 16),
     to_signed(-16#051A#, 16), to_signed(-16#0533#, 16), to_signed(-16#054C#, 16), to_signed(-16#0565#, 16),
     to_signed(-16#057E#, 16), to_signed(-16#0597#, 16), to_signed(-16#05B0#, 16), to_signed(-16#05C9#, 16),
     to_signed(-16#05E2#, 16), to_signed(-16#05FB#, 16), to_signed(-16#0614#, 16), to_signed(-16#062D#, 16),
     to_signed(-16#0646#, 16), to_signed(-16#065F#, 16), to_signed(-16#0678#, 16), to_signed(-16#0691#, 16),
     to_signed(-16#06AA#, 16), to_signed(-16#06C3#, 16), to_signed(-16#06DC#, 16), to_signed(-16#06F5#, 16),
     to_signed(-16#070E#, 16), to_signed(-16#0727#, 16), to_signed(-16#0740#, 16), to_signed(-16#0759#, 16),
     to_signed(-16#0772#, 16), to_signed(-16#078B#, 16), to_signed(-16#07A4#, 16), to_signed(-16#07BD#, 16),
     to_signed(-16#07D6#, 16), to_signed(-16#07EF#, 16), to_signed(-16#0807#, 16), to_signed(-16#0820#, 16),
     to_signed(-16#0839#, 16), to_signed(-16#0852#, 16), to_signed(-16#086B#, 16), to_signed(-16#0884#, 16),
     to_signed(-16#089D#, 16), to_signed(-16#08B6#, 16), to_signed(-16#08CF#, 16), to_signed(-16#08E8#, 16),
     to_signed(-16#0901#, 16), to_signed(-16#0919#, 16), to_signed(-16#0932#, 16), to_signed(-16#094B#, 16),
     to_signed(-16#0964#, 16), to_signed(-16#097D#, 16), to_signed(-16#0996#, 16), to_signed(-16#09AF#, 16),
     to_signed(-16#09C7#, 16), to_signed(-16#09E0#, 16), to_signed(-16#09F9#, 16), to_signed(-16#0A12#, 16),
     to_signed(-16#0A2B#, 16), to_signed(-16#0A44#, 16), to_signed(-16#0A5C#, 16), to_signed(-16#0A75#, 16),
     to_signed(-16#0A8E#, 16), to_signed(-16#0AA7#, 16), to_signed(-16#0AC0#, 16), to_signed(-16#0AD8#, 16),
     to_signed(-16#0AF1#, 16), to_signed(-16#0B0A#, 16), to_signed(-16#0B23#, 16), to_signed(-16#0B3B#, 16),
     to_signed(-16#0B54#, 16), to_signed(-16#0B6D#, 16), to_signed(-16#0B85#, 16), to_signed(-16#0B9E#, 16),
     to_signed(-16#0BB7#, 16), to_signed(-16#0BD0#, 16), to_signed(-16#0BE8#, 16), to_signed(-16#0C01#, 16),
     to_signed(-16#0C1A#, 16), to_signed(-16#0C32#, 16), to_signed(-16#0C4B#, 16), to_signed(-16#0C64#, 16),
     to_signed(-16#0C7C#, 16), to_signed(-16#0C95#, 16), to_signed(-16#0CAE#, 16), to_signed(-16#0CC6#, 16),
     to_signed(-16#0CDF#, 16), to_signed(-16#0CF8#, 16), to_signed(-16#0D10#, 16), to_signed(-16#0D29#, 16),
     to_signed(-16#0D41#, 16), to_signed(-16#0D5A#, 16), to_signed(-16#0D72#, 16), to_signed(-16#0D8B#, 16),
     to_signed(-16#0DA4#, 16), to_signed(-16#0DBC#, 16), to_signed(-16#0DD5#, 16), to_signed(-16#0DED#, 16),
     to_signed(-16#0E06#, 16), to_signed(-16#0E1E#, 16), to_signed(-16#0E37#, 16), to_signed(-16#0E4F#, 16),
     to_signed(-16#0E68#, 16), to_signed(-16#0E80#, 16), to_signed(-16#0E99#, 16), to_signed(-16#0EB1#, 16),
     to_signed(-16#0ECA#, 16), to_signed(-16#0EE2#, 16), to_signed(-16#0EFB#, 16), to_signed(-16#0F13#, 16),
     to_signed(-16#0F2B#, 16), to_signed(-16#0F44#, 16), to_signed(-16#0F5C#, 16), to_signed(-16#0F75#, 16),
     to_signed(-16#0F8D#, 16), to_signed(-16#0FA5#, 16), to_signed(-16#0FBE#, 16), to_signed(-16#0FD6#, 16),
     to_signed(-16#0FEE#, 16), to_signed(-16#1007#, 16), to_signed(-16#101F#, 16), to_signed(-16#1037#, 16),
     to_signed(-16#1050#, 16), to_signed(-16#1068#, 16), to_signed(-16#1080#, 16), to_signed(-16#1099#, 16),
     to_signed(-16#10B1#, 16), to_signed(-16#10C9#, 16), to_signed(-16#10E1#, 16), to_signed(-16#10FA#, 16),
     to_signed(-16#1112#, 16), to_signed(-16#112A#, 16), to_signed(-16#1142#, 16), to_signed(-16#115A#, 16),
     to_signed(-16#1173#, 16), to_signed(-16#118B#, 16), to_signed(-16#11A3#, 16), to_signed(-16#11BB#, 16),
     to_signed(-16#11D3#, 16), to_signed(-16#11EB#, 16), to_signed(-16#1204#, 16), to_signed(-16#121C#, 16),
     to_signed(-16#1234#, 16), to_signed(-16#124C#, 16), to_signed(-16#1264#, 16), to_signed(-16#127C#, 16),
     to_signed(-16#1294#, 16), to_signed(-16#12AC#, 16), to_signed(-16#12C4#, 16), to_signed(-16#12DC#, 16),
     to_signed(-16#12F4#, 16), to_signed(-16#130C#, 16), to_signed(-16#1324#, 16), to_signed(-16#133C#, 16),
     to_signed(-16#1354#, 16), to_signed(-16#136C#, 16), to_signed(-16#1384#, 16), to_signed(-16#139C#, 16),
     to_signed(-16#13B4#, 16), to_signed(-16#13CC#, 16), to_signed(-16#13E4#, 16), to_signed(-16#13FB#, 16),
     to_signed(-16#1413#, 16), to_signed(-16#142B#, 16), to_signed(-16#1443#, 16), to_signed(-16#145B#, 16),
     to_signed(-16#1473#, 16), to_signed(-16#148B#, 16), to_signed(-16#14A2#, 16), to_signed(-16#14BA#, 16),
     to_signed(-16#14D2#, 16), to_signed(-16#14EA#, 16), to_signed(-16#1501#, 16), to_signed(-16#1519#, 16),
     to_signed(-16#1531#, 16), to_signed(-16#1549#, 16), to_signed(-16#1560#, 16), to_signed(-16#1578#, 16),
     to_signed(-16#1590#, 16), to_signed(-16#15A7#, 16), to_signed(-16#15BF#, 16), to_signed(-16#15D7#, 16),
     to_signed(-16#15EE#, 16), to_signed(-16#1606#, 16), to_signed(-16#161D#, 16), to_signed(-16#1635#, 16),
     to_signed(-16#164C#, 16), to_signed(-16#1664#, 16), to_signed(-16#167C#, 16), to_signed(-16#1693#, 16),
     to_signed(-16#16AB#, 16), to_signed(-16#16C2#, 16), to_signed(-16#16DA#, 16), to_signed(-16#16F1#, 16),
     to_signed(-16#1709#, 16), to_signed(-16#1720#, 16), to_signed(-16#1737#, 16), to_signed(-16#174F#, 16),
     to_signed(-16#1766#, 16), to_signed(-16#177E#, 16), to_signed(-16#1795#, 16), to_signed(-16#17AC#, 16),
     to_signed(-16#17C4#, 16), to_signed(-16#17DB#, 16), to_signed(-16#17F2#, 16), to_signed(-16#180A#, 16),
     to_signed(-16#1821#, 16), to_signed(-16#1838#, 16), to_signed(-16#184F#, 16), to_signed(-16#1867#, 16),
     to_signed(-16#187E#, 16), to_signed(-16#1895#, 16), to_signed(-16#18AC#, 16), to_signed(-16#18C3#, 16),
     to_signed(-16#18DB#, 16), to_signed(-16#18F2#, 16), to_signed(-16#1909#, 16), to_signed(-16#1920#, 16),
     to_signed(-16#1937#, 16), to_signed(-16#194E#, 16), to_signed(-16#1965#, 16), to_signed(-16#197C#, 16),
     to_signed(-16#1993#, 16), to_signed(-16#19AA#, 16), to_signed(-16#19C1#, 16), to_signed(-16#19D8#, 16),
     to_signed(-16#19EF#, 16), to_signed(-16#1A06#, 16), to_signed(-16#1A1D#, 16), to_signed(-16#1A34#, 16),
     to_signed(-16#1A4B#, 16), to_signed(-16#1A62#, 16), to_signed(-16#1A79#, 16), to_signed(-16#1A90#, 16),
     to_signed(-16#1AA7#, 16), to_signed(-16#1ABE#, 16), to_signed(-16#1AD4#, 16), to_signed(-16#1AEB#, 16),
     to_signed(-16#1B02#, 16), to_signed(-16#1B19#, 16), to_signed(-16#1B30#, 16), to_signed(-16#1B46#, 16),
     to_signed(-16#1B5D#, 16), to_signed(-16#1B74#, 16), to_signed(-16#1B8A#, 16), to_signed(-16#1BA1#, 16),
     to_signed(-16#1BB8#, 16), to_signed(-16#1BCE#, 16), to_signed(-16#1BE5#, 16), to_signed(-16#1BFC#, 16),
     to_signed(-16#1C12#, 16), to_signed(-16#1C29#, 16), to_signed(-16#1C3F#, 16), to_signed(-16#1C56#, 16),
     to_signed(-16#1C6C#, 16), to_signed(-16#1C83#, 16), to_signed(-16#1C99#, 16), to_signed(-16#1CB0#, 16),
     to_signed(-16#1CC6#, 16), to_signed(-16#1CDD#, 16), to_signed(-16#1CF3#, 16), to_signed(-16#1D0A#, 16),
     to_signed(-16#1D20#, 16), to_signed(-16#1D36#, 16), to_signed(-16#1D4D#, 16), to_signed(-16#1D63#, 16),
     to_signed(-16#1D79#, 16), to_signed(-16#1D90#, 16), to_signed(-16#1DA6#, 16), to_signed(-16#1DBC#, 16),
     to_signed(-16#1DD3#, 16), to_signed(-16#1DE9#, 16), to_signed(-16#1DFF#, 16), to_signed(-16#1E15#, 16),
     to_signed(-16#1E2B#, 16), to_signed(-16#1E42#, 16), to_signed(-16#1E58#, 16), to_signed(-16#1E6E#, 16),
     to_signed(-16#1E84#, 16), to_signed(-16#1E9A#, 16), to_signed(-16#1EB0#, 16), to_signed(-16#1EC6#, 16),
     to_signed(-16#1EDC#, 16), to_signed(-16#1EF2#, 16), to_signed(-16#1F08#, 16), to_signed(-16#1F1E#, 16),
     to_signed(-16#1F34#, 16), to_signed(-16#1F4A#, 16), to_signed(-16#1F60#, 16), to_signed(-16#1F76#, 16),
     to_signed(-16#1F8C#, 16), to_signed(-16#1FA2#, 16), to_signed(-16#1FB7#, 16), to_signed(-16#1FCD#, 16),
     to_signed(-16#1FE3#, 16), to_signed(-16#1FF9#, 16), to_signed(-16#200F#, 16), to_signed(-16#2024#, 16),
     to_signed(-16#203A#, 16), to_signed(-16#2050#, 16), to_signed(-16#2065#, 16), to_signed(-16#207B#, 16),
     to_signed(-16#2091#, 16), to_signed(-16#20A6#, 16), to_signed(-16#20BC#, 16), to_signed(-16#20D1#, 16),
     to_signed(-16#20E7#, 16), to_signed(-16#20FD#, 16), to_signed(-16#2112#, 16), to_signed(-16#2128#, 16),
     to_signed(-16#213D#, 16), to_signed(-16#2153#, 16), to_signed(-16#2168#, 16), to_signed(-16#217D#, 16),
     to_signed(-16#2193#, 16), to_signed(-16#21A8#, 16), to_signed(-16#21BE#, 16), to_signed(-16#21D3#, 16),
     to_signed(-16#21E8#, 16), to_signed(-16#21FE#, 16), to_signed(-16#2213#, 16), to_signed(-16#2228#, 16),
     to_signed(-16#223D#, 16), to_signed(-16#2253#, 16), to_signed(-16#2268#, 16), to_signed(-16#227D#, 16),
     to_signed(-16#2292#, 16), to_signed(-16#22A7#, 16), to_signed(-16#22BC#, 16), to_signed(-16#22D2#, 16),
     to_signed(-16#22E7#, 16), to_signed(-16#22FC#, 16), to_signed(-16#2311#, 16), to_signed(-16#2326#, 16),
     to_signed(-16#233B#, 16), to_signed(-16#2350#, 16), to_signed(-16#2365#, 16), to_signed(-16#237A#, 16),
     to_signed(-16#238E#, 16), to_signed(-16#23A3#, 16), to_signed(-16#23B8#, 16), to_signed(-16#23CD#, 16),
     to_signed(-16#23E2#, 16), to_signed(-16#23F7#, 16), to_signed(-16#240B#, 16), to_signed(-16#2420#, 16),
     to_signed(-16#2435#, 16), to_signed(-16#244A#, 16), to_signed(-16#245E#, 16), to_signed(-16#2473#, 16),
     to_signed(-16#2488#, 16), to_signed(-16#249C#, 16), to_signed(-16#24B1#, 16), to_signed(-16#24C5#, 16),
     to_signed(-16#24DA#, 16), to_signed(-16#24EF#, 16), to_signed(-16#2503#, 16), to_signed(-16#2518#, 16),
     to_signed(-16#252C#, 16), to_signed(-16#2541#, 16), to_signed(-16#2555#, 16), to_signed(-16#2569#, 16),
     to_signed(-16#257E#, 16), to_signed(-16#2592#, 16), to_signed(-16#25A6#, 16), to_signed(-16#25BB#, 16),
     to_signed(-16#25CF#, 16), to_signed(-16#25E3#, 16), to_signed(-16#25F8#, 16), to_signed(-16#260C#, 16),
     to_signed(-16#2620#, 16), to_signed(-16#2634#, 16), to_signed(-16#2648#, 16), to_signed(-16#265C#, 16),
     to_signed(-16#2671#, 16), to_signed(-16#2685#, 16), to_signed(-16#2699#, 16), to_signed(-16#26AD#, 16),
     to_signed(-16#26C1#, 16), to_signed(-16#26D5#, 16), to_signed(-16#26E9#, 16), to_signed(-16#26FD#, 16),
     to_signed(-16#2711#, 16), to_signed(-16#2724#, 16), to_signed(-16#2738#, 16), to_signed(-16#274C#, 16),
     to_signed(-16#2760#, 16), to_signed(-16#2774#, 16), to_signed(-16#2788#, 16), to_signed(-16#279B#, 16),
     to_signed(-16#27AF#, 16), to_signed(-16#27C3#, 16), to_signed(-16#27D6#, 16), to_signed(-16#27EA#, 16),
     to_signed(-16#27FE#, 16), to_signed(-16#2811#, 16), to_signed(-16#2825#, 16), to_signed(-16#2838#, 16),
     to_signed(-16#284C#, 16), to_signed(-16#2860#, 16), to_signed(-16#2873#, 16), to_signed(-16#2886#, 16),
     to_signed(-16#289A#, 16), to_signed(-16#28AD#, 16), to_signed(-16#28C1#, 16), to_signed(-16#28D4#, 16),
     to_signed(-16#28E7#, 16), to_signed(-16#28FB#, 16), to_signed(-16#290E#, 16), to_signed(-16#2921#, 16),
     to_signed(-16#2935#, 16), to_signed(-16#2948#, 16), to_signed(-16#295B#, 16), to_signed(-16#296E#, 16),
     to_signed(-16#2981#, 16), to_signed(-16#2994#, 16), to_signed(-16#29A7#, 16), to_signed(-16#29BB#, 16),
     to_signed(-16#29CE#, 16), to_signed(-16#29E1#, 16), to_signed(-16#29F4#, 16), to_signed(-16#2A07#, 16),
     to_signed(-16#2A1A#, 16), to_signed(-16#2A2C#, 16), to_signed(-16#2A3F#, 16), to_signed(-16#2A52#, 16),
     to_signed(-16#2A65#, 16), to_signed(-16#2A78#, 16), to_signed(-16#2A8B#, 16), to_signed(-16#2A9D#, 16),
     to_signed(-16#2AB0#, 16), to_signed(-16#2AC3#, 16), to_signed(-16#2AD6#, 16), to_signed(-16#2AE8#, 16),
     to_signed(-16#2AFB#, 16), to_signed(-16#2B0D#, 16), to_signed(-16#2B20#, 16), to_signed(-16#2B33#, 16),
     to_signed(-16#2B45#, 16), to_signed(-16#2B58#, 16), to_signed(-16#2B6A#, 16), to_signed(-16#2B7D#, 16),
     to_signed(-16#2B8F#, 16), to_signed(-16#2BA1#, 16), to_signed(-16#2BB4#, 16), to_signed(-16#2BC6#, 16),
     to_signed(-16#2BD8#, 16), to_signed(-16#2BEB#, 16), to_signed(-16#2BFD#, 16), to_signed(-16#2C0F#, 16),
     to_signed(-16#2C21#, 16), to_signed(-16#2C34#, 16), to_signed(-16#2C46#, 16), to_signed(-16#2C58#, 16),
     to_signed(-16#2C6A#, 16), to_signed(-16#2C7C#, 16), to_signed(-16#2C8E#, 16), to_signed(-16#2CA0#, 16),
     to_signed(-16#2CB2#, 16), to_signed(-16#2CC4#, 16), to_signed(-16#2CD6#, 16), to_signed(-16#2CE8#, 16),
     to_signed(-16#2CFA#, 16), to_signed(-16#2D0C#, 16), to_signed(-16#2D1E#, 16), to_signed(-16#2D2F#, 16));  -- sfix16 [512]

  -- Signals
  SIGNAL Radix22TwdlMapping_cnt           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Radix22TwdlMapping_phase         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw  : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Radix22TwdlMapping_twdlAddrMap   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdl45Reg     : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1      : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2      : std_logic;
  SIGNAL Radix22TwdlMapping_cnt_next      : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Radix22TwdlMapping_phase_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1_next : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw_next : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Radix22TwdlMapping_twdlAddrMap_next : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdl45Reg_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2_next : std_logic;
  SIGNAL twdlAddr                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL twdlAddrVld                      : std_logic;
  SIGNAL twdlOctant                       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45                           : std_logic;
  SIGNAL twiddleS_re                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twiddleReg_re                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twiddleS_im                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twiddleReg_im                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdlOctantReg                    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45Reg                        : std_logic;

BEGIN
  -- Radix22TwdlMapping
  Radix22TwdlMapping_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22TwdlMapping_octantReg1 <= to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdlAddr_raw <= to_unsigned(16#000#, 12);
        Radix22TwdlMapping_twdlAddrMap <= to_unsigned(16#000#, 9);
        Radix22TwdlMapping_twdl45Reg <= '0';
        Radix22TwdlMapping_dvldReg1 <= '0';
        Radix22TwdlMapping_dvldReg2 <= '0';
        Radix22TwdlMapping_cnt <= to_unsigned(16#000#, 10);
        Radix22TwdlMapping_phase <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        Radix22TwdlMapping_cnt <= Radix22TwdlMapping_cnt_next;
        Radix22TwdlMapping_phase <= Radix22TwdlMapping_phase_next;
        Radix22TwdlMapping_octantReg1 <= Radix22TwdlMapping_octantReg1_next;
        Radix22TwdlMapping_twdlAddr_raw <= Radix22TwdlMapping_twdlAddr_raw_next;
        Radix22TwdlMapping_twdlAddrMap <= Radix22TwdlMapping_twdlAddrMap_next;
        Radix22TwdlMapping_twdl45Reg <= Radix22TwdlMapping_twdl45Reg_next;
        Radix22TwdlMapping_dvldReg1 <= Radix22TwdlMapping_dvldReg1_next;
        Radix22TwdlMapping_dvldReg2 <= Radix22TwdlMapping_dvldReg2_next;
      END IF;
    END IF;
  END PROCESS Radix22TwdlMapping_process;

  Radix22TwdlMapping_output : PROCESS (Radix22TwdlMapping_cnt, Radix22TwdlMapping_dvldReg1,
       Radix22TwdlMapping_dvldReg2, Radix22TwdlMapping_octantReg1,
       Radix22TwdlMapping_phase, Radix22TwdlMapping_twdl45Reg,
       Radix22TwdlMapping_twdlAddrMap, Radix22TwdlMapping_twdlAddr_raw,
       dout_6_1_vld)
    VARIABLE octant : unsigned(2 DOWNTO 0);
    VARIABLE cnt_cast : unsigned(11 DOWNTO 0);
    VARIABLE sub_temp : signed(25 DOWNTO 0);
    VARIABLE sub_temp_0 : signed(13 DOWNTO 0);
    VARIABLE sub_temp_1 : signed(13 DOWNTO 0);
    VARIABLE sub_temp_2 : signed(25 DOWNTO 0);
    VARIABLE sub_temp_3 : signed(25 DOWNTO 0);
  BEGIN
    sub_temp := to_signed(16#0000000#, 26);
    sub_temp_0 := to_signed(16#0000#, 14);
    sub_temp_1 := to_signed(16#0000#, 14);
    sub_temp_2 := to_signed(16#0000000#, 26);
    sub_temp_3 := to_signed(16#0000000#, 26);
    cnt_cast := to_unsigned(16#000#, 12);
    Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt;
    Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase;
    Radix22TwdlMapping_dvldReg2_next <= Radix22TwdlMapping_dvldReg1;
    Radix22TwdlMapping_dvldReg1_next <= dout_6_1_vld;
    CASE Radix22TwdlMapping_twdlAddr_raw IS
      WHEN "001000000000" =>
        octant := to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "010000000000" =>
        octant := to_unsigned(16#1#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "011000000000" =>
        octant := to_unsigned(16#2#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "100000000000" =>
        octant := to_unsigned(16#3#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "101000000000" =>
        octant := to_unsigned(16#4#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN OTHERS => 
        octant := Radix22TwdlMapping_twdlAddr_raw(11 DOWNTO 9);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
    END CASE;
    Radix22TwdlMapping_octantReg1_next <= octant;
    CASE octant IS
      WHEN "000" =>
        Radix22TwdlMapping_twdlAddrMap_next <= Radix22TwdlMapping_twdlAddr_raw(8 DOWNTO 0);
      WHEN "001" =>
        sub_temp_0 := to_signed(16#0400#, 14) - signed(resize(Radix22TwdlMapping_twdlAddr_raw, 14));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_0(8 DOWNTO 0));
      WHEN "010" =>
        sub_temp_1 := signed(resize(Radix22TwdlMapping_twdlAddr_raw, 14)) - to_signed(16#0400#, 14);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_1(8 DOWNTO 0));
      WHEN "011" =>
        sub_temp_2 := to_signed(16#0100000#, 26) - signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_2(17 DOWNTO 9));
      WHEN "100" =>
        sub_temp_3 := signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26)) - to_signed(16#0100000#, 26);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_3(17 DOWNTO 9));
      WHEN OTHERS => 
        sub_temp := to_signed(16#0180000#, 26) - signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp(17 DOWNTO 9));
    END CASE;
    IF Radix22TwdlMapping_phase = to_unsigned(16#0#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= to_unsigned(16#000#, 12);
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#1#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(Radix22TwdlMapping_cnt, 12) sll 1;
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#2#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(Radix22TwdlMapping_cnt, 12);
    ELSE 
      cnt_cast := resize(Radix22TwdlMapping_cnt, 12);
      Radix22TwdlMapping_twdlAddr_raw_next <= (cnt_cast sll 1) + cnt_cast;
    END IF;
    IF dout_6_1_vld = '1' AND (Radix22TwdlMapping_cnt > to_unsigned(16#3EF#, 10)) THEN 
      Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase + to_unsigned(16#1#, 2);
    END IF;
    IF dout_6_1_vld = '1' THEN 
      Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt + to_unsigned(16#010#, 10);
    END IF;
    twdlAddr <= Radix22TwdlMapping_twdlAddrMap;
    twdlAddrVld <= Radix22TwdlMapping_dvldReg2;
    twdlOctant <= Radix22TwdlMapping_octantReg1;
    twdl45 <= Radix22TwdlMapping_twdl45Reg;
  END PROCESS Radix22TwdlMapping_output;


  -- Twiddle ROM1
  twiddleS_re <= Twiddle_re_table_data(to_integer(twdlAddr));

  TWIDDLEROM_RE_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twiddleReg_re <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twiddleReg_re <= twiddleS_re;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_RE_process;


  -- Twiddle ROM2
  twiddleS_im <= Twiddle_im_table_data(to_integer(twdlAddr));

  TWIDDLEROM_IM_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twiddleReg_im <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twiddleReg_im <= twiddleS_im;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_IM_process;


  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdlOctantReg <= to_unsigned(16#0#, 3);
      ELSIF enb = '1' THEN
        twdlOctantReg <= twdlOctant;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl45Reg <= '0';
      ELSIF enb = '1' THEN
        twdl45Reg <= twdl45;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  -- Radix22TwdlOctCorr
  Radix22TwdlOctCorr_output : PROCESS (twdl45Reg, twdlOctantReg, twiddleReg_im, twiddleReg_re)
    VARIABLE twdlIn_re : signed(15 DOWNTO 0);
    VARIABLE twdlIn_im : signed(15 DOWNTO 0);
    VARIABLE cast : signed(16 DOWNTO 0);
    VARIABLE cast_0 : signed(16 DOWNTO 0);
    VARIABLE cast_1 : signed(16 DOWNTO 0);
    VARIABLE cast_2 : signed(16 DOWNTO 0);
    VARIABLE cast_3 : signed(16 DOWNTO 0);
    VARIABLE cast_4 : signed(16 DOWNTO 0);
  BEGIN
    cast := to_signed(16#00000#, 17);
    cast_0 := to_signed(16#00000#, 17);
    cast_1 := to_signed(16#00000#, 17);
    cast_2 := to_signed(16#00000#, 17);
    cast_3 := to_signed(16#00000#, 17);
    cast_4 := to_signed(16#00000#, 17);
    twdlIn_re := twiddleReg_re;
    twdlIn_im := twiddleReg_im;
    IF twdl45Reg = '1' THEN 
      CASE twdlOctantReg IS
        WHEN "000" =>
          twdlIn_re := to_signed(16#2D41#, 16);
          twdlIn_im := to_signed(-16#2D41#, 16);
        WHEN "010" =>
          twdlIn_re := to_signed(-16#2D41#, 16);
          twdlIn_im := to_signed(-16#2D41#, 16);
        WHEN "100" =>
          twdlIn_re := to_signed(-16#2D41#, 16);
          twdlIn_im := to_signed(16#2D41#, 16);
        WHEN OTHERS => 
          twdlIn_re := to_signed(16#2D41#, 16);
          twdlIn_im := to_signed(-16#2D41#, 16);
      END CASE;
    ELSE 
      CASE twdlOctantReg IS
        WHEN "000" =>
          NULL;
        WHEN "001" =>
          cast :=  - (resize(twiddleReg_im, 17));
          twdlIn_re := cast(15 DOWNTO 0);
          cast_2 :=  - (resize(twiddleReg_re, 17));
          twdlIn_im := cast_2(15 DOWNTO 0);
        WHEN "010" =>
          twdlIn_re := twiddleReg_im;
          cast_3 :=  - (resize(twiddleReg_re, 17));
          twdlIn_im := cast_3(15 DOWNTO 0);
        WHEN "011" =>
          cast_0 :=  - (resize(twiddleReg_re, 17));
          twdlIn_re := cast_0(15 DOWNTO 0);
          twdlIn_im := twiddleReg_im;
        WHEN "100" =>
          cast_1 :=  - (resize(twiddleReg_re, 17));
          twdlIn_re := cast_1(15 DOWNTO 0);
          cast_4 :=  - (resize(twiddleReg_im, 17));
          twdlIn_im := cast_4(15 DOWNTO 0);
        WHEN OTHERS => 
          twdlIn_re := twiddleReg_im;
          twdlIn_im := twiddleReg_re;
      END CASE;
    END IF;
    twdl_7_1_re <= twdlIn_re;
    twdl_7_1_im <= twdlIn_im;
  END PROCESS Radix22TwdlOctCorr_output;


END rtl;


-- End of TWDLROM_7_1.vhd --

-- Start of TWDLROM_7_1_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\TWDLROM_7_1_block.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: TWDLROM_7_1_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/TWDLROM_7_1
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY TWDLROM_7_1_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_6_1_vld                      :   IN    std_logic;
        twdl_7_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16_En14
        twdl_7_1_im                       :   OUT   signed(15 DOWNTO 0)  -- sfix16_En14
        );
END TWDLROM_7_1_block;


ARCHITECTURE rtl OF TWDLROM_7_1_block IS

  -- Constants
  CONSTANT Twiddle_re_table_data          : vector_of_signed16(0 TO 511) := 
    (to_signed(16#4000#, 16), to_signed(16#4000#, 16), to_signed(16#4000#, 16), to_signed(16#4000#, 16),
     to_signed(16#4000#, 16), to_signed(16#4000#, 16), to_signed(16#3FFF#, 16), to_signed(16#3FFF#, 16),
     to_signed(16#3FFF#, 16), to_signed(16#3FFE#, 16), to_signed(16#3FFE#, 16), to_signed(16#3FFE#, 16),
     to_signed(16#3FFD#, 16), to_signed(16#3FFD#, 16), to_signed(16#3FFC#, 16), to_signed(16#3FFC#, 16),
     to_signed(16#3FFB#, 16), to_signed(16#3FFA#, 16), to_signed(16#3FFA#, 16), to_signed(16#3FF9#, 16),
     to_signed(16#3FF8#, 16), to_signed(16#3FF7#, 16), to_signed(16#3FF7#, 16), to_signed(16#3FF6#, 16),
     to_signed(16#3FF5#, 16), to_signed(16#3FF4#, 16), to_signed(16#3FF3#, 16), to_signed(16#3FF2#, 16),
     to_signed(16#3FF1#, 16), to_signed(16#3FF0#, 16), to_signed(16#3FEF#, 16), to_signed(16#3FED#, 16),
     to_signed(16#3FEC#, 16), to_signed(16#3FEB#, 16), to_signed(16#3FEA#, 16), to_signed(16#3FE8#, 16),
     to_signed(16#3FE7#, 16), to_signed(16#3FE6#, 16), to_signed(16#3FE4#, 16), to_signed(16#3FE3#, 16),
     to_signed(16#3FE1#, 16), to_signed(16#3FE0#, 16), to_signed(16#3FDE#, 16), to_signed(16#3FDC#, 16),
     to_signed(16#3FDB#, 16), to_signed(16#3FD9#, 16), to_signed(16#3FD7#, 16), to_signed(16#3FD5#, 16),
     to_signed(16#3FD4#, 16), to_signed(16#3FD2#, 16), to_signed(16#3FD0#, 16), to_signed(16#3FCE#, 16),
     to_signed(16#3FCC#, 16), to_signed(16#3FCA#, 16), to_signed(16#3FC8#, 16), to_signed(16#3FC6#, 16),
     to_signed(16#3FC4#, 16), to_signed(16#3FC1#, 16), to_signed(16#3FBF#, 16), to_signed(16#3FBD#, 16),
     to_signed(16#3FBB#, 16), to_signed(16#3FB8#, 16), to_signed(16#3FB6#, 16), to_signed(16#3FB4#, 16),
     to_signed(16#3FB1#, 16), to_signed(16#3FAF#, 16), to_signed(16#3FAC#, 16), to_signed(16#3FAA#, 16),
     to_signed(16#3FA7#, 16), to_signed(16#3FA4#, 16), to_signed(16#3FA2#, 16), to_signed(16#3F9F#, 16),
     to_signed(16#3F9C#, 16), to_signed(16#3F99#, 16), to_signed(16#3F97#, 16), to_signed(16#3F94#, 16),
     to_signed(16#3F91#, 16), to_signed(16#3F8E#, 16), to_signed(16#3F8B#, 16), to_signed(16#3F88#, 16),
     to_signed(16#3F85#, 16), to_signed(16#3F82#, 16), to_signed(16#3F7F#, 16), to_signed(16#3F7B#, 16),
     to_signed(16#3F78#, 16), to_signed(16#3F75#, 16), to_signed(16#3F72#, 16), to_signed(16#3F6E#, 16),
     to_signed(16#3F6B#, 16), to_signed(16#3F68#, 16), to_signed(16#3F64#, 16), to_signed(16#3F61#, 16),
     to_signed(16#3F5D#, 16), to_signed(16#3F5A#, 16), to_signed(16#3F56#, 16), to_signed(16#3F52#, 16),
     to_signed(16#3F4F#, 16), to_signed(16#3F4B#, 16), to_signed(16#3F47#, 16), to_signed(16#3F43#, 16),
     to_signed(16#3F40#, 16), to_signed(16#3F3C#, 16), to_signed(16#3F38#, 16), to_signed(16#3F34#, 16),
     to_signed(16#3F30#, 16), to_signed(16#3F2C#, 16), to_signed(16#3F28#, 16), to_signed(16#3F24#, 16),
     to_signed(16#3F20#, 16), to_signed(16#3F1C#, 16), to_signed(16#3F17#, 16), to_signed(16#3F13#, 16),
     to_signed(16#3F0F#, 16), to_signed(16#3F0A#, 16), to_signed(16#3F06#, 16), to_signed(16#3F02#, 16),
     to_signed(16#3EFD#, 16), to_signed(16#3EF9#, 16), to_signed(16#3EF4#, 16), to_signed(16#3EF0#, 16),
     to_signed(16#3EEB#, 16), to_signed(16#3EE7#, 16), to_signed(16#3EE2#, 16), to_signed(16#3EDD#, 16),
     to_signed(16#3ED8#, 16), to_signed(16#3ED4#, 16), to_signed(16#3ECF#, 16), to_signed(16#3ECA#, 16),
     to_signed(16#3EC5#, 16), to_signed(16#3EC0#, 16), to_signed(16#3EBB#, 16), to_signed(16#3EB6#, 16),
     to_signed(16#3EB1#, 16), to_signed(16#3EAC#, 16), to_signed(16#3EA7#, 16), to_signed(16#3EA2#, 16),
     to_signed(16#3E9D#, 16), to_signed(16#3E98#, 16), to_signed(16#3E92#, 16), to_signed(16#3E8D#, 16),
     to_signed(16#3E88#, 16), to_signed(16#3E82#, 16), to_signed(16#3E7D#, 16), to_signed(16#3E77#, 16),
     to_signed(16#3E72#, 16), to_signed(16#3E6C#, 16), to_signed(16#3E67#, 16), to_signed(16#3E61#, 16),
     to_signed(16#3E5C#, 16), to_signed(16#3E56#, 16), to_signed(16#3E50#, 16), to_signed(16#3E4A#, 16),
     to_signed(16#3E45#, 16), to_signed(16#3E3F#, 16), to_signed(16#3E39#, 16), to_signed(16#3E33#, 16),
     to_signed(16#3E2D#, 16), to_signed(16#3E27#, 16), to_signed(16#3E21#, 16), to_signed(16#3E1B#, 16),
     to_signed(16#3E15#, 16), to_signed(16#3E0F#, 16), to_signed(16#3E09#, 16), to_signed(16#3E03#, 16),
     to_signed(16#3DFC#, 16), to_signed(16#3DF6#, 16), to_signed(16#3DF0#, 16), to_signed(16#3DE9#, 16),
     to_signed(16#3DE3#, 16), to_signed(16#3DDD#, 16), to_signed(16#3DD6#, 16), to_signed(16#3DD0#, 16),
     to_signed(16#3DC9#, 16), to_signed(16#3DC2#, 16), to_signed(16#3DBC#, 16), to_signed(16#3DB5#, 16),
     to_signed(16#3DAF#, 16), to_signed(16#3DA8#, 16), to_signed(16#3DA1#, 16), to_signed(16#3D9A#, 16),
     to_signed(16#3D93#, 16), to_signed(16#3D8D#, 16), to_signed(16#3D86#, 16), to_signed(16#3D7F#, 16),
     to_signed(16#3D78#, 16), to_signed(16#3D71#, 16), to_signed(16#3D6A#, 16), to_signed(16#3D63#, 16),
     to_signed(16#3D5B#, 16), to_signed(16#3D54#, 16), to_signed(16#3D4D#, 16), to_signed(16#3D46#, 16),
     to_signed(16#3D3F#, 16), to_signed(16#3D37#, 16), to_signed(16#3D30#, 16), to_signed(16#3D28#, 16),
     to_signed(16#3D21#, 16), to_signed(16#3D1A#, 16), to_signed(16#3D12#, 16), to_signed(16#3D0B#, 16),
     to_signed(16#3D03#, 16), to_signed(16#3CFB#, 16), to_signed(16#3CF4#, 16), to_signed(16#3CEC#, 16),
     to_signed(16#3CE4#, 16), to_signed(16#3CDD#, 16), to_signed(16#3CD5#, 16), to_signed(16#3CCD#, 16),
     to_signed(16#3CC5#, 16), to_signed(16#3CBD#, 16), to_signed(16#3CB5#, 16), to_signed(16#3CAD#, 16),
     to_signed(16#3CA5#, 16), to_signed(16#3C9D#, 16), to_signed(16#3C95#, 16), to_signed(16#3C8D#, 16),
     to_signed(16#3C85#, 16), to_signed(16#3C7D#, 16), to_signed(16#3C74#, 16), to_signed(16#3C6C#, 16),
     to_signed(16#3C64#, 16), to_signed(16#3C5B#, 16), to_signed(16#3C53#, 16), to_signed(16#3C4B#, 16),
     to_signed(16#3C42#, 16), to_signed(16#3C3A#, 16), to_signed(16#3C31#, 16), to_signed(16#3C29#, 16),
     to_signed(16#3C20#, 16), to_signed(16#3C17#, 16), to_signed(16#3C0F#, 16), to_signed(16#3C06#, 16),
     to_signed(16#3BFD#, 16), to_signed(16#3BF5#, 16), to_signed(16#3BEC#, 16), to_signed(16#3BE3#, 16),
     to_signed(16#3BDA#, 16), to_signed(16#3BD1#, 16), to_signed(16#3BC8#, 16), to_signed(16#3BBF#, 16),
     to_signed(16#3BB6#, 16), to_signed(16#3BAD#, 16), to_signed(16#3BA4#, 16), to_signed(16#3B9B#, 16),
     to_signed(16#3B92#, 16), to_signed(16#3B88#, 16), to_signed(16#3B7F#, 16), to_signed(16#3B76#, 16),
     to_signed(16#3B6D#, 16), to_signed(16#3B63#, 16), to_signed(16#3B5A#, 16), to_signed(16#3B50#, 16),
     to_signed(16#3B47#, 16), to_signed(16#3B3E#, 16), to_signed(16#3B34#, 16), to_signed(16#3B2A#, 16),
     to_signed(16#3B21#, 16), to_signed(16#3B17#, 16), to_signed(16#3B0E#, 16), to_signed(16#3B04#, 16),
     to_signed(16#3AFA#, 16), to_signed(16#3AF0#, 16), to_signed(16#3AE6#, 16), to_signed(16#3ADD#, 16),
     to_signed(16#3AD3#, 16), to_signed(16#3AC9#, 16), to_signed(16#3ABF#, 16), to_signed(16#3AB5#, 16),
     to_signed(16#3AAB#, 16), to_signed(16#3AA1#, 16), to_signed(16#3A97#, 16), to_signed(16#3A8D#, 16),
     to_signed(16#3A82#, 16), to_signed(16#3A78#, 16), to_signed(16#3A6E#, 16), to_signed(16#3A64#, 16),
     to_signed(16#3A59#, 16), to_signed(16#3A4F#, 16), to_signed(16#3A45#, 16), to_signed(16#3A3A#, 16),
     to_signed(16#3A30#, 16), to_signed(16#3A25#, 16), to_signed(16#3A1B#, 16), to_signed(16#3A10#, 16),
     to_signed(16#3A06#, 16), to_signed(16#39FB#, 16), to_signed(16#39F0#, 16), to_signed(16#39E6#, 16),
     to_signed(16#39DB#, 16), to_signed(16#39D0#, 16), to_signed(16#39C5#, 16), to_signed(16#39BB#, 16),
     to_signed(16#39B0#, 16), to_signed(16#39A5#, 16), to_signed(16#399A#, 16), to_signed(16#398F#, 16),
     to_signed(16#3984#, 16), to_signed(16#3979#, 16), to_signed(16#396E#, 16), to_signed(16#3963#, 16),
     to_signed(16#3958#, 16), to_signed(16#394C#, 16), to_signed(16#3941#, 16), to_signed(16#3936#, 16),
     to_signed(16#392B#, 16), to_signed(16#391F#, 16), to_signed(16#3914#, 16), to_signed(16#3909#, 16),
     to_signed(16#38FD#, 16), to_signed(16#38F2#, 16), to_signed(16#38E6#, 16), to_signed(16#38DB#, 16),
     to_signed(16#38CF#, 16), to_signed(16#38C3#, 16), to_signed(16#38B8#, 16), to_signed(16#38AC#, 16),
     to_signed(16#38A1#, 16), to_signed(16#3895#, 16), to_signed(16#3889#, 16), to_signed(16#387D#, 16),
     to_signed(16#3871#, 16), to_signed(16#3866#, 16), to_signed(16#385A#, 16), to_signed(16#384E#, 16),
     to_signed(16#3842#, 16), to_signed(16#3836#, 16), to_signed(16#382A#, 16), to_signed(16#381E#, 16),
     to_signed(16#3812#, 16), to_signed(16#3805#, 16), to_signed(16#37F9#, 16), to_signed(16#37ED#, 16),
     to_signed(16#37E1#, 16), to_signed(16#37D5#, 16), to_signed(16#37C8#, 16), to_signed(16#37BC#, 16),
     to_signed(16#37B0#, 16), to_signed(16#37A3#, 16), to_signed(16#3797#, 16), to_signed(16#378A#, 16),
     to_signed(16#377E#, 16), to_signed(16#3771#, 16), to_signed(16#3765#, 16), to_signed(16#3758#, 16),
     to_signed(16#374B#, 16), to_signed(16#373F#, 16), to_signed(16#3732#, 16), to_signed(16#3725#, 16),
     to_signed(16#3718#, 16), to_signed(16#370C#, 16), to_signed(16#36FF#, 16), to_signed(16#36F2#, 16),
     to_signed(16#36E5#, 16), to_signed(16#36D8#, 16), to_signed(16#36CB#, 16), to_signed(16#36BE#, 16),
     to_signed(16#36B1#, 16), to_signed(16#36A4#, 16), to_signed(16#3697#, 16), to_signed(16#368A#, 16),
     to_signed(16#367D#, 16), to_signed(16#366F#, 16), to_signed(16#3662#, 16), to_signed(16#3655#, 16),
     to_signed(16#3648#, 16), to_signed(16#363A#, 16), to_signed(16#362D#, 16), to_signed(16#3620#, 16),
     to_signed(16#3612#, 16), to_signed(16#3605#, 16), to_signed(16#35F7#, 16), to_signed(16#35EA#, 16),
     to_signed(16#35DC#, 16), to_signed(16#35CE#, 16), to_signed(16#35C1#, 16), to_signed(16#35B3#, 16),
     to_signed(16#35A5#, 16), to_signed(16#3598#, 16), to_signed(16#358A#, 16), to_signed(16#357C#, 16),
     to_signed(16#356E#, 16), to_signed(16#3561#, 16), to_signed(16#3553#, 16), to_signed(16#3545#, 16),
     to_signed(16#3537#, 16), to_signed(16#3529#, 16), to_signed(16#351B#, 16), to_signed(16#350D#, 16),
     to_signed(16#34FF#, 16), to_signed(16#34F1#, 16), to_signed(16#34E2#, 16), to_signed(16#34D4#, 16),
     to_signed(16#34C6#, 16), to_signed(16#34B8#, 16), to_signed(16#34AA#, 16), to_signed(16#349B#, 16),
     to_signed(16#348D#, 16), to_signed(16#347F#, 16), to_signed(16#3470#, 16), to_signed(16#3462#, 16),
     to_signed(16#3453#, 16), to_signed(16#3445#, 16), to_signed(16#3436#, 16), to_signed(16#3428#, 16),
     to_signed(16#3419#, 16), to_signed(16#340B#, 16), to_signed(16#33FC#, 16), to_signed(16#33ED#, 16),
     to_signed(16#33DF#, 16), to_signed(16#33D0#, 16), to_signed(16#33C1#, 16), to_signed(16#33B2#, 16),
     to_signed(16#33A3#, 16), to_signed(16#3395#, 16), to_signed(16#3386#, 16), to_signed(16#3377#, 16),
     to_signed(16#3368#, 16), to_signed(16#3359#, 16), to_signed(16#334A#, 16), to_signed(16#333B#, 16),
     to_signed(16#332C#, 16), to_signed(16#331D#, 16), to_signed(16#330D#, 16), to_signed(16#32FE#, 16),
     to_signed(16#32EF#, 16), to_signed(16#32E0#, 16), to_signed(16#32D0#, 16), to_signed(16#32C1#, 16),
     to_signed(16#32B2#, 16), to_signed(16#32A3#, 16), to_signed(16#3293#, 16), to_signed(16#3284#, 16),
     to_signed(16#3274#, 16), to_signed(16#3265#, 16), to_signed(16#3255#, 16), to_signed(16#3246#, 16),
     to_signed(16#3236#, 16), to_signed(16#3227#, 16), to_signed(16#3217#, 16), to_signed(16#3207#, 16),
     to_signed(16#31F8#, 16), to_signed(16#31E8#, 16), to_signed(16#31D8#, 16), to_signed(16#31C8#, 16),
     to_signed(16#31B9#, 16), to_signed(16#31A9#, 16), to_signed(16#3199#, 16), to_signed(16#3189#, 16),
     to_signed(16#3179#, 16), to_signed(16#3169#, 16), to_signed(16#3159#, 16), to_signed(16#3149#, 16),
     to_signed(16#3139#, 16), to_signed(16#3129#, 16), to_signed(16#3119#, 16), to_signed(16#3109#, 16),
     to_signed(16#30F9#, 16), to_signed(16#30E8#, 16), to_signed(16#30D8#, 16), to_signed(16#30C8#, 16),
     to_signed(16#30B8#, 16), to_signed(16#30A7#, 16), to_signed(16#3097#, 16), to_signed(16#3087#, 16),
     to_signed(16#3076#, 16), to_signed(16#3066#, 16), to_signed(16#3055#, 16), to_signed(16#3045#, 16),
     to_signed(16#3034#, 16), to_signed(16#3024#, 16), to_signed(16#3013#, 16), to_signed(16#3002#, 16),
     to_signed(16#2FF2#, 16), to_signed(16#2FE1#, 16), to_signed(16#2FD0#, 16), to_signed(16#2FC0#, 16),
     to_signed(16#2FAF#, 16), to_signed(16#2F9E#, 16), to_signed(16#2F8D#, 16), to_signed(16#2F7D#, 16),
     to_signed(16#2F6C#, 16), to_signed(16#2F5B#, 16), to_signed(16#2F4A#, 16), to_signed(16#2F39#, 16),
     to_signed(16#2F28#, 16), to_signed(16#2F17#, 16), to_signed(16#2F06#, 16), to_signed(16#2EF5#, 16),
     to_signed(16#2EE4#, 16), to_signed(16#2ED3#, 16), to_signed(16#2EC2#, 16), to_signed(16#2EB0#, 16),
     to_signed(16#2E9F#, 16), to_signed(16#2E8E#, 16), to_signed(16#2E7D#, 16), to_signed(16#2E6B#, 16),
     to_signed(16#2E5A#, 16), to_signed(16#2E49#, 16), to_signed(16#2E37#, 16), to_signed(16#2E26#, 16),
     to_signed(16#2E15#, 16), to_signed(16#2E03#, 16), to_signed(16#2DF2#, 16), to_signed(16#2DE0#, 16),
     to_signed(16#2DCF#, 16), to_signed(16#2DBD#, 16), to_signed(16#2DAB#, 16), to_signed(16#2D9A#, 16),
     to_signed(16#2D88#, 16), to_signed(16#2D76#, 16), to_signed(16#2D65#, 16), to_signed(16#2D53#, 16));  -- sfix16 [512]
  CONSTANT Twiddle_im_table_data          : vector_of_signed16(0 TO 511) := 
    (to_signed(16#0000#, 16), to_signed(-16#0019#, 16), to_signed(-16#0032#, 16), to_signed(-16#004B#, 16),
     to_signed(-16#0065#, 16), to_signed(-16#007E#, 16), to_signed(-16#0097#, 16), to_signed(-16#00B0#, 16),
     to_signed(-16#00C9#, 16), to_signed(-16#00E2#, 16), to_signed(-16#00FB#, 16), to_signed(-16#0114#, 16),
     to_signed(-16#012E#, 16), to_signed(-16#0147#, 16), to_signed(-16#0160#, 16), to_signed(-16#0179#, 16),
     to_signed(-16#0192#, 16), to_signed(-16#01AB#, 16), to_signed(-16#01C4#, 16), to_signed(-16#01DD#, 16),
     to_signed(-16#01F7#, 16), to_signed(-16#0210#, 16), to_signed(-16#0229#, 16), to_signed(-16#0242#, 16),
     to_signed(-16#025B#, 16), to_signed(-16#0274#, 16), to_signed(-16#028D#, 16), to_signed(-16#02A6#, 16),
     to_signed(-16#02C0#, 16), to_signed(-16#02D9#, 16), to_signed(-16#02F2#, 16), to_signed(-16#030B#, 16),
     to_signed(-16#0324#, 16), to_signed(-16#033D#, 16), to_signed(-16#0356#, 16), to_signed(-16#036F#, 16),
     to_signed(-16#0388#, 16), to_signed(-16#03A1#, 16), to_signed(-16#03BB#, 16), to_signed(-16#03D4#, 16),
     to_signed(-16#03ED#, 16), to_signed(-16#0406#, 16), to_signed(-16#041F#, 16), to_signed(-16#0438#, 16),
     to_signed(-16#0451#, 16), to_signed(-16#046A#, 16), to_signed(-16#0483#, 16), to_signed(-16#049C#, 16),
     to_signed(-16#04B5#, 16), to_signed(-16#04CE#, 16), to_signed(-16#04E7#, 16), to_signed(-16#0500#, 16),
     to_signed(-16#051A#, 16), to_signed(-16#0533#, 16), to_signed(-16#054C#, 16), to_signed(-16#0565#, 16),
     to_signed(-16#057E#, 16), to_signed(-16#0597#, 16), to_signed(-16#05B0#, 16), to_signed(-16#05C9#, 16),
     to_signed(-16#05E2#, 16), to_signed(-16#05FB#, 16), to_signed(-16#0614#, 16), to_signed(-16#062D#, 16),
     to_signed(-16#0646#, 16), to_signed(-16#065F#, 16), to_signed(-16#0678#, 16), to_signed(-16#0691#, 16),
     to_signed(-16#06AA#, 16), to_signed(-16#06C3#, 16), to_signed(-16#06DC#, 16), to_signed(-16#06F5#, 16),
     to_signed(-16#070E#, 16), to_signed(-16#0727#, 16), to_signed(-16#0740#, 16), to_signed(-16#0759#, 16),
     to_signed(-16#0772#, 16), to_signed(-16#078B#, 16), to_signed(-16#07A4#, 16), to_signed(-16#07BD#, 16),
     to_signed(-16#07D6#, 16), to_signed(-16#07EF#, 16), to_signed(-16#0807#, 16), to_signed(-16#0820#, 16),
     to_signed(-16#0839#, 16), to_signed(-16#0852#, 16), to_signed(-16#086B#, 16), to_signed(-16#0884#, 16),
     to_signed(-16#089D#, 16), to_signed(-16#08B6#, 16), to_signed(-16#08CF#, 16), to_signed(-16#08E8#, 16),
     to_signed(-16#0901#, 16), to_signed(-16#0919#, 16), to_signed(-16#0932#, 16), to_signed(-16#094B#, 16),
     to_signed(-16#0964#, 16), to_signed(-16#097D#, 16), to_signed(-16#0996#, 16), to_signed(-16#09AF#, 16),
     to_signed(-16#09C7#, 16), to_signed(-16#09E0#, 16), to_signed(-16#09F9#, 16), to_signed(-16#0A12#, 16),
     to_signed(-16#0A2B#, 16), to_signed(-16#0A44#, 16), to_signed(-16#0A5C#, 16), to_signed(-16#0A75#, 16),
     to_signed(-16#0A8E#, 16), to_signed(-16#0AA7#, 16), to_signed(-16#0AC0#, 16), to_signed(-16#0AD8#, 16),
     to_signed(-16#0AF1#, 16), to_signed(-16#0B0A#, 16), to_signed(-16#0B23#, 16), to_signed(-16#0B3B#, 16),
     to_signed(-16#0B54#, 16), to_signed(-16#0B6D#, 16), to_signed(-16#0B85#, 16), to_signed(-16#0B9E#, 16),
     to_signed(-16#0BB7#, 16), to_signed(-16#0BD0#, 16), to_signed(-16#0BE8#, 16), to_signed(-16#0C01#, 16),
     to_signed(-16#0C1A#, 16), to_signed(-16#0C32#, 16), to_signed(-16#0C4B#, 16), to_signed(-16#0C64#, 16),
     to_signed(-16#0C7C#, 16), to_signed(-16#0C95#, 16), to_signed(-16#0CAE#, 16), to_signed(-16#0CC6#, 16),
     to_signed(-16#0CDF#, 16), to_signed(-16#0CF8#, 16), to_signed(-16#0D10#, 16), to_signed(-16#0D29#, 16),
     to_signed(-16#0D41#, 16), to_signed(-16#0D5A#, 16), to_signed(-16#0D72#, 16), to_signed(-16#0D8B#, 16),
     to_signed(-16#0DA4#, 16), to_signed(-16#0DBC#, 16), to_signed(-16#0DD5#, 16), to_signed(-16#0DED#, 16),
     to_signed(-16#0E06#, 16), to_signed(-16#0E1E#, 16), to_signed(-16#0E37#, 16), to_signed(-16#0E4F#, 16),
     to_signed(-16#0E68#, 16), to_signed(-16#0E80#, 16), to_signed(-16#0E99#, 16), to_signed(-16#0EB1#, 16),
     to_signed(-16#0ECA#, 16), to_signed(-16#0EE2#, 16), to_signed(-16#0EFB#, 16), to_signed(-16#0F13#, 16),
     to_signed(-16#0F2B#, 16), to_signed(-16#0F44#, 16), to_signed(-16#0F5C#, 16), to_signed(-16#0F75#, 16),
     to_signed(-16#0F8D#, 16), to_signed(-16#0FA5#, 16), to_signed(-16#0FBE#, 16), to_signed(-16#0FD6#, 16),
     to_signed(-16#0FEE#, 16), to_signed(-16#1007#, 16), to_signed(-16#101F#, 16), to_signed(-16#1037#, 16),
     to_signed(-16#1050#, 16), to_signed(-16#1068#, 16), to_signed(-16#1080#, 16), to_signed(-16#1099#, 16),
     to_signed(-16#10B1#, 16), to_signed(-16#10C9#, 16), to_signed(-16#10E1#, 16), to_signed(-16#10FA#, 16),
     to_signed(-16#1112#, 16), to_signed(-16#112A#, 16), to_signed(-16#1142#, 16), to_signed(-16#115A#, 16),
     to_signed(-16#1173#, 16), to_signed(-16#118B#, 16), to_signed(-16#11A3#, 16), to_signed(-16#11BB#, 16),
     to_signed(-16#11D3#, 16), to_signed(-16#11EB#, 16), to_signed(-16#1204#, 16), to_signed(-16#121C#, 16),
     to_signed(-16#1234#, 16), to_signed(-16#124C#, 16), to_signed(-16#1264#, 16), to_signed(-16#127C#, 16),
     to_signed(-16#1294#, 16), to_signed(-16#12AC#, 16), to_signed(-16#12C4#, 16), to_signed(-16#12DC#, 16),
     to_signed(-16#12F4#, 16), to_signed(-16#130C#, 16), to_signed(-16#1324#, 16), to_signed(-16#133C#, 16),
     to_signed(-16#1354#, 16), to_signed(-16#136C#, 16), to_signed(-16#1384#, 16), to_signed(-16#139C#, 16),
     to_signed(-16#13B4#, 16), to_signed(-16#13CC#, 16), to_signed(-16#13E4#, 16), to_signed(-16#13FB#, 16),
     to_signed(-16#1413#, 16), to_signed(-16#142B#, 16), to_signed(-16#1443#, 16), to_signed(-16#145B#, 16),
     to_signed(-16#1473#, 16), to_signed(-16#148B#, 16), to_signed(-16#14A2#, 16), to_signed(-16#14BA#, 16),
     to_signed(-16#14D2#, 16), to_signed(-16#14EA#, 16), to_signed(-16#1501#, 16), to_signed(-16#1519#, 16),
     to_signed(-16#1531#, 16), to_signed(-16#1549#, 16), to_signed(-16#1560#, 16), to_signed(-16#1578#, 16),
     to_signed(-16#1590#, 16), to_signed(-16#15A7#, 16), to_signed(-16#15BF#, 16), to_signed(-16#15D7#, 16),
     to_signed(-16#15EE#, 16), to_signed(-16#1606#, 16), to_signed(-16#161D#, 16), to_signed(-16#1635#, 16),
     to_signed(-16#164C#, 16), to_signed(-16#1664#, 16), to_signed(-16#167C#, 16), to_signed(-16#1693#, 16),
     to_signed(-16#16AB#, 16), to_signed(-16#16C2#, 16), to_signed(-16#16DA#, 16), to_signed(-16#16F1#, 16),
     to_signed(-16#1709#, 16), to_signed(-16#1720#, 16), to_signed(-16#1737#, 16), to_signed(-16#174F#, 16),
     to_signed(-16#1766#, 16), to_signed(-16#177E#, 16), to_signed(-16#1795#, 16), to_signed(-16#17AC#, 16),
     to_signed(-16#17C4#, 16), to_signed(-16#17DB#, 16), to_signed(-16#17F2#, 16), to_signed(-16#180A#, 16),
     to_signed(-16#1821#, 16), to_signed(-16#1838#, 16), to_signed(-16#184F#, 16), to_signed(-16#1867#, 16),
     to_signed(-16#187E#, 16), to_signed(-16#1895#, 16), to_signed(-16#18AC#, 16), to_signed(-16#18C3#, 16),
     to_signed(-16#18DB#, 16), to_signed(-16#18F2#, 16), to_signed(-16#1909#, 16), to_signed(-16#1920#, 16),
     to_signed(-16#1937#, 16), to_signed(-16#194E#, 16), to_signed(-16#1965#, 16), to_signed(-16#197C#, 16),
     to_signed(-16#1993#, 16), to_signed(-16#19AA#, 16), to_signed(-16#19C1#, 16), to_signed(-16#19D8#, 16),
     to_signed(-16#19EF#, 16), to_signed(-16#1A06#, 16), to_signed(-16#1A1D#, 16), to_signed(-16#1A34#, 16),
     to_signed(-16#1A4B#, 16), to_signed(-16#1A62#, 16), to_signed(-16#1A79#, 16), to_signed(-16#1A90#, 16),
     to_signed(-16#1AA7#, 16), to_signed(-16#1ABE#, 16), to_signed(-16#1AD4#, 16), to_signed(-16#1AEB#, 16),
     to_signed(-16#1B02#, 16), to_signed(-16#1B19#, 16), to_signed(-16#1B30#, 16), to_signed(-16#1B46#, 16),
     to_signed(-16#1B5D#, 16), to_signed(-16#1B74#, 16), to_signed(-16#1B8A#, 16), to_signed(-16#1BA1#, 16),
     to_signed(-16#1BB8#, 16), to_signed(-16#1BCE#, 16), to_signed(-16#1BE5#, 16), to_signed(-16#1BFC#, 16),
     to_signed(-16#1C12#, 16), to_signed(-16#1C29#, 16), to_signed(-16#1C3F#, 16), to_signed(-16#1C56#, 16),
     to_signed(-16#1C6C#, 16), to_signed(-16#1C83#, 16), to_signed(-16#1C99#, 16), to_signed(-16#1CB0#, 16),
     to_signed(-16#1CC6#, 16), to_signed(-16#1CDD#, 16), to_signed(-16#1CF3#, 16), to_signed(-16#1D0A#, 16),
     to_signed(-16#1D20#, 16), to_signed(-16#1D36#, 16), to_signed(-16#1D4D#, 16), to_signed(-16#1D63#, 16),
     to_signed(-16#1D79#, 16), to_signed(-16#1D90#, 16), to_signed(-16#1DA6#, 16), to_signed(-16#1DBC#, 16),
     to_signed(-16#1DD3#, 16), to_signed(-16#1DE9#, 16), to_signed(-16#1DFF#, 16), to_signed(-16#1E15#, 16),
     to_signed(-16#1E2B#, 16), to_signed(-16#1E42#, 16), to_signed(-16#1E58#, 16), to_signed(-16#1E6E#, 16),
     to_signed(-16#1E84#, 16), to_signed(-16#1E9A#, 16), to_signed(-16#1EB0#, 16), to_signed(-16#1EC6#, 16),
     to_signed(-16#1EDC#, 16), to_signed(-16#1EF2#, 16), to_signed(-16#1F08#, 16), to_signed(-16#1F1E#, 16),
     to_signed(-16#1F34#, 16), to_signed(-16#1F4A#, 16), to_signed(-16#1F60#, 16), to_signed(-16#1F76#, 16),
     to_signed(-16#1F8C#, 16), to_signed(-16#1FA2#, 16), to_signed(-16#1FB7#, 16), to_signed(-16#1FCD#, 16),
     to_signed(-16#1FE3#, 16), to_signed(-16#1FF9#, 16), to_signed(-16#200F#, 16), to_signed(-16#2024#, 16),
     to_signed(-16#203A#, 16), to_signed(-16#2050#, 16), to_signed(-16#2065#, 16), to_signed(-16#207B#, 16),
     to_signed(-16#2091#, 16), to_signed(-16#20A6#, 16), to_signed(-16#20BC#, 16), to_signed(-16#20D1#, 16),
     to_signed(-16#20E7#, 16), to_signed(-16#20FD#, 16), to_signed(-16#2112#, 16), to_signed(-16#2128#, 16),
     to_signed(-16#213D#, 16), to_signed(-16#2153#, 16), to_signed(-16#2168#, 16), to_signed(-16#217D#, 16),
     to_signed(-16#2193#, 16), to_signed(-16#21A8#, 16), to_signed(-16#21BE#, 16), to_signed(-16#21D3#, 16),
     to_signed(-16#21E8#, 16), to_signed(-16#21FE#, 16), to_signed(-16#2213#, 16), to_signed(-16#2228#, 16),
     to_signed(-16#223D#, 16), to_signed(-16#2253#, 16), to_signed(-16#2268#, 16), to_signed(-16#227D#, 16),
     to_signed(-16#2292#, 16), to_signed(-16#22A7#, 16), to_signed(-16#22BC#, 16), to_signed(-16#22D2#, 16),
     to_signed(-16#22E7#, 16), to_signed(-16#22FC#, 16), to_signed(-16#2311#, 16), to_signed(-16#2326#, 16),
     to_signed(-16#233B#, 16), to_signed(-16#2350#, 16), to_signed(-16#2365#, 16), to_signed(-16#237A#, 16),
     to_signed(-16#238E#, 16), to_signed(-16#23A3#, 16), to_signed(-16#23B8#, 16), to_signed(-16#23CD#, 16),
     to_signed(-16#23E2#, 16), to_signed(-16#23F7#, 16), to_signed(-16#240B#, 16), to_signed(-16#2420#, 16),
     to_signed(-16#2435#, 16), to_signed(-16#244A#, 16), to_signed(-16#245E#, 16), to_signed(-16#2473#, 16),
     to_signed(-16#2488#, 16), to_signed(-16#249C#, 16), to_signed(-16#24B1#, 16), to_signed(-16#24C5#, 16),
     to_signed(-16#24DA#, 16), to_signed(-16#24EF#, 16), to_signed(-16#2503#, 16), to_signed(-16#2518#, 16),
     to_signed(-16#252C#, 16), to_signed(-16#2541#, 16), to_signed(-16#2555#, 16), to_signed(-16#2569#, 16),
     to_signed(-16#257E#, 16), to_signed(-16#2592#, 16), to_signed(-16#25A6#, 16), to_signed(-16#25BB#, 16),
     to_signed(-16#25CF#, 16), to_signed(-16#25E3#, 16), to_signed(-16#25F8#, 16), to_signed(-16#260C#, 16),
     to_signed(-16#2620#, 16), to_signed(-16#2634#, 16), to_signed(-16#2648#, 16), to_signed(-16#265C#, 16),
     to_signed(-16#2671#, 16), to_signed(-16#2685#, 16), to_signed(-16#2699#, 16), to_signed(-16#26AD#, 16),
     to_signed(-16#26C1#, 16), to_signed(-16#26D5#, 16), to_signed(-16#26E9#, 16), to_signed(-16#26FD#, 16),
     to_signed(-16#2711#, 16), to_signed(-16#2724#, 16), to_signed(-16#2738#, 16), to_signed(-16#274C#, 16),
     to_signed(-16#2760#, 16), to_signed(-16#2774#, 16), to_signed(-16#2788#, 16), to_signed(-16#279B#, 16),
     to_signed(-16#27AF#, 16), to_signed(-16#27C3#, 16), to_signed(-16#27D6#, 16), to_signed(-16#27EA#, 16),
     to_signed(-16#27FE#, 16), to_signed(-16#2811#, 16), to_signed(-16#2825#, 16), to_signed(-16#2838#, 16),
     to_signed(-16#284C#, 16), to_signed(-16#2860#, 16), to_signed(-16#2873#, 16), to_signed(-16#2886#, 16),
     to_signed(-16#289A#, 16), to_signed(-16#28AD#, 16), to_signed(-16#28C1#, 16), to_signed(-16#28D4#, 16),
     to_signed(-16#28E7#, 16), to_signed(-16#28FB#, 16), to_signed(-16#290E#, 16), to_signed(-16#2921#, 16),
     to_signed(-16#2935#, 16), to_signed(-16#2948#, 16), to_signed(-16#295B#, 16), to_signed(-16#296E#, 16),
     to_signed(-16#2981#, 16), to_signed(-16#2994#, 16), to_signed(-16#29A7#, 16), to_signed(-16#29BB#, 16),
     to_signed(-16#29CE#, 16), to_signed(-16#29E1#, 16), to_signed(-16#29F4#, 16), to_signed(-16#2A07#, 16),
     to_signed(-16#2A1A#, 16), to_signed(-16#2A2C#, 16), to_signed(-16#2A3F#, 16), to_signed(-16#2A52#, 16),
     to_signed(-16#2A65#, 16), to_signed(-16#2A78#, 16), to_signed(-16#2A8B#, 16), to_signed(-16#2A9D#, 16),
     to_signed(-16#2AB0#, 16), to_signed(-16#2AC3#, 16), to_signed(-16#2AD6#, 16), to_signed(-16#2AE8#, 16),
     to_signed(-16#2AFB#, 16), to_signed(-16#2B0D#, 16), to_signed(-16#2B20#, 16), to_signed(-16#2B33#, 16),
     to_signed(-16#2B45#, 16), to_signed(-16#2B58#, 16), to_signed(-16#2B6A#, 16), to_signed(-16#2B7D#, 16),
     to_signed(-16#2B8F#, 16), to_signed(-16#2BA1#, 16), to_signed(-16#2BB4#, 16), to_signed(-16#2BC6#, 16),
     to_signed(-16#2BD8#, 16), to_signed(-16#2BEB#, 16), to_signed(-16#2BFD#, 16), to_signed(-16#2C0F#, 16),
     to_signed(-16#2C21#, 16), to_signed(-16#2C34#, 16), to_signed(-16#2C46#, 16), to_signed(-16#2C58#, 16),
     to_signed(-16#2C6A#, 16), to_signed(-16#2C7C#, 16), to_signed(-16#2C8E#, 16), to_signed(-16#2CA0#, 16),
     to_signed(-16#2CB2#, 16), to_signed(-16#2CC4#, 16), to_signed(-16#2CD6#, 16), to_signed(-16#2CE8#, 16),
     to_signed(-16#2CFA#, 16), to_signed(-16#2D0C#, 16), to_signed(-16#2D1E#, 16), to_signed(-16#2D2F#, 16));  -- sfix16 [512]

  -- Signals
  SIGNAL Radix22TwdlMapping_cnt           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Radix22TwdlMapping_phase         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw  : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Radix22TwdlMapping_twdlAddrMap   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdl45Reg     : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1      : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2      : std_logic;
  SIGNAL Radix22TwdlMapping_cnt_next      : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Radix22TwdlMapping_phase_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1_next : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw_next : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Radix22TwdlMapping_twdlAddrMap_next : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdl45Reg_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2_next : std_logic;
  SIGNAL twdlAddr                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL twdlAddrVld                      : std_logic;
  SIGNAL twdlOctant                       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45                           : std_logic;
  SIGNAL twiddleS_re                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twiddleReg_re                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twiddleS_im                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twiddleReg_im                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdlOctantReg                    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45Reg                        : std_logic;

BEGIN
  -- Radix22TwdlMapping
  Radix22TwdlMapping_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22TwdlMapping_octantReg1 <= to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdlAddr_raw <= to_unsigned(16#000#, 12);
        Radix22TwdlMapping_twdlAddrMap <= to_unsigned(16#000#, 9);
        Radix22TwdlMapping_twdl45Reg <= '0';
        Radix22TwdlMapping_dvldReg1 <= '0';
        Radix22TwdlMapping_dvldReg2 <= '0';
        Radix22TwdlMapping_cnt <= to_unsigned(16#000#, 10);
        Radix22TwdlMapping_phase <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        Radix22TwdlMapping_cnt <= Radix22TwdlMapping_cnt_next;
        Radix22TwdlMapping_phase <= Radix22TwdlMapping_phase_next;
        Radix22TwdlMapping_octantReg1 <= Radix22TwdlMapping_octantReg1_next;
        Radix22TwdlMapping_twdlAddr_raw <= Radix22TwdlMapping_twdlAddr_raw_next;
        Radix22TwdlMapping_twdlAddrMap <= Radix22TwdlMapping_twdlAddrMap_next;
        Radix22TwdlMapping_twdl45Reg <= Radix22TwdlMapping_twdl45Reg_next;
        Radix22TwdlMapping_dvldReg1 <= Radix22TwdlMapping_dvldReg1_next;
        Radix22TwdlMapping_dvldReg2 <= Radix22TwdlMapping_dvldReg2_next;
      END IF;
    END IF;
  END PROCESS Radix22TwdlMapping_process;

  Radix22TwdlMapping_output : PROCESS (Radix22TwdlMapping_cnt, Radix22TwdlMapping_dvldReg1,
       Radix22TwdlMapping_dvldReg2, Radix22TwdlMapping_octantReg1,
       Radix22TwdlMapping_phase, Radix22TwdlMapping_twdl45Reg,
       Radix22TwdlMapping_twdlAddrMap, Radix22TwdlMapping_twdlAddr_raw,
       dout_6_1_vld)
    VARIABLE octant : unsigned(2 DOWNTO 0);
    VARIABLE cnt_cast : unsigned(11 DOWNTO 0);
    VARIABLE sub_temp : signed(25 DOWNTO 0);
    VARIABLE sub_temp_0 : signed(13 DOWNTO 0);
    VARIABLE sub_temp_1 : signed(13 DOWNTO 0);
    VARIABLE sub_temp_2 : signed(25 DOWNTO 0);
    VARIABLE sub_temp_3 : signed(25 DOWNTO 0);
  BEGIN
    sub_temp := to_signed(16#0000000#, 26);
    sub_temp_0 := to_signed(16#0000#, 14);
    sub_temp_1 := to_signed(16#0000#, 14);
    sub_temp_2 := to_signed(16#0000000#, 26);
    sub_temp_3 := to_signed(16#0000000#, 26);
    cnt_cast := to_unsigned(16#000#, 12);
    Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt;
    Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase;
    Radix22TwdlMapping_dvldReg2_next <= Radix22TwdlMapping_dvldReg1;
    Radix22TwdlMapping_dvldReg1_next <= dout_6_1_vld;
    CASE Radix22TwdlMapping_twdlAddr_raw IS
      WHEN "001000000000" =>
        octant := to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "010000000000" =>
        octant := to_unsigned(16#1#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "011000000000" =>
        octant := to_unsigned(16#2#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "100000000000" =>
        octant := to_unsigned(16#3#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "101000000000" =>
        octant := to_unsigned(16#4#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN OTHERS => 
        octant := Radix22TwdlMapping_twdlAddr_raw(11 DOWNTO 9);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
    END CASE;
    Radix22TwdlMapping_octantReg1_next <= octant;
    CASE octant IS
      WHEN "000" =>
        Radix22TwdlMapping_twdlAddrMap_next <= Radix22TwdlMapping_twdlAddr_raw(8 DOWNTO 0);
      WHEN "001" =>
        sub_temp_0 := to_signed(16#0400#, 14) - signed(resize(Radix22TwdlMapping_twdlAddr_raw, 14));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_0(8 DOWNTO 0));
      WHEN "010" =>
        sub_temp_1 := signed(resize(Radix22TwdlMapping_twdlAddr_raw, 14)) - to_signed(16#0400#, 14);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_1(8 DOWNTO 0));
      WHEN "011" =>
        sub_temp_2 := to_signed(16#0100000#, 26) - signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_2(17 DOWNTO 9));
      WHEN "100" =>
        sub_temp_3 := signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26)) - to_signed(16#0100000#, 26);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_3(17 DOWNTO 9));
      WHEN OTHERS => 
        sub_temp := to_signed(16#0180000#, 26) - signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp(17 DOWNTO 9));
    END CASE;
    IF Radix22TwdlMapping_phase = to_unsigned(16#0#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= to_unsigned(16#000#, 12);
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#1#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(Radix22TwdlMapping_cnt, 12) sll 1;
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#2#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(Radix22TwdlMapping_cnt, 12);
    ELSE 
      cnt_cast := resize(Radix22TwdlMapping_cnt, 12);
      Radix22TwdlMapping_twdlAddr_raw_next <= (cnt_cast sll 1) + cnt_cast;
    END IF;
    IF dout_6_1_vld = '1' AND (Radix22TwdlMapping_cnt > to_unsigned(16#3EF#, 10)) THEN 
      Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase + to_unsigned(16#1#, 2);
    END IF;
    IF dout_6_1_vld = '1' THEN 
      Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt + to_unsigned(16#010#, 10);
    END IF;
    twdlAddr <= Radix22TwdlMapping_twdlAddrMap;
    twdlAddrVld <= Radix22TwdlMapping_dvldReg2;
    twdlOctant <= Radix22TwdlMapping_octantReg1;
    twdl45 <= Radix22TwdlMapping_twdl45Reg;
  END PROCESS Radix22TwdlMapping_output;


  -- Twiddle ROM1
  twiddleS_re <= Twiddle_re_table_data(to_integer(twdlAddr));

  TWIDDLEROM_RE_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twiddleReg_re <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twiddleReg_re <= twiddleS_re;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_RE_process;


  -- Twiddle ROM2
  twiddleS_im <= Twiddle_im_table_data(to_integer(twdlAddr));

  TWIDDLEROM_IM_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twiddleReg_im <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twiddleReg_im <= twiddleS_im;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_IM_process;


  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdlOctantReg <= to_unsigned(16#0#, 3);
      ELSIF enb = '1' THEN
        twdlOctantReg <= twdlOctant;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl45Reg <= '0';
      ELSIF enb = '1' THEN
        twdl45Reg <= twdl45;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  -- Radix22TwdlOctCorr
  Radix22TwdlOctCorr_output : PROCESS (twdl45Reg, twdlOctantReg, twiddleReg_im, twiddleReg_re)
    VARIABLE twdlIn_re : signed(15 DOWNTO 0);
    VARIABLE twdlIn_im : signed(15 DOWNTO 0);
    VARIABLE cast : signed(16 DOWNTO 0);
    VARIABLE cast_0 : signed(16 DOWNTO 0);
    VARIABLE cast_1 : signed(16 DOWNTO 0);
    VARIABLE cast_2 : signed(16 DOWNTO 0);
    VARIABLE cast_3 : signed(16 DOWNTO 0);
    VARIABLE cast_4 : signed(16 DOWNTO 0);
  BEGIN
    cast := to_signed(16#00000#, 17);
    cast_0 := to_signed(16#00000#, 17);
    cast_1 := to_signed(16#00000#, 17);
    cast_2 := to_signed(16#00000#, 17);
    cast_3 := to_signed(16#00000#, 17);
    cast_4 := to_signed(16#00000#, 17);
    twdlIn_re := twiddleReg_re;
    twdlIn_im := twiddleReg_im;
    IF twdl45Reg = '1' THEN 
      CASE twdlOctantReg IS
        WHEN "000" =>
          twdlIn_re := to_signed(16#2D41#, 16);
          twdlIn_im := to_signed(-16#2D41#, 16);
        WHEN "010" =>
          twdlIn_re := to_signed(-16#2D41#, 16);
          twdlIn_im := to_signed(-16#2D41#, 16);
        WHEN "100" =>
          twdlIn_re := to_signed(-16#2D41#, 16);
          twdlIn_im := to_signed(16#2D41#, 16);
        WHEN OTHERS => 
          twdlIn_re := to_signed(16#2D41#, 16);
          twdlIn_im := to_signed(-16#2D41#, 16);
      END CASE;
    ELSE 
      CASE twdlOctantReg IS
        WHEN "000" =>
          NULL;
        WHEN "001" =>
          cast :=  - (resize(twiddleReg_im, 17));
          twdlIn_re := cast(15 DOWNTO 0);
          cast_2 :=  - (resize(twiddleReg_re, 17));
          twdlIn_im := cast_2(15 DOWNTO 0);
        WHEN "010" =>
          twdlIn_re := twiddleReg_im;
          cast_3 :=  - (resize(twiddleReg_re, 17));
          twdlIn_im := cast_3(15 DOWNTO 0);
        WHEN "011" =>
          cast_0 :=  - (resize(twiddleReg_re, 17));
          twdlIn_re := cast_0(15 DOWNTO 0);
          twdlIn_im := twiddleReg_im;
        WHEN "100" =>
          cast_1 :=  - (resize(twiddleReg_re, 17));
          twdlIn_re := cast_1(15 DOWNTO 0);
          cast_4 :=  - (resize(twiddleReg_im, 17));
          twdlIn_im := cast_4(15 DOWNTO 0);
        WHEN OTHERS => 
          twdlIn_re := twiddleReg_im;
          twdlIn_im := twiddleReg_re;
      END CASE;
    END IF;
    twdl_7_1_re <= twdlIn_re;
    twdl_7_1_im <= twdlIn_im;
  END PROCESS Radix22TwdlOctCorr_output;


END rtl;


-- End of TWDLROM_7_1_block.vhd --

-- Start of TWDLROM_7_1_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\TWDLROM_7_1_block1.vhd
-- Created: 2025-03-18 15:26:31
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: TWDLROM_7_1_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/TWDLROM_7_1
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY TWDLROM_7_1_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_6_1_vld                      :   IN    std_logic;
        twdl_7_1_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32_En30
        twdl_7_1_im                       :   OUT   signed(31 DOWNTO 0)  -- sfix32_En30
        );
END TWDLROM_7_1_block1;


ARCHITECTURE rtl OF TWDLROM_7_1_block1 IS

  -- Constants
  CONSTANT Twiddle_re_table_data          : vector_of_signed32(0 TO 511) := 
    (to_signed(1073741824, 32), to_signed(1073740561, 32), to_signed(1073736771, 32), to_signed(1073730454, 32),
     to_signed(1073721611, 32), to_signed(1073710241, 32), to_signed(1073696345, 32), to_signed(1073679922, 32),
     to_signed(1073660973, 32), to_signed(1073639498, 32), to_signed(1073615496, 32), to_signed(1073588967, 32),
     to_signed(1073559913, 32), to_signed(1073528332, 32), to_signed(1073494225, 32), to_signed(1073457592, 32),
     to_signed(1073418433, 32), to_signed(1073376748, 32), to_signed(1073332538, 32), to_signed(1073285802, 32),
     to_signed(1073236540, 32), to_signed(1073184753, 32), to_signed(1073130440, 32), to_signed(1073073603, 32),
     to_signed(1073014240, 32), to_signed(1072952352, 32), to_signed(1072887940, 32), to_signed(1072821003, 32),
     to_signed(1072751542, 32), to_signed(1072679556, 32), to_signed(1072605046, 32), to_signed(1072528012, 32),
     to_signed(1072448455, 32), to_signed(1072366374, 32), to_signed(1072281769, 32), to_signed(1072194642, 32),
     to_signed(1072104991, 32), to_signed(1072012818, 32), to_signed(1071918122, 32), to_signed(1071820903, 32),
     to_signed(1071721163, 32), to_signed(1071618901, 32), to_signed(1071514117, 32), to_signed(1071406812, 32),
     to_signed(1071296985, 32), to_signed(1071184638, 32), to_signed(1071069770, 32), to_signed(1070952382, 32),
     to_signed(1070832474, 32), to_signed(1070710046, 32), to_signed(1070585099, 32), to_signed(1070457632, 32),
     to_signed(1070327646, 32), to_signed(1070195142, 32), to_signed(1070060120, 32), to_signed(1069922579, 32),
     to_signed(1069782521, 32), to_signed(1069639946, 32), to_signed(1069494854, 32), to_signed(1069347245, 32),
     to_signed(1069197120, 32), to_signed(1069044479, 32), to_signed(1068889322, 32), to_signed(1068731650, 32),
     to_signed(1068571464, 32), to_signed(1068408763, 32), to_signed(1068243547, 32), to_signed(1068075818, 32),
     to_signed(1067905576, 32), to_signed(1067732821, 32), to_signed(1067557554, 32), to_signed(1067379774, 32),
     to_signed(1067199483, 32), to_signed(1067016680, 32), to_signed(1066831367, 32), to_signed(1066643544, 32),
     to_signed(1066453210, 32), to_signed(1066260367, 32), to_signed(1066065015, 32), to_signed(1065867154, 32),
     to_signed(1065666786, 32), to_signed(1065463909, 32), to_signed(1065258526, 32), to_signed(1065050636, 32),
     to_signed(1064840240, 32), to_signed(1064627338, 32), to_signed(1064411931, 32), to_signed(1064194019, 32),
     to_signed(1063973603, 32), to_signed(1063750684, 32), to_signed(1063525261, 32), to_signed(1063297336, 32),
     to_signed(1063066909, 32), to_signed(1062833980, 32), to_signed(1062598550, 32), to_signed(1062360620, 32),
     to_signed(1062120190, 32), to_signed(1061877261, 32), to_signed(1061631833, 32), to_signed(1061383907, 32),
     to_signed(1061133483, 32), to_signed(1060880563, 32), to_signed(1060625146, 32), to_signed(1060367233, 32),
     to_signed(1060106826, 32), to_signed(1059843923, 32), to_signed(1059578527, 32), to_signed(1059310638, 32),
     to_signed(1059040255, 32), to_signed(1058767381, 32), to_signed(1058492016, 32), to_signed(1058214159, 32),
     to_signed(1057933813, 32), to_signed(1057650977, 32), to_signed(1057365653, 32), to_signed(1057077840, 32),
     to_signed(1056787540, 32), to_signed(1056494753, 32), to_signed(1056199480, 32), to_signed(1055901722, 32),
     to_signed(1055601479, 32), to_signed(1055298753, 32), to_signed(1054993543, 32), to_signed(1054685850, 32),
     to_signed(1054375676, 32), to_signed(1054063021, 32), to_signed(1053747885, 32), to_signed(1053430270, 32),
     to_signed(1053110176, 32), to_signed(1052787604, 32), to_signed(1052462555, 32), to_signed(1052135029, 32),
     to_signed(1051805027, 32), to_signed(1051472550, 32), to_signed(1051137599, 32), to_signed(1050800175, 32),
     to_signed(1050460278, 32), to_signed(1050117909, 32), to_signed(1049773069, 32), to_signed(1049425759, 32),
     to_signed(1049075980, 32), to_signed(1048723732, 32), to_signed(1048369016, 32), to_signed(1048011834, 32),
     to_signed(1047652185, 32), to_signed(1047290071, 32), to_signed(1046925492, 32), to_signed(1046558451, 32),
     to_signed(1046188946, 32), to_signed(1045816980, 32), to_signed(1045442553, 32), to_signed(1045065665, 32),
     to_signed(1044686319, 32), to_signed(1044304514, 32), to_signed(1043920252, 32), to_signed(1043533534, 32),
     to_signed(1043144360, 32), to_signed(1042752731, 32), to_signed(1042358649, 32), to_signed(1041962114, 32),
     to_signed(1041563127, 32), to_signed(1041161689, 32), to_signed(1040757802, 32), to_signed(1040351465, 32),
     to_signed(1039942680, 32), to_signed(1039531448, 32), to_signed(1039117770, 32), to_signed(1038701647, 32),
     to_signed(1038283080, 32), to_signed(1037862069, 32), to_signed(1037438617, 32), to_signed(1037012723, 32),
     to_signed(1036584389, 32), to_signed(1036153615, 32), to_signed(1035720404, 32), to_signed(1035284755, 32),
     to_signed(1034846671, 32), to_signed(1034406151, 32), to_signed(1033963197, 32), to_signed(1033517810, 32),
     to_signed(1033069992, 32), to_signed(1032619742, 32), to_signed(1032167062, 32), to_signed(1031711954, 32),
     to_signed(1031254418, 32), to_signed(1030794455, 32), to_signed(1030332067, 32), to_signed(1029867254, 32),
     to_signed(1029400018, 32), to_signed(1028930359, 32), to_signed(1028458280, 32), to_signed(1027983780, 32),
     to_signed(1027506862, 32), to_signed(1027027525, 32), to_signed(1026545772, 32), to_signed(1026061603, 32),
     to_signed(1025575020, 32), to_signed(1025086024, 32), to_signed(1024594615, 32), to_signed(1024100796, 32),
     to_signed(1023604567, 32), to_signed(1023105929, 32), to_signed(1022604883, 32), to_signed(1022101432, 32),
     to_signed(1021595575, 32), to_signed(1021087314, 32), to_signed(1020576651, 32), to_signed(1020063586, 32),
     to_signed(1019548121, 32), to_signed(1019030256, 32), to_signed(1018509994, 32), to_signed(1017987335, 32),
     to_signed(1017462281, 32), to_signed(1016934832, 32), to_signed(1016404991, 32), to_signed(1015872758, 32),
     to_signed(1015338134, 32), to_signed(1014801122, 32), to_signed(1014261721, 32), to_signed(1013719934, 32),
     to_signed(1013175761, 32), to_signed(1012629204, 32), to_signed(1012080264, 32), to_signed(1011528943, 32),
     to_signed(1010975242, 32), to_signed(1010419162, 32), to_signed(1009860704, 32), to_signed(1009299870, 32),
     to_signed(1008736660, 32), to_signed(1008171077, 32), to_signed(1007603122, 32), to_signed(1007032796, 32),
     to_signed(1006460100, 32), to_signed(1005885036, 32), to_signed(1005307605, 32), to_signed(1004727809, 32),
     to_signed(1004145648, 32), to_signed(1003561124, 32), to_signed(1002974239, 32), to_signed(1002384994, 32),
     to_signed(1001793390, 32), to_signed(1001199428, 32), to_signed(1000603111, 32), to_signed(1000004439, 32),
     to_signed(999403415, 32), to_signed(998800038, 32), to_signed(998194311, 32), to_signed(997586236, 32),
     to_signed(996975812, 32), to_signed(996363043, 32), to_signed(995747930, 32), to_signed(995130473, 32),
     to_signed(994510675, 32), to_signed(993888536, 32), to_signed(993264059, 32), to_signed(992637245, 32),
     to_signed(992008094, 32), to_signed(991376610, 32), to_signed(990742793, 32), to_signed(990106644, 32),
     to_signed(989468165, 32), to_signed(988827359, 32), to_signed(988184225, 32), to_signed(987538766, 32),
     to_signed(986890984, 32), to_signed(986240879, 32), to_signed(985588453, 32), to_signed(984933708, 32),
     to_signed(984276646, 32), to_signed(983617267, 32), to_signed(982955574, 32), to_signed(982291568, 32),
     to_signed(981625251, 32), to_signed(980956623, 32), to_signed(980285688, 32), to_signed(979612445, 32),
     to_signed(978936898, 32), to_signed(978259047, 32), to_signed(977578894, 32), to_signed(976896441, 32),
     to_signed(976211688, 32), to_signed(975524639, 32), to_signed(974835295, 32), to_signed(974143656, 32),
     to_signed(973449725, 32), to_signed(972753504, 32), to_signed(972054994, 32), to_signed(971354196, 32),
     to_signed(970651112, 32), to_signed(969945745, 32), to_signed(969238095, 32), to_signed(968528165, 32),
     to_signed(967815955, 32), to_signed(967101468, 32), to_signed(966384706, 32), to_signed(965665669, 32),
     to_signed(964944360, 32), to_signed(964220780, 32), to_signed(963494932, 32), to_signed(962766816, 32),
     to_signed(962036435, 32), to_signed(961303790, 32), to_signed(960568883, 32), to_signed(959831716, 32),
     to_signed(959092290, 32), to_signed(958350608, 32), to_signed(957606670, 32), to_signed(956860479, 32),
     to_signed(956112036, 32), to_signed(955361344, 32), to_signed(954608403, 32), to_signed(953853216, 32),
     to_signed(953095785, 32), to_signed(952336111, 32), to_signed(951574196, 32), to_signed(950810042, 32),
     to_signed(950043650, 32), to_signed(949275023, 32), to_signed(948504163, 32), to_signed(947731070, 32),
     to_signed(946955747, 32), to_signed(946178196, 32), to_signed(945398418, 32), to_signed(944616416, 32),
     to_signed(943832191, 32), to_signed(943045745, 32), to_signed(942257081, 32), to_signed(941466198, 32),
     to_signed(940673101, 32), to_signed(939877790, 32), to_signed(939080267, 32), to_signed(938280535, 32),
     to_signed(937478595, 32), to_signed(936674448, 32), to_signed(935868098, 32), to_signed(935059546, 32),
     to_signed(934248793, 32), to_signed(933435842, 32), to_signed(932620694, 32), to_signed(931803352, 32),
     to_signed(930983817, 32), to_signed(930162092, 32), to_signed(929338177, 32), to_signed(928512076, 32),
     to_signed(927683790, 32), to_signed(926853322, 32), to_signed(926020672, 32), to_signed(925185843, 32),
     to_signed(924348837, 32), to_signed(923509656, 32), to_signed(922668302, 32), to_signed(921824777, 32),
     to_signed(920979082, 32), to_signed(920131221, 32), to_signed(919281194, 32), to_signed(918429004, 32),
     to_signed(917574653, 32), to_signed(916718143, 32), to_signed(915859476, 32), to_signed(914998653, 32),
     to_signed(914135678, 32), to_signed(913270551, 32), to_signed(912403276, 32), to_signed(911533853, 32),
     to_signed(910662286, 32), to_signed(909788576, 32), to_signed(908912725, 32), to_signed(908034735, 32),
     to_signed(907154608, 32), to_signed(906272347, 32), to_signed(905387953, 32), to_signed(904501429, 32),
     to_signed(903612776, 32), to_signed(902721998, 32), to_signed(901829095, 32), to_signed(900934069, 32),
     to_signed(900036924, 32), to_signed(899137661, 32), to_signed(898236282, 32), to_signed(897332790, 32),
     to_signed(896427186, 32), to_signed(895519473, 32), to_signed(894609652, 32), to_signed(893697727, 32),
     to_signed(892783698, 32), to_signed(891867569, 32), to_signed(890949341, 32), to_signed(890029016, 32),
     to_signed(889106597, 32), to_signed(888182086, 32), to_signed(887255485, 32), to_signed(886326796, 32),
     to_signed(885396022, 32), to_signed(884463164, 32), to_signed(883528225, 32), to_signed(882591207, 32),
     to_signed(881652112, 32), to_signed(880710943, 32), to_signed(879767701, 32), to_signed(878822389, 32),
     to_signed(877875009, 32), to_signed(876925563, 32), to_signed(875974054, 32), to_signed(875020483, 32),
     to_signed(874064853, 32), to_signed(873107167, 32), to_signed(872147426, 32), to_signed(871185633, 32),
     to_signed(870221790, 32), to_signed(869255900, 32), to_signed(868287963, 32), to_signed(867317984, 32),
     to_signed(866345964, 32), to_signed(865371905, 32), to_signed(864395810, 32), to_signed(863417681, 32),
     to_signed(862437520, 32), to_signed(861455330, 32), to_signed(860471112, 32), to_signed(859484870, 32),
     to_signed(858496606, 32), to_signed(857506321, 32), to_signed(856514019, 32), to_signed(855519701, 32),
     to_signed(854523370, 32), to_signed(853525028, 32), to_signed(852524677, 32), to_signed(851522321, 32),
     to_signed(850517961, 32), to_signed(849511600, 32), to_signed(848503239, 32), to_signed(847492882, 32),
     to_signed(846480531, 32), to_signed(845466188, 32), to_signed(844449856, 32), to_signed(843431536, 32),
     to_signed(842411232, 32), to_signed(841388945, 32), to_signed(840364679, 32), to_signed(839338435, 32),
     to_signed(838310216, 32), to_signed(837280024, 32), to_signed(836247863, 32), to_signed(835213733, 32),
     to_signed(834177638, 32), to_signed(833139580, 32), to_signed(832099562, 32), to_signed(831057586, 32),
     to_signed(830013654, 32), to_signed(828967769, 32), to_signed(827919934, 32), to_signed(826870150, 32),
     to_signed(825818421, 32), to_signed(824764748, 32), to_signed(823709135, 32), to_signed(822651583, 32),
     to_signed(821592095, 32), to_signed(820530675, 32), to_signed(819467323, 32), to_signed(818402043, 32),
     to_signed(817334838, 32), to_signed(816265709, 32), to_signed(815194659, 32), to_signed(814121692, 32),
     to_signed(813046808, 32), to_signed(811970011, 32), to_signed(810891304, 32), to_signed(809810688, 32),
     to_signed(808728167, 32), to_signed(807643743, 32), to_signed(806557419, 32), to_signed(805469196, 32),
     to_signed(804379079, 32), to_signed(803287068, 32), to_signed(802193167, 32), to_signed(801097379, 32),
     to_signed(799999706, 32), to_signed(798900150, 32), to_signed(797798714, 32), to_signed(796695401, 32),
     to_signed(795590213, 32), to_signed(794483153, 32), to_signed(793374223, 32), to_signed(792263427, 32),
     to_signed(791150767, 32), to_signed(790036244, 32), to_signed(788919863, 32), to_signed(787801625, 32),
     to_signed(786681534, 32), to_signed(785559591, 32), to_signed(784435800, 32), to_signed(783310163, 32),
     to_signed(782182683, 32), to_signed(781053363, 32), to_signed(779922204, 32), to_signed(778789210, 32),
     to_signed(777654384, 32), to_signed(776517728, 32), to_signed(775379244, 32), to_signed(774238936, 32),
     to_signed(773096806, 32), to_signed(771952857, 32), to_signed(770807092, 32), to_signed(769659512, 32),
     to_signed(768510122, 32), to_signed(767358923, 32), to_signed(766205919, 32), to_signed(765051111, 32),
     to_signed(763894504, 32), to_signed(762736098, 32), to_signed(761575898, 32), to_signed(760413906, 32));  -- sfix32 [512]
  CONSTANT Twiddle_im_table_data          : vector_of_signed32(0 TO 511) := 
    (to_signed(0, 32), to_signed(-1647099, 32), to_signed(-3294193, 32), to_signed(-4941281, 32),
     to_signed(-6588356, 32), to_signed(-8235416, 32), to_signed(-9882456, 32), to_signed(-11529474, 32),
     to_signed(-13176464, 32), to_signed(-14823423, 32), to_signed(-16470347, 32), to_signed(-18117233, 32),
     to_signed(-19764076, 32), to_signed(-21410872, 32), to_signed(-23057618, 32), to_signed(-24704310, 32),
     to_signed(-26350943, 32), to_signed(-27997515, 32), to_signed(-29644021, 32), to_signed(-31290457, 32),
     to_signed(-32936819, 32), to_signed(-34583104, 32), to_signed(-36229307, 32), to_signed(-37875426, 32),
     to_signed(-39521455, 32), to_signed(-41167391, 32), to_signed(-42813230, 32), to_signed(-44458968, 32),
     to_signed(-46104602, 32), to_signed(-47750128, 32), to_signed(-49395541, 32), to_signed(-51040837, 32),
     to_signed(-52686014, 32), to_signed(-54331067, 32), to_signed(-55975992, 32), to_signed(-57620785, 32),
     to_signed(-59265442, 32), to_signed(-60909960, 32), to_signed(-62554335, 32), to_signed(-64198563, 32),
     to_signed(-65842639, 32), to_signed(-67486561, 32), to_signed(-69130324, 32), to_signed(-70773924, 32),
     to_signed(-72417357, 32), to_signed(-74060620, 32), to_signed(-75703709, 32), to_signed(-77346620, 32),
     to_signed(-78989349, 32), to_signed(-80631892, 32), to_signed(-82274245, 32), to_signed(-83916404, 32),
     to_signed(-85558366, 32), to_signed(-87200127, 32), to_signed(-88841683, 32), to_signed(-90483029, 32),
     to_signed(-92124163, 32), to_signed(-93765079, 32), to_signed(-95405776, 32), to_signed(-97046247, 32),
     to_signed(-98686491, 32), to_signed(-100326502, 32), to_signed(-101966277, 32), to_signed(-103605812, 32),
     to_signed(-105245103, 32), to_signed(-106884147, 32), to_signed(-108522939, 32), to_signed(-110161476, 32),
     to_signed(-111799753, 32), to_signed(-113437768, 32), to_signed(-115075515, 32), to_signed(-116712992, 32),
     to_signed(-118350194, 32), to_signed(-119987118, 32), to_signed(-121623759, 32), to_signed(-123260114, 32),
     to_signed(-124896179, 32), to_signed(-126531950, 32), to_signed(-128167423, 32), to_signed(-129802595, 32),
     to_signed(-131437462, 32), to_signed(-133072019, 32), to_signed(-134706263, 32), to_signed(-136340190, 32),
     to_signed(-137973796, 32), to_signed(-139607077, 32), to_signed(-141240030, 32), to_signed(-142872651, 32),
     to_signed(-144504935, 32), to_signed(-146136880, 32), to_signed(-147768480, 32), to_signed(-149399733, 32),
     to_signed(-151030634, 32), to_signed(-152661180, 32), to_signed(-154291367, 32), to_signed(-155921191, 32),
     to_signed(-157550647, 32), to_signed(-159179733, 32), to_signed(-160808445, 32), to_signed(-162436778, 32),
     to_signed(-164064728, 32), to_signed(-165692293, 32), to_signed(-167319468, 32), to_signed(-168946249, 32),
     to_signed(-170572633, 32), to_signed(-172198615, 32), to_signed(-173824192, 32), to_signed(-175449360, 32),
     to_signed(-177074115, 32), to_signed(-178698453, 32), to_signed(-180322371, 32), to_signed(-181945865, 32),
     to_signed(-183568930, 32), to_signed(-185191564, 32), to_signed(-186813762, 32), to_signed(-188435520, 32),
     to_signed(-190056834, 32), to_signed(-191677702, 32), to_signed(-193298119, 32), to_signed(-194918080, 32),
     to_signed(-196537583, 32), to_signed(-198156624, 32), to_signed(-199775198, 32), to_signed(-201393302, 32),
     to_signed(-203010932, 32), to_signed(-204628085, 32), to_signed(-206244756, 32), to_signed(-207860942, 32),
     to_signed(-209476638, 32), to_signed(-211091842, 32), to_signed(-212706549, 32), to_signed(-214320755, 32),
     to_signed(-215934457, 32), to_signed(-217547651, 32), to_signed(-219160334, 32), to_signed(-220772500, 32),
     to_signed(-222384147, 32), to_signed(-223995270, 32), to_signed(-225605867, 32), to_signed(-227215933, 32),
     to_signed(-228825464, 32), to_signed(-230434456, 32), to_signed(-232042906, 32), to_signed(-233650811, 32),
     to_signed(-235258165, 32), to_signed(-236864966, 32), to_signed(-238471210, 32), to_signed(-240076892, 32),
     to_signed(-241682010, 32), to_signed(-243286558, 32), to_signed(-244890535, 32), to_signed(-246493935, 32),
     to_signed(-248096755, 32), to_signed(-249698991, 32), to_signed(-251300640, 32), to_signed(-252901697, 32),
     to_signed(-254502159, 32), to_signed(-256102022, 32), to_signed(-257701283, 32), to_signed(-259299937, 32),
     to_signed(-260897982, 32), to_signed(-262495412, 32), to_signed(-264092224, 32), to_signed(-265688415, 32),
     to_signed(-267283981, 32), to_signed(-268878918, 32), to_signed(-270473223, 32), to_signed(-272066891, 32),
     to_signed(-273659918, 32), to_signed(-275252302, 32), to_signed(-276844038, 32), to_signed(-278435122, 32),
     to_signed(-280025552, 32), to_signed(-281615322, 32), to_signed(-283204430, 32), to_signed(-284792871, 32),
     to_signed(-286380643, 32), to_signed(-287967740, 32), to_signed(-289554160, 32), to_signed(-291139898, 32),
     to_signed(-292724951, 32), to_signed(-294309316, 32), to_signed(-295892988, 32), to_signed(-297475964, 32),
     to_signed(-299058239, 32), to_signed(-300639811, 32), to_signed(-302220676, 32), to_signed(-303800829, 32),
     to_signed(-305380268, 32), to_signed(-306958988, 32), to_signed(-308536985, 32), to_signed(-310114257, 32),
     to_signed(-311690799, 32), to_signed(-313266607, 32), to_signed(-314841679, 32), to_signed(-316416009, 32),
     to_signed(-317989595, 32), to_signed(-319562433, 32), to_signed(-321134518, 32), to_signed(-322705848, 32),
     to_signed(-324276419, 32), to_signed(-325846226, 32), to_signed(-327415267, 32), to_signed(-328983538, 32),
     to_signed(-330551034, 32), to_signed(-332117752, 32), to_signed(-333683689, 32), to_signed(-335248841, 32),
     to_signed(-336813204, 32), to_signed(-338376774, 32), to_signed(-339939549, 32), to_signed(-341501523, 32),
     to_signed(-343062693, 32), to_signed(-344623057, 32), to_signed(-346182609, 32), to_signed(-347741347, 32),
     to_signed(-349299266, 32), to_signed(-350856364, 32), to_signed(-352412636, 32), to_signed(-353968079, 32),
     to_signed(-355522689, 32), to_signed(-357076462, 32), to_signed(-358629395, 32), to_signed(-360181484, 32),
     to_signed(-361732726, 32), to_signed(-363283116, 32), to_signed(-364832652, 32), to_signed(-366381329, 32),
     to_signed(-367929144, 32), to_signed(-369476093, 32), to_signed(-371022173, 32), to_signed(-372567379, 32),
     to_signed(-374111709, 32), to_signed(-375655159, 32), to_signed(-377197725, 32), to_signed(-378739403, 32),
     to_signed(-380280190, 32), to_signed(-381820082, 32), to_signed(-383359076, 32), to_signed(-384897167, 32),
     to_signed(-386434353, 32), to_signed(-387970630, 32), to_signed(-389505993, 32), to_signed(-391040440, 32),
     to_signed(-392573967, 32), to_signed(-394106570, 32), to_signed(-395638246, 32), to_signed(-397168991, 32),
     to_signed(-398698801, 32), to_signed(-400227673, 32), to_signed(-401755603, 32), to_signed(-403282588, 32),
     to_signed(-404808624, 32), to_signed(-406333708, 32), to_signed(-407857835, 32), to_signed(-409381002, 32),
     to_signed(-410903207, 32), to_signed(-412424444, 32), to_signed(-413944711, 32), to_signed(-415464004, 32),
     to_signed(-416982319, 32), to_signed(-418499653, 32), to_signed(-420016002, 32), to_signed(-421531363, 32),
     to_signed(-423045732, 32), to_signed(-424559105, 32), to_signed(-426071480, 32), to_signed(-427582852, 32),
     to_signed(-429093217, 32), to_signed(-430602573, 32), to_signed(-432110916, 32), to_signed(-433618242, 32),
     to_signed(-435124548, 32), to_signed(-436629829, 32), to_signed(-438134084, 32), to_signed(-439637307, 32),
     to_signed(-441139496, 32), to_signed(-442640647, 32), to_signed(-444140756, 32), to_signed(-445639820, 32),
     to_signed(-447137835, 32), to_signed(-448634799, 32), to_signed(-450130706, 32), to_signed(-451625555, 32),
     to_signed(-453119340, 32), to_signed(-454612060, 32), to_signed(-456103710, 32), to_signed(-457594286, 32),
     to_signed(-459083786, 32), to_signed(-460572205, 32), to_signed(-462059541, 32), to_signed(-463545789, 32),
     to_signed(-465030947, 32), to_signed(-466515010, 32), to_signed(-467997976, 32), to_signed(-469479840, 32),
     to_signed(-470960600, 32), to_signed(-472440251, 32), to_signed(-473918791, 32), to_signed(-475396216, 32),
     to_signed(-476872522, 32), to_signed(-478347705, 32), to_signed(-479821764, 32), to_signed(-481294693, 32),
     to_signed(-482766489, 32), to_signed(-484237150, 32), to_signed(-485706671, 32), to_signed(-487175049, 32),
     to_signed(-488642281, 32), to_signed(-490108363, 32), to_signed(-491573292, 32), to_signed(-493037064, 32),
     to_signed(-494499676, 32), to_signed(-495961124, 32), to_signed(-497421405, 32), to_signed(-498880516, 32),
     to_signed(-500338453, 32), to_signed(-501795212, 32), to_signed(-503250791, 32), to_signed(-504705185, 32),
     to_signed(-506158392, 32), to_signed(-507610408, 32), to_signed(-509061229, 32), to_signed(-510510853, 32),
     to_signed(-511959275, 32), to_signed(-513406493, 32), to_signed(-514852502, 32), to_signed(-516297300, 32),
     to_signed(-517740883, 32), to_signed(-519183248, 32), to_signed(-520624391, 32), to_signed(-522064309, 32),
     to_signed(-523502998, 32), to_signed(-524940456, 32), to_signed(-526376678, 32), to_signed(-527811662, 32),
     to_signed(-529245404, 32), to_signed(-530677900, 32), to_signed(-532109148, 32), to_signed(-533539144, 32),
     to_signed(-534967884, 32), to_signed(-536395365, 32), to_signed(-537821584, 32), to_signed(-539246538, 32),
     to_signed(-540670223, 32), to_signed(-542092635, 32), to_signed(-543513772, 32), to_signed(-544933630, 32),
     to_signed(-546352205, 32), to_signed(-547769495, 32), to_signed(-549185496, 32), to_signed(-550600205, 32),
     to_signed(-552013618, 32), to_signed(-553425732, 32), to_signed(-554836544, 32), to_signed(-556246051, 32),
     to_signed(-557654248, 32), to_signed(-559061133, 32), to_signed(-560466703, 32), to_signed(-561870954, 32),
     to_signed(-563273883, 32), to_signed(-564675486, 32), to_signed(-566075761, 32), to_signed(-567474703, 32),
     to_signed(-568872310, 32), to_signed(-570268579, 32), to_signed(-571663506, 32), to_signed(-573057087, 32),
     to_signed(-574449320, 32), to_signed(-575840202, 32), to_signed(-577229728, 32), to_signed(-578617896, 32),
     to_signed(-580004702, 32), to_signed(-581390144, 32), to_signed(-582774218, 32), to_signed(-584156920, 32),
     to_signed(-585538248, 32), to_signed(-586918198, 32), to_signed(-588296766, 32), to_signed(-589673951, 32),
     to_signed(-591049748, 32), to_signed(-592424154, 32), to_signed(-593797166, 32), to_signed(-595168781, 32),
     to_signed(-596538995, 32), to_signed(-597907806, 32), to_signed(-599275210, 32), to_signed(-600641203, 32),
     to_signed(-602005783, 32), to_signed(-603368947, 32), to_signed(-604730691, 32), to_signed(-606091012, 32),
     to_signed(-607449906, 32), to_signed(-608807372, 32), to_signed(-610163404, 32), to_signed(-611518001, 32),
     to_signed(-612871159, 32), to_signed(-614222875, 32), to_signed(-615573145, 32), to_signed(-616921967, 32),
     to_signed(-618269338, 32), to_signed(-619615253, 32), to_signed(-620959711, 32), to_signed(-622302707, 32),
     to_signed(-623644239, 32), to_signed(-624984303, 32), to_signed(-626322897, 32), to_signed(-627660017, 32),
     to_signed(-628995660, 32), to_signed(-630329823, 32), to_signed(-631662503, 32), to_signed(-632993696, 32),
     to_signed(-634323400, 32), to_signed(-635651611, 32), to_signed(-636978327, 32), to_signed(-638303543, 32),
     to_signed(-639627258, 32), to_signed(-640949467, 32), to_signed(-642270169, 32), to_signed(-643589359, 32),
     to_signed(-644907034, 32), to_signed(-646223192, 32), to_signed(-647537830, 32), to_signed(-648850943, 32),
     to_signed(-650162530, 32), to_signed(-651472587, 32), to_signed(-652781111, 32), to_signed(-654088099, 32),
     to_signed(-655393548, 32), to_signed(-656697454, 32), to_signed(-657999816, 32), to_signed(-659300629, 32),
     to_signed(-660599890, 32), to_signed(-661897597, 32), to_signed(-663193747, 32), to_signed(-664488336, 32),
     to_signed(-665781362, 32), to_signed(-667072820, 32), to_signed(-668362709, 32), to_signed(-669651026, 32),
     to_signed(-670937767, 32), to_signed(-672222928, 32), to_signed(-673506508, 32), to_signed(-674788504, 32),
     to_signed(-676068911, 32), to_signed(-677347728, 32), to_signed(-678624950, 32), to_signed(-679900576, 32),
     to_signed(-681174602, 32), to_signed(-682447025, 32), to_signed(-683717842, 32), to_signed(-684987051, 32),
     to_signed(-686254647, 32), to_signed(-687520629, 32), to_signed(-688784993, 32), to_signed(-690047736, 32),
     to_signed(-691308855, 32), to_signed(-692568348, 32), to_signed(-693826211, 32), to_signed(-695082441, 32),
     to_signed(-696337036, 32), to_signed(-697589992, 32), to_signed(-698841307, 32), to_signed(-700090977, 32),
     to_signed(-701339000, 32), to_signed(-702585372, 32), to_signed(-703830092, 32), to_signed(-705073155, 32),
     to_signed(-706314559, 32), to_signed(-707554301, 32), to_signed(-708792378, 32), to_signed(-710028787, 32),
     to_signed(-711263525, 32), to_signed(-712496590, 32), to_signed(-713727978, 32), to_signed(-714957687, 32),
     to_signed(-716185713, 32), to_signed(-717412054, 32), to_signed(-718636707, 32), to_signed(-719859669, 32),
     to_signed(-721080937, 32), to_signed(-722300508, 32), to_signed(-723518380, 32), to_signed(-724734549, 32),
     to_signed(-725949013, 32), to_signed(-727161768, 32), to_signed(-728372813, 32), to_signed(-729582143, 32),
     to_signed(-730789757, 32), to_signed(-731995651, 32), to_signed(-733199822, 32), to_signed(-734402269, 32),
     to_signed(-735602987, 32), to_signed(-736801974, 32), to_signed(-737999228, 32), to_signed(-739194745, 32),
     to_signed(-740388522, 32), to_signed(-741580558, 32), to_signed(-742770848, 32), to_signed(-743959390, 32),
     to_signed(-745146182, 32), to_signed(-746331221, 32), to_signed(-747514503, 32), to_signed(-748696026, 32),
     to_signed(-749875788, 32), to_signed(-751053785, 32), to_signed(-752230015, 32), to_signed(-753404474, 32),
     to_signed(-754577161, 32), to_signed(-755748072, 32), to_signed(-756917205, 32), to_signed(-758084557, 32));  -- sfix32 [512]

  -- Signals
  SIGNAL Radix22TwdlMapping_cnt           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Radix22TwdlMapping_phase         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw  : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Radix22TwdlMapping_twdlAddrMap   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdl45Reg     : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1      : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2      : std_logic;
  SIGNAL Radix22TwdlMapping_holdCycleCnt  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Radix22TwdlMapping_phaseCnt      : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Radix22TwdlMapping_cnt_next      : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Radix22TwdlMapping_phase_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1_next : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw_next : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Radix22TwdlMapping_twdlAddrMap_next : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdl45Reg_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2_next : std_logic;
  SIGNAL Radix22TwdlMapping_holdCycleCnt_next : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Radix22TwdlMapping_phaseCnt_next : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL twdlAddr                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL twdlAddrVld                      : std_logic;
  SIGNAL twdlOctant                       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45                           : std_logic;
  SIGNAL twiddleS_re                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twiddleReg_re                    : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twiddleS_im                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twiddleReg_im                    : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twdlOctantReg                    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45Reg                        : std_logic;

BEGIN
  -- Radix22TwdlMapping
  Radix22TwdlMapping_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22TwdlMapping_octantReg1 <= to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdlAddr_raw <= to_unsigned(16#000#, 12);
        Radix22TwdlMapping_twdlAddrMap <= to_unsigned(16#000#, 9);
        Radix22TwdlMapping_twdl45Reg <= '0';
        Radix22TwdlMapping_dvldReg1 <= '0';
        Radix22TwdlMapping_dvldReg2 <= '0';
        Radix22TwdlMapping_cnt <= to_unsigned(16#00#, 6);
        Radix22TwdlMapping_holdCycleCnt <= to_unsigned(16#00#, 6);
        Radix22TwdlMapping_phase <= to_unsigned(16#0#, 2);
        Radix22TwdlMapping_phaseCnt <= to_unsigned(16#0#, 4);
      ELSIF enb = '1' THEN
        Radix22TwdlMapping_cnt <= Radix22TwdlMapping_cnt_next;
        Radix22TwdlMapping_phase <= Radix22TwdlMapping_phase_next;
        Radix22TwdlMapping_octantReg1 <= Radix22TwdlMapping_octantReg1_next;
        Radix22TwdlMapping_twdlAddr_raw <= Radix22TwdlMapping_twdlAddr_raw_next;
        Radix22TwdlMapping_twdlAddrMap <= Radix22TwdlMapping_twdlAddrMap_next;
        Radix22TwdlMapping_twdl45Reg <= Radix22TwdlMapping_twdl45Reg_next;
        Radix22TwdlMapping_dvldReg1 <= Radix22TwdlMapping_dvldReg1_next;
        Radix22TwdlMapping_dvldReg2 <= Radix22TwdlMapping_dvldReg2_next;
        Radix22TwdlMapping_holdCycleCnt <= Radix22TwdlMapping_holdCycleCnt_next;
        Radix22TwdlMapping_phaseCnt <= Radix22TwdlMapping_phaseCnt_next;
      END IF;
    END IF;
  END PROCESS Radix22TwdlMapping_process;

  Radix22TwdlMapping_output : PROCESS (Radix22TwdlMapping_cnt, Radix22TwdlMapping_dvldReg1,
       Radix22TwdlMapping_dvldReg2, Radix22TwdlMapping_holdCycleCnt,
       Radix22TwdlMapping_octantReg1, Radix22TwdlMapping_phase,
       Radix22TwdlMapping_phaseCnt, Radix22TwdlMapping_twdl45Reg,
       Radix22TwdlMapping_twdlAddrMap, Radix22TwdlMapping_twdlAddr_raw,
       dout_6_1_vld)
    VARIABLE octant : unsigned(2 DOWNTO 0);
    VARIABLE cnt_bitReverse : unsigned(9 DOWNTO 0);
    VARIABLE addr_cast : unsigned(11 DOWNTO 0);
    VARIABLE c : unsigned(9 DOWNTO 0);
    VARIABLE sub_temp : signed(25 DOWNTO 0);
    VARIABLE sub_temp_0 : signed(13 DOWNTO 0);
    VARIABLE sub_temp_1 : signed(13 DOWNTO 0);
    VARIABLE sub_temp_2 : signed(25 DOWNTO 0);
    VARIABLE sub_temp_3 : signed(25 DOWNTO 0);
  BEGIN
    sub_temp := to_signed(16#0000000#, 26);
    sub_temp_0 := to_signed(16#0000#, 14);
    sub_temp_1 := to_signed(16#0000#, 14);
    sub_temp_2 := to_signed(16#0000000#, 26);
    sub_temp_3 := to_signed(16#0000000#, 26);
    addr_cast := to_unsigned(16#000#, 12);
    Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt;
    Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase;
    Radix22TwdlMapping_holdCycleCnt_next <= Radix22TwdlMapping_holdCycleCnt;
    Radix22TwdlMapping_phaseCnt_next <= Radix22TwdlMapping_phaseCnt;
    Radix22TwdlMapping_dvldReg2_next <= Radix22TwdlMapping_dvldReg1;
    Radix22TwdlMapping_dvldReg1_next <= dout_6_1_vld;
    CASE Radix22TwdlMapping_twdlAddr_raw IS
      WHEN "001000000000" =>
        octant := to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "010000000000" =>
        octant := to_unsigned(16#1#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "011000000000" =>
        octant := to_unsigned(16#2#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "100000000000" =>
        octant := to_unsigned(16#3#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "101000000000" =>
        octant := to_unsigned(16#4#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN OTHERS => 
        octant := Radix22TwdlMapping_twdlAddr_raw(11 DOWNTO 9);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
    END CASE;
    Radix22TwdlMapping_octantReg1_next <= octant;
    CASE octant IS
      WHEN "000" =>
        Radix22TwdlMapping_twdlAddrMap_next <= Radix22TwdlMapping_twdlAddr_raw(8 DOWNTO 0);
      WHEN "001" =>
        sub_temp_0 := to_signed(16#0400#, 14) - signed(resize(Radix22TwdlMapping_twdlAddr_raw, 14));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_0(8 DOWNTO 0));
      WHEN "010" =>
        sub_temp_1 := signed(resize(Radix22TwdlMapping_twdlAddr_raw, 14)) - to_signed(16#0400#, 14);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_1(8 DOWNTO 0));
      WHEN "011" =>
        sub_temp_2 := to_signed(16#0100000#, 26) - signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_2(17 DOWNTO 9));
      WHEN "100" =>
        sub_temp_3 := signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26)) - to_signed(16#0100000#, 26);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_3(17 DOWNTO 9));
      WHEN OTHERS => 
        sub_temp := to_signed(16#0180000#, 26) - signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp(17 DOWNTO 9));
    END CASE;
    cnt_bitReverse := resize(unsigned'(Radix22TwdlMapping_cnt(0) & Radix22TwdlMapping_cnt(1) & Radix22TwdlMapping_cnt(2) & Radix22TwdlMapping_cnt(3) & Radix22TwdlMapping_cnt(4) & Radix22TwdlMapping_cnt(5)), 10);
    c := cnt_bitReverse sll 4;
    IF Radix22TwdlMapping_phase = to_unsigned(16#0#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= to_unsigned(16#000#, 12);
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#1#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(cnt_bitReverse sll 4, 12);
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#2#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(c, 12) sll 1;
    ELSE 
      addr_cast := resize(c, 12);
      Radix22TwdlMapping_twdlAddr_raw_next <= (addr_cast sll 1) + addr_cast;
    END IF;
    IF dout_6_1_vld = '1' AND (Radix22TwdlMapping_phaseCnt = to_unsigned(16#F#, 4)) THEN 
      Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase + to_unsigned(16#1#, 2);
    END IF;
    IF dout_6_1_vld = '1' THEN 
      IF Radix22TwdlMapping_holdCycleCnt = to_unsigned(16#3F#, 6) THEN 
        Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt + to_unsigned(16#01#, 6);
      END IF;
      Radix22TwdlMapping_holdCycleCnt_next <= Radix22TwdlMapping_holdCycleCnt + to_unsigned(16#01#, 6);
      IF Radix22TwdlMapping_phaseCnt = to_unsigned(16#F#, 4) THEN 
        Radix22TwdlMapping_phaseCnt_next <= to_unsigned(16#0#, 4);
      ELSE 
        Radix22TwdlMapping_phaseCnt_next <= Radix22TwdlMapping_phaseCnt + to_unsigned(16#1#, 4);
      END IF;
    END IF;
    twdlAddr <= Radix22TwdlMapping_twdlAddrMap;
    twdlAddrVld <= Radix22TwdlMapping_dvldReg2;
    twdlOctant <= Radix22TwdlMapping_octantReg1;
    twdl45 <= Radix22TwdlMapping_twdl45Reg;
  END PROCESS Radix22TwdlMapping_output;


  -- Twiddle ROM1
  twiddleS_re <= Twiddle_re_table_data(to_integer(twdlAddr));

  TWIDDLEROM_RE_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twiddleReg_re <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        twiddleReg_re <= twiddleS_re;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_RE_process;


  -- Twiddle ROM2
  twiddleS_im <= Twiddle_im_table_data(to_integer(twdlAddr));

  TWIDDLEROM_IM_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twiddleReg_im <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        twiddleReg_im <= twiddleS_im;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_IM_process;


  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdlOctantReg <= to_unsigned(16#0#, 3);
      ELSIF enb = '1' THEN
        twdlOctantReg <= twdlOctant;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl45Reg <= '0';
      ELSIF enb = '1' THEN
        twdl45Reg <= twdl45;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  -- Radix22TwdlOctCorr
  Radix22TwdlOctCorr_output : PROCESS (twdl45Reg, twdlOctantReg, twiddleReg_im, twiddleReg_re)
    VARIABLE twdlIn_re : signed(31 DOWNTO 0);
    VARIABLE twdlIn_im : signed(31 DOWNTO 0);
    VARIABLE cast : signed(32 DOWNTO 0);
    VARIABLE cast_0 : signed(32 DOWNTO 0);
    VARIABLE cast_1 : signed(32 DOWNTO 0);
    VARIABLE cast_2 : signed(32 DOWNTO 0);
    VARIABLE cast_3 : signed(32 DOWNTO 0);
    VARIABLE cast_4 : signed(32 DOWNTO 0);
  BEGIN
    cast := to_signed(0, 33);
    cast_0 := to_signed(0, 33);
    cast_1 := to_signed(0, 33);
    cast_2 := to_signed(0, 33);
    cast_3 := to_signed(0, 33);
    cast_4 := to_signed(0, 33);
    twdlIn_re := twiddleReg_re;
    twdlIn_im := twiddleReg_im;
    IF twdl45Reg = '1' THEN 
      CASE twdlOctantReg IS
        WHEN "000" =>
          twdlIn_re := to_signed(759250125, 32);
          twdlIn_im := to_signed(-759250125, 32);
        WHEN "010" =>
          twdlIn_re := to_signed(-759250125, 32);
          twdlIn_im := to_signed(-759250125, 32);
        WHEN "100" =>
          twdlIn_re := to_signed(-759250125, 32);
          twdlIn_im := to_signed(759250125, 32);
        WHEN OTHERS => 
          twdlIn_re := to_signed(759250125, 32);
          twdlIn_im := to_signed(-759250125, 32);
      END CASE;
    ELSE 
      CASE twdlOctantReg IS
        WHEN "000" =>
          NULL;
        WHEN "001" =>
          cast :=  - (resize(twiddleReg_im, 33));
          twdlIn_re := cast(31 DOWNTO 0);
          cast_2 :=  - (resize(twiddleReg_re, 33));
          twdlIn_im := cast_2(31 DOWNTO 0);
        WHEN "010" =>
          twdlIn_re := twiddleReg_im;
          cast_3 :=  - (resize(twiddleReg_re, 33));
          twdlIn_im := cast_3(31 DOWNTO 0);
        WHEN "011" =>
          cast_0 :=  - (resize(twiddleReg_re, 33));
          twdlIn_re := cast_0(31 DOWNTO 0);
          twdlIn_im := twiddleReg_im;
        WHEN "100" =>
          cast_1 :=  - (resize(twiddleReg_re, 33));
          twdlIn_re := cast_1(31 DOWNTO 0);
          cast_4 :=  - (resize(twiddleReg_im, 33));
          twdlIn_im := cast_4(31 DOWNTO 0);
        WHEN OTHERS => 
          twdlIn_re := twiddleReg_im;
          twdlIn_im := twiddleReg_re;
      END CASE;
    END IF;
    twdl_7_1_re <= twdlIn_re;
    twdl_7_1_im <= twdlIn_im;
  END PROCESS Radix22TwdlOctCorr_output;


END rtl;


-- End of TWDLROM_7_1_block1.vhd --

-- Start of TWDLROM_9_1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\TWDLROM_9_1.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: TWDLROM_9_1
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/TWDLROM_9_1
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY TWDLROM_9_1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_8_1_vld                      :   IN    std_logic;
        twdl_9_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16_En14
        twdl_9_1_im                       :   OUT   signed(15 DOWNTO 0)  -- sfix16_En14
        );
END TWDLROM_9_1;


ARCHITECTURE rtl OF TWDLROM_9_1 IS

  -- Constants
  CONSTANT Twiddle_re_table_data          : vector_of_signed16(0 TO 511) := 
    (to_signed(16#4000#, 16), to_signed(16#4000#, 16), to_signed(16#4000#, 16), to_signed(16#4000#, 16),
     to_signed(16#4000#, 16), to_signed(16#4000#, 16), to_signed(16#3FFF#, 16), to_signed(16#3FFF#, 16),
     to_signed(16#3FFF#, 16), to_signed(16#3FFE#, 16), to_signed(16#3FFE#, 16), to_signed(16#3FFE#, 16),
     to_signed(16#3FFD#, 16), to_signed(16#3FFD#, 16), to_signed(16#3FFC#, 16), to_signed(16#3FFC#, 16),
     to_signed(16#3FFB#, 16), to_signed(16#3FFA#, 16), to_signed(16#3FFA#, 16), to_signed(16#3FF9#, 16),
     to_signed(16#3FF8#, 16), to_signed(16#3FF7#, 16), to_signed(16#3FF7#, 16), to_signed(16#3FF6#, 16),
     to_signed(16#3FF5#, 16), to_signed(16#3FF4#, 16), to_signed(16#3FF3#, 16), to_signed(16#3FF2#, 16),
     to_signed(16#3FF1#, 16), to_signed(16#3FF0#, 16), to_signed(16#3FEF#, 16), to_signed(16#3FED#, 16),
     to_signed(16#3FEC#, 16), to_signed(16#3FEB#, 16), to_signed(16#3FEA#, 16), to_signed(16#3FE8#, 16),
     to_signed(16#3FE7#, 16), to_signed(16#3FE6#, 16), to_signed(16#3FE4#, 16), to_signed(16#3FE3#, 16),
     to_signed(16#3FE1#, 16), to_signed(16#3FE0#, 16), to_signed(16#3FDE#, 16), to_signed(16#3FDC#, 16),
     to_signed(16#3FDB#, 16), to_signed(16#3FD9#, 16), to_signed(16#3FD7#, 16), to_signed(16#3FD5#, 16),
     to_signed(16#3FD4#, 16), to_signed(16#3FD2#, 16), to_signed(16#3FD0#, 16), to_signed(16#3FCE#, 16),
     to_signed(16#3FCC#, 16), to_signed(16#3FCA#, 16), to_signed(16#3FC8#, 16), to_signed(16#3FC6#, 16),
     to_signed(16#3FC4#, 16), to_signed(16#3FC1#, 16), to_signed(16#3FBF#, 16), to_signed(16#3FBD#, 16),
     to_signed(16#3FBB#, 16), to_signed(16#3FB8#, 16), to_signed(16#3FB6#, 16), to_signed(16#3FB4#, 16),
     to_signed(16#3FB1#, 16), to_signed(16#3FAF#, 16), to_signed(16#3FAC#, 16), to_signed(16#3FAA#, 16),
     to_signed(16#3FA7#, 16), to_signed(16#3FA4#, 16), to_signed(16#3FA2#, 16), to_signed(16#3F9F#, 16),
     to_signed(16#3F9C#, 16), to_signed(16#3F99#, 16), to_signed(16#3F97#, 16), to_signed(16#3F94#, 16),
     to_signed(16#3F91#, 16), to_signed(16#3F8E#, 16), to_signed(16#3F8B#, 16), to_signed(16#3F88#, 16),
     to_signed(16#3F85#, 16), to_signed(16#3F82#, 16), to_signed(16#3F7F#, 16), to_signed(16#3F7B#, 16),
     to_signed(16#3F78#, 16), to_signed(16#3F75#, 16), to_signed(16#3F72#, 16), to_signed(16#3F6E#, 16),
     to_signed(16#3F6B#, 16), to_signed(16#3F68#, 16), to_signed(16#3F64#, 16), to_signed(16#3F61#, 16),
     to_signed(16#3F5D#, 16), to_signed(16#3F5A#, 16), to_signed(16#3F56#, 16), to_signed(16#3F52#, 16),
     to_signed(16#3F4F#, 16), to_signed(16#3F4B#, 16), to_signed(16#3F47#, 16), to_signed(16#3F43#, 16),
     to_signed(16#3F40#, 16), to_signed(16#3F3C#, 16), to_signed(16#3F38#, 16), to_signed(16#3F34#, 16),
     to_signed(16#3F30#, 16), to_signed(16#3F2C#, 16), to_signed(16#3F28#, 16), to_signed(16#3F24#, 16),
     to_signed(16#3F20#, 16), to_signed(16#3F1C#, 16), to_signed(16#3F17#, 16), to_signed(16#3F13#, 16),
     to_signed(16#3F0F#, 16), to_signed(16#3F0A#, 16), to_signed(16#3F06#, 16), to_signed(16#3F02#, 16),
     to_signed(16#3EFD#, 16), to_signed(16#3EF9#, 16), to_signed(16#3EF4#, 16), to_signed(16#3EF0#, 16),
     to_signed(16#3EEB#, 16), to_signed(16#3EE7#, 16), to_signed(16#3EE2#, 16), to_signed(16#3EDD#, 16),
     to_signed(16#3ED8#, 16), to_signed(16#3ED4#, 16), to_signed(16#3ECF#, 16), to_signed(16#3ECA#, 16),
     to_signed(16#3EC5#, 16), to_signed(16#3EC0#, 16), to_signed(16#3EBB#, 16), to_signed(16#3EB6#, 16),
     to_signed(16#3EB1#, 16), to_signed(16#3EAC#, 16), to_signed(16#3EA7#, 16), to_signed(16#3EA2#, 16),
     to_signed(16#3E9D#, 16), to_signed(16#3E98#, 16), to_signed(16#3E92#, 16), to_signed(16#3E8D#, 16),
     to_signed(16#3E88#, 16), to_signed(16#3E82#, 16), to_signed(16#3E7D#, 16), to_signed(16#3E77#, 16),
     to_signed(16#3E72#, 16), to_signed(16#3E6C#, 16), to_signed(16#3E67#, 16), to_signed(16#3E61#, 16),
     to_signed(16#3E5C#, 16), to_signed(16#3E56#, 16), to_signed(16#3E50#, 16), to_signed(16#3E4A#, 16),
     to_signed(16#3E45#, 16), to_signed(16#3E3F#, 16), to_signed(16#3E39#, 16), to_signed(16#3E33#, 16),
     to_signed(16#3E2D#, 16), to_signed(16#3E27#, 16), to_signed(16#3E21#, 16), to_signed(16#3E1B#, 16),
     to_signed(16#3E15#, 16), to_signed(16#3E0F#, 16), to_signed(16#3E09#, 16), to_signed(16#3E03#, 16),
     to_signed(16#3DFC#, 16), to_signed(16#3DF6#, 16), to_signed(16#3DF0#, 16), to_signed(16#3DE9#, 16),
     to_signed(16#3DE3#, 16), to_signed(16#3DDD#, 16), to_signed(16#3DD6#, 16), to_signed(16#3DD0#, 16),
     to_signed(16#3DC9#, 16), to_signed(16#3DC2#, 16), to_signed(16#3DBC#, 16), to_signed(16#3DB5#, 16),
     to_signed(16#3DAF#, 16), to_signed(16#3DA8#, 16), to_signed(16#3DA1#, 16), to_signed(16#3D9A#, 16),
     to_signed(16#3D93#, 16), to_signed(16#3D8D#, 16), to_signed(16#3D86#, 16), to_signed(16#3D7F#, 16),
     to_signed(16#3D78#, 16), to_signed(16#3D71#, 16), to_signed(16#3D6A#, 16), to_signed(16#3D63#, 16),
     to_signed(16#3D5B#, 16), to_signed(16#3D54#, 16), to_signed(16#3D4D#, 16), to_signed(16#3D46#, 16),
     to_signed(16#3D3F#, 16), to_signed(16#3D37#, 16), to_signed(16#3D30#, 16), to_signed(16#3D28#, 16),
     to_signed(16#3D21#, 16), to_signed(16#3D1A#, 16), to_signed(16#3D12#, 16), to_signed(16#3D0B#, 16),
     to_signed(16#3D03#, 16), to_signed(16#3CFB#, 16), to_signed(16#3CF4#, 16), to_signed(16#3CEC#, 16),
     to_signed(16#3CE4#, 16), to_signed(16#3CDD#, 16), to_signed(16#3CD5#, 16), to_signed(16#3CCD#, 16),
     to_signed(16#3CC5#, 16), to_signed(16#3CBD#, 16), to_signed(16#3CB5#, 16), to_signed(16#3CAD#, 16),
     to_signed(16#3CA5#, 16), to_signed(16#3C9D#, 16), to_signed(16#3C95#, 16), to_signed(16#3C8D#, 16),
     to_signed(16#3C85#, 16), to_signed(16#3C7D#, 16), to_signed(16#3C74#, 16), to_signed(16#3C6C#, 16),
     to_signed(16#3C64#, 16), to_signed(16#3C5B#, 16), to_signed(16#3C53#, 16), to_signed(16#3C4B#, 16),
     to_signed(16#3C42#, 16), to_signed(16#3C3A#, 16), to_signed(16#3C31#, 16), to_signed(16#3C29#, 16),
     to_signed(16#3C20#, 16), to_signed(16#3C17#, 16), to_signed(16#3C0F#, 16), to_signed(16#3C06#, 16),
     to_signed(16#3BFD#, 16), to_signed(16#3BF5#, 16), to_signed(16#3BEC#, 16), to_signed(16#3BE3#, 16),
     to_signed(16#3BDA#, 16), to_signed(16#3BD1#, 16), to_signed(16#3BC8#, 16), to_signed(16#3BBF#, 16),
     to_signed(16#3BB6#, 16), to_signed(16#3BAD#, 16), to_signed(16#3BA4#, 16), to_signed(16#3B9B#, 16),
     to_signed(16#3B92#, 16), to_signed(16#3B88#, 16), to_signed(16#3B7F#, 16), to_signed(16#3B76#, 16),
     to_signed(16#3B6D#, 16), to_signed(16#3B63#, 16), to_signed(16#3B5A#, 16), to_signed(16#3B50#, 16),
     to_signed(16#3B47#, 16), to_signed(16#3B3E#, 16), to_signed(16#3B34#, 16), to_signed(16#3B2A#, 16),
     to_signed(16#3B21#, 16), to_signed(16#3B17#, 16), to_signed(16#3B0E#, 16), to_signed(16#3B04#, 16),
     to_signed(16#3AFA#, 16), to_signed(16#3AF0#, 16), to_signed(16#3AE6#, 16), to_signed(16#3ADD#, 16),
     to_signed(16#3AD3#, 16), to_signed(16#3AC9#, 16), to_signed(16#3ABF#, 16), to_signed(16#3AB5#, 16),
     to_signed(16#3AAB#, 16), to_signed(16#3AA1#, 16), to_signed(16#3A97#, 16), to_signed(16#3A8D#, 16),
     to_signed(16#3A82#, 16), to_signed(16#3A78#, 16), to_signed(16#3A6E#, 16), to_signed(16#3A64#, 16),
     to_signed(16#3A59#, 16), to_signed(16#3A4F#, 16), to_signed(16#3A45#, 16), to_signed(16#3A3A#, 16),
     to_signed(16#3A30#, 16), to_signed(16#3A25#, 16), to_signed(16#3A1B#, 16), to_signed(16#3A10#, 16),
     to_signed(16#3A06#, 16), to_signed(16#39FB#, 16), to_signed(16#39F0#, 16), to_signed(16#39E6#, 16),
     to_signed(16#39DB#, 16), to_signed(16#39D0#, 16), to_signed(16#39C5#, 16), to_signed(16#39BB#, 16),
     to_signed(16#39B0#, 16), to_signed(16#39A5#, 16), to_signed(16#399A#, 16), to_signed(16#398F#, 16),
     to_signed(16#3984#, 16), to_signed(16#3979#, 16), to_signed(16#396E#, 16), to_signed(16#3963#, 16),
     to_signed(16#3958#, 16), to_signed(16#394C#, 16), to_signed(16#3941#, 16), to_signed(16#3936#, 16),
     to_signed(16#392B#, 16), to_signed(16#391F#, 16), to_signed(16#3914#, 16), to_signed(16#3909#, 16),
     to_signed(16#38FD#, 16), to_signed(16#38F2#, 16), to_signed(16#38E6#, 16), to_signed(16#38DB#, 16),
     to_signed(16#38CF#, 16), to_signed(16#38C3#, 16), to_signed(16#38B8#, 16), to_signed(16#38AC#, 16),
     to_signed(16#38A1#, 16), to_signed(16#3895#, 16), to_signed(16#3889#, 16), to_signed(16#387D#, 16),
     to_signed(16#3871#, 16), to_signed(16#3866#, 16), to_signed(16#385A#, 16), to_signed(16#384E#, 16),
     to_signed(16#3842#, 16), to_signed(16#3836#, 16), to_signed(16#382A#, 16), to_signed(16#381E#, 16),
     to_signed(16#3812#, 16), to_signed(16#3805#, 16), to_signed(16#37F9#, 16), to_signed(16#37ED#, 16),
     to_signed(16#37E1#, 16), to_signed(16#37D5#, 16), to_signed(16#37C8#, 16), to_signed(16#37BC#, 16),
     to_signed(16#37B0#, 16), to_signed(16#37A3#, 16), to_signed(16#3797#, 16), to_signed(16#378A#, 16),
     to_signed(16#377E#, 16), to_signed(16#3771#, 16), to_signed(16#3765#, 16), to_signed(16#3758#, 16),
     to_signed(16#374B#, 16), to_signed(16#373F#, 16), to_signed(16#3732#, 16), to_signed(16#3725#, 16),
     to_signed(16#3718#, 16), to_signed(16#370C#, 16), to_signed(16#36FF#, 16), to_signed(16#36F2#, 16),
     to_signed(16#36E5#, 16), to_signed(16#36D8#, 16), to_signed(16#36CB#, 16), to_signed(16#36BE#, 16),
     to_signed(16#36B1#, 16), to_signed(16#36A4#, 16), to_signed(16#3697#, 16), to_signed(16#368A#, 16),
     to_signed(16#367D#, 16), to_signed(16#366F#, 16), to_signed(16#3662#, 16), to_signed(16#3655#, 16),
     to_signed(16#3648#, 16), to_signed(16#363A#, 16), to_signed(16#362D#, 16), to_signed(16#3620#, 16),
     to_signed(16#3612#, 16), to_signed(16#3605#, 16), to_signed(16#35F7#, 16), to_signed(16#35EA#, 16),
     to_signed(16#35DC#, 16), to_signed(16#35CE#, 16), to_signed(16#35C1#, 16), to_signed(16#35B3#, 16),
     to_signed(16#35A5#, 16), to_signed(16#3598#, 16), to_signed(16#358A#, 16), to_signed(16#357C#, 16),
     to_signed(16#356E#, 16), to_signed(16#3561#, 16), to_signed(16#3553#, 16), to_signed(16#3545#, 16),
     to_signed(16#3537#, 16), to_signed(16#3529#, 16), to_signed(16#351B#, 16), to_signed(16#350D#, 16),
     to_signed(16#34FF#, 16), to_signed(16#34F1#, 16), to_signed(16#34E2#, 16), to_signed(16#34D4#, 16),
     to_signed(16#34C6#, 16), to_signed(16#34B8#, 16), to_signed(16#34AA#, 16), to_signed(16#349B#, 16),
     to_signed(16#348D#, 16), to_signed(16#347F#, 16), to_signed(16#3470#, 16), to_signed(16#3462#, 16),
     to_signed(16#3453#, 16), to_signed(16#3445#, 16), to_signed(16#3436#, 16), to_signed(16#3428#, 16),
     to_signed(16#3419#, 16), to_signed(16#340B#, 16), to_signed(16#33FC#, 16), to_signed(16#33ED#, 16),
     to_signed(16#33DF#, 16), to_signed(16#33D0#, 16), to_signed(16#33C1#, 16), to_signed(16#33B2#, 16),
     to_signed(16#33A3#, 16), to_signed(16#3395#, 16), to_signed(16#3386#, 16), to_signed(16#3377#, 16),
     to_signed(16#3368#, 16), to_signed(16#3359#, 16), to_signed(16#334A#, 16), to_signed(16#333B#, 16),
     to_signed(16#332C#, 16), to_signed(16#331D#, 16), to_signed(16#330D#, 16), to_signed(16#32FE#, 16),
     to_signed(16#32EF#, 16), to_signed(16#32E0#, 16), to_signed(16#32D0#, 16), to_signed(16#32C1#, 16),
     to_signed(16#32B2#, 16), to_signed(16#32A3#, 16), to_signed(16#3293#, 16), to_signed(16#3284#, 16),
     to_signed(16#3274#, 16), to_signed(16#3265#, 16), to_signed(16#3255#, 16), to_signed(16#3246#, 16),
     to_signed(16#3236#, 16), to_signed(16#3227#, 16), to_signed(16#3217#, 16), to_signed(16#3207#, 16),
     to_signed(16#31F8#, 16), to_signed(16#31E8#, 16), to_signed(16#31D8#, 16), to_signed(16#31C8#, 16),
     to_signed(16#31B9#, 16), to_signed(16#31A9#, 16), to_signed(16#3199#, 16), to_signed(16#3189#, 16),
     to_signed(16#3179#, 16), to_signed(16#3169#, 16), to_signed(16#3159#, 16), to_signed(16#3149#, 16),
     to_signed(16#3139#, 16), to_signed(16#3129#, 16), to_signed(16#3119#, 16), to_signed(16#3109#, 16),
     to_signed(16#30F9#, 16), to_signed(16#30E8#, 16), to_signed(16#30D8#, 16), to_signed(16#30C8#, 16),
     to_signed(16#30B8#, 16), to_signed(16#30A7#, 16), to_signed(16#3097#, 16), to_signed(16#3087#, 16),
     to_signed(16#3076#, 16), to_signed(16#3066#, 16), to_signed(16#3055#, 16), to_signed(16#3045#, 16),
     to_signed(16#3034#, 16), to_signed(16#3024#, 16), to_signed(16#3013#, 16), to_signed(16#3002#, 16),
     to_signed(16#2FF2#, 16), to_signed(16#2FE1#, 16), to_signed(16#2FD0#, 16), to_signed(16#2FC0#, 16),
     to_signed(16#2FAF#, 16), to_signed(16#2F9E#, 16), to_signed(16#2F8D#, 16), to_signed(16#2F7D#, 16),
     to_signed(16#2F6C#, 16), to_signed(16#2F5B#, 16), to_signed(16#2F4A#, 16), to_signed(16#2F39#, 16),
     to_signed(16#2F28#, 16), to_signed(16#2F17#, 16), to_signed(16#2F06#, 16), to_signed(16#2EF5#, 16),
     to_signed(16#2EE4#, 16), to_signed(16#2ED3#, 16), to_signed(16#2EC2#, 16), to_signed(16#2EB0#, 16),
     to_signed(16#2E9F#, 16), to_signed(16#2E8E#, 16), to_signed(16#2E7D#, 16), to_signed(16#2E6B#, 16),
     to_signed(16#2E5A#, 16), to_signed(16#2E49#, 16), to_signed(16#2E37#, 16), to_signed(16#2E26#, 16),
     to_signed(16#2E15#, 16), to_signed(16#2E03#, 16), to_signed(16#2DF2#, 16), to_signed(16#2DE0#, 16),
     to_signed(16#2DCF#, 16), to_signed(16#2DBD#, 16), to_signed(16#2DAB#, 16), to_signed(16#2D9A#, 16),
     to_signed(16#2D88#, 16), to_signed(16#2D76#, 16), to_signed(16#2D65#, 16), to_signed(16#2D53#, 16));  -- sfix16 [512]
  CONSTANT Twiddle_im_table_data          : vector_of_signed16(0 TO 511) := 
    (to_signed(16#0000#, 16), to_signed(-16#0019#, 16), to_signed(-16#0032#, 16), to_signed(-16#004B#, 16),
     to_signed(-16#0065#, 16), to_signed(-16#007E#, 16), to_signed(-16#0097#, 16), to_signed(-16#00B0#, 16),
     to_signed(-16#00C9#, 16), to_signed(-16#00E2#, 16), to_signed(-16#00FB#, 16), to_signed(-16#0114#, 16),
     to_signed(-16#012E#, 16), to_signed(-16#0147#, 16), to_signed(-16#0160#, 16), to_signed(-16#0179#, 16),
     to_signed(-16#0192#, 16), to_signed(-16#01AB#, 16), to_signed(-16#01C4#, 16), to_signed(-16#01DD#, 16),
     to_signed(-16#01F7#, 16), to_signed(-16#0210#, 16), to_signed(-16#0229#, 16), to_signed(-16#0242#, 16),
     to_signed(-16#025B#, 16), to_signed(-16#0274#, 16), to_signed(-16#028D#, 16), to_signed(-16#02A6#, 16),
     to_signed(-16#02C0#, 16), to_signed(-16#02D9#, 16), to_signed(-16#02F2#, 16), to_signed(-16#030B#, 16),
     to_signed(-16#0324#, 16), to_signed(-16#033D#, 16), to_signed(-16#0356#, 16), to_signed(-16#036F#, 16),
     to_signed(-16#0388#, 16), to_signed(-16#03A1#, 16), to_signed(-16#03BB#, 16), to_signed(-16#03D4#, 16),
     to_signed(-16#03ED#, 16), to_signed(-16#0406#, 16), to_signed(-16#041F#, 16), to_signed(-16#0438#, 16),
     to_signed(-16#0451#, 16), to_signed(-16#046A#, 16), to_signed(-16#0483#, 16), to_signed(-16#049C#, 16),
     to_signed(-16#04B5#, 16), to_signed(-16#04CE#, 16), to_signed(-16#04E7#, 16), to_signed(-16#0500#, 16),
     to_signed(-16#051A#, 16), to_signed(-16#0533#, 16), to_signed(-16#054C#, 16), to_signed(-16#0565#, 16),
     to_signed(-16#057E#, 16), to_signed(-16#0597#, 16), to_signed(-16#05B0#, 16), to_signed(-16#05C9#, 16),
     to_signed(-16#05E2#, 16), to_signed(-16#05FB#, 16), to_signed(-16#0614#, 16), to_signed(-16#062D#, 16),
     to_signed(-16#0646#, 16), to_signed(-16#065F#, 16), to_signed(-16#0678#, 16), to_signed(-16#0691#, 16),
     to_signed(-16#06AA#, 16), to_signed(-16#06C3#, 16), to_signed(-16#06DC#, 16), to_signed(-16#06F5#, 16),
     to_signed(-16#070E#, 16), to_signed(-16#0727#, 16), to_signed(-16#0740#, 16), to_signed(-16#0759#, 16),
     to_signed(-16#0772#, 16), to_signed(-16#078B#, 16), to_signed(-16#07A4#, 16), to_signed(-16#07BD#, 16),
     to_signed(-16#07D6#, 16), to_signed(-16#07EF#, 16), to_signed(-16#0807#, 16), to_signed(-16#0820#, 16),
     to_signed(-16#0839#, 16), to_signed(-16#0852#, 16), to_signed(-16#086B#, 16), to_signed(-16#0884#, 16),
     to_signed(-16#089D#, 16), to_signed(-16#08B6#, 16), to_signed(-16#08CF#, 16), to_signed(-16#08E8#, 16),
     to_signed(-16#0901#, 16), to_signed(-16#0919#, 16), to_signed(-16#0932#, 16), to_signed(-16#094B#, 16),
     to_signed(-16#0964#, 16), to_signed(-16#097D#, 16), to_signed(-16#0996#, 16), to_signed(-16#09AF#, 16),
     to_signed(-16#09C7#, 16), to_signed(-16#09E0#, 16), to_signed(-16#09F9#, 16), to_signed(-16#0A12#, 16),
     to_signed(-16#0A2B#, 16), to_signed(-16#0A44#, 16), to_signed(-16#0A5C#, 16), to_signed(-16#0A75#, 16),
     to_signed(-16#0A8E#, 16), to_signed(-16#0AA7#, 16), to_signed(-16#0AC0#, 16), to_signed(-16#0AD8#, 16),
     to_signed(-16#0AF1#, 16), to_signed(-16#0B0A#, 16), to_signed(-16#0B23#, 16), to_signed(-16#0B3B#, 16),
     to_signed(-16#0B54#, 16), to_signed(-16#0B6D#, 16), to_signed(-16#0B85#, 16), to_signed(-16#0B9E#, 16),
     to_signed(-16#0BB7#, 16), to_signed(-16#0BD0#, 16), to_signed(-16#0BE8#, 16), to_signed(-16#0C01#, 16),
     to_signed(-16#0C1A#, 16), to_signed(-16#0C32#, 16), to_signed(-16#0C4B#, 16), to_signed(-16#0C64#, 16),
     to_signed(-16#0C7C#, 16), to_signed(-16#0C95#, 16), to_signed(-16#0CAE#, 16), to_signed(-16#0CC6#, 16),
     to_signed(-16#0CDF#, 16), to_signed(-16#0CF8#, 16), to_signed(-16#0D10#, 16), to_signed(-16#0D29#, 16),
     to_signed(-16#0D41#, 16), to_signed(-16#0D5A#, 16), to_signed(-16#0D72#, 16), to_signed(-16#0D8B#, 16),
     to_signed(-16#0DA4#, 16), to_signed(-16#0DBC#, 16), to_signed(-16#0DD5#, 16), to_signed(-16#0DED#, 16),
     to_signed(-16#0E06#, 16), to_signed(-16#0E1E#, 16), to_signed(-16#0E37#, 16), to_signed(-16#0E4F#, 16),
     to_signed(-16#0E68#, 16), to_signed(-16#0E80#, 16), to_signed(-16#0E99#, 16), to_signed(-16#0EB1#, 16),
     to_signed(-16#0ECA#, 16), to_signed(-16#0EE2#, 16), to_signed(-16#0EFB#, 16), to_signed(-16#0F13#, 16),
     to_signed(-16#0F2B#, 16), to_signed(-16#0F44#, 16), to_signed(-16#0F5C#, 16), to_signed(-16#0F75#, 16),
     to_signed(-16#0F8D#, 16), to_signed(-16#0FA5#, 16), to_signed(-16#0FBE#, 16), to_signed(-16#0FD6#, 16),
     to_signed(-16#0FEE#, 16), to_signed(-16#1007#, 16), to_signed(-16#101F#, 16), to_signed(-16#1037#, 16),
     to_signed(-16#1050#, 16), to_signed(-16#1068#, 16), to_signed(-16#1080#, 16), to_signed(-16#1099#, 16),
     to_signed(-16#10B1#, 16), to_signed(-16#10C9#, 16), to_signed(-16#10E1#, 16), to_signed(-16#10FA#, 16),
     to_signed(-16#1112#, 16), to_signed(-16#112A#, 16), to_signed(-16#1142#, 16), to_signed(-16#115A#, 16),
     to_signed(-16#1173#, 16), to_signed(-16#118B#, 16), to_signed(-16#11A3#, 16), to_signed(-16#11BB#, 16),
     to_signed(-16#11D3#, 16), to_signed(-16#11EB#, 16), to_signed(-16#1204#, 16), to_signed(-16#121C#, 16),
     to_signed(-16#1234#, 16), to_signed(-16#124C#, 16), to_signed(-16#1264#, 16), to_signed(-16#127C#, 16),
     to_signed(-16#1294#, 16), to_signed(-16#12AC#, 16), to_signed(-16#12C4#, 16), to_signed(-16#12DC#, 16),
     to_signed(-16#12F4#, 16), to_signed(-16#130C#, 16), to_signed(-16#1324#, 16), to_signed(-16#133C#, 16),
     to_signed(-16#1354#, 16), to_signed(-16#136C#, 16), to_signed(-16#1384#, 16), to_signed(-16#139C#, 16),
     to_signed(-16#13B4#, 16), to_signed(-16#13CC#, 16), to_signed(-16#13E4#, 16), to_signed(-16#13FB#, 16),
     to_signed(-16#1413#, 16), to_signed(-16#142B#, 16), to_signed(-16#1443#, 16), to_signed(-16#145B#, 16),
     to_signed(-16#1473#, 16), to_signed(-16#148B#, 16), to_signed(-16#14A2#, 16), to_signed(-16#14BA#, 16),
     to_signed(-16#14D2#, 16), to_signed(-16#14EA#, 16), to_signed(-16#1501#, 16), to_signed(-16#1519#, 16),
     to_signed(-16#1531#, 16), to_signed(-16#1549#, 16), to_signed(-16#1560#, 16), to_signed(-16#1578#, 16),
     to_signed(-16#1590#, 16), to_signed(-16#15A7#, 16), to_signed(-16#15BF#, 16), to_signed(-16#15D7#, 16),
     to_signed(-16#15EE#, 16), to_signed(-16#1606#, 16), to_signed(-16#161D#, 16), to_signed(-16#1635#, 16),
     to_signed(-16#164C#, 16), to_signed(-16#1664#, 16), to_signed(-16#167C#, 16), to_signed(-16#1693#, 16),
     to_signed(-16#16AB#, 16), to_signed(-16#16C2#, 16), to_signed(-16#16DA#, 16), to_signed(-16#16F1#, 16),
     to_signed(-16#1709#, 16), to_signed(-16#1720#, 16), to_signed(-16#1737#, 16), to_signed(-16#174F#, 16),
     to_signed(-16#1766#, 16), to_signed(-16#177E#, 16), to_signed(-16#1795#, 16), to_signed(-16#17AC#, 16),
     to_signed(-16#17C4#, 16), to_signed(-16#17DB#, 16), to_signed(-16#17F2#, 16), to_signed(-16#180A#, 16),
     to_signed(-16#1821#, 16), to_signed(-16#1838#, 16), to_signed(-16#184F#, 16), to_signed(-16#1867#, 16),
     to_signed(-16#187E#, 16), to_signed(-16#1895#, 16), to_signed(-16#18AC#, 16), to_signed(-16#18C3#, 16),
     to_signed(-16#18DB#, 16), to_signed(-16#18F2#, 16), to_signed(-16#1909#, 16), to_signed(-16#1920#, 16),
     to_signed(-16#1937#, 16), to_signed(-16#194E#, 16), to_signed(-16#1965#, 16), to_signed(-16#197C#, 16),
     to_signed(-16#1993#, 16), to_signed(-16#19AA#, 16), to_signed(-16#19C1#, 16), to_signed(-16#19D8#, 16),
     to_signed(-16#19EF#, 16), to_signed(-16#1A06#, 16), to_signed(-16#1A1D#, 16), to_signed(-16#1A34#, 16),
     to_signed(-16#1A4B#, 16), to_signed(-16#1A62#, 16), to_signed(-16#1A79#, 16), to_signed(-16#1A90#, 16),
     to_signed(-16#1AA7#, 16), to_signed(-16#1ABE#, 16), to_signed(-16#1AD4#, 16), to_signed(-16#1AEB#, 16),
     to_signed(-16#1B02#, 16), to_signed(-16#1B19#, 16), to_signed(-16#1B30#, 16), to_signed(-16#1B46#, 16),
     to_signed(-16#1B5D#, 16), to_signed(-16#1B74#, 16), to_signed(-16#1B8A#, 16), to_signed(-16#1BA1#, 16),
     to_signed(-16#1BB8#, 16), to_signed(-16#1BCE#, 16), to_signed(-16#1BE5#, 16), to_signed(-16#1BFC#, 16),
     to_signed(-16#1C12#, 16), to_signed(-16#1C29#, 16), to_signed(-16#1C3F#, 16), to_signed(-16#1C56#, 16),
     to_signed(-16#1C6C#, 16), to_signed(-16#1C83#, 16), to_signed(-16#1C99#, 16), to_signed(-16#1CB0#, 16),
     to_signed(-16#1CC6#, 16), to_signed(-16#1CDD#, 16), to_signed(-16#1CF3#, 16), to_signed(-16#1D0A#, 16),
     to_signed(-16#1D20#, 16), to_signed(-16#1D36#, 16), to_signed(-16#1D4D#, 16), to_signed(-16#1D63#, 16),
     to_signed(-16#1D79#, 16), to_signed(-16#1D90#, 16), to_signed(-16#1DA6#, 16), to_signed(-16#1DBC#, 16),
     to_signed(-16#1DD3#, 16), to_signed(-16#1DE9#, 16), to_signed(-16#1DFF#, 16), to_signed(-16#1E15#, 16),
     to_signed(-16#1E2B#, 16), to_signed(-16#1E42#, 16), to_signed(-16#1E58#, 16), to_signed(-16#1E6E#, 16),
     to_signed(-16#1E84#, 16), to_signed(-16#1E9A#, 16), to_signed(-16#1EB0#, 16), to_signed(-16#1EC6#, 16),
     to_signed(-16#1EDC#, 16), to_signed(-16#1EF2#, 16), to_signed(-16#1F08#, 16), to_signed(-16#1F1E#, 16),
     to_signed(-16#1F34#, 16), to_signed(-16#1F4A#, 16), to_signed(-16#1F60#, 16), to_signed(-16#1F76#, 16),
     to_signed(-16#1F8C#, 16), to_signed(-16#1FA2#, 16), to_signed(-16#1FB7#, 16), to_signed(-16#1FCD#, 16),
     to_signed(-16#1FE3#, 16), to_signed(-16#1FF9#, 16), to_signed(-16#200F#, 16), to_signed(-16#2024#, 16),
     to_signed(-16#203A#, 16), to_signed(-16#2050#, 16), to_signed(-16#2065#, 16), to_signed(-16#207B#, 16),
     to_signed(-16#2091#, 16), to_signed(-16#20A6#, 16), to_signed(-16#20BC#, 16), to_signed(-16#20D1#, 16),
     to_signed(-16#20E7#, 16), to_signed(-16#20FD#, 16), to_signed(-16#2112#, 16), to_signed(-16#2128#, 16),
     to_signed(-16#213D#, 16), to_signed(-16#2153#, 16), to_signed(-16#2168#, 16), to_signed(-16#217D#, 16),
     to_signed(-16#2193#, 16), to_signed(-16#21A8#, 16), to_signed(-16#21BE#, 16), to_signed(-16#21D3#, 16),
     to_signed(-16#21E8#, 16), to_signed(-16#21FE#, 16), to_signed(-16#2213#, 16), to_signed(-16#2228#, 16),
     to_signed(-16#223D#, 16), to_signed(-16#2253#, 16), to_signed(-16#2268#, 16), to_signed(-16#227D#, 16),
     to_signed(-16#2292#, 16), to_signed(-16#22A7#, 16), to_signed(-16#22BC#, 16), to_signed(-16#22D2#, 16),
     to_signed(-16#22E7#, 16), to_signed(-16#22FC#, 16), to_signed(-16#2311#, 16), to_signed(-16#2326#, 16),
     to_signed(-16#233B#, 16), to_signed(-16#2350#, 16), to_signed(-16#2365#, 16), to_signed(-16#237A#, 16),
     to_signed(-16#238E#, 16), to_signed(-16#23A3#, 16), to_signed(-16#23B8#, 16), to_signed(-16#23CD#, 16),
     to_signed(-16#23E2#, 16), to_signed(-16#23F7#, 16), to_signed(-16#240B#, 16), to_signed(-16#2420#, 16),
     to_signed(-16#2435#, 16), to_signed(-16#244A#, 16), to_signed(-16#245E#, 16), to_signed(-16#2473#, 16),
     to_signed(-16#2488#, 16), to_signed(-16#249C#, 16), to_signed(-16#24B1#, 16), to_signed(-16#24C5#, 16),
     to_signed(-16#24DA#, 16), to_signed(-16#24EF#, 16), to_signed(-16#2503#, 16), to_signed(-16#2518#, 16),
     to_signed(-16#252C#, 16), to_signed(-16#2541#, 16), to_signed(-16#2555#, 16), to_signed(-16#2569#, 16),
     to_signed(-16#257E#, 16), to_signed(-16#2592#, 16), to_signed(-16#25A6#, 16), to_signed(-16#25BB#, 16),
     to_signed(-16#25CF#, 16), to_signed(-16#25E3#, 16), to_signed(-16#25F8#, 16), to_signed(-16#260C#, 16),
     to_signed(-16#2620#, 16), to_signed(-16#2634#, 16), to_signed(-16#2648#, 16), to_signed(-16#265C#, 16),
     to_signed(-16#2671#, 16), to_signed(-16#2685#, 16), to_signed(-16#2699#, 16), to_signed(-16#26AD#, 16),
     to_signed(-16#26C1#, 16), to_signed(-16#26D5#, 16), to_signed(-16#26E9#, 16), to_signed(-16#26FD#, 16),
     to_signed(-16#2711#, 16), to_signed(-16#2724#, 16), to_signed(-16#2738#, 16), to_signed(-16#274C#, 16),
     to_signed(-16#2760#, 16), to_signed(-16#2774#, 16), to_signed(-16#2788#, 16), to_signed(-16#279B#, 16),
     to_signed(-16#27AF#, 16), to_signed(-16#27C3#, 16), to_signed(-16#27D6#, 16), to_signed(-16#27EA#, 16),
     to_signed(-16#27FE#, 16), to_signed(-16#2811#, 16), to_signed(-16#2825#, 16), to_signed(-16#2838#, 16),
     to_signed(-16#284C#, 16), to_signed(-16#2860#, 16), to_signed(-16#2873#, 16), to_signed(-16#2886#, 16),
     to_signed(-16#289A#, 16), to_signed(-16#28AD#, 16), to_signed(-16#28C1#, 16), to_signed(-16#28D4#, 16),
     to_signed(-16#28E7#, 16), to_signed(-16#28FB#, 16), to_signed(-16#290E#, 16), to_signed(-16#2921#, 16),
     to_signed(-16#2935#, 16), to_signed(-16#2948#, 16), to_signed(-16#295B#, 16), to_signed(-16#296E#, 16),
     to_signed(-16#2981#, 16), to_signed(-16#2994#, 16), to_signed(-16#29A7#, 16), to_signed(-16#29BB#, 16),
     to_signed(-16#29CE#, 16), to_signed(-16#29E1#, 16), to_signed(-16#29F4#, 16), to_signed(-16#2A07#, 16),
     to_signed(-16#2A1A#, 16), to_signed(-16#2A2C#, 16), to_signed(-16#2A3F#, 16), to_signed(-16#2A52#, 16),
     to_signed(-16#2A65#, 16), to_signed(-16#2A78#, 16), to_signed(-16#2A8B#, 16), to_signed(-16#2A9D#, 16),
     to_signed(-16#2AB0#, 16), to_signed(-16#2AC3#, 16), to_signed(-16#2AD6#, 16), to_signed(-16#2AE8#, 16),
     to_signed(-16#2AFB#, 16), to_signed(-16#2B0D#, 16), to_signed(-16#2B20#, 16), to_signed(-16#2B33#, 16),
     to_signed(-16#2B45#, 16), to_signed(-16#2B58#, 16), to_signed(-16#2B6A#, 16), to_signed(-16#2B7D#, 16),
     to_signed(-16#2B8F#, 16), to_signed(-16#2BA1#, 16), to_signed(-16#2BB4#, 16), to_signed(-16#2BC6#, 16),
     to_signed(-16#2BD8#, 16), to_signed(-16#2BEB#, 16), to_signed(-16#2BFD#, 16), to_signed(-16#2C0F#, 16),
     to_signed(-16#2C21#, 16), to_signed(-16#2C34#, 16), to_signed(-16#2C46#, 16), to_signed(-16#2C58#, 16),
     to_signed(-16#2C6A#, 16), to_signed(-16#2C7C#, 16), to_signed(-16#2C8E#, 16), to_signed(-16#2CA0#, 16),
     to_signed(-16#2CB2#, 16), to_signed(-16#2CC4#, 16), to_signed(-16#2CD6#, 16), to_signed(-16#2CE8#, 16),
     to_signed(-16#2CFA#, 16), to_signed(-16#2D0C#, 16), to_signed(-16#2D1E#, 16), to_signed(-16#2D2F#, 16));  -- sfix16 [512]

  -- Signals
  SIGNAL Radix22TwdlMapping_cnt           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Radix22TwdlMapping_phase         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw  : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Radix22TwdlMapping_twdlAddrMap   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdl45Reg     : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1      : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2      : std_logic;
  SIGNAL Radix22TwdlMapping_cnt_next      : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Radix22TwdlMapping_phase_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1_next : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw_next : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Radix22TwdlMapping_twdlAddrMap_next : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdl45Reg_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2_next : std_logic;
  SIGNAL twdlAddr                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL twdlAddrVld                      : std_logic;
  SIGNAL twdlOctant                       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45                           : std_logic;
  SIGNAL twiddleS_re                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twiddleReg_re                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twiddleS_im                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twiddleReg_im                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdlOctantReg                    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45Reg                        : std_logic;

BEGIN
  -- Radix22TwdlMapping
  Radix22TwdlMapping_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22TwdlMapping_octantReg1 <= to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdlAddr_raw <= to_unsigned(16#000#, 12);
        Radix22TwdlMapping_twdlAddrMap <= to_unsigned(16#000#, 9);
        Radix22TwdlMapping_twdl45Reg <= '0';
        Radix22TwdlMapping_dvldReg1 <= '0';
        Radix22TwdlMapping_dvldReg2 <= '0';
        Radix22TwdlMapping_cnt <= to_unsigned(16#000#, 10);
        Radix22TwdlMapping_phase <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        Radix22TwdlMapping_cnt <= Radix22TwdlMapping_cnt_next;
        Radix22TwdlMapping_phase <= Radix22TwdlMapping_phase_next;
        Radix22TwdlMapping_octantReg1 <= Radix22TwdlMapping_octantReg1_next;
        Radix22TwdlMapping_twdlAddr_raw <= Radix22TwdlMapping_twdlAddr_raw_next;
        Radix22TwdlMapping_twdlAddrMap <= Radix22TwdlMapping_twdlAddrMap_next;
        Radix22TwdlMapping_twdl45Reg <= Radix22TwdlMapping_twdl45Reg_next;
        Radix22TwdlMapping_dvldReg1 <= Radix22TwdlMapping_dvldReg1_next;
        Radix22TwdlMapping_dvldReg2 <= Radix22TwdlMapping_dvldReg2_next;
      END IF;
    END IF;
  END PROCESS Radix22TwdlMapping_process;

  Radix22TwdlMapping_output : PROCESS (Radix22TwdlMapping_cnt, Radix22TwdlMapping_dvldReg1,
       Radix22TwdlMapping_dvldReg2, Radix22TwdlMapping_octantReg1,
       Radix22TwdlMapping_phase, Radix22TwdlMapping_twdl45Reg,
       Radix22TwdlMapping_twdlAddrMap, Radix22TwdlMapping_twdlAddr_raw,
       dout_8_1_vld)
    VARIABLE octant : unsigned(2 DOWNTO 0);
    VARIABLE cnt_cast : unsigned(11 DOWNTO 0);
    VARIABLE sub_temp : signed(25 DOWNTO 0);
    VARIABLE sub_temp_0 : signed(13 DOWNTO 0);
    VARIABLE sub_temp_1 : signed(13 DOWNTO 0);
    VARIABLE sub_temp_2 : signed(25 DOWNTO 0);
    VARIABLE sub_temp_3 : signed(25 DOWNTO 0);
  BEGIN
    sub_temp := to_signed(16#0000000#, 26);
    sub_temp_0 := to_signed(16#0000#, 14);
    sub_temp_1 := to_signed(16#0000#, 14);
    sub_temp_2 := to_signed(16#0000000#, 26);
    sub_temp_3 := to_signed(16#0000000#, 26);
    cnt_cast := to_unsigned(16#000#, 12);
    Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt;
    Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase;
    Radix22TwdlMapping_dvldReg2_next <= Radix22TwdlMapping_dvldReg1;
    Radix22TwdlMapping_dvldReg1_next <= dout_8_1_vld;
    CASE Radix22TwdlMapping_twdlAddr_raw IS
      WHEN "001000000000" =>
        octant := to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "010000000000" =>
        octant := to_unsigned(16#1#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "011000000000" =>
        octant := to_unsigned(16#2#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "100000000000" =>
        octant := to_unsigned(16#3#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "101000000000" =>
        octant := to_unsigned(16#4#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN OTHERS => 
        octant := Radix22TwdlMapping_twdlAddr_raw(11 DOWNTO 9);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
    END CASE;
    Radix22TwdlMapping_octantReg1_next <= octant;
    CASE octant IS
      WHEN "000" =>
        Radix22TwdlMapping_twdlAddrMap_next <= Radix22TwdlMapping_twdlAddr_raw(8 DOWNTO 0);
      WHEN "001" =>
        sub_temp_0 := to_signed(16#0400#, 14) - signed(resize(Radix22TwdlMapping_twdlAddr_raw, 14));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_0(8 DOWNTO 0));
      WHEN "010" =>
        sub_temp_1 := signed(resize(Radix22TwdlMapping_twdlAddr_raw, 14)) - to_signed(16#0400#, 14);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_1(8 DOWNTO 0));
      WHEN "011" =>
        sub_temp_2 := to_signed(16#0100000#, 26) - signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_2(17 DOWNTO 9));
      WHEN "100" =>
        sub_temp_3 := signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26)) - to_signed(16#0100000#, 26);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_3(17 DOWNTO 9));
      WHEN OTHERS => 
        sub_temp := to_signed(16#0180000#, 26) - signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp(17 DOWNTO 9));
    END CASE;
    IF Radix22TwdlMapping_phase = to_unsigned(16#0#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= to_unsigned(16#000#, 12);
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#1#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(Radix22TwdlMapping_cnt, 12) sll 1;
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#2#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(Radix22TwdlMapping_cnt, 12);
    ELSE 
      cnt_cast := resize(Radix22TwdlMapping_cnt, 12);
      Radix22TwdlMapping_twdlAddr_raw_next <= (cnt_cast sll 1) + cnt_cast;
    END IF;
    IF dout_8_1_vld = '1' AND (Radix22TwdlMapping_cnt > to_unsigned(16#3BF#, 10)) THEN 
      Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase + to_unsigned(16#1#, 2);
    END IF;
    IF dout_8_1_vld = '1' THEN 
      Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt + to_unsigned(16#040#, 10);
    END IF;
    twdlAddr <= Radix22TwdlMapping_twdlAddrMap;
    twdlAddrVld <= Radix22TwdlMapping_dvldReg2;
    twdlOctant <= Radix22TwdlMapping_octantReg1;
    twdl45 <= Radix22TwdlMapping_twdl45Reg;
  END PROCESS Radix22TwdlMapping_output;


  -- Twiddle ROM1
  twiddleS_re <= Twiddle_re_table_data(to_integer(twdlAddr));

  TWIDDLEROM_RE_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twiddleReg_re <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twiddleReg_re <= twiddleS_re;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_RE_process;


  -- Twiddle ROM2
  twiddleS_im <= Twiddle_im_table_data(to_integer(twdlAddr));

  TWIDDLEROM_IM_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twiddleReg_im <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twiddleReg_im <= twiddleS_im;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_IM_process;


  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdlOctantReg <= to_unsigned(16#0#, 3);
      ELSIF enb = '1' THEN
        twdlOctantReg <= twdlOctant;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl45Reg <= '0';
      ELSIF enb = '1' THEN
        twdl45Reg <= twdl45;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  -- Radix22TwdlOctCorr
  Radix22TwdlOctCorr_output : PROCESS (twdl45Reg, twdlOctantReg, twiddleReg_im, twiddleReg_re)
    VARIABLE twdlIn_re : signed(15 DOWNTO 0);
    VARIABLE twdlIn_im : signed(15 DOWNTO 0);
    VARIABLE cast : signed(16 DOWNTO 0);
    VARIABLE cast_0 : signed(16 DOWNTO 0);
    VARIABLE cast_1 : signed(16 DOWNTO 0);
    VARIABLE cast_2 : signed(16 DOWNTO 0);
    VARIABLE cast_3 : signed(16 DOWNTO 0);
    VARIABLE cast_4 : signed(16 DOWNTO 0);
  BEGIN
    cast := to_signed(16#00000#, 17);
    cast_0 := to_signed(16#00000#, 17);
    cast_1 := to_signed(16#00000#, 17);
    cast_2 := to_signed(16#00000#, 17);
    cast_3 := to_signed(16#00000#, 17);
    cast_4 := to_signed(16#00000#, 17);
    twdlIn_re := twiddleReg_re;
    twdlIn_im := twiddleReg_im;
    IF twdl45Reg = '1' THEN 
      CASE twdlOctantReg IS
        WHEN "000" =>
          twdlIn_re := to_signed(16#2D41#, 16);
          twdlIn_im := to_signed(-16#2D41#, 16);
        WHEN "010" =>
          twdlIn_re := to_signed(-16#2D41#, 16);
          twdlIn_im := to_signed(-16#2D41#, 16);
        WHEN "100" =>
          twdlIn_re := to_signed(-16#2D41#, 16);
          twdlIn_im := to_signed(16#2D41#, 16);
        WHEN OTHERS => 
          twdlIn_re := to_signed(16#2D41#, 16);
          twdlIn_im := to_signed(-16#2D41#, 16);
      END CASE;
    ELSE 
      CASE twdlOctantReg IS
        WHEN "000" =>
          NULL;
        WHEN "001" =>
          cast :=  - (resize(twiddleReg_im, 17));
          twdlIn_re := cast(15 DOWNTO 0);
          cast_2 :=  - (resize(twiddleReg_re, 17));
          twdlIn_im := cast_2(15 DOWNTO 0);
        WHEN "010" =>
          twdlIn_re := twiddleReg_im;
          cast_3 :=  - (resize(twiddleReg_re, 17));
          twdlIn_im := cast_3(15 DOWNTO 0);
        WHEN "011" =>
          cast_0 :=  - (resize(twiddleReg_re, 17));
          twdlIn_re := cast_0(15 DOWNTO 0);
          twdlIn_im := twiddleReg_im;
        WHEN "100" =>
          cast_1 :=  - (resize(twiddleReg_re, 17));
          twdlIn_re := cast_1(15 DOWNTO 0);
          cast_4 :=  - (resize(twiddleReg_im, 17));
          twdlIn_im := cast_4(15 DOWNTO 0);
        WHEN OTHERS => 
          twdlIn_re := twiddleReg_im;
          twdlIn_im := twiddleReg_re;
      END CASE;
    END IF;
    twdl_9_1_re <= twdlIn_re;
    twdl_9_1_im <= twdlIn_im;
  END PROCESS Radix22TwdlOctCorr_output;


END rtl;


-- End of TWDLROM_9_1.vhd --

-- Start of TWDLROM_9_1_block.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\TWDLROM_9_1_block.vhd
-- Created: 2025-03-18 15:26:30
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: TWDLROM_9_1_block
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized1/TWDLROM_9_1
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY TWDLROM_9_1_block IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_8_1_vld                      :   IN    std_logic;
        twdl_9_1_re                       :   OUT   signed(15 DOWNTO 0);  -- sfix16_En14
        twdl_9_1_im                       :   OUT   signed(15 DOWNTO 0)  -- sfix16_En14
        );
END TWDLROM_9_1_block;


ARCHITECTURE rtl OF TWDLROM_9_1_block IS

  -- Constants
  CONSTANT Twiddle_re_table_data          : vector_of_signed16(0 TO 511) := 
    (to_signed(16#4000#, 16), to_signed(16#4000#, 16), to_signed(16#4000#, 16), to_signed(16#4000#, 16),
     to_signed(16#4000#, 16), to_signed(16#4000#, 16), to_signed(16#3FFF#, 16), to_signed(16#3FFF#, 16),
     to_signed(16#3FFF#, 16), to_signed(16#3FFE#, 16), to_signed(16#3FFE#, 16), to_signed(16#3FFE#, 16),
     to_signed(16#3FFD#, 16), to_signed(16#3FFD#, 16), to_signed(16#3FFC#, 16), to_signed(16#3FFC#, 16),
     to_signed(16#3FFB#, 16), to_signed(16#3FFA#, 16), to_signed(16#3FFA#, 16), to_signed(16#3FF9#, 16),
     to_signed(16#3FF8#, 16), to_signed(16#3FF7#, 16), to_signed(16#3FF7#, 16), to_signed(16#3FF6#, 16),
     to_signed(16#3FF5#, 16), to_signed(16#3FF4#, 16), to_signed(16#3FF3#, 16), to_signed(16#3FF2#, 16),
     to_signed(16#3FF1#, 16), to_signed(16#3FF0#, 16), to_signed(16#3FEF#, 16), to_signed(16#3FED#, 16),
     to_signed(16#3FEC#, 16), to_signed(16#3FEB#, 16), to_signed(16#3FEA#, 16), to_signed(16#3FE8#, 16),
     to_signed(16#3FE7#, 16), to_signed(16#3FE6#, 16), to_signed(16#3FE4#, 16), to_signed(16#3FE3#, 16),
     to_signed(16#3FE1#, 16), to_signed(16#3FE0#, 16), to_signed(16#3FDE#, 16), to_signed(16#3FDC#, 16),
     to_signed(16#3FDB#, 16), to_signed(16#3FD9#, 16), to_signed(16#3FD7#, 16), to_signed(16#3FD5#, 16),
     to_signed(16#3FD4#, 16), to_signed(16#3FD2#, 16), to_signed(16#3FD0#, 16), to_signed(16#3FCE#, 16),
     to_signed(16#3FCC#, 16), to_signed(16#3FCA#, 16), to_signed(16#3FC8#, 16), to_signed(16#3FC6#, 16),
     to_signed(16#3FC4#, 16), to_signed(16#3FC1#, 16), to_signed(16#3FBF#, 16), to_signed(16#3FBD#, 16),
     to_signed(16#3FBB#, 16), to_signed(16#3FB8#, 16), to_signed(16#3FB6#, 16), to_signed(16#3FB4#, 16),
     to_signed(16#3FB1#, 16), to_signed(16#3FAF#, 16), to_signed(16#3FAC#, 16), to_signed(16#3FAA#, 16),
     to_signed(16#3FA7#, 16), to_signed(16#3FA4#, 16), to_signed(16#3FA2#, 16), to_signed(16#3F9F#, 16),
     to_signed(16#3F9C#, 16), to_signed(16#3F99#, 16), to_signed(16#3F97#, 16), to_signed(16#3F94#, 16),
     to_signed(16#3F91#, 16), to_signed(16#3F8E#, 16), to_signed(16#3F8B#, 16), to_signed(16#3F88#, 16),
     to_signed(16#3F85#, 16), to_signed(16#3F82#, 16), to_signed(16#3F7F#, 16), to_signed(16#3F7B#, 16),
     to_signed(16#3F78#, 16), to_signed(16#3F75#, 16), to_signed(16#3F72#, 16), to_signed(16#3F6E#, 16),
     to_signed(16#3F6B#, 16), to_signed(16#3F68#, 16), to_signed(16#3F64#, 16), to_signed(16#3F61#, 16),
     to_signed(16#3F5D#, 16), to_signed(16#3F5A#, 16), to_signed(16#3F56#, 16), to_signed(16#3F52#, 16),
     to_signed(16#3F4F#, 16), to_signed(16#3F4B#, 16), to_signed(16#3F47#, 16), to_signed(16#3F43#, 16),
     to_signed(16#3F40#, 16), to_signed(16#3F3C#, 16), to_signed(16#3F38#, 16), to_signed(16#3F34#, 16),
     to_signed(16#3F30#, 16), to_signed(16#3F2C#, 16), to_signed(16#3F28#, 16), to_signed(16#3F24#, 16),
     to_signed(16#3F20#, 16), to_signed(16#3F1C#, 16), to_signed(16#3F17#, 16), to_signed(16#3F13#, 16),
     to_signed(16#3F0F#, 16), to_signed(16#3F0A#, 16), to_signed(16#3F06#, 16), to_signed(16#3F02#, 16),
     to_signed(16#3EFD#, 16), to_signed(16#3EF9#, 16), to_signed(16#3EF4#, 16), to_signed(16#3EF0#, 16),
     to_signed(16#3EEB#, 16), to_signed(16#3EE7#, 16), to_signed(16#3EE2#, 16), to_signed(16#3EDD#, 16),
     to_signed(16#3ED8#, 16), to_signed(16#3ED4#, 16), to_signed(16#3ECF#, 16), to_signed(16#3ECA#, 16),
     to_signed(16#3EC5#, 16), to_signed(16#3EC0#, 16), to_signed(16#3EBB#, 16), to_signed(16#3EB6#, 16),
     to_signed(16#3EB1#, 16), to_signed(16#3EAC#, 16), to_signed(16#3EA7#, 16), to_signed(16#3EA2#, 16),
     to_signed(16#3E9D#, 16), to_signed(16#3E98#, 16), to_signed(16#3E92#, 16), to_signed(16#3E8D#, 16),
     to_signed(16#3E88#, 16), to_signed(16#3E82#, 16), to_signed(16#3E7D#, 16), to_signed(16#3E77#, 16),
     to_signed(16#3E72#, 16), to_signed(16#3E6C#, 16), to_signed(16#3E67#, 16), to_signed(16#3E61#, 16),
     to_signed(16#3E5C#, 16), to_signed(16#3E56#, 16), to_signed(16#3E50#, 16), to_signed(16#3E4A#, 16),
     to_signed(16#3E45#, 16), to_signed(16#3E3F#, 16), to_signed(16#3E39#, 16), to_signed(16#3E33#, 16),
     to_signed(16#3E2D#, 16), to_signed(16#3E27#, 16), to_signed(16#3E21#, 16), to_signed(16#3E1B#, 16),
     to_signed(16#3E15#, 16), to_signed(16#3E0F#, 16), to_signed(16#3E09#, 16), to_signed(16#3E03#, 16),
     to_signed(16#3DFC#, 16), to_signed(16#3DF6#, 16), to_signed(16#3DF0#, 16), to_signed(16#3DE9#, 16),
     to_signed(16#3DE3#, 16), to_signed(16#3DDD#, 16), to_signed(16#3DD6#, 16), to_signed(16#3DD0#, 16),
     to_signed(16#3DC9#, 16), to_signed(16#3DC2#, 16), to_signed(16#3DBC#, 16), to_signed(16#3DB5#, 16),
     to_signed(16#3DAF#, 16), to_signed(16#3DA8#, 16), to_signed(16#3DA1#, 16), to_signed(16#3D9A#, 16),
     to_signed(16#3D93#, 16), to_signed(16#3D8D#, 16), to_signed(16#3D86#, 16), to_signed(16#3D7F#, 16),
     to_signed(16#3D78#, 16), to_signed(16#3D71#, 16), to_signed(16#3D6A#, 16), to_signed(16#3D63#, 16),
     to_signed(16#3D5B#, 16), to_signed(16#3D54#, 16), to_signed(16#3D4D#, 16), to_signed(16#3D46#, 16),
     to_signed(16#3D3F#, 16), to_signed(16#3D37#, 16), to_signed(16#3D30#, 16), to_signed(16#3D28#, 16),
     to_signed(16#3D21#, 16), to_signed(16#3D1A#, 16), to_signed(16#3D12#, 16), to_signed(16#3D0B#, 16),
     to_signed(16#3D03#, 16), to_signed(16#3CFB#, 16), to_signed(16#3CF4#, 16), to_signed(16#3CEC#, 16),
     to_signed(16#3CE4#, 16), to_signed(16#3CDD#, 16), to_signed(16#3CD5#, 16), to_signed(16#3CCD#, 16),
     to_signed(16#3CC5#, 16), to_signed(16#3CBD#, 16), to_signed(16#3CB5#, 16), to_signed(16#3CAD#, 16),
     to_signed(16#3CA5#, 16), to_signed(16#3C9D#, 16), to_signed(16#3C95#, 16), to_signed(16#3C8D#, 16),
     to_signed(16#3C85#, 16), to_signed(16#3C7D#, 16), to_signed(16#3C74#, 16), to_signed(16#3C6C#, 16),
     to_signed(16#3C64#, 16), to_signed(16#3C5B#, 16), to_signed(16#3C53#, 16), to_signed(16#3C4B#, 16),
     to_signed(16#3C42#, 16), to_signed(16#3C3A#, 16), to_signed(16#3C31#, 16), to_signed(16#3C29#, 16),
     to_signed(16#3C20#, 16), to_signed(16#3C17#, 16), to_signed(16#3C0F#, 16), to_signed(16#3C06#, 16),
     to_signed(16#3BFD#, 16), to_signed(16#3BF5#, 16), to_signed(16#3BEC#, 16), to_signed(16#3BE3#, 16),
     to_signed(16#3BDA#, 16), to_signed(16#3BD1#, 16), to_signed(16#3BC8#, 16), to_signed(16#3BBF#, 16),
     to_signed(16#3BB6#, 16), to_signed(16#3BAD#, 16), to_signed(16#3BA4#, 16), to_signed(16#3B9B#, 16),
     to_signed(16#3B92#, 16), to_signed(16#3B88#, 16), to_signed(16#3B7F#, 16), to_signed(16#3B76#, 16),
     to_signed(16#3B6D#, 16), to_signed(16#3B63#, 16), to_signed(16#3B5A#, 16), to_signed(16#3B50#, 16),
     to_signed(16#3B47#, 16), to_signed(16#3B3E#, 16), to_signed(16#3B34#, 16), to_signed(16#3B2A#, 16),
     to_signed(16#3B21#, 16), to_signed(16#3B17#, 16), to_signed(16#3B0E#, 16), to_signed(16#3B04#, 16),
     to_signed(16#3AFA#, 16), to_signed(16#3AF0#, 16), to_signed(16#3AE6#, 16), to_signed(16#3ADD#, 16),
     to_signed(16#3AD3#, 16), to_signed(16#3AC9#, 16), to_signed(16#3ABF#, 16), to_signed(16#3AB5#, 16),
     to_signed(16#3AAB#, 16), to_signed(16#3AA1#, 16), to_signed(16#3A97#, 16), to_signed(16#3A8D#, 16),
     to_signed(16#3A82#, 16), to_signed(16#3A78#, 16), to_signed(16#3A6E#, 16), to_signed(16#3A64#, 16),
     to_signed(16#3A59#, 16), to_signed(16#3A4F#, 16), to_signed(16#3A45#, 16), to_signed(16#3A3A#, 16),
     to_signed(16#3A30#, 16), to_signed(16#3A25#, 16), to_signed(16#3A1B#, 16), to_signed(16#3A10#, 16),
     to_signed(16#3A06#, 16), to_signed(16#39FB#, 16), to_signed(16#39F0#, 16), to_signed(16#39E6#, 16),
     to_signed(16#39DB#, 16), to_signed(16#39D0#, 16), to_signed(16#39C5#, 16), to_signed(16#39BB#, 16),
     to_signed(16#39B0#, 16), to_signed(16#39A5#, 16), to_signed(16#399A#, 16), to_signed(16#398F#, 16),
     to_signed(16#3984#, 16), to_signed(16#3979#, 16), to_signed(16#396E#, 16), to_signed(16#3963#, 16),
     to_signed(16#3958#, 16), to_signed(16#394C#, 16), to_signed(16#3941#, 16), to_signed(16#3936#, 16),
     to_signed(16#392B#, 16), to_signed(16#391F#, 16), to_signed(16#3914#, 16), to_signed(16#3909#, 16),
     to_signed(16#38FD#, 16), to_signed(16#38F2#, 16), to_signed(16#38E6#, 16), to_signed(16#38DB#, 16),
     to_signed(16#38CF#, 16), to_signed(16#38C3#, 16), to_signed(16#38B8#, 16), to_signed(16#38AC#, 16),
     to_signed(16#38A1#, 16), to_signed(16#3895#, 16), to_signed(16#3889#, 16), to_signed(16#387D#, 16),
     to_signed(16#3871#, 16), to_signed(16#3866#, 16), to_signed(16#385A#, 16), to_signed(16#384E#, 16),
     to_signed(16#3842#, 16), to_signed(16#3836#, 16), to_signed(16#382A#, 16), to_signed(16#381E#, 16),
     to_signed(16#3812#, 16), to_signed(16#3805#, 16), to_signed(16#37F9#, 16), to_signed(16#37ED#, 16),
     to_signed(16#37E1#, 16), to_signed(16#37D5#, 16), to_signed(16#37C8#, 16), to_signed(16#37BC#, 16),
     to_signed(16#37B0#, 16), to_signed(16#37A3#, 16), to_signed(16#3797#, 16), to_signed(16#378A#, 16),
     to_signed(16#377E#, 16), to_signed(16#3771#, 16), to_signed(16#3765#, 16), to_signed(16#3758#, 16),
     to_signed(16#374B#, 16), to_signed(16#373F#, 16), to_signed(16#3732#, 16), to_signed(16#3725#, 16),
     to_signed(16#3718#, 16), to_signed(16#370C#, 16), to_signed(16#36FF#, 16), to_signed(16#36F2#, 16),
     to_signed(16#36E5#, 16), to_signed(16#36D8#, 16), to_signed(16#36CB#, 16), to_signed(16#36BE#, 16),
     to_signed(16#36B1#, 16), to_signed(16#36A4#, 16), to_signed(16#3697#, 16), to_signed(16#368A#, 16),
     to_signed(16#367D#, 16), to_signed(16#366F#, 16), to_signed(16#3662#, 16), to_signed(16#3655#, 16),
     to_signed(16#3648#, 16), to_signed(16#363A#, 16), to_signed(16#362D#, 16), to_signed(16#3620#, 16),
     to_signed(16#3612#, 16), to_signed(16#3605#, 16), to_signed(16#35F7#, 16), to_signed(16#35EA#, 16),
     to_signed(16#35DC#, 16), to_signed(16#35CE#, 16), to_signed(16#35C1#, 16), to_signed(16#35B3#, 16),
     to_signed(16#35A5#, 16), to_signed(16#3598#, 16), to_signed(16#358A#, 16), to_signed(16#357C#, 16),
     to_signed(16#356E#, 16), to_signed(16#3561#, 16), to_signed(16#3553#, 16), to_signed(16#3545#, 16),
     to_signed(16#3537#, 16), to_signed(16#3529#, 16), to_signed(16#351B#, 16), to_signed(16#350D#, 16),
     to_signed(16#34FF#, 16), to_signed(16#34F1#, 16), to_signed(16#34E2#, 16), to_signed(16#34D4#, 16),
     to_signed(16#34C6#, 16), to_signed(16#34B8#, 16), to_signed(16#34AA#, 16), to_signed(16#349B#, 16),
     to_signed(16#348D#, 16), to_signed(16#347F#, 16), to_signed(16#3470#, 16), to_signed(16#3462#, 16),
     to_signed(16#3453#, 16), to_signed(16#3445#, 16), to_signed(16#3436#, 16), to_signed(16#3428#, 16),
     to_signed(16#3419#, 16), to_signed(16#340B#, 16), to_signed(16#33FC#, 16), to_signed(16#33ED#, 16),
     to_signed(16#33DF#, 16), to_signed(16#33D0#, 16), to_signed(16#33C1#, 16), to_signed(16#33B2#, 16),
     to_signed(16#33A3#, 16), to_signed(16#3395#, 16), to_signed(16#3386#, 16), to_signed(16#3377#, 16),
     to_signed(16#3368#, 16), to_signed(16#3359#, 16), to_signed(16#334A#, 16), to_signed(16#333B#, 16),
     to_signed(16#332C#, 16), to_signed(16#331D#, 16), to_signed(16#330D#, 16), to_signed(16#32FE#, 16),
     to_signed(16#32EF#, 16), to_signed(16#32E0#, 16), to_signed(16#32D0#, 16), to_signed(16#32C1#, 16),
     to_signed(16#32B2#, 16), to_signed(16#32A3#, 16), to_signed(16#3293#, 16), to_signed(16#3284#, 16),
     to_signed(16#3274#, 16), to_signed(16#3265#, 16), to_signed(16#3255#, 16), to_signed(16#3246#, 16),
     to_signed(16#3236#, 16), to_signed(16#3227#, 16), to_signed(16#3217#, 16), to_signed(16#3207#, 16),
     to_signed(16#31F8#, 16), to_signed(16#31E8#, 16), to_signed(16#31D8#, 16), to_signed(16#31C8#, 16),
     to_signed(16#31B9#, 16), to_signed(16#31A9#, 16), to_signed(16#3199#, 16), to_signed(16#3189#, 16),
     to_signed(16#3179#, 16), to_signed(16#3169#, 16), to_signed(16#3159#, 16), to_signed(16#3149#, 16),
     to_signed(16#3139#, 16), to_signed(16#3129#, 16), to_signed(16#3119#, 16), to_signed(16#3109#, 16),
     to_signed(16#30F9#, 16), to_signed(16#30E8#, 16), to_signed(16#30D8#, 16), to_signed(16#30C8#, 16),
     to_signed(16#30B8#, 16), to_signed(16#30A7#, 16), to_signed(16#3097#, 16), to_signed(16#3087#, 16),
     to_signed(16#3076#, 16), to_signed(16#3066#, 16), to_signed(16#3055#, 16), to_signed(16#3045#, 16),
     to_signed(16#3034#, 16), to_signed(16#3024#, 16), to_signed(16#3013#, 16), to_signed(16#3002#, 16),
     to_signed(16#2FF2#, 16), to_signed(16#2FE1#, 16), to_signed(16#2FD0#, 16), to_signed(16#2FC0#, 16),
     to_signed(16#2FAF#, 16), to_signed(16#2F9E#, 16), to_signed(16#2F8D#, 16), to_signed(16#2F7D#, 16),
     to_signed(16#2F6C#, 16), to_signed(16#2F5B#, 16), to_signed(16#2F4A#, 16), to_signed(16#2F39#, 16),
     to_signed(16#2F28#, 16), to_signed(16#2F17#, 16), to_signed(16#2F06#, 16), to_signed(16#2EF5#, 16),
     to_signed(16#2EE4#, 16), to_signed(16#2ED3#, 16), to_signed(16#2EC2#, 16), to_signed(16#2EB0#, 16),
     to_signed(16#2E9F#, 16), to_signed(16#2E8E#, 16), to_signed(16#2E7D#, 16), to_signed(16#2E6B#, 16),
     to_signed(16#2E5A#, 16), to_signed(16#2E49#, 16), to_signed(16#2E37#, 16), to_signed(16#2E26#, 16),
     to_signed(16#2E15#, 16), to_signed(16#2E03#, 16), to_signed(16#2DF2#, 16), to_signed(16#2DE0#, 16),
     to_signed(16#2DCF#, 16), to_signed(16#2DBD#, 16), to_signed(16#2DAB#, 16), to_signed(16#2D9A#, 16),
     to_signed(16#2D88#, 16), to_signed(16#2D76#, 16), to_signed(16#2D65#, 16), to_signed(16#2D53#, 16));  -- sfix16 [512]
  CONSTANT Twiddle_im_table_data          : vector_of_signed16(0 TO 511) := 
    (to_signed(16#0000#, 16), to_signed(-16#0019#, 16), to_signed(-16#0032#, 16), to_signed(-16#004B#, 16),
     to_signed(-16#0065#, 16), to_signed(-16#007E#, 16), to_signed(-16#0097#, 16), to_signed(-16#00B0#, 16),
     to_signed(-16#00C9#, 16), to_signed(-16#00E2#, 16), to_signed(-16#00FB#, 16), to_signed(-16#0114#, 16),
     to_signed(-16#012E#, 16), to_signed(-16#0147#, 16), to_signed(-16#0160#, 16), to_signed(-16#0179#, 16),
     to_signed(-16#0192#, 16), to_signed(-16#01AB#, 16), to_signed(-16#01C4#, 16), to_signed(-16#01DD#, 16),
     to_signed(-16#01F7#, 16), to_signed(-16#0210#, 16), to_signed(-16#0229#, 16), to_signed(-16#0242#, 16),
     to_signed(-16#025B#, 16), to_signed(-16#0274#, 16), to_signed(-16#028D#, 16), to_signed(-16#02A6#, 16),
     to_signed(-16#02C0#, 16), to_signed(-16#02D9#, 16), to_signed(-16#02F2#, 16), to_signed(-16#030B#, 16),
     to_signed(-16#0324#, 16), to_signed(-16#033D#, 16), to_signed(-16#0356#, 16), to_signed(-16#036F#, 16),
     to_signed(-16#0388#, 16), to_signed(-16#03A1#, 16), to_signed(-16#03BB#, 16), to_signed(-16#03D4#, 16),
     to_signed(-16#03ED#, 16), to_signed(-16#0406#, 16), to_signed(-16#041F#, 16), to_signed(-16#0438#, 16),
     to_signed(-16#0451#, 16), to_signed(-16#046A#, 16), to_signed(-16#0483#, 16), to_signed(-16#049C#, 16),
     to_signed(-16#04B5#, 16), to_signed(-16#04CE#, 16), to_signed(-16#04E7#, 16), to_signed(-16#0500#, 16),
     to_signed(-16#051A#, 16), to_signed(-16#0533#, 16), to_signed(-16#054C#, 16), to_signed(-16#0565#, 16),
     to_signed(-16#057E#, 16), to_signed(-16#0597#, 16), to_signed(-16#05B0#, 16), to_signed(-16#05C9#, 16),
     to_signed(-16#05E2#, 16), to_signed(-16#05FB#, 16), to_signed(-16#0614#, 16), to_signed(-16#062D#, 16),
     to_signed(-16#0646#, 16), to_signed(-16#065F#, 16), to_signed(-16#0678#, 16), to_signed(-16#0691#, 16),
     to_signed(-16#06AA#, 16), to_signed(-16#06C3#, 16), to_signed(-16#06DC#, 16), to_signed(-16#06F5#, 16),
     to_signed(-16#070E#, 16), to_signed(-16#0727#, 16), to_signed(-16#0740#, 16), to_signed(-16#0759#, 16),
     to_signed(-16#0772#, 16), to_signed(-16#078B#, 16), to_signed(-16#07A4#, 16), to_signed(-16#07BD#, 16),
     to_signed(-16#07D6#, 16), to_signed(-16#07EF#, 16), to_signed(-16#0807#, 16), to_signed(-16#0820#, 16),
     to_signed(-16#0839#, 16), to_signed(-16#0852#, 16), to_signed(-16#086B#, 16), to_signed(-16#0884#, 16),
     to_signed(-16#089D#, 16), to_signed(-16#08B6#, 16), to_signed(-16#08CF#, 16), to_signed(-16#08E8#, 16),
     to_signed(-16#0901#, 16), to_signed(-16#0919#, 16), to_signed(-16#0932#, 16), to_signed(-16#094B#, 16),
     to_signed(-16#0964#, 16), to_signed(-16#097D#, 16), to_signed(-16#0996#, 16), to_signed(-16#09AF#, 16),
     to_signed(-16#09C7#, 16), to_signed(-16#09E0#, 16), to_signed(-16#09F9#, 16), to_signed(-16#0A12#, 16),
     to_signed(-16#0A2B#, 16), to_signed(-16#0A44#, 16), to_signed(-16#0A5C#, 16), to_signed(-16#0A75#, 16),
     to_signed(-16#0A8E#, 16), to_signed(-16#0AA7#, 16), to_signed(-16#0AC0#, 16), to_signed(-16#0AD8#, 16),
     to_signed(-16#0AF1#, 16), to_signed(-16#0B0A#, 16), to_signed(-16#0B23#, 16), to_signed(-16#0B3B#, 16),
     to_signed(-16#0B54#, 16), to_signed(-16#0B6D#, 16), to_signed(-16#0B85#, 16), to_signed(-16#0B9E#, 16),
     to_signed(-16#0BB7#, 16), to_signed(-16#0BD0#, 16), to_signed(-16#0BE8#, 16), to_signed(-16#0C01#, 16),
     to_signed(-16#0C1A#, 16), to_signed(-16#0C32#, 16), to_signed(-16#0C4B#, 16), to_signed(-16#0C64#, 16),
     to_signed(-16#0C7C#, 16), to_signed(-16#0C95#, 16), to_signed(-16#0CAE#, 16), to_signed(-16#0CC6#, 16),
     to_signed(-16#0CDF#, 16), to_signed(-16#0CF8#, 16), to_signed(-16#0D10#, 16), to_signed(-16#0D29#, 16),
     to_signed(-16#0D41#, 16), to_signed(-16#0D5A#, 16), to_signed(-16#0D72#, 16), to_signed(-16#0D8B#, 16),
     to_signed(-16#0DA4#, 16), to_signed(-16#0DBC#, 16), to_signed(-16#0DD5#, 16), to_signed(-16#0DED#, 16),
     to_signed(-16#0E06#, 16), to_signed(-16#0E1E#, 16), to_signed(-16#0E37#, 16), to_signed(-16#0E4F#, 16),
     to_signed(-16#0E68#, 16), to_signed(-16#0E80#, 16), to_signed(-16#0E99#, 16), to_signed(-16#0EB1#, 16),
     to_signed(-16#0ECA#, 16), to_signed(-16#0EE2#, 16), to_signed(-16#0EFB#, 16), to_signed(-16#0F13#, 16),
     to_signed(-16#0F2B#, 16), to_signed(-16#0F44#, 16), to_signed(-16#0F5C#, 16), to_signed(-16#0F75#, 16),
     to_signed(-16#0F8D#, 16), to_signed(-16#0FA5#, 16), to_signed(-16#0FBE#, 16), to_signed(-16#0FD6#, 16),
     to_signed(-16#0FEE#, 16), to_signed(-16#1007#, 16), to_signed(-16#101F#, 16), to_signed(-16#1037#, 16),
     to_signed(-16#1050#, 16), to_signed(-16#1068#, 16), to_signed(-16#1080#, 16), to_signed(-16#1099#, 16),
     to_signed(-16#10B1#, 16), to_signed(-16#10C9#, 16), to_signed(-16#10E1#, 16), to_signed(-16#10FA#, 16),
     to_signed(-16#1112#, 16), to_signed(-16#112A#, 16), to_signed(-16#1142#, 16), to_signed(-16#115A#, 16),
     to_signed(-16#1173#, 16), to_signed(-16#118B#, 16), to_signed(-16#11A3#, 16), to_signed(-16#11BB#, 16),
     to_signed(-16#11D3#, 16), to_signed(-16#11EB#, 16), to_signed(-16#1204#, 16), to_signed(-16#121C#, 16),
     to_signed(-16#1234#, 16), to_signed(-16#124C#, 16), to_signed(-16#1264#, 16), to_signed(-16#127C#, 16),
     to_signed(-16#1294#, 16), to_signed(-16#12AC#, 16), to_signed(-16#12C4#, 16), to_signed(-16#12DC#, 16),
     to_signed(-16#12F4#, 16), to_signed(-16#130C#, 16), to_signed(-16#1324#, 16), to_signed(-16#133C#, 16),
     to_signed(-16#1354#, 16), to_signed(-16#136C#, 16), to_signed(-16#1384#, 16), to_signed(-16#139C#, 16),
     to_signed(-16#13B4#, 16), to_signed(-16#13CC#, 16), to_signed(-16#13E4#, 16), to_signed(-16#13FB#, 16),
     to_signed(-16#1413#, 16), to_signed(-16#142B#, 16), to_signed(-16#1443#, 16), to_signed(-16#145B#, 16),
     to_signed(-16#1473#, 16), to_signed(-16#148B#, 16), to_signed(-16#14A2#, 16), to_signed(-16#14BA#, 16),
     to_signed(-16#14D2#, 16), to_signed(-16#14EA#, 16), to_signed(-16#1501#, 16), to_signed(-16#1519#, 16),
     to_signed(-16#1531#, 16), to_signed(-16#1549#, 16), to_signed(-16#1560#, 16), to_signed(-16#1578#, 16),
     to_signed(-16#1590#, 16), to_signed(-16#15A7#, 16), to_signed(-16#15BF#, 16), to_signed(-16#15D7#, 16),
     to_signed(-16#15EE#, 16), to_signed(-16#1606#, 16), to_signed(-16#161D#, 16), to_signed(-16#1635#, 16),
     to_signed(-16#164C#, 16), to_signed(-16#1664#, 16), to_signed(-16#167C#, 16), to_signed(-16#1693#, 16),
     to_signed(-16#16AB#, 16), to_signed(-16#16C2#, 16), to_signed(-16#16DA#, 16), to_signed(-16#16F1#, 16),
     to_signed(-16#1709#, 16), to_signed(-16#1720#, 16), to_signed(-16#1737#, 16), to_signed(-16#174F#, 16),
     to_signed(-16#1766#, 16), to_signed(-16#177E#, 16), to_signed(-16#1795#, 16), to_signed(-16#17AC#, 16),
     to_signed(-16#17C4#, 16), to_signed(-16#17DB#, 16), to_signed(-16#17F2#, 16), to_signed(-16#180A#, 16),
     to_signed(-16#1821#, 16), to_signed(-16#1838#, 16), to_signed(-16#184F#, 16), to_signed(-16#1867#, 16),
     to_signed(-16#187E#, 16), to_signed(-16#1895#, 16), to_signed(-16#18AC#, 16), to_signed(-16#18C3#, 16),
     to_signed(-16#18DB#, 16), to_signed(-16#18F2#, 16), to_signed(-16#1909#, 16), to_signed(-16#1920#, 16),
     to_signed(-16#1937#, 16), to_signed(-16#194E#, 16), to_signed(-16#1965#, 16), to_signed(-16#197C#, 16),
     to_signed(-16#1993#, 16), to_signed(-16#19AA#, 16), to_signed(-16#19C1#, 16), to_signed(-16#19D8#, 16),
     to_signed(-16#19EF#, 16), to_signed(-16#1A06#, 16), to_signed(-16#1A1D#, 16), to_signed(-16#1A34#, 16),
     to_signed(-16#1A4B#, 16), to_signed(-16#1A62#, 16), to_signed(-16#1A79#, 16), to_signed(-16#1A90#, 16),
     to_signed(-16#1AA7#, 16), to_signed(-16#1ABE#, 16), to_signed(-16#1AD4#, 16), to_signed(-16#1AEB#, 16),
     to_signed(-16#1B02#, 16), to_signed(-16#1B19#, 16), to_signed(-16#1B30#, 16), to_signed(-16#1B46#, 16),
     to_signed(-16#1B5D#, 16), to_signed(-16#1B74#, 16), to_signed(-16#1B8A#, 16), to_signed(-16#1BA1#, 16),
     to_signed(-16#1BB8#, 16), to_signed(-16#1BCE#, 16), to_signed(-16#1BE5#, 16), to_signed(-16#1BFC#, 16),
     to_signed(-16#1C12#, 16), to_signed(-16#1C29#, 16), to_signed(-16#1C3F#, 16), to_signed(-16#1C56#, 16),
     to_signed(-16#1C6C#, 16), to_signed(-16#1C83#, 16), to_signed(-16#1C99#, 16), to_signed(-16#1CB0#, 16),
     to_signed(-16#1CC6#, 16), to_signed(-16#1CDD#, 16), to_signed(-16#1CF3#, 16), to_signed(-16#1D0A#, 16),
     to_signed(-16#1D20#, 16), to_signed(-16#1D36#, 16), to_signed(-16#1D4D#, 16), to_signed(-16#1D63#, 16),
     to_signed(-16#1D79#, 16), to_signed(-16#1D90#, 16), to_signed(-16#1DA6#, 16), to_signed(-16#1DBC#, 16),
     to_signed(-16#1DD3#, 16), to_signed(-16#1DE9#, 16), to_signed(-16#1DFF#, 16), to_signed(-16#1E15#, 16),
     to_signed(-16#1E2B#, 16), to_signed(-16#1E42#, 16), to_signed(-16#1E58#, 16), to_signed(-16#1E6E#, 16),
     to_signed(-16#1E84#, 16), to_signed(-16#1E9A#, 16), to_signed(-16#1EB0#, 16), to_signed(-16#1EC6#, 16),
     to_signed(-16#1EDC#, 16), to_signed(-16#1EF2#, 16), to_signed(-16#1F08#, 16), to_signed(-16#1F1E#, 16),
     to_signed(-16#1F34#, 16), to_signed(-16#1F4A#, 16), to_signed(-16#1F60#, 16), to_signed(-16#1F76#, 16),
     to_signed(-16#1F8C#, 16), to_signed(-16#1FA2#, 16), to_signed(-16#1FB7#, 16), to_signed(-16#1FCD#, 16),
     to_signed(-16#1FE3#, 16), to_signed(-16#1FF9#, 16), to_signed(-16#200F#, 16), to_signed(-16#2024#, 16),
     to_signed(-16#203A#, 16), to_signed(-16#2050#, 16), to_signed(-16#2065#, 16), to_signed(-16#207B#, 16),
     to_signed(-16#2091#, 16), to_signed(-16#20A6#, 16), to_signed(-16#20BC#, 16), to_signed(-16#20D1#, 16),
     to_signed(-16#20E7#, 16), to_signed(-16#20FD#, 16), to_signed(-16#2112#, 16), to_signed(-16#2128#, 16),
     to_signed(-16#213D#, 16), to_signed(-16#2153#, 16), to_signed(-16#2168#, 16), to_signed(-16#217D#, 16),
     to_signed(-16#2193#, 16), to_signed(-16#21A8#, 16), to_signed(-16#21BE#, 16), to_signed(-16#21D3#, 16),
     to_signed(-16#21E8#, 16), to_signed(-16#21FE#, 16), to_signed(-16#2213#, 16), to_signed(-16#2228#, 16),
     to_signed(-16#223D#, 16), to_signed(-16#2253#, 16), to_signed(-16#2268#, 16), to_signed(-16#227D#, 16),
     to_signed(-16#2292#, 16), to_signed(-16#22A7#, 16), to_signed(-16#22BC#, 16), to_signed(-16#22D2#, 16),
     to_signed(-16#22E7#, 16), to_signed(-16#22FC#, 16), to_signed(-16#2311#, 16), to_signed(-16#2326#, 16),
     to_signed(-16#233B#, 16), to_signed(-16#2350#, 16), to_signed(-16#2365#, 16), to_signed(-16#237A#, 16),
     to_signed(-16#238E#, 16), to_signed(-16#23A3#, 16), to_signed(-16#23B8#, 16), to_signed(-16#23CD#, 16),
     to_signed(-16#23E2#, 16), to_signed(-16#23F7#, 16), to_signed(-16#240B#, 16), to_signed(-16#2420#, 16),
     to_signed(-16#2435#, 16), to_signed(-16#244A#, 16), to_signed(-16#245E#, 16), to_signed(-16#2473#, 16),
     to_signed(-16#2488#, 16), to_signed(-16#249C#, 16), to_signed(-16#24B1#, 16), to_signed(-16#24C5#, 16),
     to_signed(-16#24DA#, 16), to_signed(-16#24EF#, 16), to_signed(-16#2503#, 16), to_signed(-16#2518#, 16),
     to_signed(-16#252C#, 16), to_signed(-16#2541#, 16), to_signed(-16#2555#, 16), to_signed(-16#2569#, 16),
     to_signed(-16#257E#, 16), to_signed(-16#2592#, 16), to_signed(-16#25A6#, 16), to_signed(-16#25BB#, 16),
     to_signed(-16#25CF#, 16), to_signed(-16#25E3#, 16), to_signed(-16#25F8#, 16), to_signed(-16#260C#, 16),
     to_signed(-16#2620#, 16), to_signed(-16#2634#, 16), to_signed(-16#2648#, 16), to_signed(-16#265C#, 16),
     to_signed(-16#2671#, 16), to_signed(-16#2685#, 16), to_signed(-16#2699#, 16), to_signed(-16#26AD#, 16),
     to_signed(-16#26C1#, 16), to_signed(-16#26D5#, 16), to_signed(-16#26E9#, 16), to_signed(-16#26FD#, 16),
     to_signed(-16#2711#, 16), to_signed(-16#2724#, 16), to_signed(-16#2738#, 16), to_signed(-16#274C#, 16),
     to_signed(-16#2760#, 16), to_signed(-16#2774#, 16), to_signed(-16#2788#, 16), to_signed(-16#279B#, 16),
     to_signed(-16#27AF#, 16), to_signed(-16#27C3#, 16), to_signed(-16#27D6#, 16), to_signed(-16#27EA#, 16),
     to_signed(-16#27FE#, 16), to_signed(-16#2811#, 16), to_signed(-16#2825#, 16), to_signed(-16#2838#, 16),
     to_signed(-16#284C#, 16), to_signed(-16#2860#, 16), to_signed(-16#2873#, 16), to_signed(-16#2886#, 16),
     to_signed(-16#289A#, 16), to_signed(-16#28AD#, 16), to_signed(-16#28C1#, 16), to_signed(-16#28D4#, 16),
     to_signed(-16#28E7#, 16), to_signed(-16#28FB#, 16), to_signed(-16#290E#, 16), to_signed(-16#2921#, 16),
     to_signed(-16#2935#, 16), to_signed(-16#2948#, 16), to_signed(-16#295B#, 16), to_signed(-16#296E#, 16),
     to_signed(-16#2981#, 16), to_signed(-16#2994#, 16), to_signed(-16#29A7#, 16), to_signed(-16#29BB#, 16),
     to_signed(-16#29CE#, 16), to_signed(-16#29E1#, 16), to_signed(-16#29F4#, 16), to_signed(-16#2A07#, 16),
     to_signed(-16#2A1A#, 16), to_signed(-16#2A2C#, 16), to_signed(-16#2A3F#, 16), to_signed(-16#2A52#, 16),
     to_signed(-16#2A65#, 16), to_signed(-16#2A78#, 16), to_signed(-16#2A8B#, 16), to_signed(-16#2A9D#, 16),
     to_signed(-16#2AB0#, 16), to_signed(-16#2AC3#, 16), to_signed(-16#2AD6#, 16), to_signed(-16#2AE8#, 16),
     to_signed(-16#2AFB#, 16), to_signed(-16#2B0D#, 16), to_signed(-16#2B20#, 16), to_signed(-16#2B33#, 16),
     to_signed(-16#2B45#, 16), to_signed(-16#2B58#, 16), to_signed(-16#2B6A#, 16), to_signed(-16#2B7D#, 16),
     to_signed(-16#2B8F#, 16), to_signed(-16#2BA1#, 16), to_signed(-16#2BB4#, 16), to_signed(-16#2BC6#, 16),
     to_signed(-16#2BD8#, 16), to_signed(-16#2BEB#, 16), to_signed(-16#2BFD#, 16), to_signed(-16#2C0F#, 16),
     to_signed(-16#2C21#, 16), to_signed(-16#2C34#, 16), to_signed(-16#2C46#, 16), to_signed(-16#2C58#, 16),
     to_signed(-16#2C6A#, 16), to_signed(-16#2C7C#, 16), to_signed(-16#2C8E#, 16), to_signed(-16#2CA0#, 16),
     to_signed(-16#2CB2#, 16), to_signed(-16#2CC4#, 16), to_signed(-16#2CD6#, 16), to_signed(-16#2CE8#, 16),
     to_signed(-16#2CFA#, 16), to_signed(-16#2D0C#, 16), to_signed(-16#2D1E#, 16), to_signed(-16#2D2F#, 16));  -- sfix16 [512]

  -- Signals
  SIGNAL Radix22TwdlMapping_cnt           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Radix22TwdlMapping_phase         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw  : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Radix22TwdlMapping_twdlAddrMap   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdl45Reg     : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1      : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2      : std_logic;
  SIGNAL Radix22TwdlMapping_cnt_next      : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Radix22TwdlMapping_phase_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1_next : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw_next : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Radix22TwdlMapping_twdlAddrMap_next : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdl45Reg_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2_next : std_logic;
  SIGNAL twdlAddr                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL twdlAddrVld                      : std_logic;
  SIGNAL twdlOctant                       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45                           : std_logic;
  SIGNAL twiddleS_re                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twiddleReg_re                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twiddleS_im                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twiddleReg_im                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdlOctantReg                    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45Reg                        : std_logic;

BEGIN
  -- Radix22TwdlMapping
  Radix22TwdlMapping_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22TwdlMapping_octantReg1 <= to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdlAddr_raw <= to_unsigned(16#000#, 12);
        Radix22TwdlMapping_twdlAddrMap <= to_unsigned(16#000#, 9);
        Radix22TwdlMapping_twdl45Reg <= '0';
        Radix22TwdlMapping_dvldReg1 <= '0';
        Radix22TwdlMapping_dvldReg2 <= '0';
        Radix22TwdlMapping_cnt <= to_unsigned(16#000#, 10);
        Radix22TwdlMapping_phase <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        Radix22TwdlMapping_cnt <= Radix22TwdlMapping_cnt_next;
        Radix22TwdlMapping_phase <= Radix22TwdlMapping_phase_next;
        Radix22TwdlMapping_octantReg1 <= Radix22TwdlMapping_octantReg1_next;
        Radix22TwdlMapping_twdlAddr_raw <= Radix22TwdlMapping_twdlAddr_raw_next;
        Radix22TwdlMapping_twdlAddrMap <= Radix22TwdlMapping_twdlAddrMap_next;
        Radix22TwdlMapping_twdl45Reg <= Radix22TwdlMapping_twdl45Reg_next;
        Radix22TwdlMapping_dvldReg1 <= Radix22TwdlMapping_dvldReg1_next;
        Radix22TwdlMapping_dvldReg2 <= Radix22TwdlMapping_dvldReg2_next;
      END IF;
    END IF;
  END PROCESS Radix22TwdlMapping_process;

  Radix22TwdlMapping_output : PROCESS (Radix22TwdlMapping_cnt, Radix22TwdlMapping_dvldReg1,
       Radix22TwdlMapping_dvldReg2, Radix22TwdlMapping_octantReg1,
       Radix22TwdlMapping_phase, Radix22TwdlMapping_twdl45Reg,
       Radix22TwdlMapping_twdlAddrMap, Radix22TwdlMapping_twdlAddr_raw,
       dout_8_1_vld)
    VARIABLE octant : unsigned(2 DOWNTO 0);
    VARIABLE cnt_cast : unsigned(11 DOWNTO 0);
    VARIABLE sub_temp : signed(25 DOWNTO 0);
    VARIABLE sub_temp_0 : signed(13 DOWNTO 0);
    VARIABLE sub_temp_1 : signed(13 DOWNTO 0);
    VARIABLE sub_temp_2 : signed(25 DOWNTO 0);
    VARIABLE sub_temp_3 : signed(25 DOWNTO 0);
  BEGIN
    sub_temp := to_signed(16#0000000#, 26);
    sub_temp_0 := to_signed(16#0000#, 14);
    sub_temp_1 := to_signed(16#0000#, 14);
    sub_temp_2 := to_signed(16#0000000#, 26);
    sub_temp_3 := to_signed(16#0000000#, 26);
    cnt_cast := to_unsigned(16#000#, 12);
    Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt;
    Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase;
    Radix22TwdlMapping_dvldReg2_next <= Radix22TwdlMapping_dvldReg1;
    Radix22TwdlMapping_dvldReg1_next <= dout_8_1_vld;
    CASE Radix22TwdlMapping_twdlAddr_raw IS
      WHEN "001000000000" =>
        octant := to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "010000000000" =>
        octant := to_unsigned(16#1#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "011000000000" =>
        octant := to_unsigned(16#2#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "100000000000" =>
        octant := to_unsigned(16#3#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "101000000000" =>
        octant := to_unsigned(16#4#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN OTHERS => 
        octant := Radix22TwdlMapping_twdlAddr_raw(11 DOWNTO 9);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
    END CASE;
    Radix22TwdlMapping_octantReg1_next <= octant;
    CASE octant IS
      WHEN "000" =>
        Radix22TwdlMapping_twdlAddrMap_next <= Radix22TwdlMapping_twdlAddr_raw(8 DOWNTO 0);
      WHEN "001" =>
        sub_temp_0 := to_signed(16#0400#, 14) - signed(resize(Radix22TwdlMapping_twdlAddr_raw, 14));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_0(8 DOWNTO 0));
      WHEN "010" =>
        sub_temp_1 := signed(resize(Radix22TwdlMapping_twdlAddr_raw, 14)) - to_signed(16#0400#, 14);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_1(8 DOWNTO 0));
      WHEN "011" =>
        sub_temp_2 := to_signed(16#0100000#, 26) - signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_2(17 DOWNTO 9));
      WHEN "100" =>
        sub_temp_3 := signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26)) - to_signed(16#0100000#, 26);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_3(17 DOWNTO 9));
      WHEN OTHERS => 
        sub_temp := to_signed(16#0180000#, 26) - signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp(17 DOWNTO 9));
    END CASE;
    IF Radix22TwdlMapping_phase = to_unsigned(16#0#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= to_unsigned(16#000#, 12);
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#1#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(Radix22TwdlMapping_cnt, 12) sll 1;
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#2#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(Radix22TwdlMapping_cnt, 12);
    ELSE 
      cnt_cast := resize(Radix22TwdlMapping_cnt, 12);
      Radix22TwdlMapping_twdlAddr_raw_next <= (cnt_cast sll 1) + cnt_cast;
    END IF;
    IF dout_8_1_vld = '1' AND (Radix22TwdlMapping_cnt > to_unsigned(16#3BF#, 10)) THEN 
      Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase + to_unsigned(16#1#, 2);
    END IF;
    IF dout_8_1_vld = '1' THEN 
      Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt + to_unsigned(16#040#, 10);
    END IF;
    twdlAddr <= Radix22TwdlMapping_twdlAddrMap;
    twdlAddrVld <= Radix22TwdlMapping_dvldReg2;
    twdlOctant <= Radix22TwdlMapping_octantReg1;
    twdl45 <= Radix22TwdlMapping_twdl45Reg;
  END PROCESS Radix22TwdlMapping_output;


  -- Twiddle ROM1
  twiddleS_re <= Twiddle_re_table_data(to_integer(twdlAddr));

  TWIDDLEROM_RE_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twiddleReg_re <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twiddleReg_re <= twiddleS_re;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_RE_process;


  -- Twiddle ROM2
  twiddleS_im <= Twiddle_im_table_data(to_integer(twdlAddr));

  TWIDDLEROM_IM_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twiddleReg_im <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        twiddleReg_im <= twiddleS_im;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_IM_process;


  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdlOctantReg <= to_unsigned(16#0#, 3);
      ELSIF enb = '1' THEN
        twdlOctantReg <= twdlOctant;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl45Reg <= '0';
      ELSIF enb = '1' THEN
        twdl45Reg <= twdl45;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  -- Radix22TwdlOctCorr
  Radix22TwdlOctCorr_output : PROCESS (twdl45Reg, twdlOctantReg, twiddleReg_im, twiddleReg_re)
    VARIABLE twdlIn_re : signed(15 DOWNTO 0);
    VARIABLE twdlIn_im : signed(15 DOWNTO 0);
    VARIABLE cast : signed(16 DOWNTO 0);
    VARIABLE cast_0 : signed(16 DOWNTO 0);
    VARIABLE cast_1 : signed(16 DOWNTO 0);
    VARIABLE cast_2 : signed(16 DOWNTO 0);
    VARIABLE cast_3 : signed(16 DOWNTO 0);
    VARIABLE cast_4 : signed(16 DOWNTO 0);
  BEGIN
    cast := to_signed(16#00000#, 17);
    cast_0 := to_signed(16#00000#, 17);
    cast_1 := to_signed(16#00000#, 17);
    cast_2 := to_signed(16#00000#, 17);
    cast_3 := to_signed(16#00000#, 17);
    cast_4 := to_signed(16#00000#, 17);
    twdlIn_re := twiddleReg_re;
    twdlIn_im := twiddleReg_im;
    IF twdl45Reg = '1' THEN 
      CASE twdlOctantReg IS
        WHEN "000" =>
          twdlIn_re := to_signed(16#2D41#, 16);
          twdlIn_im := to_signed(-16#2D41#, 16);
        WHEN "010" =>
          twdlIn_re := to_signed(-16#2D41#, 16);
          twdlIn_im := to_signed(-16#2D41#, 16);
        WHEN "100" =>
          twdlIn_re := to_signed(-16#2D41#, 16);
          twdlIn_im := to_signed(16#2D41#, 16);
        WHEN OTHERS => 
          twdlIn_re := to_signed(16#2D41#, 16);
          twdlIn_im := to_signed(-16#2D41#, 16);
      END CASE;
    ELSE 
      CASE twdlOctantReg IS
        WHEN "000" =>
          NULL;
        WHEN "001" =>
          cast :=  - (resize(twiddleReg_im, 17));
          twdlIn_re := cast(15 DOWNTO 0);
          cast_2 :=  - (resize(twiddleReg_re, 17));
          twdlIn_im := cast_2(15 DOWNTO 0);
        WHEN "010" =>
          twdlIn_re := twiddleReg_im;
          cast_3 :=  - (resize(twiddleReg_re, 17));
          twdlIn_im := cast_3(15 DOWNTO 0);
        WHEN "011" =>
          cast_0 :=  - (resize(twiddleReg_re, 17));
          twdlIn_re := cast_0(15 DOWNTO 0);
          twdlIn_im := twiddleReg_im;
        WHEN "100" =>
          cast_1 :=  - (resize(twiddleReg_re, 17));
          twdlIn_re := cast_1(15 DOWNTO 0);
          cast_4 :=  - (resize(twiddleReg_im, 17));
          twdlIn_im := cast_4(15 DOWNTO 0);
        WHEN OTHERS => 
          twdlIn_re := twiddleReg_im;
          twdlIn_im := twiddleReg_re;
      END CASE;
    END IF;
    twdl_9_1_re <= twdlIn_re;
    twdl_9_1_im <= twdlIn_im;
  END PROCESS Radix22TwdlOctCorr_output;


END rtl;


-- End of TWDLROM_9_1_block.vhd --

-- Start of TWDLROM_9_1_block1.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\TWDLROM_9_1_block1.vhd
-- Created: 2025-03-18 15:26:31
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: TWDLROM_9_1_block1
-- Source Path: System_Template0x2810x29/DSP/IFFT HDL Optimized/TWDLROM_9_1
-- Hierarchy Level: 2
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DSP_pkg.ALL;

ENTITY TWDLROM_9_1_block1 IS
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_8_1_vld                      :   IN    std_logic;
        twdl_9_1_re                       :   OUT   signed(31 DOWNTO 0);  -- sfix32_En30
        twdl_9_1_im                       :   OUT   signed(31 DOWNTO 0)  -- sfix32_En30
        );
END TWDLROM_9_1_block1;


ARCHITECTURE rtl OF TWDLROM_9_1_block1 IS

  -- Constants
  CONSTANT Twiddle_re_table_data          : vector_of_signed32(0 TO 511) := 
    (to_signed(1073741824, 32), to_signed(1073740561, 32), to_signed(1073736771, 32), to_signed(1073730454, 32),
     to_signed(1073721611, 32), to_signed(1073710241, 32), to_signed(1073696345, 32), to_signed(1073679922, 32),
     to_signed(1073660973, 32), to_signed(1073639498, 32), to_signed(1073615496, 32), to_signed(1073588967, 32),
     to_signed(1073559913, 32), to_signed(1073528332, 32), to_signed(1073494225, 32), to_signed(1073457592, 32),
     to_signed(1073418433, 32), to_signed(1073376748, 32), to_signed(1073332538, 32), to_signed(1073285802, 32),
     to_signed(1073236540, 32), to_signed(1073184753, 32), to_signed(1073130440, 32), to_signed(1073073603, 32),
     to_signed(1073014240, 32), to_signed(1072952352, 32), to_signed(1072887940, 32), to_signed(1072821003, 32),
     to_signed(1072751542, 32), to_signed(1072679556, 32), to_signed(1072605046, 32), to_signed(1072528012, 32),
     to_signed(1072448455, 32), to_signed(1072366374, 32), to_signed(1072281769, 32), to_signed(1072194642, 32),
     to_signed(1072104991, 32), to_signed(1072012818, 32), to_signed(1071918122, 32), to_signed(1071820903, 32),
     to_signed(1071721163, 32), to_signed(1071618901, 32), to_signed(1071514117, 32), to_signed(1071406812, 32),
     to_signed(1071296985, 32), to_signed(1071184638, 32), to_signed(1071069770, 32), to_signed(1070952382, 32),
     to_signed(1070832474, 32), to_signed(1070710046, 32), to_signed(1070585099, 32), to_signed(1070457632, 32),
     to_signed(1070327646, 32), to_signed(1070195142, 32), to_signed(1070060120, 32), to_signed(1069922579, 32),
     to_signed(1069782521, 32), to_signed(1069639946, 32), to_signed(1069494854, 32), to_signed(1069347245, 32),
     to_signed(1069197120, 32), to_signed(1069044479, 32), to_signed(1068889322, 32), to_signed(1068731650, 32),
     to_signed(1068571464, 32), to_signed(1068408763, 32), to_signed(1068243547, 32), to_signed(1068075818, 32),
     to_signed(1067905576, 32), to_signed(1067732821, 32), to_signed(1067557554, 32), to_signed(1067379774, 32),
     to_signed(1067199483, 32), to_signed(1067016680, 32), to_signed(1066831367, 32), to_signed(1066643544, 32),
     to_signed(1066453210, 32), to_signed(1066260367, 32), to_signed(1066065015, 32), to_signed(1065867154, 32),
     to_signed(1065666786, 32), to_signed(1065463909, 32), to_signed(1065258526, 32), to_signed(1065050636, 32),
     to_signed(1064840240, 32), to_signed(1064627338, 32), to_signed(1064411931, 32), to_signed(1064194019, 32),
     to_signed(1063973603, 32), to_signed(1063750684, 32), to_signed(1063525261, 32), to_signed(1063297336, 32),
     to_signed(1063066909, 32), to_signed(1062833980, 32), to_signed(1062598550, 32), to_signed(1062360620, 32),
     to_signed(1062120190, 32), to_signed(1061877261, 32), to_signed(1061631833, 32), to_signed(1061383907, 32),
     to_signed(1061133483, 32), to_signed(1060880563, 32), to_signed(1060625146, 32), to_signed(1060367233, 32),
     to_signed(1060106826, 32), to_signed(1059843923, 32), to_signed(1059578527, 32), to_signed(1059310638, 32),
     to_signed(1059040255, 32), to_signed(1058767381, 32), to_signed(1058492016, 32), to_signed(1058214159, 32),
     to_signed(1057933813, 32), to_signed(1057650977, 32), to_signed(1057365653, 32), to_signed(1057077840, 32),
     to_signed(1056787540, 32), to_signed(1056494753, 32), to_signed(1056199480, 32), to_signed(1055901722, 32),
     to_signed(1055601479, 32), to_signed(1055298753, 32), to_signed(1054993543, 32), to_signed(1054685850, 32),
     to_signed(1054375676, 32), to_signed(1054063021, 32), to_signed(1053747885, 32), to_signed(1053430270, 32),
     to_signed(1053110176, 32), to_signed(1052787604, 32), to_signed(1052462555, 32), to_signed(1052135029, 32),
     to_signed(1051805027, 32), to_signed(1051472550, 32), to_signed(1051137599, 32), to_signed(1050800175, 32),
     to_signed(1050460278, 32), to_signed(1050117909, 32), to_signed(1049773069, 32), to_signed(1049425759, 32),
     to_signed(1049075980, 32), to_signed(1048723732, 32), to_signed(1048369016, 32), to_signed(1048011834, 32),
     to_signed(1047652185, 32), to_signed(1047290071, 32), to_signed(1046925492, 32), to_signed(1046558451, 32),
     to_signed(1046188946, 32), to_signed(1045816980, 32), to_signed(1045442553, 32), to_signed(1045065665, 32),
     to_signed(1044686319, 32), to_signed(1044304514, 32), to_signed(1043920252, 32), to_signed(1043533534, 32),
     to_signed(1043144360, 32), to_signed(1042752731, 32), to_signed(1042358649, 32), to_signed(1041962114, 32),
     to_signed(1041563127, 32), to_signed(1041161689, 32), to_signed(1040757802, 32), to_signed(1040351465, 32),
     to_signed(1039942680, 32), to_signed(1039531448, 32), to_signed(1039117770, 32), to_signed(1038701647, 32),
     to_signed(1038283080, 32), to_signed(1037862069, 32), to_signed(1037438617, 32), to_signed(1037012723, 32),
     to_signed(1036584389, 32), to_signed(1036153615, 32), to_signed(1035720404, 32), to_signed(1035284755, 32),
     to_signed(1034846671, 32), to_signed(1034406151, 32), to_signed(1033963197, 32), to_signed(1033517810, 32),
     to_signed(1033069992, 32), to_signed(1032619742, 32), to_signed(1032167062, 32), to_signed(1031711954, 32),
     to_signed(1031254418, 32), to_signed(1030794455, 32), to_signed(1030332067, 32), to_signed(1029867254, 32),
     to_signed(1029400018, 32), to_signed(1028930359, 32), to_signed(1028458280, 32), to_signed(1027983780, 32),
     to_signed(1027506862, 32), to_signed(1027027525, 32), to_signed(1026545772, 32), to_signed(1026061603, 32),
     to_signed(1025575020, 32), to_signed(1025086024, 32), to_signed(1024594615, 32), to_signed(1024100796, 32),
     to_signed(1023604567, 32), to_signed(1023105929, 32), to_signed(1022604883, 32), to_signed(1022101432, 32),
     to_signed(1021595575, 32), to_signed(1021087314, 32), to_signed(1020576651, 32), to_signed(1020063586, 32),
     to_signed(1019548121, 32), to_signed(1019030256, 32), to_signed(1018509994, 32), to_signed(1017987335, 32),
     to_signed(1017462281, 32), to_signed(1016934832, 32), to_signed(1016404991, 32), to_signed(1015872758, 32),
     to_signed(1015338134, 32), to_signed(1014801122, 32), to_signed(1014261721, 32), to_signed(1013719934, 32),
     to_signed(1013175761, 32), to_signed(1012629204, 32), to_signed(1012080264, 32), to_signed(1011528943, 32),
     to_signed(1010975242, 32), to_signed(1010419162, 32), to_signed(1009860704, 32), to_signed(1009299870, 32),
     to_signed(1008736660, 32), to_signed(1008171077, 32), to_signed(1007603122, 32), to_signed(1007032796, 32),
     to_signed(1006460100, 32), to_signed(1005885036, 32), to_signed(1005307605, 32), to_signed(1004727809, 32),
     to_signed(1004145648, 32), to_signed(1003561124, 32), to_signed(1002974239, 32), to_signed(1002384994, 32),
     to_signed(1001793390, 32), to_signed(1001199428, 32), to_signed(1000603111, 32), to_signed(1000004439, 32),
     to_signed(999403415, 32), to_signed(998800038, 32), to_signed(998194311, 32), to_signed(997586236, 32),
     to_signed(996975812, 32), to_signed(996363043, 32), to_signed(995747930, 32), to_signed(995130473, 32),
     to_signed(994510675, 32), to_signed(993888536, 32), to_signed(993264059, 32), to_signed(992637245, 32),
     to_signed(992008094, 32), to_signed(991376610, 32), to_signed(990742793, 32), to_signed(990106644, 32),
     to_signed(989468165, 32), to_signed(988827359, 32), to_signed(988184225, 32), to_signed(987538766, 32),
     to_signed(986890984, 32), to_signed(986240879, 32), to_signed(985588453, 32), to_signed(984933708, 32),
     to_signed(984276646, 32), to_signed(983617267, 32), to_signed(982955574, 32), to_signed(982291568, 32),
     to_signed(981625251, 32), to_signed(980956623, 32), to_signed(980285688, 32), to_signed(979612445, 32),
     to_signed(978936898, 32), to_signed(978259047, 32), to_signed(977578894, 32), to_signed(976896441, 32),
     to_signed(976211688, 32), to_signed(975524639, 32), to_signed(974835295, 32), to_signed(974143656, 32),
     to_signed(973449725, 32), to_signed(972753504, 32), to_signed(972054994, 32), to_signed(971354196, 32),
     to_signed(970651112, 32), to_signed(969945745, 32), to_signed(969238095, 32), to_signed(968528165, 32),
     to_signed(967815955, 32), to_signed(967101468, 32), to_signed(966384706, 32), to_signed(965665669, 32),
     to_signed(964944360, 32), to_signed(964220780, 32), to_signed(963494932, 32), to_signed(962766816, 32),
     to_signed(962036435, 32), to_signed(961303790, 32), to_signed(960568883, 32), to_signed(959831716, 32),
     to_signed(959092290, 32), to_signed(958350608, 32), to_signed(957606670, 32), to_signed(956860479, 32),
     to_signed(956112036, 32), to_signed(955361344, 32), to_signed(954608403, 32), to_signed(953853216, 32),
     to_signed(953095785, 32), to_signed(952336111, 32), to_signed(951574196, 32), to_signed(950810042, 32),
     to_signed(950043650, 32), to_signed(949275023, 32), to_signed(948504163, 32), to_signed(947731070, 32),
     to_signed(946955747, 32), to_signed(946178196, 32), to_signed(945398418, 32), to_signed(944616416, 32),
     to_signed(943832191, 32), to_signed(943045745, 32), to_signed(942257081, 32), to_signed(941466198, 32),
     to_signed(940673101, 32), to_signed(939877790, 32), to_signed(939080267, 32), to_signed(938280535, 32),
     to_signed(937478595, 32), to_signed(936674448, 32), to_signed(935868098, 32), to_signed(935059546, 32),
     to_signed(934248793, 32), to_signed(933435842, 32), to_signed(932620694, 32), to_signed(931803352, 32),
     to_signed(930983817, 32), to_signed(930162092, 32), to_signed(929338177, 32), to_signed(928512076, 32),
     to_signed(927683790, 32), to_signed(926853322, 32), to_signed(926020672, 32), to_signed(925185843, 32),
     to_signed(924348837, 32), to_signed(923509656, 32), to_signed(922668302, 32), to_signed(921824777, 32),
     to_signed(920979082, 32), to_signed(920131221, 32), to_signed(919281194, 32), to_signed(918429004, 32),
     to_signed(917574653, 32), to_signed(916718143, 32), to_signed(915859476, 32), to_signed(914998653, 32),
     to_signed(914135678, 32), to_signed(913270551, 32), to_signed(912403276, 32), to_signed(911533853, 32),
     to_signed(910662286, 32), to_signed(909788576, 32), to_signed(908912725, 32), to_signed(908034735, 32),
     to_signed(907154608, 32), to_signed(906272347, 32), to_signed(905387953, 32), to_signed(904501429, 32),
     to_signed(903612776, 32), to_signed(902721998, 32), to_signed(901829095, 32), to_signed(900934069, 32),
     to_signed(900036924, 32), to_signed(899137661, 32), to_signed(898236282, 32), to_signed(897332790, 32),
     to_signed(896427186, 32), to_signed(895519473, 32), to_signed(894609652, 32), to_signed(893697727, 32),
     to_signed(892783698, 32), to_signed(891867569, 32), to_signed(890949341, 32), to_signed(890029016, 32),
     to_signed(889106597, 32), to_signed(888182086, 32), to_signed(887255485, 32), to_signed(886326796, 32),
     to_signed(885396022, 32), to_signed(884463164, 32), to_signed(883528225, 32), to_signed(882591207, 32),
     to_signed(881652112, 32), to_signed(880710943, 32), to_signed(879767701, 32), to_signed(878822389, 32),
     to_signed(877875009, 32), to_signed(876925563, 32), to_signed(875974054, 32), to_signed(875020483, 32),
     to_signed(874064853, 32), to_signed(873107167, 32), to_signed(872147426, 32), to_signed(871185633, 32),
     to_signed(870221790, 32), to_signed(869255900, 32), to_signed(868287963, 32), to_signed(867317984, 32),
     to_signed(866345964, 32), to_signed(865371905, 32), to_signed(864395810, 32), to_signed(863417681, 32),
     to_signed(862437520, 32), to_signed(861455330, 32), to_signed(860471112, 32), to_signed(859484870, 32),
     to_signed(858496606, 32), to_signed(857506321, 32), to_signed(856514019, 32), to_signed(855519701, 32),
     to_signed(854523370, 32), to_signed(853525028, 32), to_signed(852524677, 32), to_signed(851522321, 32),
     to_signed(850517961, 32), to_signed(849511600, 32), to_signed(848503239, 32), to_signed(847492882, 32),
     to_signed(846480531, 32), to_signed(845466188, 32), to_signed(844449856, 32), to_signed(843431536, 32),
     to_signed(842411232, 32), to_signed(841388945, 32), to_signed(840364679, 32), to_signed(839338435, 32),
     to_signed(838310216, 32), to_signed(837280024, 32), to_signed(836247863, 32), to_signed(835213733, 32),
     to_signed(834177638, 32), to_signed(833139580, 32), to_signed(832099562, 32), to_signed(831057586, 32),
     to_signed(830013654, 32), to_signed(828967769, 32), to_signed(827919934, 32), to_signed(826870150, 32),
     to_signed(825818421, 32), to_signed(824764748, 32), to_signed(823709135, 32), to_signed(822651583, 32),
     to_signed(821592095, 32), to_signed(820530675, 32), to_signed(819467323, 32), to_signed(818402043, 32),
     to_signed(817334838, 32), to_signed(816265709, 32), to_signed(815194659, 32), to_signed(814121692, 32),
     to_signed(813046808, 32), to_signed(811970011, 32), to_signed(810891304, 32), to_signed(809810688, 32),
     to_signed(808728167, 32), to_signed(807643743, 32), to_signed(806557419, 32), to_signed(805469196, 32),
     to_signed(804379079, 32), to_signed(803287068, 32), to_signed(802193167, 32), to_signed(801097379, 32),
     to_signed(799999706, 32), to_signed(798900150, 32), to_signed(797798714, 32), to_signed(796695401, 32),
     to_signed(795590213, 32), to_signed(794483153, 32), to_signed(793374223, 32), to_signed(792263427, 32),
     to_signed(791150767, 32), to_signed(790036244, 32), to_signed(788919863, 32), to_signed(787801625, 32),
     to_signed(786681534, 32), to_signed(785559591, 32), to_signed(784435800, 32), to_signed(783310163, 32),
     to_signed(782182683, 32), to_signed(781053363, 32), to_signed(779922204, 32), to_signed(778789210, 32),
     to_signed(777654384, 32), to_signed(776517728, 32), to_signed(775379244, 32), to_signed(774238936, 32),
     to_signed(773096806, 32), to_signed(771952857, 32), to_signed(770807092, 32), to_signed(769659512, 32),
     to_signed(768510122, 32), to_signed(767358923, 32), to_signed(766205919, 32), to_signed(765051111, 32),
     to_signed(763894504, 32), to_signed(762736098, 32), to_signed(761575898, 32), to_signed(760413906, 32));  -- sfix32 [512]
  CONSTANT Twiddle_im_table_data          : vector_of_signed32(0 TO 511) := 
    (to_signed(0, 32), to_signed(-1647099, 32), to_signed(-3294193, 32), to_signed(-4941281, 32),
     to_signed(-6588356, 32), to_signed(-8235416, 32), to_signed(-9882456, 32), to_signed(-11529474, 32),
     to_signed(-13176464, 32), to_signed(-14823423, 32), to_signed(-16470347, 32), to_signed(-18117233, 32),
     to_signed(-19764076, 32), to_signed(-21410872, 32), to_signed(-23057618, 32), to_signed(-24704310, 32),
     to_signed(-26350943, 32), to_signed(-27997515, 32), to_signed(-29644021, 32), to_signed(-31290457, 32),
     to_signed(-32936819, 32), to_signed(-34583104, 32), to_signed(-36229307, 32), to_signed(-37875426, 32),
     to_signed(-39521455, 32), to_signed(-41167391, 32), to_signed(-42813230, 32), to_signed(-44458968, 32),
     to_signed(-46104602, 32), to_signed(-47750128, 32), to_signed(-49395541, 32), to_signed(-51040837, 32),
     to_signed(-52686014, 32), to_signed(-54331067, 32), to_signed(-55975992, 32), to_signed(-57620785, 32),
     to_signed(-59265442, 32), to_signed(-60909960, 32), to_signed(-62554335, 32), to_signed(-64198563, 32),
     to_signed(-65842639, 32), to_signed(-67486561, 32), to_signed(-69130324, 32), to_signed(-70773924, 32),
     to_signed(-72417357, 32), to_signed(-74060620, 32), to_signed(-75703709, 32), to_signed(-77346620, 32),
     to_signed(-78989349, 32), to_signed(-80631892, 32), to_signed(-82274245, 32), to_signed(-83916404, 32),
     to_signed(-85558366, 32), to_signed(-87200127, 32), to_signed(-88841683, 32), to_signed(-90483029, 32),
     to_signed(-92124163, 32), to_signed(-93765079, 32), to_signed(-95405776, 32), to_signed(-97046247, 32),
     to_signed(-98686491, 32), to_signed(-100326502, 32), to_signed(-101966277, 32), to_signed(-103605812, 32),
     to_signed(-105245103, 32), to_signed(-106884147, 32), to_signed(-108522939, 32), to_signed(-110161476, 32),
     to_signed(-111799753, 32), to_signed(-113437768, 32), to_signed(-115075515, 32), to_signed(-116712992, 32),
     to_signed(-118350194, 32), to_signed(-119987118, 32), to_signed(-121623759, 32), to_signed(-123260114, 32),
     to_signed(-124896179, 32), to_signed(-126531950, 32), to_signed(-128167423, 32), to_signed(-129802595, 32),
     to_signed(-131437462, 32), to_signed(-133072019, 32), to_signed(-134706263, 32), to_signed(-136340190, 32),
     to_signed(-137973796, 32), to_signed(-139607077, 32), to_signed(-141240030, 32), to_signed(-142872651, 32),
     to_signed(-144504935, 32), to_signed(-146136880, 32), to_signed(-147768480, 32), to_signed(-149399733, 32),
     to_signed(-151030634, 32), to_signed(-152661180, 32), to_signed(-154291367, 32), to_signed(-155921191, 32),
     to_signed(-157550647, 32), to_signed(-159179733, 32), to_signed(-160808445, 32), to_signed(-162436778, 32),
     to_signed(-164064728, 32), to_signed(-165692293, 32), to_signed(-167319468, 32), to_signed(-168946249, 32),
     to_signed(-170572633, 32), to_signed(-172198615, 32), to_signed(-173824192, 32), to_signed(-175449360, 32),
     to_signed(-177074115, 32), to_signed(-178698453, 32), to_signed(-180322371, 32), to_signed(-181945865, 32),
     to_signed(-183568930, 32), to_signed(-185191564, 32), to_signed(-186813762, 32), to_signed(-188435520, 32),
     to_signed(-190056834, 32), to_signed(-191677702, 32), to_signed(-193298119, 32), to_signed(-194918080, 32),
     to_signed(-196537583, 32), to_signed(-198156624, 32), to_signed(-199775198, 32), to_signed(-201393302, 32),
     to_signed(-203010932, 32), to_signed(-204628085, 32), to_signed(-206244756, 32), to_signed(-207860942, 32),
     to_signed(-209476638, 32), to_signed(-211091842, 32), to_signed(-212706549, 32), to_signed(-214320755, 32),
     to_signed(-215934457, 32), to_signed(-217547651, 32), to_signed(-219160334, 32), to_signed(-220772500, 32),
     to_signed(-222384147, 32), to_signed(-223995270, 32), to_signed(-225605867, 32), to_signed(-227215933, 32),
     to_signed(-228825464, 32), to_signed(-230434456, 32), to_signed(-232042906, 32), to_signed(-233650811, 32),
     to_signed(-235258165, 32), to_signed(-236864966, 32), to_signed(-238471210, 32), to_signed(-240076892, 32),
     to_signed(-241682010, 32), to_signed(-243286558, 32), to_signed(-244890535, 32), to_signed(-246493935, 32),
     to_signed(-248096755, 32), to_signed(-249698991, 32), to_signed(-251300640, 32), to_signed(-252901697, 32),
     to_signed(-254502159, 32), to_signed(-256102022, 32), to_signed(-257701283, 32), to_signed(-259299937, 32),
     to_signed(-260897982, 32), to_signed(-262495412, 32), to_signed(-264092224, 32), to_signed(-265688415, 32),
     to_signed(-267283981, 32), to_signed(-268878918, 32), to_signed(-270473223, 32), to_signed(-272066891, 32),
     to_signed(-273659918, 32), to_signed(-275252302, 32), to_signed(-276844038, 32), to_signed(-278435122, 32),
     to_signed(-280025552, 32), to_signed(-281615322, 32), to_signed(-283204430, 32), to_signed(-284792871, 32),
     to_signed(-286380643, 32), to_signed(-287967740, 32), to_signed(-289554160, 32), to_signed(-291139898, 32),
     to_signed(-292724951, 32), to_signed(-294309316, 32), to_signed(-295892988, 32), to_signed(-297475964, 32),
     to_signed(-299058239, 32), to_signed(-300639811, 32), to_signed(-302220676, 32), to_signed(-303800829, 32),
     to_signed(-305380268, 32), to_signed(-306958988, 32), to_signed(-308536985, 32), to_signed(-310114257, 32),
     to_signed(-311690799, 32), to_signed(-313266607, 32), to_signed(-314841679, 32), to_signed(-316416009, 32),
     to_signed(-317989595, 32), to_signed(-319562433, 32), to_signed(-321134518, 32), to_signed(-322705848, 32),
     to_signed(-324276419, 32), to_signed(-325846226, 32), to_signed(-327415267, 32), to_signed(-328983538, 32),
     to_signed(-330551034, 32), to_signed(-332117752, 32), to_signed(-333683689, 32), to_signed(-335248841, 32),
     to_signed(-336813204, 32), to_signed(-338376774, 32), to_signed(-339939549, 32), to_signed(-341501523, 32),
     to_signed(-343062693, 32), to_signed(-344623057, 32), to_signed(-346182609, 32), to_signed(-347741347, 32),
     to_signed(-349299266, 32), to_signed(-350856364, 32), to_signed(-352412636, 32), to_signed(-353968079, 32),
     to_signed(-355522689, 32), to_signed(-357076462, 32), to_signed(-358629395, 32), to_signed(-360181484, 32),
     to_signed(-361732726, 32), to_signed(-363283116, 32), to_signed(-364832652, 32), to_signed(-366381329, 32),
     to_signed(-367929144, 32), to_signed(-369476093, 32), to_signed(-371022173, 32), to_signed(-372567379, 32),
     to_signed(-374111709, 32), to_signed(-375655159, 32), to_signed(-377197725, 32), to_signed(-378739403, 32),
     to_signed(-380280190, 32), to_signed(-381820082, 32), to_signed(-383359076, 32), to_signed(-384897167, 32),
     to_signed(-386434353, 32), to_signed(-387970630, 32), to_signed(-389505993, 32), to_signed(-391040440, 32),
     to_signed(-392573967, 32), to_signed(-394106570, 32), to_signed(-395638246, 32), to_signed(-397168991, 32),
     to_signed(-398698801, 32), to_signed(-400227673, 32), to_signed(-401755603, 32), to_signed(-403282588, 32),
     to_signed(-404808624, 32), to_signed(-406333708, 32), to_signed(-407857835, 32), to_signed(-409381002, 32),
     to_signed(-410903207, 32), to_signed(-412424444, 32), to_signed(-413944711, 32), to_signed(-415464004, 32),
     to_signed(-416982319, 32), to_signed(-418499653, 32), to_signed(-420016002, 32), to_signed(-421531363, 32),
     to_signed(-423045732, 32), to_signed(-424559105, 32), to_signed(-426071480, 32), to_signed(-427582852, 32),
     to_signed(-429093217, 32), to_signed(-430602573, 32), to_signed(-432110916, 32), to_signed(-433618242, 32),
     to_signed(-435124548, 32), to_signed(-436629829, 32), to_signed(-438134084, 32), to_signed(-439637307, 32),
     to_signed(-441139496, 32), to_signed(-442640647, 32), to_signed(-444140756, 32), to_signed(-445639820, 32),
     to_signed(-447137835, 32), to_signed(-448634799, 32), to_signed(-450130706, 32), to_signed(-451625555, 32),
     to_signed(-453119340, 32), to_signed(-454612060, 32), to_signed(-456103710, 32), to_signed(-457594286, 32),
     to_signed(-459083786, 32), to_signed(-460572205, 32), to_signed(-462059541, 32), to_signed(-463545789, 32),
     to_signed(-465030947, 32), to_signed(-466515010, 32), to_signed(-467997976, 32), to_signed(-469479840, 32),
     to_signed(-470960600, 32), to_signed(-472440251, 32), to_signed(-473918791, 32), to_signed(-475396216, 32),
     to_signed(-476872522, 32), to_signed(-478347705, 32), to_signed(-479821764, 32), to_signed(-481294693, 32),
     to_signed(-482766489, 32), to_signed(-484237150, 32), to_signed(-485706671, 32), to_signed(-487175049, 32),
     to_signed(-488642281, 32), to_signed(-490108363, 32), to_signed(-491573292, 32), to_signed(-493037064, 32),
     to_signed(-494499676, 32), to_signed(-495961124, 32), to_signed(-497421405, 32), to_signed(-498880516, 32),
     to_signed(-500338453, 32), to_signed(-501795212, 32), to_signed(-503250791, 32), to_signed(-504705185, 32),
     to_signed(-506158392, 32), to_signed(-507610408, 32), to_signed(-509061229, 32), to_signed(-510510853, 32),
     to_signed(-511959275, 32), to_signed(-513406493, 32), to_signed(-514852502, 32), to_signed(-516297300, 32),
     to_signed(-517740883, 32), to_signed(-519183248, 32), to_signed(-520624391, 32), to_signed(-522064309, 32),
     to_signed(-523502998, 32), to_signed(-524940456, 32), to_signed(-526376678, 32), to_signed(-527811662, 32),
     to_signed(-529245404, 32), to_signed(-530677900, 32), to_signed(-532109148, 32), to_signed(-533539144, 32),
     to_signed(-534967884, 32), to_signed(-536395365, 32), to_signed(-537821584, 32), to_signed(-539246538, 32),
     to_signed(-540670223, 32), to_signed(-542092635, 32), to_signed(-543513772, 32), to_signed(-544933630, 32),
     to_signed(-546352205, 32), to_signed(-547769495, 32), to_signed(-549185496, 32), to_signed(-550600205, 32),
     to_signed(-552013618, 32), to_signed(-553425732, 32), to_signed(-554836544, 32), to_signed(-556246051, 32),
     to_signed(-557654248, 32), to_signed(-559061133, 32), to_signed(-560466703, 32), to_signed(-561870954, 32),
     to_signed(-563273883, 32), to_signed(-564675486, 32), to_signed(-566075761, 32), to_signed(-567474703, 32),
     to_signed(-568872310, 32), to_signed(-570268579, 32), to_signed(-571663506, 32), to_signed(-573057087, 32),
     to_signed(-574449320, 32), to_signed(-575840202, 32), to_signed(-577229728, 32), to_signed(-578617896, 32),
     to_signed(-580004702, 32), to_signed(-581390144, 32), to_signed(-582774218, 32), to_signed(-584156920, 32),
     to_signed(-585538248, 32), to_signed(-586918198, 32), to_signed(-588296766, 32), to_signed(-589673951, 32),
     to_signed(-591049748, 32), to_signed(-592424154, 32), to_signed(-593797166, 32), to_signed(-595168781, 32),
     to_signed(-596538995, 32), to_signed(-597907806, 32), to_signed(-599275210, 32), to_signed(-600641203, 32),
     to_signed(-602005783, 32), to_signed(-603368947, 32), to_signed(-604730691, 32), to_signed(-606091012, 32),
     to_signed(-607449906, 32), to_signed(-608807372, 32), to_signed(-610163404, 32), to_signed(-611518001, 32),
     to_signed(-612871159, 32), to_signed(-614222875, 32), to_signed(-615573145, 32), to_signed(-616921967, 32),
     to_signed(-618269338, 32), to_signed(-619615253, 32), to_signed(-620959711, 32), to_signed(-622302707, 32),
     to_signed(-623644239, 32), to_signed(-624984303, 32), to_signed(-626322897, 32), to_signed(-627660017, 32),
     to_signed(-628995660, 32), to_signed(-630329823, 32), to_signed(-631662503, 32), to_signed(-632993696, 32),
     to_signed(-634323400, 32), to_signed(-635651611, 32), to_signed(-636978327, 32), to_signed(-638303543, 32),
     to_signed(-639627258, 32), to_signed(-640949467, 32), to_signed(-642270169, 32), to_signed(-643589359, 32),
     to_signed(-644907034, 32), to_signed(-646223192, 32), to_signed(-647537830, 32), to_signed(-648850943, 32),
     to_signed(-650162530, 32), to_signed(-651472587, 32), to_signed(-652781111, 32), to_signed(-654088099, 32),
     to_signed(-655393548, 32), to_signed(-656697454, 32), to_signed(-657999816, 32), to_signed(-659300629, 32),
     to_signed(-660599890, 32), to_signed(-661897597, 32), to_signed(-663193747, 32), to_signed(-664488336, 32),
     to_signed(-665781362, 32), to_signed(-667072820, 32), to_signed(-668362709, 32), to_signed(-669651026, 32),
     to_signed(-670937767, 32), to_signed(-672222928, 32), to_signed(-673506508, 32), to_signed(-674788504, 32),
     to_signed(-676068911, 32), to_signed(-677347728, 32), to_signed(-678624950, 32), to_signed(-679900576, 32),
     to_signed(-681174602, 32), to_signed(-682447025, 32), to_signed(-683717842, 32), to_signed(-684987051, 32),
     to_signed(-686254647, 32), to_signed(-687520629, 32), to_signed(-688784993, 32), to_signed(-690047736, 32),
     to_signed(-691308855, 32), to_signed(-692568348, 32), to_signed(-693826211, 32), to_signed(-695082441, 32),
     to_signed(-696337036, 32), to_signed(-697589992, 32), to_signed(-698841307, 32), to_signed(-700090977, 32),
     to_signed(-701339000, 32), to_signed(-702585372, 32), to_signed(-703830092, 32), to_signed(-705073155, 32),
     to_signed(-706314559, 32), to_signed(-707554301, 32), to_signed(-708792378, 32), to_signed(-710028787, 32),
     to_signed(-711263525, 32), to_signed(-712496590, 32), to_signed(-713727978, 32), to_signed(-714957687, 32),
     to_signed(-716185713, 32), to_signed(-717412054, 32), to_signed(-718636707, 32), to_signed(-719859669, 32),
     to_signed(-721080937, 32), to_signed(-722300508, 32), to_signed(-723518380, 32), to_signed(-724734549, 32),
     to_signed(-725949013, 32), to_signed(-727161768, 32), to_signed(-728372813, 32), to_signed(-729582143, 32),
     to_signed(-730789757, 32), to_signed(-731995651, 32), to_signed(-733199822, 32), to_signed(-734402269, 32),
     to_signed(-735602987, 32), to_signed(-736801974, 32), to_signed(-737999228, 32), to_signed(-739194745, 32),
     to_signed(-740388522, 32), to_signed(-741580558, 32), to_signed(-742770848, 32), to_signed(-743959390, 32),
     to_signed(-745146182, 32), to_signed(-746331221, 32), to_signed(-747514503, 32), to_signed(-748696026, 32),
     to_signed(-749875788, 32), to_signed(-751053785, 32), to_signed(-752230015, 32), to_signed(-753404474, 32),
     to_signed(-754577161, 32), to_signed(-755748072, 32), to_signed(-756917205, 32), to_signed(-758084557, 32));  -- sfix32 [512]

  -- Signals
  SIGNAL Radix22TwdlMapping_cnt           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Radix22TwdlMapping_phase         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw  : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Radix22TwdlMapping_twdlAddrMap   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdl45Reg     : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1      : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2      : std_logic;
  SIGNAL Radix22TwdlMapping_holdCycleCnt  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Radix22TwdlMapping_phaseCnt      : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Radix22TwdlMapping_cnt_next      : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Radix22TwdlMapping_phase_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1_next : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw_next : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Radix22TwdlMapping_twdlAddrMap_next : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdl45Reg_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2_next : std_logic;
  SIGNAL Radix22TwdlMapping_holdCycleCnt_next : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Radix22TwdlMapping_phaseCnt_next : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL twdlAddr                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL twdlAddrVld                      : std_logic;
  SIGNAL twdlOctant                       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45                           : std_logic;
  SIGNAL twiddleS_re                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twiddleReg_re                    : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twiddleS_im                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twiddleReg_im                    : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twdlOctantReg                    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45Reg                        : std_logic;

BEGIN
  -- Radix22TwdlMapping
  Radix22TwdlMapping_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        Radix22TwdlMapping_octantReg1 <= to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdlAddr_raw <= to_unsigned(16#000#, 12);
        Radix22TwdlMapping_twdlAddrMap <= to_unsigned(16#000#, 9);
        Radix22TwdlMapping_twdl45Reg <= '0';
        Radix22TwdlMapping_dvldReg1 <= '0';
        Radix22TwdlMapping_dvldReg2 <= '0';
        Radix22TwdlMapping_cnt <= to_unsigned(16#0#, 4);
        Radix22TwdlMapping_holdCycleCnt <= to_unsigned(16#00#, 8);
        Radix22TwdlMapping_phase <= to_unsigned(16#0#, 2);
        Radix22TwdlMapping_phaseCnt <= to_unsigned(16#00#, 6);
      ELSIF enb = '1' THEN
        Radix22TwdlMapping_cnt <= Radix22TwdlMapping_cnt_next;
        Radix22TwdlMapping_phase <= Radix22TwdlMapping_phase_next;
        Radix22TwdlMapping_octantReg1 <= Radix22TwdlMapping_octantReg1_next;
        Radix22TwdlMapping_twdlAddr_raw <= Radix22TwdlMapping_twdlAddr_raw_next;
        Radix22TwdlMapping_twdlAddrMap <= Radix22TwdlMapping_twdlAddrMap_next;
        Radix22TwdlMapping_twdl45Reg <= Radix22TwdlMapping_twdl45Reg_next;
        Radix22TwdlMapping_dvldReg1 <= Radix22TwdlMapping_dvldReg1_next;
        Radix22TwdlMapping_dvldReg2 <= Radix22TwdlMapping_dvldReg2_next;
        Radix22TwdlMapping_holdCycleCnt <= Radix22TwdlMapping_holdCycleCnt_next;
        Radix22TwdlMapping_phaseCnt <= Radix22TwdlMapping_phaseCnt_next;
      END IF;
    END IF;
  END PROCESS Radix22TwdlMapping_process;

  Radix22TwdlMapping_output : PROCESS (Radix22TwdlMapping_cnt, Radix22TwdlMapping_dvldReg1,
       Radix22TwdlMapping_dvldReg2, Radix22TwdlMapping_holdCycleCnt,
       Radix22TwdlMapping_octantReg1, Radix22TwdlMapping_phase,
       Radix22TwdlMapping_phaseCnt, Radix22TwdlMapping_twdl45Reg,
       Radix22TwdlMapping_twdlAddrMap, Radix22TwdlMapping_twdlAddr_raw,
       dout_8_1_vld)
    VARIABLE octant : unsigned(2 DOWNTO 0);
    VARIABLE cnt_bitReverse : unsigned(9 DOWNTO 0);
    VARIABLE addr_cast : unsigned(11 DOWNTO 0);
    VARIABLE c : unsigned(9 DOWNTO 0);
    VARIABLE sub_temp : signed(25 DOWNTO 0);
    VARIABLE sub_temp_0 : signed(13 DOWNTO 0);
    VARIABLE sub_temp_1 : signed(13 DOWNTO 0);
    VARIABLE sub_temp_2 : signed(25 DOWNTO 0);
    VARIABLE sub_temp_3 : signed(25 DOWNTO 0);
  BEGIN
    sub_temp := to_signed(16#0000000#, 26);
    sub_temp_0 := to_signed(16#0000#, 14);
    sub_temp_1 := to_signed(16#0000#, 14);
    sub_temp_2 := to_signed(16#0000000#, 26);
    sub_temp_3 := to_signed(16#0000000#, 26);
    addr_cast := to_unsigned(16#000#, 12);
    Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt;
    Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase;
    Radix22TwdlMapping_holdCycleCnt_next <= Radix22TwdlMapping_holdCycleCnt;
    Radix22TwdlMapping_phaseCnt_next <= Radix22TwdlMapping_phaseCnt;
    Radix22TwdlMapping_dvldReg2_next <= Radix22TwdlMapping_dvldReg1;
    Radix22TwdlMapping_dvldReg1_next <= dout_8_1_vld;
    CASE Radix22TwdlMapping_twdlAddr_raw IS
      WHEN "001000000000" =>
        octant := to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "010000000000" =>
        octant := to_unsigned(16#1#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "011000000000" =>
        octant := to_unsigned(16#2#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "100000000000" =>
        octant := to_unsigned(16#3#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "101000000000" =>
        octant := to_unsigned(16#4#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN OTHERS => 
        octant := Radix22TwdlMapping_twdlAddr_raw(11 DOWNTO 9);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
    END CASE;
    Radix22TwdlMapping_octantReg1_next <= octant;
    CASE octant IS
      WHEN "000" =>
        Radix22TwdlMapping_twdlAddrMap_next <= Radix22TwdlMapping_twdlAddr_raw(8 DOWNTO 0);
      WHEN "001" =>
        sub_temp_0 := to_signed(16#0400#, 14) - signed(resize(Radix22TwdlMapping_twdlAddr_raw, 14));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_0(8 DOWNTO 0));
      WHEN "010" =>
        sub_temp_1 := signed(resize(Radix22TwdlMapping_twdlAddr_raw, 14)) - to_signed(16#0400#, 14);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_1(8 DOWNTO 0));
      WHEN "011" =>
        sub_temp_2 := to_signed(16#0100000#, 26) - signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_2(17 DOWNTO 9));
      WHEN "100" =>
        sub_temp_3 := signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26)) - to_signed(16#0100000#, 26);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_3(17 DOWNTO 9));
      WHEN OTHERS => 
        sub_temp := to_signed(16#0180000#, 26) - signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26));
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp(17 DOWNTO 9));
    END CASE;
    cnt_bitReverse := resize(unsigned'(Radix22TwdlMapping_cnt(0) & Radix22TwdlMapping_cnt(1) & Radix22TwdlMapping_cnt(2) & Radix22TwdlMapping_cnt(3)), 10);
    c := cnt_bitReverse sll 6;
    IF Radix22TwdlMapping_phase = to_unsigned(16#0#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= to_unsigned(16#000#, 12);
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#1#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(cnt_bitReverse sll 6, 12);
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#2#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(c, 12) sll 1;
    ELSE 
      addr_cast := resize(c, 12);
      Radix22TwdlMapping_twdlAddr_raw_next <= (addr_cast sll 1) + addr_cast;
    END IF;
    IF dout_8_1_vld = '1' AND (Radix22TwdlMapping_phaseCnt = to_unsigned(16#3F#, 6)) THEN 
      Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase + to_unsigned(16#1#, 2);
    END IF;
    IF dout_8_1_vld = '1' THEN 
      IF Radix22TwdlMapping_holdCycleCnt = to_unsigned(16#FF#, 8) THEN 
        Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt + to_unsigned(16#1#, 4);
      END IF;
      Radix22TwdlMapping_holdCycleCnt_next <= Radix22TwdlMapping_holdCycleCnt + to_unsigned(16#01#, 8);
      IF Radix22TwdlMapping_phaseCnt = to_unsigned(16#3F#, 6) THEN 
        Radix22TwdlMapping_phaseCnt_next <= to_unsigned(16#00#, 6);
      ELSE 
        Radix22TwdlMapping_phaseCnt_next <= Radix22TwdlMapping_phaseCnt + to_unsigned(16#01#, 6);
      END IF;
    END IF;
    twdlAddr <= Radix22TwdlMapping_twdlAddrMap;
    twdlAddrVld <= Radix22TwdlMapping_dvldReg2;
    twdlOctant <= Radix22TwdlMapping_octantReg1;
    twdl45 <= Radix22TwdlMapping_twdl45Reg;
  END PROCESS Radix22TwdlMapping_output;


  -- Twiddle ROM1
  twiddleS_re <= Twiddle_re_table_data(to_integer(twdlAddr));

  TWIDDLEROM_RE_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twiddleReg_re <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        twiddleReg_re <= twiddleS_re;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_RE_process;


  -- Twiddle ROM2
  twiddleS_im <= Twiddle_im_table_data(to_integer(twdlAddr));

  TWIDDLEROM_IM_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twiddleReg_im <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        twiddleReg_im <= twiddleS_im;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_IM_process;


  intdelay_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdlOctantReg <= to_unsigned(16#0#, 3);
      ELSIF enb = '1' THEN
        twdlOctantReg <= twdlOctant;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (Clk)
  BEGIN
    IF Clk'EVENT AND Clk = '1' THEN
      IF Reset = '1' THEN
        twdl45Reg <= '0';
      ELSIF enb = '1' THEN
        twdl45Reg <= twdl45;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  -- Radix22TwdlOctCorr
  Radix22TwdlOctCorr_output : PROCESS (twdl45Reg, twdlOctantReg, twiddleReg_im, twiddleReg_re)
    VARIABLE twdlIn_re : signed(31 DOWNTO 0);
    VARIABLE twdlIn_im : signed(31 DOWNTO 0);
    VARIABLE cast : signed(32 DOWNTO 0);
    VARIABLE cast_0 : signed(32 DOWNTO 0);
    VARIABLE cast_1 : signed(32 DOWNTO 0);
    VARIABLE cast_2 : signed(32 DOWNTO 0);
    VARIABLE cast_3 : signed(32 DOWNTO 0);
    VARIABLE cast_4 : signed(32 DOWNTO 0);
  BEGIN
    cast := to_signed(0, 33);
    cast_0 := to_signed(0, 33);
    cast_1 := to_signed(0, 33);
    cast_2 := to_signed(0, 33);
    cast_3 := to_signed(0, 33);
    cast_4 := to_signed(0, 33);
    twdlIn_re := twiddleReg_re;
    twdlIn_im := twiddleReg_im;
    IF twdl45Reg = '1' THEN 
      CASE twdlOctantReg IS
        WHEN "000" =>
          twdlIn_re := to_signed(759250125, 32);
          twdlIn_im := to_signed(-759250125, 32);
        WHEN "010" =>
          twdlIn_re := to_signed(-759250125, 32);
          twdlIn_im := to_signed(-759250125, 32);
        WHEN "100" =>
          twdlIn_re := to_signed(-759250125, 32);
          twdlIn_im := to_signed(759250125, 32);
        WHEN OTHERS => 
          twdlIn_re := to_signed(759250125, 32);
          twdlIn_im := to_signed(-759250125, 32);
      END CASE;
    ELSE 
      CASE twdlOctantReg IS
        WHEN "000" =>
          NULL;
        WHEN "001" =>
          cast :=  - (resize(twiddleReg_im, 33));
          twdlIn_re := cast(31 DOWNTO 0);
          cast_2 :=  - (resize(twiddleReg_re, 33));
          twdlIn_im := cast_2(31 DOWNTO 0);
        WHEN "010" =>
          twdlIn_re := twiddleReg_im;
          cast_3 :=  - (resize(twiddleReg_re, 33));
          twdlIn_im := cast_3(31 DOWNTO 0);
        WHEN "011" =>
          cast_0 :=  - (resize(twiddleReg_re, 33));
          twdlIn_re := cast_0(31 DOWNTO 0);
          twdlIn_im := twiddleReg_im;
        WHEN "100" =>
          cast_1 :=  - (resize(twiddleReg_re, 33));
          twdlIn_re := cast_1(31 DOWNTO 0);
          cast_4 :=  - (resize(twiddleReg_im, 33));
          twdlIn_im := cast_4(31 DOWNTO 0);
        WHEN OTHERS => 
          twdlIn_re := twiddleReg_im;
          twdlIn_im := twiddleReg_re;
      END CASE;
    END IF;
    twdl_9_1_re <= twdlIn_re;
    twdl_9_1_im <= twdlIn_im;
  END PROCESS Radix22TwdlOctCorr_output;


END rtl;


-- End of TWDLROM_9_1_block1.vhd --

-- Start of dataMEM_re_0_1_Wrapper_generic.vhd --
-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\System_Template0x2810x29\dataMEM_re_0_1_Wrapper_generic.vhd
-- Created: 2025-03-18 15:26:29
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: dataMEM_re_0_1_Wrapper_generic
-- Source Path: System_Template0x2810x29/DSP/FFT HDL Optimized/RADIX22FFT_SDF1_1/dataMEM_re_0_1_Wrapper_generic
-- Hierarchy Level: 4
-- Model version: 2.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY dataMEM_re_0_1_Wrapper_generic IS
  GENERIC( AddrWidth                      : integer := 1;
           DataWidth                      : integer := 1
           );
  PORT( Clk                               :   IN    std_logic;
        Reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        wr_din                            :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
        wr_addr                           :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
        wr_en                             :   IN    std_logic;  -- ufix1
        rd_addr                           :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
        dout                              :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
        );
END dataMEM_re_0_1_Wrapper_generic;


ARCHITECTURE rtl OF dataMEM_re_0_1_Wrapper_generic IS

  -- Component Declarations
  COMPONENT SimpleDualPortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( Clk                             :   IN    std_logic;
          wr_din                          :   IN    signed(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;  -- ufix1
          rd_addr                         :   IN    unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   signed(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : SimpleDualPortRAM_generic
    USE ENTITY work.SimpleDualPortRAM_generic(rtl);

  -- Signals
  SIGNAL const_one                        : std_logic;
  SIGNAL filwait                          : std_logic;
  SIGNAL enb_1_1_1_delay1                 : std_logic;
  SIGNAL not_en1_delay1                   : std_logic;
  SIGNAL filmode                          : std_logic;
  SIGNAL filreg                           : std_logic;
  SIGNAL notfilreg                        : std_logic;
  SIGNAL ram_is_fastest_rate              : std_logic;
  SIGNAL enb_1_1_1_delay2                 : std_logic;
  SIGNAL enb_1_1_1_delay3                 : std_logic;
  SIGNAL not_en1_delay3                   : std_logic;
  SIGNAL not_en1                          : std_logic;
  SIGNAL not_en1_delay2                   : std_logic;
  SIGNAL not_en0                          : std_logic;
  SIGNAL ram_is_down2                     : std_logic;
  SIGNAL bypass1_and                      : std_logic;
  SIGNAL ram_is_down3                     : std_logic;
  SIGNAL wr_din_last_value                : signed(DataWidth - 1 DOWNTO 0);  -- generic width
  SIGNAL wr_din_1                         : signed(DataWidth - 1 DOWNTO 0);  -- generic width
  SIGNAL wr_addr_last_value               : unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
  SIGNAL wr_addr_1                        : unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
  SIGNAL wr_en_last_value                 : std_logic;  -- ufix1
  SIGNAL wr_en_1                          : std_logic;  -- ufix1
  SIGNAL rd_addr_last_value               : unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
  SIGNAL rd_addr_1                        : unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
  SIGNAL dout_1                           : signed(DataWidth - 1 DOWNTO 0);  -- generic width
  SIGNAL ram_is_down4                     : std_logic;
  SIGNAL dout_last_value                  : signed(DataWidth - 1 DOWNTO 0);  -- generic width
  SIGNAL dout_bypass_1                    : signed(DataWidth - 1 DOWNTO 0);  -- generic width
  SIGNAL dout_bypass_last_value           : signed(DataWidth - 1 DOWNTO 0);  -- generic width
  SIGNAL dout_bypass_bypass               : signed(DataWidth - 1 DOWNTO 0);  -- generic width

BEGIN
  u_SimpleDualPortRAM_generic : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => AddrWidth,
                 DataWidth => DataWidth
                 )
    PORT MAP( Clk => Clk,
              wr_din => wr_din_1,
              wr_addr => wr_addr_1,
              wr_en => wr_en_1,  -- ufix1
              rd_addr => rd_addr_1,
              dout => dout_1
              );

  const_one <= '1';

  fil_wait_process: PROCESS (Clk)
  BEGIN
    IF Clk'event AND Clk = '1' THEN
      IF Reset = '1' THEN
        filwait <= '0';
      ELSIF enb = '1' THEN
        filwait <= const_one;
      END IF;
    END IF;
  END PROCESS fil_wait_process;

  ram_enb_delay1_process: PROCESS (Clk)
  BEGIN
    IF Clk'event AND Clk = '1' THEN
      IF Reset = '1' THEN
        enb_1_1_1_delay1 <= '1';
      ELSE
        enb_1_1_1_delay1 <= enb_1_1_1;
      END IF;
    END IF;
  END PROCESS ram_enb_delay1_process;

  not_en1_delay1 <= NOT enb_1_1_1_delay1;

  filmode <= filwait AND (not_en1_delay1 AND enb_1_1_1 AND enb);

  fil_hold_process: PROCESS (Clk)
  BEGIN
    IF Clk'event AND Clk = '1' THEN
      IF Reset = '1' THEN
        filreg <= '0';
      ELSIF filmode = '1' THEN
        filreg <= const_one;
      END IF;
    END IF;
  END PROCESS fil_hold_process;

  notfilreg <= NOT filreg;

  ram_is_fastest_rate <= enb_1_1_1 AND enb AND notfilreg;

  ram_enb_delay2_process: PROCESS (Clk)
  BEGIN
    IF Clk'event AND Clk = '1' THEN
      IF Reset = '1' THEN
        enb_1_1_1_delay2 <= '1';
      ELSE
        enb_1_1_1_delay2 <= enb_1_1_1_delay1;
      END IF;
    END IF;
  END PROCESS ram_enb_delay2_process;

  ram_enb_delay3_process: PROCESS (Clk)
  BEGIN
    IF Clk'event AND Clk = '1' THEN
      IF Reset = '1' THEN
        enb_1_1_1_delay3 <= '1';
      ELSE
        enb_1_1_1_delay3 <= enb_1_1_1_delay2;
      END IF;
    END IF;
  END PROCESS ram_enb_delay3_process;

  not_en1_delay3 <= NOT enb_1_1_1_delay3;

  not_en1 <= NOT enb_1_1_1;

  not_en1_delay2 <= NOT enb_1_1_1_delay2;

  not_en0 <= NOT enb;

  ram_is_down2 <= (enb_1_1_1 AND not_en1_delay1 AND enb_1_1_1_delay2 AND not_en1_delay3) OR (not_en1 AND enb_1_1_1_delay1 AND not_en1_delay2 AND enb_1_1_1_delay3) OR (not_en1 AND enb_1_1_1_delay1 AND enb_1_1_1_delay2 AND enb_1_1_1_delay3 AND enb) OR (enb_1_1_1 AND not_en1_delay1 AND enb_1_1_1_delay2 AND enb_1_1_1_delay3 AND not_en0);

  bypass1_and <= ram_is_down2 AND enb_1_1_1;

  ram_is_down3 <= (enb_1_1_1 AND not_en1_delay1 AND not_en1_delay2 AND enb_1_1_1_delay3) OR (not_en1 AND enb_1_1_1_delay1 AND not_en1_delay2 AND not_en1_delay3) OR (not_en1 AND not_en1_delay1 AND enb_1_1_1_delay2 AND not_en1_delay3) OR (not_en1 AND not_en1_delay1 AND enb_1_1_1_delay2 AND enb_1_1_1_delay3 AND enb);

  wr_din_bypass_process: PROCESS (Clk)
  BEGIN
    IF Clk'event AND Clk = '1' THEN
      IF Reset = '1' THEN
        wr_din_last_value <= (OTHERS => '0');
      ELSIF enb_1_1_1 = '1' THEN
        wr_din_last_value <= wr_din;
      END IF;
    END IF;
  END PROCESS wr_din_bypass_process;

  wr_din_1 <= wr_din WHEN ram_is_fastest_rate = '1' ELSE
              wr_din_last_value;

  wr_addr_bypass_process: PROCESS (Clk)
  BEGIN
    IF Clk'event AND Clk = '1' THEN
      IF Reset = '1' THEN
        wr_addr_last_value <= (OTHERS => '0');
      ELSIF enb_1_1_1 = '1' THEN
        wr_addr_last_value <= wr_addr;
      END IF;
    END IF;
  END PROCESS wr_addr_bypass_process;

  wr_addr_1 <= wr_addr WHEN ram_is_fastest_rate = '1' ELSE
               wr_addr_last_value;

  wr_en_bypass_process: PROCESS (Clk)
  BEGIN
    IF Clk'event AND Clk = '1' THEN
      IF Reset = '1' THEN
        wr_en_last_value <= '0';
      ELSIF enb_1_1_1 = '1' THEN
        wr_en_last_value <= wr_en;
      END IF;
    END IF;
  END PROCESS wr_en_bypass_process;

  wr_en_1 <= wr_en WHEN ram_is_fastest_rate = '1' ELSE
             wr_en_last_value;

  rd_addr_bypass_process: PROCESS (Clk)
  BEGIN
    IF Clk'event AND Clk = '1' THEN
      IF Reset = '1' THEN
        rd_addr_last_value <= (OTHERS => '0');
      ELSIF enb_1_1_1 = '1' THEN
        rd_addr_last_value <= rd_addr;
      END IF;
    END IF;
  END PROCESS rd_addr_bypass_process;

  rd_addr_1 <= rd_addr WHEN ram_is_fastest_rate = '1' ELSE
               rd_addr_last_value;

  ram_is_down4 <= (enb_1_1_1 AND not_en1_delay1 AND not_en1_delay2 AND not_en1_delay3) OR (not_en1 AND enb_1_1_1_delay1 AND not_en1_delay2 AND not_en1_delay3) OR (not_en1 AND not_en1_delay1 AND enb_1_1_1_delay2 AND not_en1_delay3) OR (not_en1 AND not_en1_delay1 AND not_en1_delay2 AND enb_1_1_1_delay3) OR NOT (enb_1_1_1 OR enb_1_1_1_delay1 OR enb_1_1_1_delay2 OR enb_1_1_1_delay3) OR (not_en1 AND not_en1_delay1 AND enb_1_1_1_delay2 AND enb_1_1_1_delay3 AND not_en0);

  dout_bypass_process: PROCESS (Clk)
  BEGIN
    IF Clk'event AND Clk = '1' THEN
      IF Reset = '1' THEN
        dout_last_value <= (OTHERS => '0');
      ELSIF (bypass1_and OR (ram_is_down4 AND enb_1_1_1_delay2) OR (enb_1_1_1 AND enb_1_1_1_delay1 AND enb_1_1_1_delay2 AND enb_1_1_1_delay3)) = '1' THEN
        dout_last_value <= dout_1;
      END IF;
    END IF;
  END PROCESS dout_bypass_process;

  dout_bypass_1 <= dout_1 WHEN ((ram_is_fastest_rate OR bypass1_and OR ram_is_down3) AND notfilreg) = '1' ELSE
                   dout_last_value;

  dout_bypass_2_process: PROCESS (Clk)
  BEGIN
    IF Clk'event AND Clk = '1' THEN
      IF Reset = '1' THEN
        dout_bypass_last_value <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        dout_bypass_last_value <= dout_bypass_1;
      END IF;
    END IF;
  END PROCESS dout_bypass_2_process;

  dout_bypass_bypass <= dout_bypass_1 WHEN (ram_is_fastest_rate OR ram_is_down2 OR filreg) = '1' ELSE
                        dout_bypass_last_value;

  dout <= dout_bypass_bypass;

END rtl;


-- End of dataMEM_re_0_1_Wrapper_generic.vhd --

